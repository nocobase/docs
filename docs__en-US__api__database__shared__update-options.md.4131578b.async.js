"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[66305],{538412:function(l,s,_){_.r(s);var d=_(572269),u=_(793359),c=_(861788),h=_(719977),v=_(20190),n=_(24268),m=_(496057),x=_(585939),E=_(28484),I=_(635206),O=_(375553),P=_(156266),M=_(572333),D=_(841118),f=_(39297),j=_(868526),T=_(605019),a=_(614651),o=_(280936),i=_(667294),t=_(380507),e=_(785893);function r(){return(0,e.jsx)(a.dY,{children:(0,e.jsx)(i.Suspense,{fallback:(0,e.jsx)(o.Z,{}),children:(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:t.texts[0].value})}),(0,e.jsx)(n.Z,{lang:"typescript",children:t.texts[1].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:t.texts[2].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[3].value}),t.texts[4].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[5].value}),t.texts[6].value,(0,e.jsx)(a.rU,{to:"#find",children:(0,e.jsx)("code",{children:t.texts[7].value})}),t.texts[8].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[9].value}),t.texts[10].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[11].value}),t.texts[12].value,(0,e.jsx)("code",{children:t.texts[13].value}),t.texts[14].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[15].value}),t.texts[16].value,(0,e.jsx)("code",{children:t.texts[17].value}),t.texts[18].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:t.texts[19].value}),t.texts[20].value]})]}),(0,e.jsxs)("p",{children:[t.texts[21].value,(0,e.jsx)("code",{children:t.texts[22].value}),t.texts[23].value,(0,e.jsx)("code",{children:t.texts[24].value}),t.texts[25].value]})]})})})})}s.default=r},380507:function(l,s,_){_.r(s),_.d(s,{texts:function(){return d}});const d=[{value:"Type",paraId:0},{value:`interface UpdateOptions extends Omit<SequelizeUpdateOptions, 'where'> {
  values: Values;
  filter?: Filter;
  filterByTk?: TargetKey;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:1},{value:"Details",paraId:2},{value:"values",paraId:3},{value:": The data object of the records to be updated.",paraId:3},{value:"filter",paraId:3},{value:": Specifies the filter conditions for the records to be updated. For detailed usage of Filter, refer to the ",paraId:3},{value:"find()",paraId:4},{value:" method.",paraId:3},{value:"filterByTk",paraId:3},{value:": Specifies the filter conditions for the records to be updated by TargetKey.",paraId:3},{value:"whitelist",paraId:3},{value:": A whitelist for the ",paraId:3},{value:"values",paraId:3},{value:" fields. Only fields listed will be written.",paraId:3},{value:"blacklist",paraId:3},{value:": A blacklist for the ",paraId:3},{value:"values",paraId:3},{value:" fields. Fields listed will not be written.",paraId:3},{value:"transaction",paraId:3},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:3},{value:"At least one of ",paraId:5},{value:"filterByTk",paraId:5},{value:" or ",paraId:5},{value:"filter",paraId:5},{value:" must be provided.",paraId:5}]}}]);
