"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[45170],{145345:function(d,s,a){a.r(s);var i=a(572269),h=a(793359),x=a(861788),u=a(719977),m=a(20190),t=a(24268),r=a(496057),p=a(585939),v=a(28484),I=a(635206),j=a(375553),g=a(156266),f=a(572333),E=a(841118),P=a(39297),y=a(868526),C=a(605019),l=a(614651),o=a(280936),c=a(667294),n=a(295025),e=a(785893);function _(){return(0,e.jsx)(l.dY,{children:(0,e.jsx)(c.Suspense,{fallback:(0,e.jsx)(o.Z,{}),children:(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h1",{id:"api",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#api",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"API"]}),(0,e.jsxs)("h2",{id:"server-side",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#server-side",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Server Side"]}),(0,e.jsxs)("h3",{id:"basenotificationchannel",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#basenotificationchannel",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[0].value})]}),(0,e.jsx)("p",{children:n.texts[1].value}),(0,e.jsx)(t.Z,{lang:"ts",children:n.texts[2].value}),(0,e.jsxs)("h3",{id:"pluginnotificationmanagerserver",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#pluginnotificationmanagerserver",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[3].value})]}),(0,e.jsx)("p",{children:n.texts[4].value}),(0,e.jsxs)("h4",{id:"registerchanneltype",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#registerchanneltype",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[5].value})]}),(0,e.jsx)("p",{children:n.texts[6].value}),(0,e.jsx)(t.Z,{lang:"ts",children:n.texts[7].value}),(0,e.jsxs)("h5",{id:"signature",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#signature",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Signature"]}),(0,e.jsx)("p",{children:(0,e.jsx)("code",{children:n.texts[8].value})}),(0,e.jsxs)("h4",{id:"send",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#send",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[9].value})]}),(0,e.jsxs)("p",{children:[n.texts[10].value,(0,e.jsx)("code",{children:n.texts[11].value}),n.texts[12].value]}),(0,e.jsx)(t.Z,{lang:"ts",children:n.texts[13].value}),(0,e.jsxs)("h5",{id:"signature-1",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#signature-1",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Signature"]}),(0,e.jsx)("p",{children:(0,e.jsx)("code",{children:n.texts[14].value})}),(0,e.jsxs)("p",{children:[n.texts[15].value,(0,e.jsx)("code",{children:n.texts[16].value}),n.texts[17].value,(0,e.jsx)("code",{children:n.texts[18].value}),n.texts[19].value,(0,e.jsx)("code",{children:n.texts[20].value}),n.texts[21].value]}),(0,e.jsx)(t.Z,{lang:"ts",children:n.texts[22].value}),(0,e.jsxs)("h5",{id:"detailed-information",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#detailed-information",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Detailed Information"]}),(0,e.jsx)("p",{children:(0,e.jsx)("code",{children:n.texts[23].value})}),(0,e.jsxs)(r.Z,{children:[(0,e.jsx)("thead",{children:(0,e.jsxs)("tr",{children:[(0,e.jsx)("th",{children:n.texts[24].value}),(0,e.jsx)("th",{children:n.texts[25].value}),(0,e.jsx)("th",{children:n.texts[26].value})]})}),(0,e.jsxs)("tbody",{children:[(0,e.jsxs)("tr",{children:[(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[27].value})}),(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[28].value})}),(0,e.jsx)("td",{children:n.texts[29].value})]}),(0,e.jsxs)("tr",{children:[(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[30].value})}),(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[31].value})}),(0,e.jsx)("td",{children:n.texts[32].value})]}),(0,e.jsxs)("tr",{children:[(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[33].value})}),(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[34].value})}),(0,e.jsx)("td",{children:n.texts[35].value})]}),(0,e.jsxs)("tr",{children:[(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[36].value})}),(0,e.jsx)("td",{children:(0,e.jsx)("code",{children:n.texts[37].value})}),(0,e.jsx)("td",{children:n.texts[38].value})]})]})]}),(0,e.jsxs)("h2",{id:"client-side",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#client-side",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Client Side"]}),(0,e.jsxs)("h3",{id:"pluginnotificationmanagerclient",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#pluginnotificationmanagerclient",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[39].value})]}),(0,e.jsxs)("h4",{id:"channeltypes",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#channeltypes",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[40].value})]}),(0,e.jsx)("p",{children:n.texts[41].value}),(0,e.jsxs)("h5",{id:"signature-2",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#signature-2",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Signature"]}),(0,e.jsx)("p",{children:(0,e.jsx)("code",{children:n.texts[42].value})}),(0,e.jsxs)("h4",{id:"registerchanneltype-1",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#registerchanneltype-1",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:n.texts[43].value})]}),(0,e.jsx)("p",{children:n.texts[44].value}),(0,e.jsxs)("h5",{id:"signature-3",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#signature-3",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Signature"]}),(0,e.jsx)("p",{children:(0,e.jsx)("code",{children:n.texts[45].value})}),(0,e.jsxs)("h5",{id:"type",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#type",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Type"]}),(0,e.jsx)(t.Z,{lang:"ts",children:n.texts[46].value})]})})})})}s.default=_},295025:function(d,s,a){a.r(s),a.d(s,{texts:function(){return i}});const i=[{value:"BaseNotificationChannel",paraId:0},{value:"This abstract class represents a base for different types of notification channels, defining essential interfaces for channel implementation. To add a new notification channel, you must extend this class and implement its methods.",paraId:1,tocIndex:2},{value:`export abstract class BaseNotificationChannel<Message = any> {
  constructor(protected app: Application) {}
  abstract send(params: {
    channel: ChannelOptions;
    message: Message;
  }): Promise<{ message: Message; status: 'success' | 'fail'; reason?: string }>;
}
`,paraId:2,tocIndex:2},{value:"PluginNotificationManagerServer",paraId:0},{value:"This server-side plugin serves as a notification management tool, providing methods for registering notification channel types and sending notifications.",paraId:3,tocIndex:3},{value:"registerChannelType()",paraId:0},{value:"This method registers a new channel type on the server side. Example usage is provided below.",paraId:4,tocIndex:4},{value:`import PluginNotificationManagerServer from '@nocobase/plugin-notification-manager';
import { Plugin } from '@nocobase/server';
import { ExampleServer } from './example-server';
export class PluginNotificationExampleServer extends Plugin {
  async load() {
    const notificationServer = this.pm.get(PluginNotificationManagerServer) as PluginNotificationManagerServer;
    notificationServer.registerChannelType({ type: 'example-sms', Channel: ExampleServer });
  }
}

export default PluginNotificationExampleServer;
`,paraId:5,tocIndex:4},{value:"registerChannelType({ type, Channel }: {type: string, Channel: BaseNotificationChannel })",paraId:6,tocIndex:5},{value:"send()",paraId:0},{value:"The ",paraId:7,tocIndex:6},{value:"send",paraId:7,tocIndex:6},{value:" method is used to dispatch notifications via a specified channel.",paraId:7,tocIndex:6},{value:`send('in-app-message', 
  message: [
    receivers: [1, 2, 3],
    receiverType: 'userId',
    content: 'In-app message test',
    title: 'In-app message test title'
  ],
  triggerFrom: 'workflow')

send('email', 
  message: [
    receivers: ['a@163.com', 'b@163.com'],
    receiverType: 'email',
    content: 'Email test',
    title: 'Email test title'
  ],
  triggerFrom: 'workflow')
`,paraId:8,tocIndex:6},{value:"send(sendConfig: {channelName: String, message: Object, receivers: ReceiversType, triggerFrom: String })",paraId:9,tocIndex:7},{value:"The ",paraId:10,tocIndex:7},{value:"receivers",paraId:10,tocIndex:7},{value:" field currently supports two formats: NocoBase user IDs",paraId:10,tocIndex:7},{value:"userId",paraId:10,tocIndex:7},{value:" or custom channel configurations",paraId:10,tocIndex:7},{value:"channel-self-defined",paraId:10,tocIndex:7},{value:".",paraId:10,tocIndex:7},{value:`type ReceiversType = 
  | { value: number[]; type: 'userId' }
  | { value: any; type: 'channel-self-defined'; channelType: string };
`,paraId:11,tocIndex:7},{value:"sendConfig",paraId:12,tocIndex:8},{value:"Property",paraId:13,tocIndex:8},{value:"Type",paraId:13,tocIndex:8},{value:"Description",paraId:13,tocIndex:8},{value:"channelName",paraId:13,tocIndex:8},{value:"string",paraId:13,tocIndex:8},{value:"Channel identifier",paraId:13,tocIndex:8},{value:"message",paraId:13,tocIndex:8},{value:"object",paraId:13,tocIndex:8},{value:"Message object",paraId:13,tocIndex:8},{value:"receivers",paraId:13,tocIndex:8},{value:"ReceiversType",paraId:13,tocIndex:8},{value:"Recipients",paraId:13,tocIndex:8},{value:"triggerFrom",paraId:13,tocIndex:8},{value:"string",paraId:13,tocIndex:8},{value:"Source of trigger",paraId:13,tocIndex:8},{value:"PluginNotificationManagerClient",paraId:0},{value:"channelTypes",paraId:0},{value:"The library of registered channel types.",paraId:14,tocIndex:11},{value:"channelTypes: Registry<registerTypeOptions>",paraId:15,tocIndex:12},{value:"registerChannelType()",paraId:0},{value:"Registers a client-side channel type.",paraId:16,tocIndex:13},{value:"registerChannelType(params: registerTypeOptions)",paraId:17,tocIndex:14},{value:`type registerTypeOptions = {
  title: string; // Display title for the channel
  type: string;  // Channel identifier
  components: {
    ChannelConfigForm?: ComponentType // Channel configuration form component;
    MessageConfigForm?: ComponentType<{ variableOptions: any }> // Message configuration form component;
    ContentConfigForm?: ComponentType<{ variableOptions: any }> // Content configuration form component (for message content only, excluding recipient configuration);
  };
  meta?: { // Metadata for channel configuration
    createable?: boolean // Whether new channels can be added;
    editable?: boolean   // Whether channel configuration is editable;
    deletable?: boolean  // Whether channel configuration is deletable;
  };
};

type RegisterChannelType = (params: ChannelType) => void
`,paraId:18,tocIndex:15}]}}]);
