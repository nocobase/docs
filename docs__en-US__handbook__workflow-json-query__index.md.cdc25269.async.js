"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[15089],{651093:function(r,s,n){n.r(s);var i=n(572269),h=n(793359),p=n(861788),t=n(719977),x=n(20190),o=n(24268),m=n(496057),j=n(585939),v=n(28484),f=n(635206),g=n(375553),b=n(156266),I=n(572333),d=n(841118),E=n(39297),P=n(868526),O=n(605019),l=n(614651),c=n(280936),u=n(667294),a=n(278996),e=n(785893);function _(){return(0,e.jsx)(l.dY,{children:(0,e.jsx)(u.Suspense,{fallback:(0,e.jsx)(c.Z,{}),children:(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("div",{className:"markdown",children:(0,e.jsxs)("h1",{id:"json-calculation",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#json-calculation",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"JSON calculation"]})}),(0,e.jsx)(d.Z,{name:"workflow-json-query",link:"/handbook/workflow-json-query",commercial:"true"}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsx)("p",{children:a.texts[0].value}),(0,e.jsxs)("h2",{id:"user-manual",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#user-manual",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"User Manual"]}),(0,e.jsxs)("h3",{id:"creating-a-node",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-node",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Creating a Node"]}),(0,e.jsx)("p",{children:a.texts[1].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/7de796517539ad9dfc88b7160f1d0dd7.png",alt:"Creating a Node"})})]}),(0,e.jsx)(t.Z,{type:"info",title:"Tip",children:(0,e.jsx)("p",{children:a.texts[2].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h3",{id:"node-configuration",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#node-configuration",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Node Configuration"]}),(0,e.jsxs)("h4",{id:"parsing-engine",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#parsing-engine",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Parsing Engine"]}),(0,e.jsx)("p",{children:a.texts[3].value}),(0,e.jsxs)("ul",{children:[(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"https://jmespath.org/",children:a.texts[4].value})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"https://jsonpath-plus.github.io/JSONPath/docs/ts/",children:a.texts[5].value})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"https://jsonata.org/",children:a.texts[6].value})})]}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/29be3b92a62b7d20312d1673e749f2ec.png",alt:"Parsing Engine Selection"})}),(0,e.jsxs)("h4",{id:"data-source",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#data-source",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Data Source"]}),(0,e.jsx)("p",{children:a.texts[7].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/f5a97e20693b3d30b3a994a576aa282d.png",alt:"Data Source"})})]}),(0,e.jsx)(t.Z,{type:"info",title:"Tip",children:(0,e.jsx)("p",{children:a.texts[8].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h4",{id:"parsing-expression",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#parsing-expression",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Parsing Expression"]}),(0,e.jsx)("p",{children:a.texts[9].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/181abd162fd32c09b62f6aa1d1cb3ed4.png",alt:"Parsing Expression"})})]}),(0,e.jsx)(t.Z,{type:"info",title:"Tip",children:(0,e.jsx)("p",{children:a.texts[10].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("p",{children:[a.texts[11].value,(0,e.jsx)("code",{children:a.texts[12].value}),a.texts[13].value]}),(0,e.jsxs)("h4",{id:"properties-mapping",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#properties-mapping",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Properties mapping"]}),(0,e.jsx)("p",{children:a.texts[14].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/b876abe4ccf6b4709eb8748f21ef3527.png",alt:"properties mapping"})})]}),(0,e.jsx)(t.Z,{type:"info",title:"Tip",children:(0,e.jsx)("p",{children:a.texts[15].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h3",{id:"example",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#example",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Example"]}),(0,e.jsx)("p",{children:a.texts[16].value}),(0,e.jsx)(o.Z,{lang:"json",children:a.texts[17].value})]}),(0,e.jsx)(t.Z,{type:"info",title:"Tip",children:(0,e.jsx)("p",{children:a.texts[18].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsx)("p",{children:a.texts[19].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/e62322a868b26ff98120bfcd6dcdb3bd.png",alt:"Example - SQL Parsing Configuration"})}),(0,e.jsxs)("ol",{children:[(0,e.jsx)("li",{children:a.texts[20].value}),(0,e.jsx)("li",{children:a.texts[21].value}),(0,e.jsxs)("li",{children:[a.texts[22].value,(0,e.jsx)("code",{children:a.texts[23].value}),a.texts[24].value]}),(0,e.jsxs)("li",{children:[a.texts[25].value,(0,e.jsx)("code",{children:a.texts[26].value}),a.texts[27].value,(0,e.jsx)("code",{children:a.texts[28].value}),a.texts[29].value]})]}),(0,e.jsx)("p",{children:a.texts[30].value}),(0,e.jsx)(o.Z,{lang:"json",children:a.texts[31].value}),(0,e.jsx)("p",{children:a.texts[32].value}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/b3329b0efe4471f5eed1f0673bef740e.png",alt:"Update the Corresponding Order\u2019s Total Price"})})]})]})})})}s.default=_},278996:function(r,s,n){n.r(s),n.d(s,{texts:function(){return i}});const i=[{value:"This plugin is designed to transform or calculate complex JSON data generated by various nodes, enabling subsequent nodes to effectively utilize this data. For instance, SQL operations and HTTP request nodes often return results in JSON format. The JSON calculation node allows you to transform this data into the specific values and variable formats required by later stages in the workflow.",paraId:0},{value:'To add a "JSON calculation" node in the workflow configuration interface, simply click the plus (\u201C+\u201D) button within the process:',paraId:1,tocIndex:2},{value:"JSON calculation nodes are generally positioned beneath other data nodes to facilitate parsing their output.",paraId:2},{value:"The JSON calculation node offers support for various parsing engines, each with its own unique syntax. You can select an engine based on your specific needs and preferences. Currently, three parsing engines are available:",paraId:3,tocIndex:4},{value:"JMESPath",paraId:4,tocIndex:4},{value:"JSONPath Plus",paraId:4,tocIndex:4},{value:"JSONata",paraId:4,tocIndex:4},{value:"The data source can be either the output of an upstream node or a data object within the process context. This is typically an unstructured data object, such as the results from an SQL node or an HTTP request node.",paraId:5,tocIndex:5},{value:"Data objects related to data tables are usually already structured through table configuration information and do not typically require parsing by a JSON calculation node.",paraId:6},{value:"You can create a custom parsing expression based on your specific needs and the parsing engine you\u2019ve selected.",paraId:7,tocIndex:6},{value:"Different parsing engines use different syntaxes; refer to the linked documentation for detailed information.",paraId:8},{value:"As of version ",paraId:9},{value:"v1.0.0-alpha.15",paraId:9},{value:", expressions now support the use of variables. These variables are pre-parsed before the specific engine executes, replacing the variables with the corresponding string values according to string template rules and merging them with other static elements in the expression. This feature is particularly valuable when dynamically constructing expressions, such as when parsing JSON content that requires dynamic keys.",paraId:9},{value:"When the parsed result is an object (or an array of objects), you can use properties mapping to convert the desired attributes into sub-variables for use by subsequent nodes.",paraId:10,tocIndex:7},{value:"For object (or array of objects) results, if you do not perform properties mapping, the entire object (or array of objects) will be stored as a single variable in the node's result, making it impossible to directly access the object's attribute values as individual variables.",paraId:11},{value:"Suppose you need to parse data from an SQL node that returns a set of order data:",paraId:12,tocIndex:8},{value:`[
  [
    {
      "id": 1,
      "products": [
        {
          "id": 1,
          "title": "Product 1",
          "price": 100,
          "quantity": 1
        },
        {
          "id": 2,
          "title": "Product 2",
          "price": 120,
          "quantity": 2
        }
      ]
    },
    {
      "id": 2,
      "products": [
        {
          "id": 3,
          "title": "Product 3",
          "price": 130,
          "quantity": 1
        },
        {
          "id": 4,
          "title": "Product 4",
          "price": 140,
          "quantity": 2
        }
      ]
    }
  ]
]
`,paraId:13,tocIndex:8},{value:"The outer array in the code above is intentional; it reflects the typical output of an SQL node. This is because the SQL node\u2019s result is a binary array, where the first element contains the query results and the second element contains metadata about the query.",paraId:14},{value:"If you need to parse and calculate the total price for each order and assemble this data into an object with the corresponding order ID, ready to update the order's total price, you would configure it as follows:",paraId:15},{value:"Select the JSONata parsing engine;",paraId:16},{value:"Choose the SQL node\u2019s result as the data source;",paraId:16},{value:"Use the JSONata expression ",paraId:16},{value:'$[0].{"id": id, "total": products.(price * quantity)}',paraId:16},{value:" for parsing;",paraId:16},{value:"Choose properties mapping to map ",paraId:16},{value:"id",paraId:16},{value:" and ",paraId:16},{value:"total",paraId:16},{value:" as sub-variables;",paraId:16},{value:"The final parsed result would look like this:",paraId:17},{value:`[
  {
    "id": 1,
    "total": 340
  },
  {
    "id": 2,
    "total": 410
  }
]
`,paraId:18},{value:"You can then iterate over the array of completed orders to update the total price of each order.",paraId:19}]}}]);
