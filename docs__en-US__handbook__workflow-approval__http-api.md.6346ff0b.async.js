"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[68016],{670313:function(o,n,t){t.r(n);var d=t(572269),l=t(793359),x=t(861788),s=t(719977),p=t(20190),r=t(24268),v=t(496057),_=t(585939),I=t(28484),j=t(635206),m=t(375553),f=t(156266),g=t(572333),P=t(841118),E=t(39297),T=t(868526),b=t(605019),i=t(614651),c=t(280936),u=t(667294),a=t(330305),e=t(785893);function h(){return(0,e.jsx)(i.dY,{children:(0,e.jsx)(u.Suspense,{fallback:(0,e.jsx)(c.Z,{}),children:(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h1",{id:"http-api",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#http-api",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"HTTP API"]}),(0,e.jsxs)("h2",{id:"initiator",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#initiator",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Initiator"]}),(0,e.jsxs)("h3",{id:"initiate-from-data-collection",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#initiate-from-data-collection",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Initiate from Data Collection"]}),(0,e.jsxs)("p",{children:[a.texts[0].value,(0,e.jsx)("code",{children:a.texts[1].value}),a.texts[2].value]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[3].value}),(0,e.jsxs)("p",{children:[a.texts[4].value,(0,e.jsx)("code",{children:a.texts[5].value}),a.texts[6].value]}),(0,e.jsx)("p",{children:(0,e.jsx)("img",{src:"https://static-docs.nocobase.com/20240426135108.png",alt:"How to View Workflow Key"})}),(0,e.jsxs)("p",{children:[a.texts[7].value,(0,e.jsx)("code",{children:a.texts[8].value}),a.texts[9].value]})]}),(0,e.jsx)(s.Z,{type:"info",title:"Note",children:(0,e.jsxs)("p",{children:[a.texts[10].value,(0,e.jsx)("code",{children:a.texts[11].value}),a.texts[12].value,(0,e.jsx)("code",{children:a.texts[13].value}),a.texts[14].value,(0,e.jsx)("code",{children:a.texts[15].value}),a.texts[16].value]})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("p",{children:[a.texts[17].value,(0,e.jsx)("code",{children:a.texts[18].value}),a.texts[19].value]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[20].value}),(0,e.jsxs)("p",{children:[a.texts[21].value,(0,e.jsx)("code",{children:a.texts[22].value}),a.texts[23].value]})]}),(0,e.jsx)(s.Z,{type:"info",title:"Note",children:(0,e.jsx)("p",{children:a.texts[24].value})}),(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h3",{id:"initiate-from-approval-center",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#initiate-from-approval-center",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Initiate from Approval Center"]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[25].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[26].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[27].value}),a.texts[28].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[29].value}),a.texts[30].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[31].value}),a.texts[32].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[33].value}),a.texts[34].value,(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[35].value}),a.texts[36].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[37].value}),a.texts[38].value]})]})]})]}),(0,e.jsxs)("h3",{id:"save-and-submit",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#save-and-submit",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Save and Submit"]}),(0,e.jsx)("p",{children:a.texts[39].value}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[40].value}),(0,e.jsxs)("h3",{id:"get-list-of-initiated-approvals",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#get-list-of-initiated-approvals",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Get List of Initiated Approvals"]}),(0,e.jsx)(r.Z,{lang:"base",children:a.texts[41].value}),(0,e.jsxs)("h3",{id:"withdraw",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#withdraw",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Withdraw"]}),(0,e.jsx)("p",{children:a.texts[42].value}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[43].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[44].value})}),(0,e.jsx)("ul",{children:(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[45].value}),a.texts[46].value]})}),(0,e.jsx)("h3",{id:"",children:(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#",children:(0,e.jsx)("span",{className:"icon icon-link"})})}),(0,e.jsxs)("h2",{id:"approver",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#approver",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Approver"]}),(0,e.jsx)("p",{children:a.texts[47].value}),(0,e.jsxs)("h3",{id:"get-approval-processing-records",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#get-approval-processing-records",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Get Approval Processing Records"]}),(0,e.jsx)("p",{children:a.texts[48].value}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[49].value}),(0,e.jsxs)("h3",{id:"get-single-approval-processing-record",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#get-single-approval-processing-record",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Get Single Approval Processing Record"]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[50].value}),(0,e.jsxs)("h3",{id:"approve-and-reject",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#approve-and-reject",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Approve and Reject"]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[51].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[52].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[53].value}),a.texts[54].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[55].value}),a.texts[56].value,(0,e.jsx)("code",{children:a.texts[57].value}),a.texts[58].value,(0,e.jsx)("code",{children:a.texts[59].value}),a.texts[60].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[61].value}),a.texts[62].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[63].value}),a.texts[64].value]})]}),(0,e.jsxs)("h3",{id:"return",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#return",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Return ",(0,e.jsx)(l.Z,{children:a.texts[65].value})]}),(0,e.jsxs)("p",{children:[a.texts[66].value,(0,e.jsx)("code",{children:a.texts[67].value}),a.texts[68].value]}),(0,e.jsx)("p",{children:a.texts[69].value}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[70].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[71].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[72].value}),a.texts[73].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[74].value}),a.texts[75].value]})]}),(0,e.jsxs)("h3",{id:"delegate",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#delegate",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Delegate"]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[76].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[77].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[78].value}),a.texts[79].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[80].value}),a.texts[81].value]})]}),(0,e.jsxs)("h3",{id:"add",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#add",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Add"]}),(0,e.jsx)(r.Z,{lang:"bash",children:a.texts[82].value}),(0,e.jsx)("p",{children:(0,e.jsx)("strong",{children:a.texts[83].value})}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[84].value}),a.texts[85].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[86].value}),a.texts[87].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:a.texts[88].value}),a.texts[89].value,(0,e.jsx)("code",{children:a.texts[90].value}),a.texts[91].value,(0,e.jsx)("code",{children:a.texts[92].value}),a.texts[93].value]})]})]})]})})})}n.default=h},330305:function(o,n,t){t.r(n),t.d(n,{texts:function(){return d}});const d=[{value:"For approvals initiated from data blocks, you can trigger them using an API call (using the creation button for the ",paraId:0,tocIndex:2},{value:"posts",paraId:0,tocIndex:2},{value:" table as an example):",paraId:0,tocIndex:2},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post."
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey"
`,paraId:1,tocIndex:2},{value:"The URL parameter ",paraId:2,tocIndex:2},{value:"triggerWorkflows",paraId:2,tocIndex:2},{value:" is the key of the workflow, with multiple workflows separated by commas. You can find this key by hovering over the workflow name at the top of the workflow canvas:",paraId:2,tocIndex:2},{value:"Once the call is successful, the approval workflow for the ",paraId:3,tocIndex:2},{value:"posts",paraId:3,tocIndex:2},{value:" table will be triggered.",paraId:3,tocIndex:2},{value:"Because external calls also rely on user identity, HTTP API calls must include authentication details, just like standard interface requests. This includes the ",paraId:4},{value:"Authorization",paraId:4},{value:" header or the ",paraId:4},{value:"token",paraId:4},{value:" parameter (token obtained during login), as well as the ",paraId:4},{value:"X-Role",paraId:4},{value:" header (indicating the user\u2019s current role).",paraId:4},{value:"If you need to trigger an event related to a one-to-one relationship (note that one-to-many relationships are not yet supported), you can use ",paraId:5},{value:"!",paraId:5},{value:" in the parameters to specify the related field that should trigger the event:",paraId:5},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post.",
    "category": {
      "title": "Test category"
    }
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey!category"
`,paraId:6},{value:"When the call is successfully executed, the approval event for the ",paraId:7},{value:"categories",paraId:7},{value:" table will be triggered.",paraId:7},{value:"When triggering events via HTTP API calls, ensure that the workflow is enabled and that the data table configuration is correct; otherwise, the call may not be successful or may result in errors.",paraId:8},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "collectionName": "<collection name>",
    "workflowId": <workflow id>,
    "data": { "<field>": "<value>" },
    "status": <initial approval status>,
  }'
  "http://localhost:3000/api/approvals:create"
`,paraId:9,tocIndex:3},{value:"Parameters",paraId:10,tocIndex:3},{value:"collectionName",paraId:11,tocIndex:3},{value:": The name of the data collection where the approval is initiated, required.",paraId:11,tocIndex:3},{value:"workflowId",paraId:11,tocIndex:3},{value:": The ID of the workflow used to initiate the approval, required.",paraId:11,tocIndex:3},{value:"data",paraId:11,tocIndex:3},{value:": The fields of the data table record created when initiating the approval, required.",paraId:11,tocIndex:3},{value:"status",paraId:11,tocIndex:3},{value:`: The status of the record created when initiating the approval, required. Possible values include:
`,paraId:11,tocIndex:3},{value:"0",paraId:12,tocIndex:3},{value:": Draft, indicating that it is saved but not submitted for approval.",paraId:12,tocIndex:3},{value:"1",paraId:12,tocIndex:3},{value:": Submit for approval, indicating that the initiator submits the approval request and enters the approval process.",paraId:12,tocIndex:3},{value:"When an approval (or withdrawal) is in draft status, you can use the following API to save or submit it again:",paraId:13,tocIndex:4},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "data": { "<field>": "<value>" },
    "status": 2
  }'
  "http://localhost:3000/api/approvals:update/<approval id>"
`,paraId:14,tocIndex:4},{value:`curl -X GET -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' \\
  "http://localhost:3000/api/approvals:listMine"
`,paraId:15,tocIndex:5},{value:"The initiator can withdraw the current record that is under approval through the following interface:",paraId:16,tocIndex:6},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  "http://localhost:3000/api/approvals:withdraw/<approval id>"
`,paraId:17,tocIndex:6},{value:"Parameters",paraId:18,tocIndex:6},{value:"<approval id>",paraId:19,tocIndex:6},{value:": The ID of the approval record to be withdrawn, required.",paraId:19,tocIndex:6},{value:"Once the approval process enters the approval node, a task will be created for the current approver. The approver can complete the approval task through the interface or by calling the HTTP API.",paraId:20,tocIndex:8},{value:"The to-do tasks are the approval processing records. You can use the following API to get all approval processing records for the current user:",paraId:21,tocIndex:9},{value:`curl -X GET -H 'Authorization: Bearer <your token>' \\
  "http://localhost:3000/api/approvalRecords:listMine"
`,paraId:22,tocIndex:9},{value:`curl -X GET -H 'Authorization: Bearer <your token>' \\
  "http://localhost:3000/api/approvalRecords:get/<record id>"
`,paraId:23,tocIndex:10},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "status": 2,
    "comment": "Looks good to me.",
    "data": { "<field to modify>": "<value>" }
  }'
  "http://localhost:3000/api/approvalRecords:submit/<record id>"
`,paraId:24,tocIndex:11},{value:"Parameters",paraId:25,tocIndex:11},{value:"<record id>",paraId:26,tocIndex:11},{value:": The ID of the record to be approved or rejected, required.",paraId:26,tocIndex:11},{value:"status",paraId:26,tocIndex:11},{value:": The status of the approval process, ",paraId:26,tocIndex:11},{value:"2",paraId:26,tocIndex:11},{value:' for "approve", ',paraId:26,tocIndex:11},{value:"-1",paraId:26,tocIndex:11},{value:' for "reject", required.',paraId:26,tocIndex:11},{value:"comment",paraId:26,tocIndex:11},{value:": Optional comments regarding the approval process.",paraId:26,tocIndex:11},{value:"data",paraId:26,tocIndex:11},{value:": Optional modifications to the data table record at the current approval node (only effective if approved).",paraId:26,tocIndex:11},{value:"v1.9.0+",paraId:27,tocIndex:11},{value:'In version v1.9.0 and earlier, the return used the same interface as "approve" and "reject", with ',paraId:28,tocIndex:12},{value:'"status": 1',paraId:28,tocIndex:12},{value:" representing the return.",paraId:28,tocIndex:12},{value:"Starting from version v1.9.0, the return has a separate interface:",paraId:29,tocIndex:12},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "returnToNodeKey": "<node key>",
  }'
  "http://localhost:3000/api/approvalRecords:return/<record id>"
`,paraId:30,tocIndex:12},{value:"Parameters",paraId:31,tocIndex:12},{value:"<record id>",paraId:32,tocIndex:12},{value:": The ID of the record to be returned, required.",paraId:32,tocIndex:12},{value:"returnToNodeKey",paraId:32,tocIndex:12},{value:": Optional key for the target node to return to. If the node has a configured range of returnable nodes, this parameter can be used to specify which node to return to. If not configured, this parameter does not need a value, and the default is to return to the starting point, where the initiator resubmits.",paraId:32,tocIndex:12},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "assignee": <user id>,
  }'
  "http://localhost:3000/api/approvalRecords:delegate/<record id>"
`,paraId:33,tocIndex:13},{value:"Parameters",paraId:34,tocIndex:13},{value:"<record id>",paraId:35,tocIndex:13},{value:": The ID of the record to be delegated, required.",paraId:35,tocIndex:13},{value:"assignee",paraId:35,tocIndex:13},{value:": The user ID of the assignee, required.",paraId:35,tocIndex:13},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "assignees": [<user id>],
    "order": <order>,
  }'
  "http://localhost:3000/api/approvalRecords:add/<record id>"
`,paraId:36,tocIndex:14},{value:"Parameters",paraId:37,tocIndex:14},{value:"<record id>",paraId:38,tocIndex:14},{value:": The ID of the record to be added, required.",paraId:38,tocIndex:14},{value:"assignees",paraId:38,tocIndex:14},{value:": The user ID list of the assignees, required.",paraId:38,tocIndex:14},{value:"order",paraId:38,tocIndex:14},{value:": The order of the addition, ",paraId:38,tocIndex:14},{value:"-1",paraId:38,tocIndex:14},{value:' indicates before "me", ',paraId:38,tocIndex:14},{value:"1",paraId:38,tocIndex:14},{value:' indicates after "me".',paraId:38,tocIndex:14}]}}]);
