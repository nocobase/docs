"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[99153],{532816:function(o,n,_){_.r(n);var t=_(572269),l=_(793359),u=_(861788),m=_(719977),h=_(20190),a=_(24268),x=_(496057),E=_(585939),v=_(28484),P=_(635206),I=_(375553),f=_(156266),M=_(572333),D=_(841118),O=_(39297),j=_(868526),C=_(605019),d=_(614651),i=_(280936),r=_(667294),s=_(765093),e=_(785893);function c(){return(0,e.jsx)(d.dY,{children:(0,e.jsx)(r.Suspense,{fallback:(0,e.jsx)(i.Z,{}),children:(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h1",{id:"baseinterface",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#baseinterface",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"BaseInterface"]}),(0,e.jsxs)("h2",{id:"overview",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#overview",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Overview"]}),(0,e.jsx)("p",{children:s.texts[0].value}),(0,e.jsx)(a.Z,{lang:"typescript",children:s.texts[1].value}),(0,e.jsxs)("h2",{id:"interfaces",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#interfaces",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Interfaces"]}),(0,e.jsxs)("h3",{id:"tovaluevalue-string-ctx-any-promise",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#tovaluevalue-string-ctx-any-promise",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"toValue(value: string, ctx?: any): Promise",(0,e.jsx)("any",{})]}),(0,e.jsx)("p",{children:s.texts[2].value}),(0,e.jsxs)("h3",{id:"tostringvalue-any-ctx-any",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#tostringvalue-any-ctx-any",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"toString(value: any, ctx?: any)"]}),(0,e.jsx)("p",{children:s.texts[3].value})]})})})})}n.default=c},765093:function(o,n,_){_.r(n),_.d(n,{texts:function(){return t}});const t=[{value:"BaseInterface is the foundational class for all Interface types. Users can extend this class to implement custom Interface logic.",paraId:0,tocIndex:1},{value:`class CustomInterface extends BaseInterface {
  async toValue(value: string, ctx?: any): Promise<any> {
    // Custom toValue logic
  }

  toString(value: any, ctx?: any) {
    // Custom toString logic
  }
}
// Register Interface
db.interfaceManager.registerInterfaceType('customInterface', CustomInterface)
`,paraId:1,tocIndex:1},{value:"Converts an external string to the actual value of the interface, which can be directly passed to the Repository for write operations.",paraId:2,tocIndex:3},{value:"Converts the actual value of the interface to a string type, which can be used for exporting or displaying purposes.",paraId:3,tocIndex:4}]}}]);
