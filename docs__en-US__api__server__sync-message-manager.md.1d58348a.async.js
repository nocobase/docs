"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[8602],{333874:function(t,a,n){n.r(a);var d=n(572269),r=n(793359),u=n(861788),h=n(719977),x=n(20190),_=n(24268),m=n(496057),v=n(585939),I=n(28484),E=n(635206),j=n(375553),b=n(156266),M=n(572333),g=n(841118),P=n(39297),f=n(868526),p=n(605019),l=n(614651),i=n(280936),c=n(667294),s=n(372141),e=n(785893);function o(){return(0,e.jsx)(l.dY,{children:(0,e.jsx)(c.Suspense,{fallback:(0,e.jsx)(i.Z,{}),children:(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("h1",{id:"syncmessagemanager",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#syncmessagemanager",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"SyncMessageManager"]}),(0,e.jsxs)("p",{children:[s.texts[0].value,(0,e.jsx)("code",{children:s.texts[1].value}),s.texts[2].value]}),(0,e.jsxs)("p",{children:[s.texts[3].value,(0,e.jsx)("code",{children:s.texts[4].value}),s.texts[5].value]}),(0,e.jsxs)("h2",{id:"syncmessagemanager-1",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#syncmessagemanager-1",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:s.texts[6].value})]}),(0,e.jsxs)("h3",{id:"members",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#members",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Members"]}),(0,e.jsxs)("h4",{id:"constructor",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#constructor",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:s.texts[7].value})]}),(0,e.jsxs)("p",{children:[s.texts[8].value,(0,e.jsx)("code",{children:s.texts[9].value}),s.texts[10].value]}),(0,e.jsxs)("h4",{id:"subscribechannel-string-callback-synceventcallback",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#subscribechannel-string-callback-synceventcallback",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:s.texts[11].value})]}),(0,e.jsx)("p",{children:s.texts[12].value}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:s.texts[13].value}),s.texts[14].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:s.texts[15].value}),s.texts[16].value]})]}),(0,e.jsxs)("h4",{id:"unsubscribechannel-string-callback-synceventcallback",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#unsubscribechannel-string-callback-synceventcallback",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:s.texts[17].value})]}),(0,e.jsx)("p",{children:s.texts[18].value}),(0,e.jsxs)("h4",{id:"publishchannel-string-message-any",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#publishchannel-string-message-any",children:(0,e.jsx)("span",{className:"icon icon-link"})}),(0,e.jsx)("code",{children:s.texts[19].value})]}),(0,e.jsx)("p",{children:s.texts[20].value}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:s.texts[21].value}),s.texts[22].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("code",{children:s.texts[23].value}),s.texts[24].value]})]}),(0,e.jsxs)("h3",{id:"related-types",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#related-types",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Related Types"]}),(0,e.jsx)(_.Z,{lang:"ts",children:s.texts[25].value})]})})})})}a.default=o},372141:function(t,a,n){n.r(a),n.d(a,{texts:function(){return d}});const d=[{value:"Used to manage synchronization signals between multiple application nodes. In a distributed deployment, when the memory state changes, it is necessary to notify other nodes for synchronization. ",paraId:0,tocIndex:0},{value:"SyncMessageManager",paraId:0,tocIndex:0},{value:" provides a common interface to be invoked, allowing it to be used in same way across different modules.",paraId:0,tocIndex:0},{value:"The SyncMessageManager itself does not implement specific synchronization functionality, but provides a unified interface, and it will invoke the underlying ",paraId:1,tocIndex:0},{value:"pubSubManager",paraId:1,tocIndex:0},{value:" to send and receive messages.",paraId:1,tocIndex:0},{value:"SyncMessageManager",paraId:2},{value:"constructor()",paraId:2},{value:"Constructor, creates an instance of the SyncMessageManager. An instance is automatically created during application initialization and is accessible globally within the application (",paraId:3,tocIndex:3},{value:"app.syncMessageManager",paraId:3,tocIndex:3},{value:"), so there is no need to call it.",paraId:3,tocIndex:3},{value:"subscribe(channel: string, callback: SyncEventCallback)",paraId:2},{value:"Subscribes to sync events.",paraId:4,tocIndex:4},{value:"channel",paraId:5,tocIndex:4},{value:": Channel name to differentiate between different sync events.",paraId:5,tocIndex:4},{value:"callback",paraId:5,tocIndex:4},{value:": Event callback function, called when a sync event occurs.",paraId:5,tocIndex:4},{value:"unsubscribe(channel: string, callback: SyncEventCallback)",paraId:2},{value:"Unsubscribes from sync events.",paraId:6,tocIndex:5},{value:"publish(channel: string, message: any)",paraId:2},{value:"Publishes a sync message.",paraId:7,tocIndex:6},{value:"channel",paraId:8,tocIndex:6},{value:": Channel name to differentiate between different sync events.",paraId:8,tocIndex:6},{value:"message",paraId:8,tocIndex:6},{value:": Sync message data.",paraId:8,tocIndex:6},{value:`export type PubSubCallback = (message: any) => Promise<void>;
`,paraId:9,tocIndex:7}]}}]);
