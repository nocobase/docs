"use strict";(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[95348],{295348:function(r,a,e){e.r(a),e.d(a,{texts:function(){return d}});const d=[{value:"Append the specified ",paraId:0,tocIndex:1},{value:"suffix",paraId:0,tocIndex:1},{value:" to the given string.",paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"str",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"suffix",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"Example",paraId:3,tocIndex:1},{value:`<!-- given that "item.stem" is "foo" -->
{{append item.stem ".html"}}
<!-- results in:  'foo.html' -->
`,paraId:4,tocIndex:1},{value:"camelCase the characters in the given ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:"Params",paraId:6,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{String}",paraId:7,tocIndex:2},{value:": The string to camelcase.",paraId:7,tocIndex:2},{value:"returns",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{String}",paraId:7,tocIndex:2},{value:"Example",paraId:8,tocIndex:2},{value:`{{camelcase "foo bar baz"}};
<!-- results in:  'fooBarBaz' -->
`,paraId:9,tocIndex:2},{value:"Capitalize the first word in a sentence.",paraId:10,tocIndex:3},{value:"Params",paraId:11,tocIndex:3},{value:"str",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"{String}",paraId:12,tocIndex:3},{value:"returns",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"{String}",paraId:12,tocIndex:3},{value:"Example",paraId:13,tocIndex:3},{value:`{{capitalize "foo bar baz"}}
<!-- results in:  "Foo bar baz" -->
`,paraId:14,tocIndex:3},{value:"Capitalize all words in a string.",paraId:15,tocIndex:4},{value:"Params",paraId:16,tocIndex:4},{value:"str",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"{String}",paraId:17,tocIndex:4},{value:"returns",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"{String}",paraId:17,tocIndex:4},{value:"Example",paraId:18,tocIndex:4},{value:`{{capitalizeAll "foo bar baz"}}
<!-- results in:  "Foo Bar Baz" -->
`,paraId:19,tocIndex:4},{value:"Center a string using non-breaking spaces",paraId:20,tocIndex:5},{value:"Params",paraId:21,tocIndex:5},{value:"str",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"{String}",paraId:22,tocIndex:5},{value:"spaces",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"{String}",paraId:22,tocIndex:5},{value:"returns",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"{String}",paraId:22,tocIndex:5},{value:"Like trim, but removes both extraneous whitespace ",paraId:23,tocIndex:6},{value:"and non-word characters",paraId:23,tocIndex:6},{value:" from the beginning and end of a string.",paraId:23,tocIndex:6},{value:"Params",paraId:24,tocIndex:6},{value:"string",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"{String}",paraId:25,tocIndex:6},{value:": The string to chop.",paraId:25,tocIndex:6},{value:"returns",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"{String}",paraId:25,tocIndex:6},{value:"Example",paraId:26,tocIndex:6},{value:`{{chop "_ABC_"}}
<!-- results in:  'ABC' -->

{{chop "-ABC-"}}
<!-- results in:  'ABC' -->

{{chop " ABC "}}
<!-- results in:  'ABC' -->
`,paraId:27,tocIndex:6},{value:"dash-case the characters in ",paraId:28,tocIndex:7},{value:"string",paraId:28,tocIndex:7},{value:". Replaces non-word characters and periods with hyphens.",paraId:28,tocIndex:7},{value:"Params",paraId:29,tocIndex:7},{value:"string",paraId:30,tocIndex:7},{value:" ",paraId:30,tocIndex:7},{value:"{String}",paraId:30,tocIndex:7},{value:"returns",paraId:30,tocIndex:7},{value:" ",paraId:30,tocIndex:7},{value:"{String}",paraId:30,tocIndex:7},{value:"Example",paraId:31,tocIndex:7},{value:`{{dashcase "a-b-c d_e"}}
<!-- results in:  'a-b-c-d-e' -->
`,paraId:32,tocIndex:7},{value:"dot.case the characters in ",paraId:33,tocIndex:8},{value:"string",paraId:33,tocIndex:8},{value:".",paraId:33,tocIndex:8},{value:"Params",paraId:34,tocIndex:8},{value:"string",paraId:35,tocIndex:8},{value:" ",paraId:35,tocIndex:8},{value:"{String}",paraId:35,tocIndex:8},{value:"returns",paraId:35,tocIndex:8},{value:" ",paraId:35,tocIndex:8},{value:"{String}",paraId:35,tocIndex:8},{value:"Example",paraId:36,tocIndex:8},{value:`{{dotcase "a-b-c d_e"}}
<!-- results in:  'a.b.c.d.e' -->
`,paraId:37,tocIndex:8},{value:"Lowercase all of the characters in the given string. Alias for ",paraId:38,tocIndex:9},{value:"lowercase",paraId:39,tocIndex:9},{value:".",paraId:38,tocIndex:9},{value:"Params",paraId:40,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:" ",paraId:41,tocIndex:9},{value:"{String}",paraId:41,tocIndex:9},{value:"returns",paraId:41,tocIndex:9},{value:" ",paraId:41,tocIndex:9},{value:"{String}",paraId:41,tocIndex:9},{value:"Example",paraId:42,tocIndex:9},{value:`{{downcase "aBcDeF"}}
<!-- results in:  'abcdef' -->
`,paraId:43,tocIndex:9},{value:"Truncates a string to the specified ",paraId:44,tocIndex:10},{value:"length",paraId:44,tocIndex:10},{value:", and appends it with an elipsis, ",paraId:44,tocIndex:10},{value:"\u2026",paraId:44,tocIndex:10},{value:".",paraId:44,tocIndex:10},{value:"Params",paraId:45,tocIndex:10},{value:"str",paraId:46,tocIndex:10},{value:" ",paraId:46,tocIndex:10},{value:"{String}",paraId:46,tocIndex:10},{value:"length",paraId:46,tocIndex:10},{value:" ",paraId:46,tocIndex:10},{value:"{Number}",paraId:46,tocIndex:10},{value:": The desired length of the returned string.",paraId:46,tocIndex:10},{value:"returns",paraId:46,tocIndex:10},{value:" ",paraId:46,tocIndex:10},{value:"{String}",paraId:46,tocIndex:10},{value:": The truncated string.",paraId:46,tocIndex:10},{value:"Example",paraId:47,tocIndex:10},{value:`{{ellipsis (sanitize "<span>foo bar baz</span>"), 7}}
<!-- results in:  'foo bar\u2026' -->
{{ellipsis "foo bar baz", 7}}
<!-- results in:  'foo bar\u2026' -->
`,paraId:48,tocIndex:10},{value:"Replace spaces in a string with hyphens.",paraId:49,tocIndex:11},{value:"Params",paraId:50,tocIndex:11},{value:"str",paraId:51,tocIndex:11},{value:" ",paraId:51,tocIndex:11},{value:"{String}",paraId:51,tocIndex:11},{value:"returns",paraId:51,tocIndex:11},{value:" ",paraId:51,tocIndex:11},{value:"{String}",paraId:51,tocIndex:11},{value:"Example",paraId:52,tocIndex:11},{value:`{{hyphenate "foo bar baz qux"}}
<!-- results in:  "foo-bar-baz-qux" -->
`,paraId:53,tocIndex:11},{value:"Return true if ",paraId:54,tocIndex:12},{value:"value",paraId:54,tocIndex:12},{value:" is a string.",paraId:54,tocIndex:12},{value:"Params",paraId:55,tocIndex:12},{value:"value",paraId:56,tocIndex:12},{value:" ",paraId:56,tocIndex:12},{value:"{String}",paraId:56,tocIndex:12},{value:"returns",paraId:56,tocIndex:12},{value:" ",paraId:56,tocIndex:12},{value:"{Boolean}",paraId:56,tocIndex:12},{value:"Example",paraId:57,tocIndex:12},{value:`{{isString "foo"}}
<!-- results in:  'true' -->
`,paraId:58,tocIndex:12},{value:"Lowercase all characters in the given string.",paraId:59,tocIndex:13},{value:"Params",paraId:60,tocIndex:13},{value:"str",paraId:61,tocIndex:13},{value:" ",paraId:61,tocIndex:13},{value:"{String}",paraId:61,tocIndex:13},{value:"returns",paraId:61,tocIndex:13},{value:" ",paraId:61,tocIndex:13},{value:"{String}",paraId:61,tocIndex:13},{value:"Example",paraId:62,tocIndex:13},{value:`{{lowercase "Foo BAR baZ"}}
<!-- results in:  'foo bar baz' -->
`,paraId:63,tocIndex:13},{value:"Return the number of occurrences of ",paraId:64,tocIndex:14},{value:"substring",paraId:64,tocIndex:14},{value:" within the given ",paraId:64,tocIndex:14},{value:"string",paraId:64,tocIndex:14},{value:".",paraId:64,tocIndex:14},{value:"Params",paraId:65,tocIndex:14},{value:"str",paraId:66,tocIndex:14},{value:" ",paraId:66,tocIndex:14},{value:"{String}",paraId:66,tocIndex:14},{value:"substring",paraId:66,tocIndex:14},{value:" ",paraId:66,tocIndex:14},{value:"{String}",paraId:66,tocIndex:14},{value:"returns",paraId:66,tocIndex:14},{value:" ",paraId:66,tocIndex:14},{value:"{Number}",paraId:66,tocIndex:14},{value:": Number of occurrences",paraId:66,tocIndex:14},{value:"Example",paraId:67,tocIndex:14},{value:`{{occurrences "foo bar foo bar baz" "foo"}}
<!-- results in:  2 -->
`,paraId:68,tocIndex:14},{value:"PascalCase the characters in ",paraId:69,tocIndex:15},{value:"string",paraId:69,tocIndex:15},{value:".",paraId:69,tocIndex:15},{value:"Params",paraId:70,tocIndex:15},{value:"string",paraId:71,tocIndex:15},{value:" ",paraId:71,tocIndex:15},{value:"{String}",paraId:71,tocIndex:15},{value:"returns",paraId:71,tocIndex:15},{value:" ",paraId:71,tocIndex:15},{value:"{String}",paraId:71,tocIndex:15},{value:"Example",paraId:72,tocIndex:15},{value:`{{pascalcase "foo bar baz"}}
<!-- results in:  'FooBarBaz' -->
`,paraId:73,tocIndex:15},{value:"path/case the characters in ",paraId:74,tocIndex:16},{value:"string",paraId:74,tocIndex:16},{value:".",paraId:74,tocIndex:16},{value:"Params",paraId:75,tocIndex:16},{value:"string",paraId:76,tocIndex:16},{value:" ",paraId:76,tocIndex:16},{value:"{String}",paraId:76,tocIndex:16},{value:"returns",paraId:76,tocIndex:16},{value:" ",paraId:76,tocIndex:16},{value:"{String}",paraId:76,tocIndex:16},{value:"Example",paraId:77,tocIndex:16},{value:`{{pathcase "a-b-c d_e"}}
<!-- results in:  'a/b/c/d/e' -->
`,paraId:78,tocIndex:16},{value:"Replace spaces in the given string with pluses.",paraId:79,tocIndex:17},{value:"Params",paraId:80,tocIndex:17},{value:"str",paraId:81,tocIndex:17},{value:" ",paraId:81,tocIndex:17},{value:"{String}",paraId:81,tocIndex:17},{value:": The input string",paraId:81,tocIndex:17},{value:"returns",paraId:81,tocIndex:17},{value:" ",paraId:81,tocIndex:17},{value:"{String}",paraId:81,tocIndex:17},{value:": Input string with spaces replaced by plus signs",paraId:81,tocIndex:17},{value:"Example",paraId:82,tocIndex:17},{value:`{{plusify "foo bar baz"}}
<!-- results in:  'foo+bar+baz' -->
`,paraId:83,tocIndex:17},{value:"Prepends the given ",paraId:84,tocIndex:18},{value:"string",paraId:84,tocIndex:18},{value:" with the specified ",paraId:84,tocIndex:18},{value:"prefix",paraId:84,tocIndex:18},{value:".",paraId:84,tocIndex:18},{value:"Params",paraId:85,tocIndex:18},{value:"str",paraId:86,tocIndex:18},{value:" ",paraId:86,tocIndex:18},{value:"{String}",paraId:86,tocIndex:18},{value:"prefix",paraId:86,tocIndex:18},{value:" ",paraId:86,tocIndex:18},{value:"{String}",paraId:86,tocIndex:18},{value:"returns",paraId:86,tocIndex:18},{value:" ",paraId:86,tocIndex:18},{value:"{String}",paraId:86,tocIndex:18},{value:"Example",paraId:87,tocIndex:18},{value:`<!-- given that "val" is "bar" -->
{{prepend val "foo-"}}
<!-- results in:  'foo-bar' -->
`,paraId:88,tocIndex:18},{value:"Render a block without processing mustache templates inside the block.",paraId:89,tocIndex:19},{value:"Params",paraId:90,tocIndex:19},{value:"options",paraId:91,tocIndex:19},{value:" ",paraId:91,tocIndex:19},{value:"{Object}",paraId:91,tocIndex:19},{value:"returns",paraId:91,tocIndex:19},{value:" ",paraId:91,tocIndex:19},{value:"{String}",paraId:91,tocIndex:19},{value:"Example",paraId:92,tocIndex:19},{value:`{{{{#raw}}}}
{{foo}}
{{{{/raw}}}}
<!-- results in:  '{{foo}}' -->
`,paraId:93,tocIndex:19},{value:"Remove all occurrences of ",paraId:94,tocIndex:20},{value:"substring",paraId:94,tocIndex:20},{value:" from the given ",paraId:94,tocIndex:20},{value:"str",paraId:94,tocIndex:20},{value:".",paraId:94,tocIndex:20},{value:"Params",paraId:95,tocIndex:20},{value:"str",paraId:96,tocIndex:20},{value:" ",paraId:96,tocIndex:20},{value:"{String}",paraId:96,tocIndex:20},{value:"substring",paraId:96,tocIndex:20},{value:" ",paraId:96,tocIndex:20},{value:"{String}",paraId:96,tocIndex:20},{value:"returns",paraId:96,tocIndex:20},{value:" ",paraId:96,tocIndex:20},{value:"{String}",paraId:96,tocIndex:20},{value:"Example",paraId:97,tocIndex:20},{value:`{{remove "a b a b a b" "a "}}
<!-- results in:  'b b b' -->
`,paraId:98,tocIndex:20},{value:"Remove the first occurrence of ",paraId:99,tocIndex:21},{value:"substring",paraId:99,tocIndex:21},{value:" from the given ",paraId:99,tocIndex:21},{value:"str",paraId:99,tocIndex:21},{value:".",paraId:99,tocIndex:21},{value:"Params",paraId:100,tocIndex:21},{value:"str",paraId:101,tocIndex:21},{value:" ",paraId:101,tocIndex:21},{value:"{String}",paraId:101,tocIndex:21},{value:"substring",paraId:101,tocIndex:21},{value:" ",paraId:101,tocIndex:21},{value:"{String}",paraId:101,tocIndex:21},{value:"returns",paraId:101,tocIndex:21},{value:" ",paraId:101,tocIndex:21},{value:"{String}",paraId:101,tocIndex:21},{value:"Example",paraId:102,tocIndex:21},{value:`{{remove "a b a b a b" "a"}}
<!-- results in:  ' b a b a b' -->
`,paraId:103,tocIndex:21},{value:"Replace all occurrences of substring ",paraId:104,tocIndex:22},{value:"a",paraId:104,tocIndex:22},{value:" with substring ",paraId:104,tocIndex:22},{value:"b",paraId:104,tocIndex:22},{value:".",paraId:104,tocIndex:22},{value:"Params",paraId:105,tocIndex:22},{value:"str",paraId:106,tocIndex:22},{value:" ",paraId:106,tocIndex:22},{value:"{String}",paraId:106,tocIndex:22},{value:"a",paraId:106,tocIndex:22},{value:" ",paraId:106,tocIndex:22},{value:"{String}",paraId:106,tocIndex:22},{value:"b",paraId:106,tocIndex:22},{value:" ",paraId:106,tocIndex:22},{value:"{String}",paraId:106,tocIndex:22},{value:"returns",paraId:106,tocIndex:22},{value:" ",paraId:106,tocIndex:22},{value:"{String}",paraId:106,tocIndex:22},{value:"Example",paraId:107,tocIndex:22},{value:`{{replace "a b a b a b" "a" "z"}}
<!-- results in:  'z b z b z b' -->
`,paraId:108,tocIndex:22},{value:"Replace the first occurrence of substring ",paraId:109,tocIndex:23},{value:"a",paraId:109,tocIndex:23},{value:" with substring ",paraId:109,tocIndex:23},{value:"b",paraId:109,tocIndex:23},{value:".",paraId:109,tocIndex:23},{value:"Params",paraId:110,tocIndex:23},{value:"str",paraId:111,tocIndex:23},{value:" ",paraId:111,tocIndex:23},{value:"{String}",paraId:111,tocIndex:23},{value:"a",paraId:111,tocIndex:23},{value:" ",paraId:111,tocIndex:23},{value:"{String}",paraId:111,tocIndex:23},{value:"b",paraId:111,tocIndex:23},{value:" ",paraId:111,tocIndex:23},{value:"{String}",paraId:111,tocIndex:23},{value:"returns",paraId:111,tocIndex:23},{value:" ",paraId:111,tocIndex:23},{value:"{String}",paraId:111,tocIndex:23},{value:"Example",paraId:112,tocIndex:23},{value:`{{replace "a b a b a b" "a" "z"}}
<!-- results in:  'z b a b a b' -->
`,paraId:113,tocIndex:23},{value:"Reverse a string.",paraId:114,tocIndex:24},{value:"Params",paraId:115,tocIndex:24},{value:"str",paraId:116,tocIndex:24},{value:" ",paraId:116,tocIndex:24},{value:"{String}",paraId:116,tocIndex:24},{value:"returns",paraId:116,tocIndex:24},{value:" ",paraId:116,tocIndex:24},{value:"{String}",paraId:116,tocIndex:24},{value:"Example",paraId:117,tocIndex:24},{value:`{{reverse "abcde"}}
<!-- results in:  'edcba' -->
`,paraId:118,tocIndex:24},{value:"Sentence case the given string",paraId:119,tocIndex:25},{value:"Params",paraId:120,tocIndex:25},{value:"str",paraId:121,tocIndex:25},{value:" ",paraId:121,tocIndex:25},{value:"{String}",paraId:121,tocIndex:25},{value:"returns",paraId:121,tocIndex:25},{value:" ",paraId:121,tocIndex:25},{value:"{String}",paraId:121,tocIndex:25},{value:"Example",paraId:122,tocIndex:25},{value:`{{sentence "hello world. goodbye world."}}
<!-- results in:  'Hello world. Goodbye world.' -->
`,paraId:123,tocIndex:25},{value:"snake_case the characters in the given ",paraId:124,tocIndex:26},{value:"string",paraId:124,tocIndex:26},{value:".",paraId:124,tocIndex:26},{value:"Params",paraId:125,tocIndex:26},{value:"string",paraId:126,tocIndex:26},{value:" ",paraId:126,tocIndex:26},{value:"{String}",paraId:126,tocIndex:26},{value:"returns",paraId:126,tocIndex:26},{value:" ",paraId:126,tocIndex:26},{value:"{String}",paraId:126,tocIndex:26},{value:"Example",paraId:127,tocIndex:26},{value:`{{snakecase "a-b-c d_e"}}
<!-- results in:  'a_b_c_d_e' -->
`,paraId:128,tocIndex:26},{value:"Split ",paraId:129,tocIndex:27},{value:"string",paraId:129,tocIndex:27},{value:" by the given ",paraId:129,tocIndex:27},{value:"character",paraId:129,tocIndex:27},{value:".",paraId:129,tocIndex:27},{value:"Params",paraId:130,tocIndex:27},{value:"string",paraId:131,tocIndex:27},{value:" ",paraId:131,tocIndex:27},{value:"{String}",paraId:131,tocIndex:27},{value:": The string to split.",paraId:131,tocIndex:27},{value:"returns",paraId:131,tocIndex:27},{value:" ",paraId:131,tocIndex:27},{value:"{String}",paraId:131,tocIndex:27},{value:" ",paraId:131,tocIndex:27},{value:"character",paraId:131,tocIndex:27},{value:": Default is an empty string.",paraId:131,tocIndex:27},{value:"Example",paraId:132,tocIndex:27},{value:`{{split "a,b,c" ","}}
<!-- results in:  ['a', 'b', 'c'] -->
`,paraId:133,tocIndex:27},{value:"Tests whether a string begins with the given prefix.",paraId:134,tocIndex:28},{value:"Params",paraId:135,tocIndex:28},{value:"prefix",paraId:136,tocIndex:28},{value:" ",paraId:136,tocIndex:28},{value:"{String}",paraId:136,tocIndex:28},{value:"testString",paraId:136,tocIndex:28},{value:" ",paraId:136,tocIndex:28},{value:"{String}",paraId:136,tocIndex:28},{value:"options",paraId:136,tocIndex:28},{value:" ",paraId:136,tocIndex:28},{value:"{String}",paraId:136,tocIndex:28},{value:"returns",paraId:136,tocIndex:28},{value:" ",paraId:136,tocIndex:28},{value:"{String}",paraId:136,tocIndex:28},{value:"Example",paraId:137,tocIndex:28},{value:`{{#startsWith "Goodbye" "Hello, world!"}}
  Whoops
{{else}}
  Bro, do you even hello world?
{{/startsWith}}
`,paraId:138,tocIndex:28},{value:"Title case the given string.",paraId:139,tocIndex:29},{value:"Params",paraId:140,tocIndex:29},{value:"str",paraId:141,tocIndex:29},{value:" ",paraId:141,tocIndex:29},{value:"{String}",paraId:141,tocIndex:29},{value:"returns",paraId:141,tocIndex:29},{value:" ",paraId:141,tocIndex:29},{value:"{String}",paraId:141,tocIndex:29},{value:"Example",paraId:142,tocIndex:29},{value:`{{titleize "this is title case"}}
<!-- results in:  'This Is Title Case' -->
`,paraId:143,tocIndex:29},{value:"Removes extraneous whitespace from the beginning and end of a string.",paraId:144,tocIndex:30},{value:"Params",paraId:145,tocIndex:30},{value:"string",paraId:146,tocIndex:30},{value:" ",paraId:146,tocIndex:30},{value:"{String}",paraId:146,tocIndex:30},{value:": The string to trim.",paraId:146,tocIndex:30},{value:"returns",paraId:146,tocIndex:30},{value:" ",paraId:146,tocIndex:30},{value:"{String}",paraId:146,tocIndex:30},{value:"Example",paraId:147,tocIndex:30},{value:`{{trim " ABC "}}
<!-- results in:  'ABC' -->
`,paraId:148,tocIndex:30},{value:"Removes extraneous whitespace from the beginning of a string.",paraId:149,tocIndex:31},{value:"Params",paraId:150,tocIndex:31},{value:"string",paraId:151,tocIndex:31},{value:" ",paraId:151,tocIndex:31},{value:"{String}",paraId:151,tocIndex:31},{value:": The string to trim.",paraId:151,tocIndex:31},{value:"returns",paraId:151,tocIndex:31},{value:" ",paraId:151,tocIndex:31},{value:"{String}",paraId:151,tocIndex:31},{value:"Example",paraId:152,tocIndex:31},{value:`{{trim " ABC "}}
<!-- results in:  'ABC ' -->
`,paraId:153,tocIndex:31},{value:"Removes extraneous whitespace from the end of a string.",paraId:154,tocIndex:32},{value:"Params",paraId:155,tocIndex:32},{value:"string",paraId:156,tocIndex:32},{value:" ",paraId:156,tocIndex:32},{value:"{String}",paraId:156,tocIndex:32},{value:": The string to trim.",paraId:156,tocIndex:32},{value:"returns",paraId:156,tocIndex:32},{value:" ",paraId:156,tocIndex:32},{value:"{String}",paraId:156,tocIndex:32},{value:"Example",paraId:157,tocIndex:32},{value:`{{trimRight " ABC "}}
<!-- results in:  ' ABC' -->
`,paraId:158,tocIndex:32},{value:"Truncate a string to the specified ",paraId:159,tocIndex:33},{value:"length",paraId:159,tocIndex:33},{value:". Also see ",paraId:159,tocIndex:33},{value:"ellipsis",paraId:160,tocIndex:33},{value:".",paraId:159,tocIndex:33},{value:"Params",paraId:161,tocIndex:33},{value:"str",paraId:162,tocIndex:33},{value:" ",paraId:162,tocIndex:33},{value:"{String}",paraId:162,tocIndex:33},{value:"limit",paraId:162,tocIndex:33},{value:" ",paraId:162,tocIndex:33},{value:"{Number}",paraId:162,tocIndex:33},{value:": The desired length of the returned string.",paraId:162,tocIndex:33},{value:"suffix",paraId:162,tocIndex:33},{value:" ",paraId:162,tocIndex:33},{value:"{String}",paraId:162,tocIndex:33},{value:": Optionally supply a string to use as a suffix to denote when the string has been truncated. Otherwise an ellipsis (",paraId:162,tocIndex:33},{value:"\u2026",paraId:162,tocIndex:33},{value:") will be used.",paraId:162,tocIndex:33},{value:"returns",paraId:162,tocIndex:33},{value:" ",paraId:162,tocIndex:33},{value:"{String}",paraId:162,tocIndex:33},{value:": The truncated string.",paraId:162,tocIndex:33},{value:"Example",paraId:163,tocIndex:33},{value:`truncate("foo bar baz", 7);
<!-- results in:  'foo bar' -->
truncate(sanitize("<span>foo bar baz</span>", 7));
<!-- results in:  'foo bar' -->
`,paraId:164,tocIndex:33},{value:"Truncate a string to have the specified number of words. Also see ",paraId:165,tocIndex:34},{value:"truncate",paraId:166,tocIndex:34},{value:".",paraId:165,tocIndex:34},{value:"Params",paraId:167,tocIndex:34},{value:"str",paraId:168,tocIndex:34},{value:" ",paraId:168,tocIndex:34},{value:"{String}",paraId:168,tocIndex:34},{value:"limit",paraId:168,tocIndex:34},{value:" ",paraId:168,tocIndex:34},{value:"{Number}",paraId:168,tocIndex:34},{value:": The desired length of the returned string.",paraId:168,tocIndex:34},{value:"suffix",paraId:168,tocIndex:34},{value:" ",paraId:168,tocIndex:34},{value:"{String}",paraId:168,tocIndex:34},{value:": Optionally supply a string to use as a suffix to denote when the string has been truncated.",paraId:168,tocIndex:34},{value:"returns",paraId:168,tocIndex:34},{value:" ",paraId:168,tocIndex:34},{value:"{String}",paraId:168,tocIndex:34},{value:": The truncated string.",paraId:168,tocIndex:34},{value:"Example",paraId:169,tocIndex:34},{value:`truncateWords("foo bar baz", 1);
<!-- results in:  'foo\u2026' -->
truncateWords("foo bar baz", 2);
<!-- results in:  'foo bar\u2026' -->
truncateWords("foo bar baz", 3);
<!-- results in:  'foo bar baz' -->
`,paraId:170,tocIndex:34},{value:"Uppercase all of the characters in the given string. Alias for ",paraId:171,tocIndex:35},{value:"uppercase",paraId:172,tocIndex:35},{value:".",paraId:171,tocIndex:35},{value:"Params",paraId:173,tocIndex:35},{value:"string",paraId:174,tocIndex:35},{value:" ",paraId:174,tocIndex:35},{value:"{String}",paraId:174,tocIndex:35},{value:"returns",paraId:174,tocIndex:35},{value:" ",paraId:174,tocIndex:35},{value:"{String}",paraId:174,tocIndex:35},{value:"Example",paraId:175,tocIndex:35},{value:`{{upcase "aBcDeF"}}
<!-- results in:  'ABCDEF' -->
`,paraId:176,tocIndex:35},{value:"Uppercase all of the characters in the given string. If used as a block helper it will uppercase the entire block. This helper does not support inverse blocks.",paraId:177,tocIndex:36},{value:"Params",paraId:178,tocIndex:36},{value:"str",paraId:179,tocIndex:36},{value:" ",paraId:179,tocIndex:36},{value:"{String}",paraId:179,tocIndex:36},{value:": The string to uppercase",paraId:179,tocIndex:36},{value:"options",paraId:179,tocIndex:36},{value:" ",paraId:179,tocIndex:36},{value:"{Object}",paraId:179,tocIndex:36},{value:": Handlebars options object",paraId:179,tocIndex:36},{value:"returns",paraId:179,tocIndex:36},{value:" ",paraId:179,tocIndex:36},{value:"{String}",paraId:179,tocIndex:36},{value:"Example",paraId:180,tocIndex:36},{value:`{{uppercase "aBcDeF"}}
<!-- results in:  'ABCDEF' -->
`,paraId:181,tocIndex:36}]}}]);
