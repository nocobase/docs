(self.webpackChunknocobase_docs=self.webpackChunknocobase_docs||[]).push([[67430],{312761:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},555004:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},997957:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},885683:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},258713:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},943568:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},777178:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},361199:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},467947:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},937258:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},568742:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},152309:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},72097:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},440650:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},828284:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return k}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(639711),C=e(310989),k={"docs-en-us-api-client-router-demo-0":{component:y.memo(y.lazy(E()(b()().mark(function B(){var M,T,v,s,r,i,h,l,d,c,m;return b()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return M=I.sent,T=M.default,I.next=6,Promise.resolve().then(e.bind(e,639711));case 6:return v=I.sent,s=v.Link,r=v.Outlet,I.next=11,Promise.resolve().then(e.bind(e,310989));case 11:return i=I.sent,h=i.Application,l=function(){return T.createElement("h1",null,"Home")},d=function(){return T.createElement("h1",null,"About")},c=function(){return T.createElement("div",null,T.createElement("div",null,T.createElement(s,{to:"/"},"Home"),", ",T.createElement(s,{to:"/about"},"About")),T.createElement(r,null))},m=new h({router:{type:"memory",initialEntries:["/"]}}),m.router.add("root",{element:T.createElement(c,null)}),m.router.add("root.home",{path:"/",element:T.createElement(l,null)}),m.router.add("root.about",{path:"/about",element:T.createElement(d,null)}),I.abrupt("return",{default:m.getRootComponent()});case 21:case"end":return I.stop()}},B)})))),asset:{type:"BLOCK",id:"docs-en-us-api-client-router-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { Link, Outlet } from 'react-router-dom';
import { Application } from '@nocobase/client';

const Home = () => <h1>Home</h1>;
const About = () => <h1>About</h1>;

const Layout = () => {
  return (
    <div>
      <div>
        <Link to={'/'}>Home</Link>, <Link to={'/about'}>About</Link>
      </div>
      <Outlet />
    </div>
  );
};

const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
});

app.router.add('root', {
  element: <Layout />,
});

app.router.add('root.home', {
  path: '/',
  element: <Home />,
});

app.router.add('root.about', {
  path: '/about',
  element: <About />,
});

export default app.getRootComponent();`},react:{type:"NPM",value:"18.3.1"},"react-router-dom":{type:"NPM",value:"6.3.0"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(y,2)),"react-router-dom":w,"@nocobase/client":C},renderOpts:{compile:function(){var B=E()(b()().mark(function T(){var v,s=arguments;return b()().wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,e.e(49341).then(e.bind(e,349341));case 2:return i.abrupt("return",(v=i.sent).default.apply(v,s));case 3:case"end":return i.stop()}},T)}));function M(){return B.apply(this,arguments)}return M}()}}}},68366:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},256273:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},850050:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},244001:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},892148:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},659560:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},892559:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},707748:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},65727:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},587138:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},135854:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},407568:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},175726:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},835110:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},304010:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},356164:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},874171:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},386827:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},433269:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},415632:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},543096:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},442409:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},391687:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},389926:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},626567:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},613848:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},40828:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},221130:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},397294:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},232804:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},912291:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},583547:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},707446:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},344391:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},130285:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},972214:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},467455:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},670331:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},209259:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},298299:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},614405:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},847545:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},96302:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},550717:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},588228:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},150559:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},385963:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},13433:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},227087:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},320873:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},478956:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},464811:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},580190:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},353468:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},518560:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},153098:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},571041:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},75091:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},503320:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},571515:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},743402:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},130704:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},52336:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},422204:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},37694:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},986117:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},803271:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},941244:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},175662:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},940997:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},707497:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},650099:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},830893:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return l}});var n=e(15009),b=e.n(n),R=e(912444),E=e.n(R),y=e(272004),w=e.n(y),C=e(731996),k=e.n(C),B=e(626037),M=e.n(B),T=e(899289),v=e.n(T),s=e(667294),r=e(310989),i=e(996974),h=e(639711),l={"docs-en-us-development-client-providers-demo-0":{component:s.memo(s.lazy(v()(b()().mark(function d(){var c,m,u,I,g,f,x,S,D,A;return b()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,Promise.resolve().then(e.bind(e,310989));case 2:return c=p.sent,m=c.Plugin,u=c.Application,p.next=7,Promise.resolve().then(e.t.bind(e,667294,19));case 7:return I=p.sent,g=I.createContext,f=I.useContext,x=g({color:null}),S=function(){var L=f(x),F=L.color;return s.createElement("div",null,"Color is: ",F)},D=function(O){k()(F,O);var L=M()(F);function F(){return E()(this,F),L.apply(this,arguments)}return w()(F,[{key:"load",value:function(){var N=v()(b()().mark(function K(){return b()().wrap(function(j){for(;;)switch(j.prev=j.next){case 0:this.app.addProvider(x.Provider,{value:{color:"blue"}}),this.app.router.add("home",{path:"/",Component:S});case 2:case"end":return j.stop()}},K,this)}));function U(){return N.apply(this,arguments)}return U}()}]),F}(m),A=new u({router:{type:"memory",initialEntries:["/"]},plugins:[D]}),p.abrupt("return",{default:A.getRootComponent()});case 15:case"end":return p.stop()}},d)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-providers-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { Plugin, Application } from '@nocobase/client';
import { createContext, useContext } from 'react';

const MyContext = createContext({ color: null });

const HomePage = () => {
  // Access the context value
  const { color } = useContext(MyContext);
  return <div>Color is: {color}</div>;
};

class PluginSampleProvider extends Plugin {
  async load() {
    this.app.addProvider(MyContext.Provider, { value: { color: 'blue' } });
    this.app.router.add('home', {
      path: '/',
      Component: HomePage,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
  plugins: [PluginSampleProvider],
});

export default app.getRootComponent();`},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@nocobase/client":r,react:t||(t=e.t(s,2))},renderOpts:{compile:function(){var d=v()(b()().mark(function m(){var u,I=arguments;return b()().wrap(function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,e.e(49341).then(e.bind(e,349341));case 2:return f.abrupt("return",(u=f.sent).default.apply(u,I));case 3:case"end":return f.stop()}},m)}));function c(){return d.apply(this,arguments)}return c}()}},"docs-en-us-development-client-providers-demo-1":{component:s.memo(s.lazy(v()(b()().mark(function d(){var c,m,u,I,g,f;return b()().wrap(function(S){for(;;)switch(S.prev=S.next){case 0:return S.next=2,Promise.resolve().then(e.bind(e,310989));case 2:return c=S.sent,m=c.Plugin,u=c.Application,I=function(A){var P=A.children,p=A.name;return s.createElement("div",null,s.createElement("div",null,"Global content display - ",p),P)},g=function(D){k()(P,D);var A=M()(P);function P(){return E()(this,P),A.apply(this,arguments)}return w()(P,[{key:"load",value:function(){var p=v()(b()().mark(function L(){return b()().wrap(function(N){for(;;)switch(N.prev=N.next){case 0:this.app.addProvider(I,{name:"NocoBase"}),this.app.router.add("home",{path:"/",Component:function(){return s.createElement("div",null,"Home page")}});case 2:case"end":return N.stop()}},L,this)}));function O(){return p.apply(this,arguments)}return O}()}]),P}(m),f=new u({router:{type:"memory",initialEntries:["/"]},plugins:[g]}),S.abrupt("return",{default:f.getRootComponent()});case 9:case"end":return S.stop()}},d)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-providers-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { Plugin, Application } from '@nocobase/client';

// Create a component and ensure children are rendered
const MyProvider = (props) => {
  const { children, name } = props;
  return (
    <div>
      <div>Global content display - {name}</div>
      {children}
    </div>
  );
};

class PluginSampleProvider extends Plugin {
  async load() {
    this.app.addProvider(MyProvider, { name: 'NocoBase' });

    this.app.router.add('home', {
      path: '/',
      Component: () => <div>Home page</div>,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
  plugins: [PluginSampleProvider],
});

export default app.getRootComponent();`},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{"@nocobase/client":r},renderOpts:{compile:function(){var d=v()(b()().mark(function m(){var u,I=arguments;return b()().wrap(function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,e.e(49341).then(e.bind(e,349341));case 2:return f.abrupt("return",(u=f.sent).default.apply(u,I));case 3:case"end":return f.stop()}},m)}));function c(){return d.apply(this,arguments)}return c}()}},"docs-en-us-development-client-providers-demo-2":{component:s.memo(s.lazy(v()(b()().mark(function d(){var c,m,u,I,g,f,x,S,D,A;return b()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,Promise.resolve().then(e.bind(e,310989));case 2:return c=p.sent,m=c.Plugin,u=c.Application,p.next=7,Promise.resolve().then(e.bind(e,996974));case 7:return I=p.sent,g=I.useLocation,p.next=11,Promise.resolve().then(e.bind(e,639711));case 11:return f=p.sent,x=f.Link,S=function(L){var F=L.children,N=L.name,U=g();return U.pathname==="/about"?s.createElement("div",null,"Content intercepted. Return to ",s.createElement(x,{to:"/"},"Home")):s.createElement("div",null,s.createElement("div",null,"Hello, ",N),s.createElement(x,{to:"/"},"Home"),", ",s.createElement(x,{to:"/about"},"About"),F)},D=function(O){k()(F,O);var L=M()(F);function F(){return E()(this,F),L.apply(this,arguments)}return w()(F,[{key:"load",value:function(){var N=v()(b()().mark(function K(){return b()().wrap(function(j){for(;;)switch(j.prev=j.next){case 0:this.app.addProvider(S),this.app.router.add("home",{path:"/",Component:function(){return s.createElement("div",null,"Home page")}});case 2:case"end":return j.stop()}},K,this)}));function U(){return N.apply(this,arguments)}return U}()}]),F}(m),A=new u({router:{type:"memory",initialEntries:["/"]},plugins:[D]}),p.abrupt("return",{default:A.getRootComponent()});case 17:case"end":return p.stop()}},d)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-providers-demo-2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { Plugin, Application } from '@nocobase/client';
import { useLocation } from 'react-router';
import { Link } from 'react-router-dom';

// Create a component and ensure children are rendered
const MyProvider = (props) => {
  const { children, name } = props;
  const location = useLocation();
  if (location.pathname === '/about') {
    return (
      <div>
        Content intercepted. Return to <Link to={'/'}>Home</Link>
      </div>
    );
  }
  return (
    <div>
      <div>Hello, {name}</div>
      <Link to={'/'}>Home</Link>, <Link to={'/about'}>About</Link>
      {children}
    </div>
  );
};

class PluginSampleProvider extends Plugin {
  async load() {
    this.app.addProvider(MyProvider);
    this.app.router.add('home', {
      path: '/',
      Component: () => <div>Home page</div>,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
  plugins: [PluginSampleProvider],
});

export default app.getRootComponent();`},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},"react-router":{type:"NPM",value:"6.3.0"},"react-router-dom":{type:"NPM",value:"6.3.0"}},entry:"index.tsx"},context:{"@nocobase/client":r,"react-router":i,"react-router-dom":h},renderOpts:{compile:function(){var d=v()(b()().mark(function m(){var u,I=arguments;return b()().wrap(function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,e.e(49341).then(e.bind(e,349341));case 2:return f.abrupt("return",(u=f.sent).default.apply(u,I));case 3:case"end":return f.stop()}},m)}));function c(){return d.apply(this,arguments)}return c}()}}}},223555:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},531870:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return g}});var t=e(15009),n=e.n(t),b=e(168400),R=e.n(b),E=e(899289),y=e.n(E),w=e(667294),C=e(583169),k=e(651216),B=e(970727),M,T,v,s,r,i,h,l,d,c,m,u,I,g={"docs-en-us-development-client-styles-and-themes-demo-0":{component:w.memo(w.lazy(y()(n()().mark(function f(){var x,S,D;return n()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:return P.next=2,Promise.resolve().then(e.bind(e,583169));case 2:return x=P.sent,S=x.createStyles,D=S(function(p){var O=p.token,L=p.css;return{container:{backgroundColor:O.colorBgLayout,borderRadius:O.borderRadiusLG,maxWidth:400,width:"100%",height:180,display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",marginLeft:"auto",marginRight:"auto"},card:L(M||(M=R()([`
    color: `,`;
    box-shadow: `,`;
    &:hover {
      color: `,`;
      box-shadow: `,`;
    }

    padding: `,`px;
    border-radius: `,`px;
    background: `,`;
    transition: all 100ms `,`;

    margin-bottom: 8px;
    cursor: pointer;
  `])),O.colorTextTertiary,O.boxShadow,O.colorTextSecondary,O.boxShadowSecondary,O.padding,O.borderRadius,O.colorBgContainer,O.motionEaseInBack)}}),P.abrupt("return",{default:function(){var O=D(),L=O.styles,F=O.cx,N=O.theme;return w.createElement("div",{className:F("a-simple-create-style-demo-classname",L.container)},w.createElement("div",{className:L.card},"createStyles Demo"),w.createElement("div",null,"Current theme mode: ",N.appearance))}});case 6:case"end":return P.stop()}},f)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-styles-and-themes-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { createStyles } from 'antd-style';

const useStyles = createStyles(({ token, css }) => ({
  // Supports CSS object syntax
  container: {
    backgroundColor: token.colorBgLayout,
    borderRadius: token.borderRadiusLG,
    maxWidth: 400,
    width: '100%',
    height: 180,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column',
    marginLeft: 'auto',
    marginRight: 'auto',
  },
  // Also supports CSS string templates for a familiar CSS writing experience
  card: css\`
    color: \${token.colorTextTertiary};
    box-shadow: \${token.boxShadow};
    &:hover {
      color: \${token.colorTextSecondary};
      box-shadow: \${token.boxShadowSecondary};
    }

    padding: \${token.padding}px;
    border-radius: \${token.borderRadius}px;
    background: \${token.colorBgContainer};
    transition: all 100ms \${token.motionEaseInBack};

    margin-bottom: 8px;
    cursor: pointer;
  \`,
}));

export default () => {
  // The styles object is cached by default in the useStyles method, so re-rendering is not a concern
  const { styles, cx, theme } = useStyles();

  return (
    // Use cx to organize classNames
    <div
      className={cx('a-simple-create-style-demo-classname', styles.container)}
    >
      <div className={styles.card}>createStyles Demo</div>
      {/* The theme object contains all tokens and theme-related information */}
      <div>Current theme mode: {theme.appearance}</div>
    </div>
  );
};`},"antd-style":{type:"NPM",value:"3.4.5"}},entry:"index.tsx"},context:{"antd-style":C},renderOpts:{compile:function(){var f=y()(n()().mark(function S(){var D,A=arguments;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,e.e(49341).then(e.bind(e,349341));case 2:return p.abrupt("return",(D=p.sent).default.apply(D,A));case 3:case"end":return p.stop()}},S)}));function x(){return f.apply(this,arguments)}return x}()}},"docs-en-us-development-client-styles-and-themes-demo-1":{component:w.memo(w.lazy(y()(n()().mark(function f(){var x,S,D,A,P,p;return n()().wrap(function(L){for(;;)switch(L.prev=L.next){case 0:return L.next=2,Promise.resolve().then(e.bind(e,583169));case 2:return x=L.sent,S=x.createStyles,D=x.createStylish,A=x.css,P=D(function(F){var N=F.token,U=F.css,K=U(T||(T=R()([`
    cursor: pointer;
    transition: 150ms background-color ease-in-out;
    &:hover {
      background: `,`;
    }
  `])),N.colorFillQuaternary),W=U(v||(v=R()([`
    color: `,`;
    background: `,`;
    border-color: transparent;
  `])),N.colorTextSecondary,N.colorFillQuaternary);return{defaultButton:U(s||(s=R()([`
      `,`;

      &:hover {
        color: `,`;
        background: `,`;
        border-color: transparent;
      }
      &:focus {
        `,`;
        border-color: `,`;
      }
    `])),W,N.colorText,N.colorFillSecondary,W,N.colorPrimary),containerBgHover:U(r||(r=R()([`
      cursor: pointer;
      transition: 150ms background-color ease-in-out;

      &:hover {
        background: `,`;
      }
    `])),N.colorFillQuaternary),containerBgL2:U(i||(i=R()([`
      `,`;
      border-radius: 4px;
      background: `,`;

      &:hover {
        background: `,`;
      }
    `])),K,N.colorFillQuaternary,N.colorFillTertiary)}}),p=S({container:{backgroundColor:"#f5f5f5",maxWidth:400,width:"100%",height:180,display:"flex",alignItems:"center",justifyContent:"center"},btn:A(h||(h=R()([`
    padding: 24px;
  `])))}),L.abrupt("return",{default:function(){var N=p(),U=N.styles,K=N.cx,W=P();return w.createElement("div",{className:U.container},w.createElement("div",{className:K(U.btn,W.defaultButton)},"Stylish Button"))}});case 9:case"end":return L.stop()}},f)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-styles-and-themes-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { createStyles, createStylish, css } from 'antd-style';

const useStylish = createStylish(({ token, css }) => {
  const containerBgHover = css\`
    cursor: pointer;
    transition: 150ms background-color ease-in-out;
    &:hover {
      background: \${token.colorFillQuaternary};
    }
  \`;

  const defaultButtonBase = css\`
    color: \${token.colorTextSecondary};
    background: \${token.colorFillQuaternary};
    border-color: transparent;
  \`;

  return {
    defaultButton: css\`
      \${defaultButtonBase};

      &:hover {
        color: \${token.colorText};
        background: \${token.colorFillSecondary};
        border-color: transparent;
      }
      &:focus {
        \${defaultButtonBase};
        border-color: \${token.colorPrimary};
      }
    \`,

    containerBgHover: css\`
      cursor: pointer;
      transition: 150ms background-color ease-in-out;

      &:hover {
        background: \${token.colorFillQuaternary};
      }
    \`,

    containerBgL2: css\`
      \${containerBgHover};
      border-radius: 4px;
      background: \${token.colorFillQuaternary};

      &:hover {
        background: \${token.colorFillTertiary};
      }
    \`,
  };
});

const useStyles = createStyles({
  // Supports CSS object syntax
  container: {
    backgroundColor: '#f5f5f5',
    maxWidth: 400,
    width: '100%',
    height: 180,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  // Also supports CSS string templates for a familiar CSS writing experience
  btn: css\`
    padding: 24px;
  \`,
});

export default () => {
  const { styles, cx } = useStyles();
  const stylish = useStylish();

  return (
    <div className={styles.container}>
      <div className={cx(styles.btn, stylish.defaultButton)}>
        Stylish Button
      </div>
    </div>
  );
};`},"antd-style":{type:"NPM",value:"3.4.5"}},entry:"index.tsx"},context:{"antd-style":C},renderOpts:{compile:function(){var f=y()(n()().mark(function S(){var D,A=arguments;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,e.e(49341).then(e.bind(e,349341));case 2:return p.abrupt("return",(D=p.sent).default.apply(D,A));case 3:case"end":return p.stop()}},S)}));function x(){return f.apply(this,arguments)}return x}()}},"docs-en-us-development-client-styles-and-themes-demo-2":{component:w.memo(w.lazy(y()(n()().mark(function f(){var x,S,D;return n()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:return P.next=2,Promise.resolve().then(e.bind(e,583169));case 2:return x=P.sent,S=x.createGlobalStyle,D=S(l||(l=R()([`
  .some-class {
    color: hotpink;
  }
`]))),P.abrupt("return",{default:function(){return w.createElement("div",null,w.createElement(D,null),w.createElement("div",{className:"some-class"},"Favorite color of macho men"))}});case 6:case"end":return P.stop()}},f)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-styles-and-themes-demo-2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { createGlobalStyle } from 'antd-style';

const Global = createGlobalStyle\`
  .some-class {
    color: hotpink;
  }
\`;

export default () => {
  return (
    <div>
      <Global />
      <div className="some-class">Favorite color of macho men</div>
    </div>
  );
};`},"antd-style":{type:"NPM",value:"3.4.5"}},entry:"index.tsx"},context:{"antd-style":C},renderOpts:{compile:function(){var f=y()(n()().mark(function S(){var D,A=arguments;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,e.e(49341).then(e.bind(e,349341));case 2:return p.abrupt("return",(D=p.sent).default.apply(D,A));case 3:case"end":return p.stop()}},S)}));function x(){return f.apply(this,arguments)}return x}()}},"docs-en-us-development-client-styles-and-themes-demo-3":{component:w.memo(w.lazy(y()(n()().mark(function f(){var x,S,D,A,P,p,O,L,F;return n()().wrap(function(U){for(;;)switch(U.prev=U.next){case 0:return U.next=2,Promise.resolve().then(e.bind(e,651216));case 2:return x=U.sent,S=x.SmileOutlined,U.next=6,Promise.resolve().then(e.bind(e,970727));case 6:return D=U.sent,A=D.Button,P=D.Space,U.next=11,Promise.resolve().then(e.bind(e,583169));case 11:return p=U.sent,O=p.createStyles,L=O(function(K){var W=K.token,j=K.css,z=j(d||(d=R()([`
    border-radius: `,`px;
    padding: `,`px;
  `])),W.borderRadiusLG,W.paddingLG);return{container:j(c||(c=R()([`
      background-color: `,`;
      padding: 24px;
    `])),W.colorBgLayout),primaryCard:j(m||(m=R()([`
      `,`;
      background: `,`;
      color: `,`;
    `])),z,W.colorPrimary,W.colorTextLightSolid),defaultCard:j(u||(u=R()([`
      `,`;
      background: `,`;
      color: `,`;
    `])),z,W.colorBgContainer,W.colorText)}}),F=function(){var W=L(),j=W.styles;return w.createElement("div",{className:j.container},w.createElement(P,{direction:"vertical",style:{width:"100%"},size:16},w.createElement(P,null,w.createElement(A,{title:"Feature button description",icon:w.createElement(S,null)}),"Action button"),w.createElement("div",{className:j.defaultCard},"Default Card"),w.createElement("div",{className:j.primaryCard},"Primary Card")))},U.abrupt("return",{default:F});case 16:case"end":return U.stop()}},f)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-styles-and-themes-demo-3",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { SmileOutlined } from '@ant-design/icons';
import { Button, Space } from 'antd';
import { createStyles } from 'antd-style';

const useStyles = createStyles(({ token, css }) => {
  const commonCard = css\`
    border-radius: \${token.borderRadiusLG}px;
    padding: \${token.paddingLG}px;
  \`;

  return {
    container: css\`
      background-color: \${token.colorBgLayout};
      padding: 24px;
    \`,

    primaryCard: css\`
      \${commonCard};
      background: \${token.colorPrimary};
      color: \${token.colorTextLightSolid};
    \`,

    defaultCard: css\`
      \${commonCard};
      background: \${token.colorBgContainer};
      color: \${token.colorText};
    \`,
  };
});

const App = () => {
  const { styles } = useStyles();

  return (
    <div className={styles.container}>
      <Space direction={'vertical'} style={{ width: '100%' }} size={16}>
        <Space>
          <Button title={'Feature button description'} icon={<SmileOutlined />} />
          Action button
        </Space>
        <div className={styles.defaultCard}>Default Card</div>
        <div className={styles.primaryCard}>Primary Card</div>
      </Space>
    </div>
  );
};

export default App;`},"@ant-design/icons":{type:"NPM",value:"5.6.1"},antd:{type:"NPM",value:"5.27.3"},"antd-style":{type:"NPM",value:"3.4.5"}},entry:"index.tsx"},context:{"@ant-design/icons":k,antd:B,"antd-style":C},renderOpts:{compile:function(){var f=y()(n()().mark(function S(){var D,A=arguments;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,e.e(49341).then(e.bind(e,349341));case 2:return p.abrupt("return",(D=p.sent).default.apply(D,A));case 3:case"end":return p.stop()}},S)}));function x(){return f.apply(this,arguments)}return x}()}},"docs-en-us-development-client-styles-and-themes-demo-4":{component:w.memo(w.lazy(y()(n()().mark(function f(){var x,S,D,A;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,Promise.resolve().then(e.bind(e,583169));case 2:return x=p.sent,S=x.createGlobalStyle,D=x.ThemeProvider,A=S(I||(I=R()([`
  .ant-custom-button {
    color: `,`;
    background: `,`;
    height: `,`px;
    border-radius: `,`px;
    padding: 0 `,`px;

    :hover {
      background: `,`;
      color: `,`;
    }

    :active {
      background: `,`;
      color: `,`;
    }

    border: none;
    cursor: pointer;
  }
`])),function(O){return O.theme.colorPrimary},function(O){return O.theme.colorPrimaryBg},function(O){return O.theme.controlHeight},function(O){return O.theme.borderRadius},function(O){return O.theme.paddingContentHorizontal},function(O){return O.theme.colorPrimaryBgHover},function(O){return O.theme.colorPrimaryTextActive},function(O){return O.theme.colorPrimaryBorder},function(O){return O.theme.colorPrimaryText}),p.abrupt("return",{default:function(){return w.createElement(D,null,w.createElement(A,null),w.createElement("button",{className:"ant-custom-button"},"Button not available in antd"))}});case 7:case"end":return p.stop()}},f)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-styles-and-themes-demo-4",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { createGlobalStyle, ThemeProvider } from 'antd-style';

const Global = createGlobalStyle\`
  .ant-custom-button {
    color: \${(p) => p.theme.colorPrimary};
    background: \${(p) => p.theme.colorPrimaryBg};
    height: \${(p) => p.theme.controlHeight}px;
    border-radius: \${(p) => p.theme.borderRadius}px;
    padding: 0 \${(p) => p.theme.paddingContentHorizontal}px;

    :hover {
      background: \${(p) => p.theme.colorPrimaryBgHover};
      color: \${(p) => p.theme.colorPrimaryTextActive};
    }

    :active {
      background: \${(p) => p.theme.colorPrimaryBorder};
      color: \${(p) => p.theme.colorPrimaryText};
    }

    border: none;
    cursor: pointer;
  }
\`;

export default () => {
  return (
    <ThemeProvider>
      <Global />
      <button className="ant-custom-button">Button not available in antd</button>
    </ThemeProvider>
  );
};`},"antd-style":{type:"NPM",value:"3.4.5"}},entry:"index.tsx"},context:{"antd-style":C},renderOpts:{compile:function(){var f=y()(n()().mark(function S(){var D,A=arguments;return n()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,e.e(49341).then(e.bind(e,349341));case 2:return p.abrupt("return",(D=p.sent).default.apply(D,A));case 3:case"end":return p.stop()}},S)}));function x(){return f.apply(this,arguments)}return x}()}}}},416422:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},179737:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},633006:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return B}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(310989),C=e(294350),k=e(970727),B={"docs-en-us-development-client-ui-schema-designable-demo-0":{component:y.memo(y.lazy(E()(b()().mark(function M(){var T,v,s,r,i,h,l,d,c,m,u,I,g;return b()().wrap(function(x){for(;;)switch(x.prev=x.next){case 0:return x.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return T=x.sent,v=T.default,x.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return s=x.sent,r=s.SchemaComponentProvider,i=s.SchemaComponent,h=s.useDesignable,x.next=12,Promise.resolve().then(e.bind(e,294350));case 12:return l=x.sent,d=l.useFieldSchema,x.next=16,Promise.resolve().then(e.bind(e,970727));case 16:return c=x.sent,m=c.Button,u=c.Space,I=function(D){var A=h(),P=A.insertAdjacent,p=d();return v.createElement("div",null,v.createElement("h1",null,p.title," - ",p.name),v.createElement(u,null,v.createElement(m,{onClick:function(){P("beforeBegin",{title:"beforeBegin","x-component":"Hello"})}},"before begin"),v.createElement(m,{onClick:function(){P("afterBegin",{title:"afterBegin","x-component":"Hello"})}},"after begin"),v.createElement(m,{onClick:function(){P("beforeEnd",{title:"beforeEnd","x-component":"Hello"})}},"before end"),v.createElement(m,{onClick:function(){P("afterEnd",{title:"afterEnd","x-component":"Hello"})}},"after end")),v.createElement("div",{style:{margin:50}},D.children))},g=function(D){return v.createElement("div",null,D.children)},x.abrupt("return",{default:function(){return v.createElement(r,{components:{Page:g,Hello:I}},v.createElement(i,{schema:{type:"void",name:"page","x-component":"Page",properties:{hello1:{type:"void",title:"Main","x-component":"Hello"}}}}))}});case 22:case"end":return x.stop()}},M)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-designable-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import {
  SchemaComponentProvider,
  SchemaComponent,
  useDesignable,
} from '@nocobase/client';
import { observer, Schema, useFieldSchema } from '@formily/react';
import { Button, Space } from 'antd';
import { uid } from '@formily/shared';

const Hello = (props) => {
  const { insertAdjacent } = useDesignable();
  const fieldSchema = useFieldSchema();
  return (
    <div>
      <h1>
        {fieldSchema.title} - {fieldSchema.name}
      </h1>
      <Space>
        <Button
          onClick={() => {
            insertAdjacent('beforeBegin', {
              title: 'beforeBegin',
              'x-component': 'Hello',
            });
          }}
        >
          before begin
        </Button>
        <Button
          onClick={() => {
            insertAdjacent('afterBegin', {
              title: 'afterBegin',
              'x-component': 'Hello',
            });
          }}
        >
          after begin
        </Button>
        <Button
          onClick={() => {
            insertAdjacent('beforeEnd', {
              title: 'beforeEnd',
              'x-component': 'Hello',
            });
          }}
        >
          before end
        </Button>
        <Button
          onClick={() => {
            insertAdjacent('afterEnd', {
              title: 'afterEnd',
              'x-component': 'Hello',
            });
          }}
        >
          after end
        </Button>
      </Space>
      <div style={{ margin: 50 }}>{props.children}</div>
    </div>
  );
};

const Page = (props) => {
  return <div>{props.children}</div>;
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Page, Hello }}>
      <SchemaComponent
        schema={{
          type: 'void',
          name: 'page',
          'x-component': 'Page',
          properties: {
            hello1: {
              type: 'void',
              title: 'Main',
              'x-component': 'Hello',
            },
          },
        }}
      />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},"@formily/react":{type:"NPM",value:"2.3.7"},antd:{type:"NPM",value:"5.27.3"}},entry:"index.tsx"},context:{react:t||(t=e.t(y,2)),"@nocobase/client":w,"@formily/react":C,antd:k},renderOpts:{compile:function(){var M=E()(b()().mark(function v(){var s,r=arguments;return b()().wrap(function(h){for(;;)switch(h.prev=h.next){case 0:return h.next=2,e.e(49341).then(e.bind(e,349341));case 2:return h.abrupt("return",(s=h.sent).default.apply(s,r));case 3:case"end":return h.stop()}},v)}));function T(){return M.apply(this,arguments)}return T}()}},"docs-en-us-development-client-ui-schema-designable-demo-1":{component:y.memo(y.lazy(E()(b()().mark(function M(){var T,v,s,r,i,h,l,d,c,m,u,I,g;return b()().wrap(function(x){for(;;)switch(x.prev=x.next){case 0:return x.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return T=x.sent,v=T.default,x.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return s=x.sent,r=s.SchemaComponentProvider,i=s.SchemaComponent,h=s.createDesignable,l=s.useSchemaComponentContext,x.next=13,Promise.resolve().then(e.bind(e,294350));case 13:return d=x.sent,c=d.useFieldSchema,x.next=17,Promise.resolve().then(e.bind(e,970727));case 17:return m=x.sent,u=m.Button,I=function(D){var A=c();return v.createElement("h1",null,A.title," - ",A.name)},g=function(D){var A=c(),P=l(),p=P.refresh;return v.createElement("div",null,v.createElement(u,{onClick:function(){var L=h({refresh:p,current:A.properties.hello2});L.on("insertAdjacent",p),L.insertAdjacent("afterEnd",{title:"afterEnd","x-component":"Hello"})}},"Add after Title2"),D.children)},x.abrupt("return",{default:function(){return v.createElement(r,{components:{Page:g,Hello:I}},v.createElement(i,{schema:{type:"void",name:"page","x-component":"Page",properties:{hello1:{type:"void",title:"Title1","x-component":"Hello"},hello2:{type:"void",title:"Title2","x-component":"Hello"},hello3:{type:"void",title:"Title3","x-component":"Hello"}}}}))}});case 22:case"end":return x.stop()}},M)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-designable-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import {
  SchemaComponentProvider,
  SchemaComponent,
  createDesignable,
  useSchemaComponentContext,
} from '@nocobase/client';
import { observer, Schema, useFieldSchema } from '@formily/react';
import { Button } from 'antd';
import { uid } from '@formily/shared';

const Hello = (props) => {
  const fieldSchema = useFieldSchema();
  return (
    <h1>
      {fieldSchema.title} - {fieldSchema.name}
    </h1>
  );
};

const Page = (props) => {
  const fieldSchema = useFieldSchema();
  const { refresh } = useSchemaComponentContext();

  return (
    <div>
      <Button
        onClick={() => {
          const dn = createDesignable({
            refresh,
            current: fieldSchema.properties.hello2,
          });
          dn.on('insertAdjacent', refresh);
          dn.insertAdjacent('afterEnd', {
            title: 'afterEnd',
            'x-component': 'Hello',
          });
        }}
      >
        Add after Title2
      </Button>
      {props.children}
    </div>
  );
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Page, Hello }}>
      <SchemaComponent
        schema={{
          type: 'void',
          name: 'page',
          'x-component': 'Page',
          properties: {
            hello1: {
              type: 'void',
              title: 'Title1',
              'x-component': 'Hello',
            },
            hello2: {
              type: 'void',
              title: 'Title2',
              'x-component': 'Hello',
            },
            hello3: {
              type: 'void',
              title: 'Title3',
              'x-component': 'Hello',
            },
          },
        }}
      />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},"@formily/react":{type:"NPM",value:"2.3.7"},antd:{type:"NPM",value:"5.27.3"}},entry:"index.tsx"},context:{react:t||(t=e.t(y,2)),"@nocobase/client":w,"@formily/react":C,antd:k},renderOpts:{compile:function(){var M=E()(b()().mark(function v(){var s,r=arguments;return b()().wrap(function(h){for(;;)switch(h.prev=h.next){case 0:return h.next=2,e.e(49341).then(e.bind(e,349341));case 2:return h.abrupt("return",(s=h.sent).default.apply(s,r));case 3:case"end":return h.stop()}},v)}));function T(){return M.apply(this,arguments)}return T}()}}}},475865:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return T}});var n=e(97857),b=e.n(n),R=e(15009),E=e.n(R),y=e(899289),w=e.n(y),C=e(667294),k=e(310989),B=e(970727),M=e(294350),T={"docs-en-us-development-client-ui-schema-extending-demo-0":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c;return E()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=u.sent,r=s.default,u.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return i=u.sent,h=i.SchemaComponent,l=i.SchemaComponentProvider,d=function(){return r.createElement("h1",null,"Hello, world!")},c={type:"void",name:"hello","x-component":"Hello"},u.abrupt("return",{default:function(){return r.createElement(l,{components:{Hello:d}},r.createElement(h,{schema:c}))}});case 12:case"end":return u.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const Hello = () => <h1>Hello, world!</h1>;

const schema = {
  type: 'void',
  name: 'hello',
  'x-component': 'Hello',
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Hello }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-1":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m,u,I,g,f,x,S;return E()().wrap(function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=A.sent,r=s.default,A.next=6,Promise.resolve().then(e.bind(e,970727));case 6:return i=A.sent,h=i.Input,A.next=10,Promise.resolve().then(e.bind(e,294350));case 10:return l=A.sent,d=l.connect,c=l.mapProps,m=l.mapReadPretty,A.next=16,Promise.resolve().then(e.bind(e,310989));case 16:return u=A.sent,I=u.SchemaComponent,g=u.SchemaComponentProvider,f=function(p){return r.createElement("div",null,p.value)},x=d(h,c(function(P,p){return b()(b()({},P),{},{suffix:"Suffix"})}),m(f)),S={type:"object",properties:{t1:{type:"string",default:"hello t1","x-component":"SingleText"},t2:{type:"string",default:"hello t2","x-component":"SingleText","x-pattern":"readPretty"}}},A.abrupt("return",{default:function(){return r.createElement(g,{components:{SingleText:x}},r.createElement(I,{schema:S}))}});case 23:case"end":return A.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { Input } from 'antd';
import { connect, mapProps, mapReadPretty } from '@formily/react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const ReadPretty = (props) => {
  return <div>{props.value}</div>;
};

const SingleText = connect(
  Input,
  mapProps((props, field) => {
    return {
      ...props,
      suffix: 'Suffix',
    };
  }),
  mapReadPretty(ReadPretty),
);

const schema = {
  type: 'object',
  properties: {
    t1: {
      type: 'string',
      default: 'hello t1',
      'x-component': 'SingleText',
    },
    t2: {
      type: 'string',
      default: 'hello t2',
      'x-component': 'SingleText',
      'x-pattern': 'readPretty',
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ SingleText }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},antd:{type:"NPM",value:"5.27.3"},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),antd:B,"@formily/react":M,"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-2":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m,u,I,g,f,x,S,D,A;return E()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=p.sent,r=s.default,p.next=6,Promise.resolve().then(e.bind(e,970727));case 6:return i=p.sent,h=i.Input,p.next=10,Promise.resolve().then(e.bind(e,294350));case 10:return l=p.sent,d=l.connect,c=l.observer,m=l.useForm,p.next=16,Promise.resolve().then(e.bind(e,310989));case 16:return u=p.sent,I=u.SchemaComponent,g=u.SchemaComponentProvider,f=d(h),x=c(function(O){var L=m();return r.createElement("div",null,"UsedObserver: ",L.values.t1)},{displayName:"UsedObserver"}),S=function(L){var F=m();return r.createElement("div",null,"NotUsedObserver: ",F.values.t1)},D={type:"object",properties:{t1:{type:"string","x-component":"SingleText"},t2:{type:"string","x-component":"UsedObserver"},t3:{type:"string","x-component":"NotUsedObserver"}}},A={SingleText:f,UsedObserver:x,NotUsedObserver:S},p.abrupt("return",{default:function(){return r.createElement(g,{components:A},r.createElement(I,{schema:D}))}});case 25:case"end":return p.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { Input } from 'antd';
import { connect, observer, useForm } from '@formily/react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const SingleText = connect(Input);

const UsedObserver = observer(
  (props) => {
    const form = useForm();
    return <div>UsedObserver: {form.values.t1}</div>;
  },
  { displayName: 'UsedObserver' },
);

const NotUsedObserver = (props) => {
  const form = useForm();
  return <div>NotUsedObserver: {form.values.t1}</div>;
};

const schema = {
  type: 'object',
  properties: {
    t1: {
      type: 'string',
      'x-component': 'SingleText',
    },
    t2: {
      type: 'string',
      'x-component': 'UsedObserver',
    },
    t3: {
      type: 'string',
      'x-component': 'NotUsedObserver',
    },
  },
};

const components = {
  SingleText,
  UsedObserver,
  NotUsedObserver,
};

export default () => {
  return (
    <SchemaComponentProvider components={components}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},antd:{type:"NPM",value:"5.27.3"},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),antd:B,"@formily/react":M,"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-3":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m;return E()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=I.sent,r=s.default,I.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return i=I.sent,h=i.SchemaComponent,l=i.SchemaComponentProvider,d=function(f){return r.createElement("h1",null,"Hello, ",f.children,"!")},c=function(){return r.createElement("span",null,"world")},m={type:"object",name:"hello","x-component":"Hello",properties:{world:{type:"string","x-component":"World"}}},I.abrupt("return",{default:function(){return r.createElement(l,{components:{Hello:d,World:c}},r.createElement(h,{schema:m}))}});case 13:case"end":return I.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-3",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

// The Hello component adapted children, allowing nested properties.
const Hello = (props) => <h1>Hello, {props.children}!</h1>;
const World = () => <span>world</span>;

const schema = {
  type: 'object',
  name: 'hello',
  'x-component': 'Hello',
  properties: {
    world: {
      type: 'string',
      'x-component': 'World',
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Hello, World }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-4":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m;return E()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=I.sent,r=s.default,I.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return i=I.sent,h=i.SchemaComponent,l=i.SchemaComponentProvider,d=function(f){return r.createElement("h1",null,"Hello, ",f.children,"!")},c=function(){return r.createElement("span",null,"world")},m={type:"object",properties:{title1:{type:"void","x-content":"Void schema, rendering properties"},void:{type:"void",name:"hello","x-component":"Hello",properties:{world:{type:"void","x-component":"World"}}},title2:{type:"void","x-content":"Object schema, rendering properties"},object:{type:"object",name:"hello","x-component":"Hello",properties:{world:{type:"string","x-component":"World"}}},title3:{type:"void","x-content":"Array schema, not rendering properties"},array:{type:"array",name:"hello","x-component":"Hello",properties:{world:{type:"string","x-component":"World"}}},title4:{type:"void","x-content":"String schema, not rendering properties"},string:{type:"string",name:"hello","x-component":"Hello",properties:{world:{type:"string","x-component":"World"}}}}},I.abrupt("return",{default:function(){return r.createElement(l,{components:{Hello:d,World:c}},r.createElement(h,{schema:m}))}});case 13:case"end":return I.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-4",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const Hello = (props) => <h1>Hello, {props.children}!</h1>;
const World = () => <span>world</span>;

const schema = {
  type: 'object',
  properties: {
    title1: {
      type: 'void',
      'x-content': 'Void schema, rendering properties',
    },
    void: {
      type: 'void',
      name: 'hello',
      'x-component': 'Hello',
      properties: {
        world: {
          type: 'void',
          'x-component': 'World',
        },
      },
    },
    title2: {
      type: 'void',
      'x-content': 'Object schema, rendering properties',
    },
    object: {
      type: 'object',
      name: 'hello',
      'x-component': 'Hello',
      properties: {
        world: {
          type: 'string',
          'x-component': 'World',
        },
      },
    },
    title3: {
      type: 'void',
      'x-content': 'Array schema, not rendering properties',
    },
    array: {
      type: 'array',
      name: 'hello',
      'x-component': 'Hello',
      properties: {
        world: {
          type: 'string',
          'x-component': 'World',
        },
      },
    },
    title4: {
      type: 'void',
      'x-content': 'String schema, not rendering properties',
    },
    string: {
      type: 'string',
      name: 'hello',
      'x-component': 'Hello',
      properties: {
        world: {
          type: 'string',
          'x-component': 'World',
        },
      },
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Hello, World }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-5":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m,u,I,g,f,x,S,D;return E()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:return P.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=P.sent,r=s.default,P.next=6,Promise.resolve().then(e.bind(e,294350));case 6:return i=P.sent,h=i.useFieldSchema,l=i.RecursionField,d=i.useField,c=i.observer,m=i.connect,P.next=14,Promise.resolve().then(e.bind(e,310989));case 14:return u=P.sent,I=u.SchemaComponent,g=u.SchemaComponentProvider,f=function(){var O=h();return O.reduceProperties(function(L,F){return F["x-component"]==="Value"?F:L})},x=c(function(p){var O,L=d(),F=f();return r.createElement(r.Fragment,null,"String Array",r.createElement("ul",null,(O=L.value)===null||O===void 0?void 0:O.map(function(N,U){return r.createElement(l,{name:U,schema:F})})))},{displayName:"ArrayList"}),S=m(function(p){return r.createElement("li",null,"value: ",p.value)}),D={type:"object",properties:{strArr:{type:"array",default:[1,2,3],"x-component":"ArrayList",properties:{value:{type:"number","x-component":"Value"}}}}},P.abrupt("return",{default:function(){return r.createElement(g,{components:{ArrayList:x,Value:S}},r.createElement(I,{schema:D}))}});case 22:case"end":return P.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-5",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import {
  useFieldSchema,
  Schema,
  RecursionField,
  useField,
  observer,
  connect,
} from '@formily/react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const useValueSchema = () => {
  const schema = useFieldSchema();
  return schema.reduceProperties((buf, s) => {
    if (s['x-component'] === 'Value') {
      return s;
    }
    return buf;
  });
};

const ArrayList = observer(
  (props) => {
    const field = useField();
    const schema = useValueSchema();
    return (
      <>
        String Array
        <ul>
          {field.value?.map((item, index) => {
            // Only one element
            return <RecursionField name={index} schema={schema} />;
          })}
        </ul>
      </>
    );
  },
  { displayName: 'ArrayList' },
);

const Value = connect((props) => {
  return <li>value: {props.value}</li>;
});

const schema = {
  type: 'object',
  properties: {
    strArr: {
      type: 'array',
      default: [1, 2, 3],
      'x-component': 'ArrayList',
      properties: {
        value: {
          type: 'number',
          'x-component': 'Value',
        },
      },
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ ArrayList, Value }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),"@formily/react":M,"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-6":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m,u,I,g,f,x,S,D;return E()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:return P.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return s=P.sent,r=s.default,P.next=6,Promise.resolve().then(e.bind(e,294350));case 6:return i=P.sent,h=i.useFieldSchema,l=i.Schema,d=i.RecursionField,c=i.useField,m=i.observer,u=i.connect,P.next=15,Promise.resolve().then(e.bind(e,310989));case 15:return I=P.sent,g=I.SchemaComponent,f=I.SchemaComponentProvider,x=m(function(p){var O,L=c(),F=h(),N=new l({type:"object",properties:F.properties});return r.createElement("ul",null,(O=L.value)===null||O===void 0?void 0:O.map(function(U,K){return r.createElement(d,{name:K,schema:N,onlyRenderProperties:!0})}))},{displayName:"ArrayList"}),S=u(function(p){return r.createElement("li",null,"value: ",p.value)}),D={type:"object",properties:{objArr:{type:"array",default:[{value:"t1"},{value:"t2"},{value:"t3"}],"x-component":"ArrayList",properties:{value:{type:"number","x-component":"Value"}}}}},P.abrupt("return",{default:function(){return r.createElement(f,{components:{ArrayList:x,Value:S}},r.createElement(g,{schema:D}))}});case 22:case"end":return P.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-6",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import {
  useFieldSchema,
  Schema,
  RecursionField,
  useField,
  observer,
  connect,
} from '@formily/react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const ArrayList = observer(
  (props) => {
    const field = useField();
    const schema = useFieldSchema();
    // Convert array schema to object schema as array type schema cannot onlyRenderProperties
    const objSchema = new Schema({
      type: 'object',
      properties: schema.properties,
    });
    return (
      <ul>
        {field.value?.map((item, index) => {
          // Array element is object
          return (
            <RecursionField
              name={index}
              schema={objSchema}
              onlyRenderProperties
            />
          );
        })}
      </ul>
    );
  },
  { displayName: 'ArrayList' },
);

const Value = connect((props) => {
  return <li>value: {props.value}</li>;
});

const schema = {
  type: 'object',
  properties: {
    objArr: {
      type: 'array',
      default: [{ value: 't1' }, { value: 't2' }, { value: 't3' }],
      'x-component': 'ArrayList',
      properties: {
        value: {
          type: 'number',
          'x-component': 'Value',
        },
      },
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ ArrayList, Value }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(C,2)),"@formily/react":M,"@nocobase/client":k},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}},"docs-en-us-development-client-ui-schema-extending-demo-7":{component:C.memo(C.lazy(w()(E()().mark(function v(){var s,r,i,h,l,d,c,m,u,I,g,f,x,S,D,A;return E()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.next=2,Promise.resolve().then(e.bind(e,294350));case 2:return s=p.sent,r=s.connect,i=s.observer,h=s.RecursionField,l=s.useField,d=s.useFieldSchema,p.next=10,Promise.resolve().then(e.bind(e,310989));case 10:return c=p.sent,m=c.SchemaComponent,u=c.SchemaComponentProvider,p.next=15,Promise.resolve().then(e.bind(e,970727));case 15:return I=p.sent,g=I.Table,p.next=19,Promise.resolve().then(e.t.bind(e,667294,19));case 19:return f=p.sent,x=f.default,S=i(function(O){var L=O.rowKey,F=l(),N=d(),U=N.reduceProperties(function(W,j){return j["x-component"]==="ArrayTable.Column"&&W.push(j),W},[]),K=U.map(function(W){return{render:function(z,H){return x.createElement(h,{name:H.__path,schema:W,onlyRenderProperties:!0})}}});return x.createElement(g,{rowKey:L,columns:K,dataSource:F.value})},{displayName:"ArrayTable"}),D=r(function(O){return x.createElement("li",null,"value: ",O.value)}),A={type:"object",properties:{objArr:{type:"array",default:[{__path:"0",id:1,value:"t1"},{__path:"1",id:2,value:"t2",children:[{__path:"1.children.0",id:5,value:"t5",parentId:2}]},{__path:"2",id:3,value:"t3",children:[{__path:"2.children.0",id:4,value:"t4",parentId:3,children:[{__path:"2.children.0.children.0",id:6,value:"t6",parentId:4},{__path:"2.children.0.children.1",id:7,value:"t7",parentId:4}]}]}],"x-component":"ArrayTable","x-component-props":{rowKey:"id"},properties:{c1:{type:"void","x-component":"ArrayTable.Column",properties:{value:{type:"string","x-component":"Value"}}}}}}},p.abrupt("return",{default:function(){return x.createElement(u,{components:{ArrayTable:S,Value:D}},x.createElement(m,{schema:A}))}});case 25:case"end":return p.stop()}},v)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-extending-demo-7",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { ArrayField } from '@formily/core';
import {
  connect,
  ISchema,
  observer,
  RecursionField,
  useField,
  useFieldSchema,
} from '@formily/react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';
import { Table, TableColumnType } from 'antd';
import React from 'react';

const ArrayTable = observer(
  (props: any) => {
    const { rowKey } = props;
    const field = useField<ArrayField>();
    const schema = useFieldSchema();
    const columnSchemas = schema.reduceProperties((buf, s) => {
      if (s['x-component'] === 'ArrayTable.Column') {
        buf.push(s);
      }
      return buf;
    }, []);

    const columns = columnSchemas.map((s) => {
      return {
        render: (value, record) => {
          return (
            <RecursionField
              name={record.__path}
              schema={s}
              onlyRenderProperties
            />
          );
        },
      } as TableColumnType<any>;
    });

    return <Table rowKey={rowKey} columns={columns} dataSource={field.value} />;
  },
  { displayName: 'ArrayTable' },
);

const Value = connect((props) => {
  return <li>value: {props.value}</li>;
});

const schema: ISchema = {
  type: 'object',
  properties: {
    objArr: {
      type: 'array',
      default: [
        { __path: '0', id: 1, value: 't1' },
        {
          __path: '1',
          id: 2,
          value: 't2',
          children: [
            {
              __path: '1.children.0',
              id: 5,
              value: 't5',
              parentId: 2,
            },
          ],
        },
        {
          __path: '2',
          id: 3,
          value: 't3',
          children: [
            {
              __path: '2.children.0',
              id: 4,
              value: 't4',
              parentId: 3,
              children: [
                {
                  __path: '2.children.0.children.0',
                  id: 6,
                  value: 't6',
                  parentId: 4,
                },
                {
                  __path: '2.children.0.children.1',
                  id: 7,
                  value: 't7',
                  parentId: 4,
                },
              ],
            },
          ],
        },
      ],
      'x-component': 'ArrayTable',
      'x-component-props': {
        rowKey: 'id',
      },
      properties: {
        c1: {
          type: 'void',
          'x-component': 'ArrayTable.Column',
          properties: {
            value: {
              type: 'string',
              'x-component': 'Value',
            },
          },
        },
      },
    },
  },
};

export default () => {
  return (
    <SchemaComponentProvider components={{ ArrayTable, Value }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},antd:{type:"NPM",value:"5.27.3"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@formily/react":M,"@nocobase/client":k,antd:B,react:t||(t=e.t(C,2))},renderOpts:{compile:function(){var v=w()(E()().mark(function r(){var i,h=arguments;return E()().wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,e.e(49341).then(e.bind(e,349341));case 2:return d.abrupt("return",(i=d.sent).default.apply(i,h));case 3:case"end":return d.stop()}},r)}));function s(){return v.apply(this,arguments)}return s}()}}}},131113:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return M}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(310989),C=e(678135),k=e(294350),B=e(455652),M={"docs-en-us-development-client-ui-schema-initializer-demo-schema-initializer-manager-add":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,253894))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-initializer-demo-schema-initializer-manager-add",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(479864).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(746780).Z}},entry:"index.tsx"},context:{"./app.tsx":C,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-initializer-manager-add/app.tsx":C},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}},"docs-en-us-development-client-ui-schema-initializer-demo-use-schema-initializer-render":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,523404))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-initializer-demo-use-schema-initializer-render",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(539406).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(656328).Z}},entry:"index.tsx"},context:{"./app.tsx":B,"@formily/react":k,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/use-schema-initializer-render/app.tsx":B},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}}}},94710:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return k}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(310989),C=e(294350),k={"docs-en-us-development-client-ui-schema-quick-start-demo-demo1":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,633175))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-quick-start-demo-demo1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(47362).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@nocobase/client":w,react:t||(t=e.t(y,2))},renderOpts:{compile:function(){var B=E()(b()().mark(function T(){var v,s=arguments;return b()().wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,e.e(49341).then(e.bind(e,349341));case 2:return i.abrupt("return",(v=i.sent).default.apply(v,s));case 3:case"end":return i.stop()}},T)}));function M(){return B.apply(this,arguments)}return M}()}},"docs-en-us-development-client-ui-schema-quick-start-demo-demo2":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,796180))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-quick-start-demo-demo2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(931669).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@nocobase/client":w,react:t||(t=e.t(y,2))},renderOpts:{compile:function(){var B=E()(b()().mark(function T(){var v,s=arguments;return b()().wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,e.e(49341).then(e.bind(e,349341));case 2:return i.abrupt("return",(v=i.sent).default.apply(v,s));case 3:case"end":return i.stop()}},T)}));function M(){return B.apply(this,arguments)}return M}()}},"docs-en-us-development-client-ui-schema-quick-start-demo-demo3":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,787299))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-quick-start-demo-demo3",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(959464).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@formily/react":C,"@nocobase/client":w,react:t||(t=e.t(y,2))},renderOpts:{compile:function(){var B=E()(b()().mark(function T(){var v,s=arguments;return b()().wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,e.e(49341).then(e.bind(e,349341));case 2:return i.abrupt("return",(v=i.sent).default.apply(v,s));case 3:case"end":return i.stop()}},T)}));function M(){return B.apply(this,arguments)}return M}()}}}},427546:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return i}});var n=e(912444),b=e.n(n),R=e(272004),E=e.n(R),y=e(731996),w=e.n(y),C=e(626037),k=e.n(C),B=e(15009),M=e.n(B),T=e(899289),v=e.n(T),s=e(667294),r=e(310989),i={"docs-en-us-development-client-ui-schema-rendering-demo-0":{component:s.memo(s.lazy(v()(M()().mark(function h(){var l,d,c,m,u,I,g;return M()().wrap(function(x){for(;;)switch(x.prev=x.next){case 0:return x.next=2,Promise.resolve().then(e.t.bind(e,667294,19));case 2:return l=x.sent,d=l.default,x.next=6,Promise.resolve().then(e.bind(e,310989));case 6:return c=x.sent,m=c.SchemaComponent,u=c.SchemaComponentProvider,I=function(){return d.createElement("h1",null,"Hello, world!")},g={type:"void",name:"hello","x-component":"Hello"},x.abrupt("return",{default:function(){return d.createElement(u,{components:{Hello:I}},d.createElement(m,{schema:g}))}});case 12:case"end":return x.stop()}},h)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-rendering-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import React from 'react';
import { SchemaComponent, SchemaComponentProvider } from '@nocobase/client';

const Hello = () => <h1>Hello, world!</h1>;

const schema = {
  type: 'void',
  name: 'hello',
  'x-component': 'Hello',
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Hello }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};`},react:{type:"NPM",value:"18.3.1"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"}},entry:"index.tsx"},context:{react:t||(t=e.t(s,2)),"@nocobase/client":r},renderOpts:{compile:function(){var h=v()(M()().mark(function d(){var c,m=arguments;return M()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,e.e(49341).then(e.bind(e,349341));case 2:return I.abrupt("return",(c=I.sent).default.apply(c,m));case 3:case"end":return I.stop()}},d)}));function l(){return h.apply(this,arguments)}return l}()}},"docs-en-us-development-client-ui-schema-rendering-demo-1":{component:s.memo(s.lazy(v()(M()().mark(function h(){var l,d,c,m,u,I,g,f,x,S,D;return M()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:return P.next=2,Promise.resolve().then(e.bind(e,310989));case 2:return l=P.sent,d=l.Application,c=l.Plugin,m=l.SchemaComponent,u=l.SchemaComponentProvider,P.next=9,Promise.resolve().then(e.t.bind(e,667294,19));case 9:return I=P.sent,g=I.default,f=function(){return g.createElement("h1",null,"Hello, world!")},x=function(){return g.createElement(m,{schema:{name:"hello",type:"void","x-component":"Hello"}})},S=function(p){w()(L,p);var O=k()(L);function L(){return b()(this,L),O.apply(this,arguments)}return E()(L,[{key:"load",value:function(){var F=v()(M()().mark(function U(){return M()().wrap(function(W){for(;;)switch(W.prev=W.next){case 0:this.app.addProvider(u,{components:this.app.components,scopes:this.app.scopes}),this.app.addComponents({Hello:f}),this.router.add("hello",{path:"/",Component:x});case 3:case"end":return W.stop()}},U,this)}));function N(){return F.apply(this,arguments)}return N}()}]),L}(c),D=new d({router:{type:"memory"},plugins:[S]}),P.abrupt("return",{default:D.getRootComponent()});case 16:case"end":return P.stop()}},h)})))),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-rendering-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import {
  Application,
  Plugin,
  SchemaComponent,
  SchemaComponentProvider,
} from '@nocobase/client';
import React from 'react';

const Hello = () => <h1>Hello, world!</h1>;

const HelloPage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'hello',
        type: 'void',
        'x-component': 'Hello',
      }}
    />
  );
};

class PluginHello extends Plugin {
  async load() {
    this.app.addProvider(SchemaComponentProvider, {
      components: this.app.components,
      scopes: this.app.scopes,
    });
    this.app.addComponents({ Hello });
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
  },
  plugins: [PluginHello],
});

export default app.getRootComponent();`},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"@nocobase/client":r,react:t||(t=e.t(s,2))},renderOpts:{compile:function(){var h=v()(M()().mark(function d(){var c,m=arguments;return M()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,e.e(49341).then(e.bind(e,349341));case 2:return I.abrupt("return",(c=I.sent).default.apply(c,m));case 3:case"end":return I.stop()}},d)}));function l(){return h.apply(this,arguments)}return l}()}}}},322128:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return r}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(310989),C=e(553730),k=e(362860),B=e(294350),M=e(970727),T=e(87559),v=e(488321),s=e(673548),r={"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-manager-add-item":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,518884))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-manager-add-item",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(679937).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},"./app.tsx":{type:"FILE",value:e(758387).Z},react:{type:"NPM",value:"18.3.1"}},entry:"index.tsx"},context:{"./app.tsx":C,"@nocobase/client":w,"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-settings-manager-add-item/app.tsx":C,react:t||(t=e.t(y,2))},renderOpts:{compile:function(){var i=E()(b()().mark(function l(){var d,c=arguments;return b()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,e.e(49341).then(e.bind(e,349341));case 2:return u.abrupt("return",(d=u.sent).default.apply(d,c));case 3:case"end":return u.stop()}},l)}));function h(){return i.apply(this,arguments)}return h}()}},"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-manager-add":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,169567))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-manager-add",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(896469).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(756202).Z}},entry:"index.tsx"},context:{"./app.tsx":k,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-settings-manager-add/app.tsx":k},renderOpts:{compile:function(){var i=E()(b()().mark(function l(){var d,c=arguments;return b()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,e.e(49341).then(e.bind(e,349341));case 2:return u.abrupt("return",(d=u.sent).default.apply(d,c));case 3:case"end":return u.stop()}},l)}));function h(){return i.apply(this,arguments)}return h}()}},"docs-en-us-development-client-ui-schema-settings-demo-use-schema-settings-render":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,186601))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-settings-demo-use-schema-settings-render",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(362913).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},antd:{type:"NPM",value:"5.27.3"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(395858).Z}},entry:"index.tsx"},context:{"./app.tsx":T,"@formily/react":B,"@nocobase/client":w,antd:M,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/use-schema-settings-render/app.tsx":T},renderOpts:{compile:function(){var i=E()(b()().mark(function l(){var d,c=arguments;return b()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,e.e(49341).then(e.bind(e,349341));case 2:return u.abrupt("return",(d=u.sent).default.apply(d,c));case 3:case"end":return u.stop()}},l)}));function h(){return i.apply(this,arguments)}return h}()}},"docs-en-us-development-client-ui-schema-settings-demo-button":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,144075))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-settings-demo-button",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(254922).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},antd:{type:"NPM",value:"5.27.3"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(678534).Z}},entry:"index.tsx"},context:{"./app.tsx":v,"@formily/react":B,"@nocobase/client":w,antd:M,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-toolbar-basic/app.tsx":v},renderOpts:{compile:function(){var i=E()(b()().mark(function l(){var d,c=arguments;return b()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,e.e(49341).then(e.bind(e,349341));case 2:return u.abrupt("return",(d=u.sent).default.apply(d,c));case 3:case"end":return u.stop()}},l)}));function h(){return i.apply(this,arguments)}return h}()}},"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-basic":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,227507))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-settings-demo-schema-settings-basic",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(387325).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(62932).Z}},entry:"index.tsx"},context:{"./app.tsx":s,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-settings-basic/app.tsx":s},renderOpts:{compile:function(){var i=E()(b()().mark(function l(){var d,c=arguments;return b()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,e.e(49341).then(e.bind(e,349341));case 2:return u.abrupt("return",(d=u.sent).default.apply(d,c));case 3:case"end":return u.stop()}},l)}));function h(){return i.apply(this,arguments)}return h}()}}}},74870:function(o,a,e){"use strict";var t;e.r(a),e.d(a,{demos:function(){return M}});var n=e(15009),b=e.n(n),R=e(899289),E=e.n(R),y=e(667294),w=e(310989),C=e(488321),k=e(294350),B=e(970727),M={"docs-en-us-development-client-ui-schema-toolbar-demo-schema-toolbar-basic":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,262722))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-toolbar-demo-schema-toolbar-basic",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(234573).Z},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(678534).Z}},entry:"index.tsx"},context:{"./app.tsx":C,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-toolbar-basic/app.tsx":C},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}},"docs-en-us-development-client-ui-schema-toolbar-demo-custom":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,80267))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-toolbar-demo-custom",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(985652).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(678534).Z}},entry:"index.tsx"},context:{"./app.tsx":C,"@formily/react":k,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-toolbar-basic/app.tsx":C},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}},"docs-en-us-development-client-ui-schema-toolbar-demo-grid":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,77136))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-toolbar-demo-grid",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(107174).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(678534).Z}},entry:"index.tsx"},context:{"./app.tsx":C,"@formily/react":k,"@nocobase/client":w,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-toolbar-basic/app.tsx":C},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}},"docs-en-us-development-client-ui-schema-toolbar-demo-button":{component:y.memo(y.lazy(function(){return e.e(52433).then(e.bind(e,144075))})),asset:{type:"BLOCK",id:"docs-en-us-development-client-ui-schema-toolbar-demo-button",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:e(254922).Z},"@formily/react":{type:"NPM",value:"2.3.7"},"@nocobase/client":{type:"NPM",value:"0.21.0-alpha.16"},antd:{type:"NPM",value:"5.27.3"},react:{type:"NPM",value:"18.3.1"},"./app.tsx":{type:"FILE",value:e(678534).Z}},entry:"index.tsx"},context:{"./app.tsx":C,"@formily/react":k,"@nocobase/client":w,antd:B,react:t||(t=e.t(y,2)),"/home/runner/work/docs/docs/docs/en-US/development/client/ui-schema/demos/schema-toolbar-basic/app.tsx":C},renderOpts:{compile:function(){var T=E()(b()().mark(function s(){var r,i=arguments;return b()().wrap(function(l){for(;;)switch(l.prev=l.next){case 0:return l.next=2,e.e(49341).then(e.bind(e,349341));case 2:return l.abrupt("return",(r=l.sent).default.apply(r,i));case 3:case"end":return l.stop()}},s)}));function v(){return T.apply(this,arguments)}return v}()}}}},2384:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},361351:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},710878:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},643684:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},573922:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},647093:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},795418:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},735229:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},109900:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},662904:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},474315:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},624137:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},619726:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},622258:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},858569:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},33155:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},558910:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},146131:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},835984:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},715285:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},261618:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},878223:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},172133:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},778499:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},914877:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},243304:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},339818:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},993276:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},231717:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},939849:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},169777:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},297523:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},206852:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},216390:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},902743:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},572942:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},503600:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},604245:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},799987:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},231672:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},904163:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},620015:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},586807:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},812424:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},390259:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},161190:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},750226:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},552935:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},695435:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},714372:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},50346:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},823085:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},241853:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},543792:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},141044:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},880616:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},511724:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},24073:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},991079:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},93774:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},980071:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},214071:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},121880:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},744047:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},388840:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},989998:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},867611:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},725912:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},581923:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},149300:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},999359:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},890242:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},268839:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},770767:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},742027:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},223585:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},578126:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},693693:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},754302:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},248588:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},526192:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},137211:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},658986:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},423140:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},133243:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},678816:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},249190:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},489993:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},50006:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},595237:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},940064:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},784011:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},319409:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},370861:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},186934:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},253082:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},538829:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},699992:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},820383:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},202365:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},681700:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},979747:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},785430:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},718431:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},572829:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},498729:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},598138:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},380618:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},624118:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},759210:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},78474:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},798901:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},548049:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},847801:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},892834:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},719067:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},899050:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},807070:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},786547:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},434941:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},915937:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},160649:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},689465:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},1406:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},280270:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},409352:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},153308:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},333574:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},666551:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},831696:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},295689:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},559939:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},668765:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},632935:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},593109:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},161446:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},747716:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},56627:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},117230:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},884098:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},255037:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},949577:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},317942:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},920102:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},228357:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},994965:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},329397:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},205742:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},687427:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},235815:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},279108:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},54912:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},757903:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},633072:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},111796:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},501108:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},697811:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},675674:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},113037:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},82577:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},77691:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},352052:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},176761:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},147054:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},414733:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},848136:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},924182:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},734045:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},498481:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},741327:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},413139:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},759751:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},714456:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},771379:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},376942:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},496854:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},899059:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},933871:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},988519:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},771501:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},253998:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},29875:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},478840:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},370262:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},6009:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},479372:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},976437:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},58067:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},27263:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},983240:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},382736:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},575326:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},218523:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},951451:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},428264:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},1927:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},942198:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},593705:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},508707:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},421767:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},183019:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},3765:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},876606:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},358903:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},129260:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},938242:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},633198:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},175317:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},660913:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},515814:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},853538:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},502312:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},212623:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},634306:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},757771:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},335800:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},722907:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},709319:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},293009:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},627751:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},606818:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},117770:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},115813:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},13946:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},951697:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},912661:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},48844:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},387389:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},381114:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},554475:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},667434:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},298543:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},184695:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},856352:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},827754:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},714040:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},29833:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},314228:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},844363:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},664339:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},630610:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},521635:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},125969:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},922684:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},266415:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},617196:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},570599:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},218004:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},846402:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},100608:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},721531:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},917887:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},809910:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},329500:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},555400:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},247074:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},430389:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},4771:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},785104:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},392082:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},345415:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},83052:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},619826:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},58410:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},260139:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},95743:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},878969:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},833568:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},705934:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},544247:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},311480:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},204545:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},133975:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},288417:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},530508:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},200296:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},197402:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},83277:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},222598:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},27892:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},857926:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},46903:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},403002:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},630441:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},476258:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},793908:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},800912:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},622668:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},1225:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},734005:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},759079:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},186791:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},908460:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},587605:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},879826:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},654543:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},356335:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},548696:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},319430:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},107182:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},849336:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},217465:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},140511:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},138181:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},788396:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},512211:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},591752:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},322406:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},904824:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},662891:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},936124:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},89135:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},266227:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},107380:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},840028:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},197405:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},92437:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},541083:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},949448:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},321065:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},500001:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},310607:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},296250:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},944843:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},88583:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},167982:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},715990:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},148109:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},107336:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},680531:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},511835:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},125118:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},527677:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},65057:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},622987:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},87953:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},607374:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},620766:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},819815:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},714849:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},778374:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},747258:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},292184:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},77185:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},823874:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},280224:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},501865:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},838437:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},131271:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},847932:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},510653:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},555002:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},970388:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},501791:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},833722:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},824133:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},813978:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},975403:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},726366:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},124313:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},379688:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},434798:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},885262:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},104012:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},883659:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},37041:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},94353:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},909371:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},157247:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},111288:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},176026:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},457660:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},60417:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},891155:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},19493:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},13056:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},364682:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},429245:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},12410:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},915214:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},774375:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},614937:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},529886:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},162919:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},127911:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},535320:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},189409:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},831175:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},472402:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},488428:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},879402:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},543718:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},757083:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},974390:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},326060:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},356271:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},498064:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},831893:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},715756:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},373143:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},92483:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},299705:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},262618:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},54860:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},786339:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},916373:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},188203:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},152480:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},855526:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},452721:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},95555:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},966939:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},136889:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},46454:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},853586:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},216656:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},218284:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},45147:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},295121:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},434261:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},798179:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},747045:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},853833:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},635287:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},364963:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},558284:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},66336:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},8630:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},406641:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},243940:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},162467:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},955674:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},745633:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},76145:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},473235:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},977736:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},135499:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},779718:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},637642:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},488249:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},284230:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},717310:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},379001:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},475515:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},47897:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},408535:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},344678:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},982111:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},467667:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},302329:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},681456:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},634223:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},905055:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},965827:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},792438:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},461979:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},36843:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},288102:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},309817:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},206055:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},723847:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},78116:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},923750:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},653884:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},806174:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},599346:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},379007:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},245822:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},877490:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},387027:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},648212:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},807284:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},379303:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},349010:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},961338:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},166911:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},508121:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},320194:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},475063:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},63870:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},174800:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},846923:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},601876:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},770157:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},103875:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},551825:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},502861:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},953047:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},970042:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},314128:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},604e3:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},901879:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},341771:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},418156:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},782017:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},685319:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},373231:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},191565:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},238151:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},301092:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},844484:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},305460:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},648425:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},15377:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},218353:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},581626:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},256779:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},536297:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},683789:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},302215:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},90382:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},186336:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},34089:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},133797:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},303572:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},410986:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},824964:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},33688:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},116160:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},519001:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},4889:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},358456:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},345671:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},470924:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},363377:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},123160:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},561026:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},256103:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},190534:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},701238:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},361144:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},870928:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},789981:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},17134:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},180316:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},671528:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},101249:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},52034:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},981683:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},627977:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},100678:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},888213:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},306822:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},187525:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},488936:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},656956:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},532783:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},383572:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},655438:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},640033:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},636879:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},475371:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},574883:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},124711:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},293685:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},386113:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},349951:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},941820:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},81110:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},774687:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},972511:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},152516:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},427826:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},731779:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},458401:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},905383:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},860586:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},648658:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},20878:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},856893:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},442403:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},734639:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},750311:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},171529:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},759213:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},559036:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},534800:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},979507:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},322730:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},492664:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},804107:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},603098:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},357054:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},678387:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},354228:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},623284:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},397852:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},452255:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},86850:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},563557:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},554882:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},653385:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},469649:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},129031:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},24793:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},366446:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},918730:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},57443:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},303109:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},495181:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},403933:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},917157:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},513872:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},499863:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},964321:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},202620:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},960999:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},905418:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},984568:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},120456:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},205914:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},937885:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},737574:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},714010:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},969908:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},140921:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},456278:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},397182:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},814271:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},839122:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},850365:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},12905:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},414851:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},616198:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},60390:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},673091:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},425657:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},545128:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},191097:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},86373:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},281514:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},658038:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},177917:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},454686:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},42836:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},168574:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},809067:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},384821:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},710637:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},923601:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},68531:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},135886:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},755073:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},421988:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},593927:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},672717:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},298363:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},773481:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},511191:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},811768:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},922774:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},981361:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},910650:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},518110:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},974847:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},95491:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},251792:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},593866:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},83718:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},522229:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},528075:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},332862:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},502320:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},517633:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},962695:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return h}});var t=e(912444),n=e.n(t),b=e(272004),R=e.n(b),E=e(731996),y=e.n(E),w=e(626037),C=e.n(w),k=e(12665),B=e.n(k),M=e(15009),T=e.n(M),v=e(899289),s=e.n(v),r=e(667294),i=e(639711),h={"docs-en-us-welcome-release-v-0150-changelog-demo-0":{component:r.memo(r.lazy(s()(T()().mark(function l(){return T()().wrap(function(c){for(;;)switch(c.prev=c.next){case 0:SettingsCenterProvider;case 1:case"end":return c.stop()}},l)})))),asset:{type:"BLOCK",id:"docs-en-us-welcome-release-v-0150-changelog-demo-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"<SettingsCenterProvider\n  settings={{\n    hello: {\n      // This `hello` corresponds to `hello` in `pm.hello.tab1`\n      tabs: {\n        tab1: {\n          // Here, `tab1` corresponds to `tab1` in `pm.hello.tab1`\n        },\n      },\n    },\n  }}\n></SettingsCenterProvider>"}},entry:"index.tsx"},context:{},renderOpts:{compile:function(){var l=s()(T()().mark(function c(){var m,u=arguments;return T()().wrap(function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,e.e(49341).then(e.bind(e,349341));case 2:return g.abrupt("return",(m=g.sent).default.apply(m,u));case 3:case"end":return g.stop()}},c)}));function d(){return l.apply(this,arguments)}return d}()}},"docs-en-us-welcome-release-v-0150-changelog-demo-1":{component:r.memo(r.lazy(s()(T()().mark(function l(){var d;return T()().wrap(function(m){for(;;)switch(m.prev=m.next){case 0:d=r.memo(function(u){return r.createElement(SettingsCenterProvider,{settings:{hello:{title:"Hello",icon:"ApiOutlined",tabs:{tab1:{title:"Hello tab1",component:HelloPluginSettingPage1},tab2:{title:"Hello tab2",component:HelloPluginSettingPage2}}}}},u.children)});case 1:case"end":return m.stop()}},l)})))),asset:{type:"BLOCK",id:"docs-en-us-welcome-release-v-0150-changelog-demo-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`const HelloProvider = React.memo(props => {
  return (
    <SettingsCenterProvider
      settings={{
        hello: {
          title: "Hello",
          icon: "ApiOutlined",
          tabs: {
            tab1: {
              title: "Hello tab1",
              component: HelloPluginSettingPage1,
            },
            tab2: {
              title: "Hello tab2",
              component: HelloPluginSettingPage2,
            },
          },
        },
      }}
    >
      {props.children}
    </SettingsCenterProvider>
  );
});`}},entry:"index.tsx"},context:{},renderOpts:{compile:function(){var l=s()(T()().mark(function c(){var m,u=arguments;return T()().wrap(function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,e.e(49341).then(e.bind(e,349341));case 2:return g.abrupt("return",(m=g.sent).default.apply(m,u));case 3:case"end":return g.stop()}},c)}));function d(){return l.apply(this,arguments)}return d}()}},"docs-en-us-welcome-release-v-0150-changelog-demo-2":{component:r.memo(r.lazy(s()(T()().mark(function l(){var d,c,m;return T()().wrap(function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,Promise.resolve().then(e.bind(e,639711));case 2:d=I.sent,c=d.Outlet,m=function(g){y()(x,g);var f=C()(x);function x(){return n()(this,x),f.apply(this,arguments)}return R()(x,[{key:"load",value:function(){var S=s()(T()().mark(function A(){return T()().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:this.app.pluginSettingsManager.add("hello",{title:"Hello",icon:"ApiOutlined",Component:c}),this.app.pluginSettingsManager.add("hello.tab1",{title:"Hello tab1",Component:HelloPluginSettingPage1}),this.app.pluginSettingsManager.add("hello.tab2",{title:"Hello tab2",Component:HelloPluginSettingPage1});case 3:case"end":return p.stop()}},A,this)}));function D(){return S.apply(this,arguments)}return D}()}]),x}(B()(Plugin));case 5:case"end":return I.stop()}},l)})))),asset:{type:"BLOCK",id:"docs-en-us-welcome-release-v-0150-changelog-demo-2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`import { Outlet } from "react-router-dom";

class HelloPlugin extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add("hello", {
      title: "Hello",
      icon: "ApiOutlined",
      Component: Outlet,
    });

    this.app.pluginSettingsManager.add("hello.tab1", {
      title: "Hello tab1",
      Component: HelloPluginSettingPage1,
    });

    this.app.pluginSettingsManager.add("hello.tab2", {
      title: "Hello tab2",
      Component: HelloPluginSettingPage1,
    });
  }
}`},"react-router-dom":{type:"NPM",value:"6.3.0"}},entry:"index.tsx"},context:{"react-router-dom":i},renderOpts:{compile:function(){var l=s()(T()().mark(function c(){var m,u=arguments;return T()().wrap(function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,e.e(49341).then(e.bind(e,349341));case 2:return g.abrupt("return",(m=g.sent).default.apply(m,u));case 3:case"end":return g.stop()}},c)}));function d(){return l.apply(this,arguments)}return d}()}},"docs-en-us-welcome-release-v-0150-changelog-demo-3":{component:r.memo(r.lazy(s()(T()().mark(function l(){var d,c;return T()().wrap(function(u){for(;;)switch(u.prev=u.next){case 0:d=app.pluginSettingsManager.getRouteName("hello"),c=app.pluginSettingsManager.getRoutePath("hello");case 2:case"end":return u.stop()}},l)})))),asset:{type:"BLOCK",id:"docs-en-us-welcome-release-v-0150-changelog-demo-3",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:`const baseName = app.pluginSettingsManager.getRouteName("hello");
// admin.settings.hello
const basePath = app.pluginSettingsManager.getRoutePath("hello"); // /admin/settings.
// /admin/settings/hello`}},entry:"index.tsx"},context:{},renderOpts:{compile:function(){var l=s()(T()().mark(function c(){var m,u=arguments;return T()().wrap(function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,e.e(49341).then(e.bind(e,349341));case 2:return g.abrupt("return",(m=g.sent).default.apply(m,u));case 3:case"end":return g.stop()}},c)}));function d(){return l.apply(this,arguments)}return d}()}}}},782153:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},994925:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},238713:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},90510:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},308654:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},673003:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},517959:function(o,a,e){"use strict";e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},678135:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return h}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=function(l){T()(c,l);var d=s()(c);function c(){return C()(this,c),d.apply(this,arguments)}return B()(c,[{key:"load",value:function(){var m=y()(R()().mark(function I(){return R()().wrap(function(f){for(;;)switch(f.prev=f.next){case 0:this.router.add("home",{path:"/",Component:"HomePage"});case 1:case"end":return f.stop()}},I,this)}));function u(){return m.apply(this,arguments)}return u}()}]),c}(r.Plugin);function h(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},d=l.plugins,c=d===void 0?[]:d;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[i].concat(n()(c))})}},673548:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return c}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=e(667294),h=e(785893),l=function(){return(0,h.jsx)("div",{children:(0,h.jsx)(r.SchemaComponent,{schema:{name:"hello",type:"void","x-decorator":"CardItem","x-decorator-props":{title:"Card",bordered:!0},"x-settings":"mySettings","x-component":"h1","x-content":"Hello, World!"}})})},d=function(m){T()(I,m);var u=s()(I);function I(){return C()(this,I),u.apply(this,arguments)}return B()(I,[{key:"load",value:function(){var g=y()(R()().mark(function x(){var S;return R()().wrap(function(A){for(;;)switch(A.prev=A.next){case 0:S=new r.SchemaSettings({name:"mySettings",items:[]}),this.schemaSettingsManager.add(S),this.app.addComponents({CardItem:r.CardItem,Input:r.Input,FormItem:r.FormItem}),this.router.add("hello",{path:"/",Component:l});case 4:case"end":return A.stop()}},x,this)}));function f(){return g.apply(this,arguments)}return f}()}]),I}(r.Plugin);function c(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},u=m.plugins,I=u===void 0?[]:u;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[d].concat(n()(I))})}},553730:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return c}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=e(667294),h=e(785893),l=function(){return(0,h.jsx)("div",{children:(0,h.jsx)(r.SchemaComponent,{schema:{name:"hello",type:"void","x-decorator":"CardItem","x-decorator-props":{title:"Card",bordered:!0},"x-settings":"mySettings","x-component":"h1","x-content":"Hello, World!"}})})},d=function(m){T()(I,m);var u=s()(I);function I(){return C()(this,I),u.apply(this,arguments)}return B()(I,[{key:"load",value:function(){var g=y()(R()().mark(function x(){var S;return R()().wrap(function(A){for(;;)switch(A.prev=A.next){case 0:S=new r.SchemaSettings({name:"mySettings",items:[{type:"item",name:"edit",useComponentProps:function(){return{title:"Edit",onClick:function(){}}}}]}),this.schemaSettingsManager.add(S),this.app.addComponents({CardItem:r.CardItem}),this.router.add("hello",{path:"/",Component:l});case 4:case"end":return A.stop()}},x,this)}));function f(){return g.apply(this,arguments)}return f}()}]),I}(r.Plugin);function c(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},u=m.plugins,I=u===void 0?[]:u;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[d].concat(n()(I))})}},362860:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return h}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=function(l){T()(c,l);var d=s()(c);function c(){return C()(this,c),d.apply(this,arguments)}return B()(c,[{key:"load",value:function(){var m=y()(R()().mark(function I(){return R()().wrap(function(f){for(;;)switch(f.prev=f.next){case 0:this.router.add("home",{path:"/",Component:"HomePage"});case 1:case"end":return f.stop()}},I,this)}));function u(){return m.apply(this,arguments)}return u}()}]),c}(r.Plugin);function h(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},d=l.plugins,c=d===void 0?[]:d;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[i].concat(n()(c))})}},488321:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return u}});var t=e(719632),n=e.n(t),b=e(97857),R=e.n(b),E=e(513769),y=e.n(E),w=e(15009),C=e.n(w),k=e(899289),B=e.n(k),M=e(912444),T=e.n(M),v=e(272004),s=e.n(v),r=e(731996),i=e.n(r),h=e(626037),l=e.n(h),d=e(310989),c=["plugins"],m=function(I){i()(f,I);var g=l()(f);function f(){return T()(this,f),g.apply(this,arguments)}return s()(f,[{key:"load",value:function(){var x=B()(C()().mark(function D(){return C()().wrap(function(P){for(;;)switch(P.prev=P.next){case 0:this.router.add("home",{path:"/",Component:"HomePage"});case 1:case"end":return P.stop()}},D,this)}));function S(){return x.apply(this,arguments)}return S}()}]),f}(d.Plugin);function u(){var I=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},g=I.plugins,f=g===void 0?[]:g,x=y()(I,c);return new d.Application(R()(R()({router:{type:"memory",initialEntries:["/"]},designable:!0},x),{},{plugins:[m].concat(n()(f))}))}},455652:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return h}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=function(l){T()(c,l);var d=s()(c);function c(){return C()(this,c),d.apply(this,arguments)}return B()(c,[{key:"load",value:function(){var m=y()(R()().mark(function I(){var g;return R()().wrap(function(x){for(;;)switch(x.prev=x.next){case 0:this.router.add("home",{path:"/",Component:"HomePage"}),g=new r.SchemaInitializer({name:"myInitializer",title:"Add block",items:[{name:"helloBlock",type:"item",useComponentProps:function(){var D=(0,r.useSchemaInitializer)(),A=D.insert;return{title:"Hello",onClick:function(){A({type:"void","x-decorator":"CardItem","x-component":"h1","x-content":"Hello, world!"})}}}}]}),this.schemaInitializerManager.add(g);case 3:case"end":return x.stop()}},I,this)}));function u(){return m.apply(this,arguments)}return u}()}]),c}(r.Plugin);function h(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},d=l.plugins,c=d===void 0?[]:d;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[i].concat(n()(c))})}},87559:function(o,a,e){"use strict";e.r(a),e.d(a,{createApp:function(){return h}});var t=e(719632),n=e.n(t),b=e(15009),R=e.n(b),E=e(899289),y=e.n(E),w=e(912444),C=e.n(w),k=e(272004),B=e.n(k),M=e(731996),T=e.n(M),v=e(626037),s=e.n(v),r=e(310989),i=function(l){T()(c,l);var d=s()(c);function c(){return C()(this,c),d.apply(this,arguments)}return B()(c,[{key:"load",value:function(){var m=y()(R()().mark(function I(){var g;return R()().wrap(function(x){for(;;)switch(x.prev=x.next){case 0:this.router.add("home",{path:"/",Component:"HomePage"}),g=new r.SchemaSettings({name:"mySettings",items:[{type:"item",name:"edit",useComponentProps:function(){return{title:"Edit",onClick:function(){}}}}]}),this.schemaSettingsManager.add(g);case 3:case"end":return x.stop()}},I,this)}));function u(){return m.apply(this,arguments)}return u}()}]),c}(r.Plugin);function h(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},d=l.plugins,c=d===void 0?[]:d;return new r.Application({router:{type:"memory",initialEntries:["/"]},designable:!0,plugins:[i].concat(n()(c))})}},240408:function(o,a,e){var t={"./af":[915903,15903],"./af.js":[915903,15903],"./am":[329911,29911],"./am.js":[329911,29911],"./ar":[963939,63939],"./ar-dz":[47200,47200],"./ar-dz.js":[47200,47200],"./ar-iq":[487719,87719],"./ar-iq.js":[487719,87719],"./ar-kw":[62376,62376],"./ar-kw.js":[62376,62376],"./ar-ly":[848540,48540],"./ar-ly.js":[848540,48540],"./ar-ma":[996817,96817],"./ar-ma.js":[996817,96817],"./ar-sa":[511573,11573],"./ar-sa.js":[511573,11573],"./ar-tn":[599339,99339],"./ar-tn.js":[599339,99339],"./ar.js":[963939,63939],"./az":[888092,88092],"./az.js":[888092,88092],"./be":[960504,60504],"./be.js":[960504,60504],"./bg":[119091,19091],"./bg.js":[119091,19091],"./bi":[419149,19149],"./bi.js":[419149,19149],"./bm":[415287,15287],"./bm.js":[415287,15287],"./bn":[35254,35254],"./bn-bd":[654067,54067],"./bn-bd.js":[654067,54067],"./bn.js":[35254,35254],"./bo":[852502,52502],"./bo.js":[852502,52502],"./br":[308864,8864],"./br.js":[308864,8864],"./bs":[604502,4502],"./bs.js":[604502,4502],"./ca":[333646,33646],"./ca.js":[333646,33646],"./cs":[498507,98507],"./cs.js":[498507,98507],"./cv":[916636,16636],"./cv.js":[916636,16636],"./cy":[228792,28792],"./cy.js":[228792,28792],"./da":[917427,86207],"./da.js":[917427,86207],"./de":[180790,80790],"./de-at":[373237,73237],"./de-at.js":[373237,73237],"./de-ch":[716148,16148],"./de-ch.js":[716148,16148],"./de.js":[180790,80790],"./dv":[911794,11794],"./dv.js":[911794,11794],"./el":[565423,65423],"./el.js":[565423,65423],"./en":[125054,25054],"./en-au":[885109,85109],"./en-au.js":[885109,85109],"./en-ca":[55105,55105],"./en-ca.js":[55105,55105],"./en-gb":[899517,99517],"./en-gb.js":[899517,99517],"./en-ie":[230758,30758],"./en-ie.js":[230758,30758],"./en-il":[995805,95805],"./en-il.js":[995805,95805],"./en-in":[388529,88529],"./en-in.js":[388529,88529],"./en-nz":[250302,50302],"./en-nz.js":[250302,50302],"./en-sg":[935941,35941],"./en-sg.js":[935941,35941],"./en-tt":[746183,46183],"./en-tt.js":[746183,46183],"./en.js":[125054,25054],"./eo":[474990,74990],"./eo.js":[474990,74990],"./es":[667763,67763],"./es-do":[603864,3864],"./es-do.js":[603864,3864],"./es-mx":[337118,37118],"./es-mx.js":[337118,37118],"./es-pr":[723521,23521],"./es-pr.js":[723521,23521],"./es-us":[636165,36165],"./es-us.js":[636165,36165],"./es.js":[667763,67763],"./et":[599670,99670],"./et.js":[599670,99670],"./eu":[946629,46629],"./eu.js":[946629,46629],"./fa":[596953,96953],"./fa.js":[596953,96953],"./fi":[847822,47822],"./fi.js":[847822,47822],"./fo":[269197,69197],"./fo.js":[269197,69197],"./fr":[496023,96023],"./fr-ca":[477989,77989],"./fr-ca.js":[477989,77989],"./fr-ch":[454254,54254],"./fr-ch.js":[454254,54254],"./fr.js":[496023,96023],"./fy":[793220,93220],"./fy.js":[793220,93220],"./ga":[47467,47467],"./ga.js":[47467,47467],"./gd":[754855,54855],"./gd.js":[754855,54855],"./gl":[290229,90229],"./gl.js":[290229,90229],"./gom-latn":[646312,46312],"./gom-latn.js":[646312,46312],"./gu":[287632,87632],"./gu.js":[287632,87632],"./he":[645418,45418],"./he.js":[645418,45418],"./hi":[577573,77573],"./hi.js":[577573,77573],"./hr":[496257,96257],"./hr.js":[496257,96257],"./ht":[698889,98889],"./ht.js":[698889,98889],"./hu":[968562,68562],"./hu.js":[968562,68562],"./hy-am":[38242,38242],"./hy-am.js":[38242,38242],"./id":[83783,83783],"./id.js":[83783,83783],"./index.d":[246990,46990],"./index.d.ts":[246990,46990],"./is":[998980,98980],"./is.js":[998980,98980],"./it":[715551,15551],"./it-ch":[283706,83706],"./it-ch.js":[283706,83706],"./it.js":[715551,15551],"./ja":[176831,76831],"./ja.js":[176831,76831],"./jv":[542641,42641],"./jv.js":[542641,42641],"./ka":[246622,46622],"./ka.js":[246622,46622],"./kk":[32921,32921],"./kk.js":[32921,32921],"./km":[845567,45567],"./km.js":[845567,45567],"./kn":[321113,21113],"./kn.js":[321113,21113],"./ko":[919132,19132],"./ko.js":[919132,19132],"./ku":[994888,94888],"./ku.js":[994888,94888],"./ky":[660466,60466],"./ky.js":[660466,60466],"./lb":[891796,91796],"./lb.js":[891796,91796],"./lo":[468894,68894],"./lo.js":[468894,68894],"./lt":[78768,78768],"./lt.js":[78768,78768],"./lv":[630953,80940],"./lv.js":[630953,80940],"./me":[818066,18066],"./me.js":[818066,18066],"./mi":[268602,68602],"./mi.js":[268602,68602],"./mk":[951560,51560],"./mk.js":[951560,51560],"./ml":[404017,4017],"./ml.js":[404017,4017],"./mn":[894717,94717],"./mn.js":[894717,94717],"./mr":[15473,15473],"./mr.js":[15473,15473],"./ms":[505742,5742],"./ms-my":[177387,77387],"./ms-my.js":[177387,77387],"./ms.js":[505742,5742],"./mt":[828477,28477],"./mt.js":[828477,28477],"./my":[462966,62966],"./my.js":[462966,62966],"./nb":[119682,19682],"./nb.js":[119682,19682],"./ne":[14149,14149],"./ne.js":[14149,14149],"./nl":[899182,99182],"./nl-be":[737496,37496],"./nl-be.js":[737496,37496],"./nl.js":[899182,99182],"./nn":[992722,92722],"./nn.js":[992722,92722],"./oc-lnc":[776159,76159],"./oc-lnc.js":[776159,76159],"./pa-in":[135914,35914],"./pa-in.js":[135914,35914],"./pl":[581987,81987],"./pl.js":[581987,81987],"./pt":[515001,15001],"./pt-br":[457548,57548],"./pt-br.js":[457548,57548],"./pt.js":[515001,15001],"./rn":[300123,123],"./rn.js":[300123,123],"./ro":[318146,18146],"./ro.js":[318146,18146],"./ru":[270600,70600],"./ru.js":[270600,70600],"./rw":[206509,6509],"./rw.js":[206509,6509],"./sd":[465437,65437],"./sd.js":[465437,65437],"./se":[200772,772],"./se.js":[200772,772],"./si":[277109,77109],"./si.js":[277109,77109],"./sk":[935627,35627],"./sk.js":[935627,35627],"./sl":[382544,82544],"./sl.js":[382544,82544],"./sq":[588341,88341],"./sq.js":[588341,88341],"./sr":[450617,50617],"./sr-cyrl":[137101,37101],"./sr-cyrl.js":[137101,37101],"./sr.js":[450617,50617],"./ss":[864127,64127],"./ss.js":[864127,64127],"./sv":[991876,91876],"./sv-fi":[819911,19911],"./sv-fi.js":[819911,19911],"./sv.js":[991876,91876],"./sw":[146148,46148],"./sw.js":[146148,46148],"./ta":[255596,55596],"./ta.js":[255596,55596],"./te":[45159,45159],"./te.js":[45159,45159],"./tet":[799157,99157],"./tet.js":[799157,99157],"./tg":[509928,9928],"./tg.js":[509928,9928],"./th":[262019,62019],"./th.js":[262019,62019],"./tk":[675817,75817],"./tk.js":[675817,75817],"./tl-ph":[46513,46513],"./tl-ph.js":[46513,46513],"./tlh":[997296,97296],"./tlh.js":[997296,97296],"./tr":[373035,73035],"./tr.js":[373035,73035],"./types.d":[163799,63799],"./types.d.ts":[163799,63799],"./tzl":[557797,57797],"./tzl.js":[557797,57797],"./tzm":[284722,84722],"./tzm-latn":[330261,30261],"./tzm-latn.js":[330261,30261],"./tzm.js":[284722,84722],"./ug-cn":[580313,80313],"./ug-cn.js":[580313,80313],"./uk":[564144,64144],"./uk.js":[564144,64144],"./ur":[592957,92957],"./ur.js":[592957,92957],"./uz":[307486,7486],"./uz-latn":[98727,98727],"./uz-latn.js":[98727,98727],"./uz.js":[307486,7486],"./vi":[337553,37553],"./vi.js":[337553,37553],"./x-pseudo":[955321,55321],"./x-pseudo.js":[955321,55321],"./yo":[114724,14724],"./yo.js":[114724,14724],"./zh":[132009,32009],"./zh-cn":[533852],"./zh-cn.js":[533852],"./zh-hk":[502390,2390],"./zh-hk.js":[502390,2390],"./zh-tw":[543901,43901],"./zh-tw.js":[543901,43901],"./zh.js":[132009,32009]};function n(b){if(!e.o(t,b))return Promise.resolve().then(function(){var y=new Error("Cannot find module '"+b+"'");throw y.code="MODULE_NOT_FOUND",y});var R=t[b],E=R[0];return Promise.all(R.slice(1).map(e.e)).then(function(){return e.t(E,23)})}n.keys=function(){return Object.keys(t)},n.id=240408,o.exports=n},394145:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"ACL",paraId:0,tocIndex:1},{value:" is the permission management module used in NocoBase, responsible for user role management, permission registration and authorization, as well as permission policy evaluation and access control.",paraId:0,tocIndex:1},{value:"Resource",paraId:1,tocIndex:2},{value:": Collections, or custom resources can be registered. Refer to ",paraId:1,tocIndex:2},{value:"@nocobase/resourcer",paraId:2,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"Action",paraId:1,tocIndex:2},{value:": An operation interface for a resource, such as create, read, update, delete, or other custom actions. Refer to ",paraId:1,tocIndex:2},{value:"@nocobase/actions",paraId:3,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"Strategy",paraId:1,tocIndex:2},{value:": Configures global permissions for roles, such as permissions for resource operations like create, read, update, delete, import, export, and system permissions like configuring the user interface.",paraId:1,tocIndex:2},{value:"Snippet",paraId:1,tocIndex:2},{value:": Defines a collection of operations, enabling unified management of operation permissions. Snippet identifiers can be matched using the ",paraId:1,tocIndex:2},{value:"minimatch",paraId:1,tocIndex:2},{value:" rules.",paraId:1,tocIndex:2},{value:"define()",paraId:4},{value:"Defines a role.",paraId:5,tocIndex:4},{value:"define(options: DefineOptions): ACLRole",paraId:6,tocIndex:5},{value:`export interface DefineOptions {
  role: string;
  strategy?: string | AvailableStrategyOptions;
  actions?: ResourceActionsOptions;
  snippets?: string[];
}

export interface AvailableStrategyOptions {
  displayName?: string;
  actions?: false | string | string[];
  allowConfigure?: boolean;
  resource?: '*';
}

export interface ResourceActionsOptions {
  [actionName: string]: RoleActionParams;
}

export interface RoleActionParams {
  fields?: string[];
  filter?: any;
  own?: boolean;
  whitelist?: string[];
  blacklist?: string[];
}
`,paraId:7,tocIndex:6},{value:"Property",paraId:8,tocIndex:8},{value:"Type",paraId:8,tocIndex:8},{value:"Description",paraId:8,tocIndex:8},{value:"role",paraId:8,tocIndex:8},{value:"string",paraId:8,tocIndex:8},{value:"Unique identifier for the role",paraId:8,tocIndex:8},{value:"strategy",paraId:8,tocIndex:8},{value:"string",paraId:8,tocIndex:8},{value:" | ",paraId:8,tocIndex:8},{value:"AvailableStrategyOptions",paraId:9,tocIndex:8},{value:"Optional, global access strategy for the role",paraId:8,tocIndex:8},{value:"actions",paraId:8,tocIndex:8},{value:"{ [actionName: string]: RoleActionParams; }",paraId:10,tocIndex:8},{value:"Optional, permission configuration for actions",paraId:8,tocIndex:8},{value:"snippets",paraId:8,tocIndex:8},{value:"string[]",paraId:8,tocIndex:8},{value:"Optional, defines snippets that the role has permission to access",paraId:8,tocIndex:8},{value:"Property",paraId:11,tocIndex:9},{value:"Type",paraId:11,tocIndex:9},{value:"Description",paraId:11,tocIndex:9},{value:"displayName",paraId:11,tocIndex:9},{value:"string",paraId:11,tocIndex:9},{value:"Optional, display name for the strategy",paraId:11,tocIndex:9},{value:"action",paraId:11,tocIndex:9},{value:"false",paraId:11,tocIndex:9},{value:" | ",paraId:11,tocIndex:9},{value:"string",paraId:11,tocIndex:9},{value:" | ",paraId:11,tocIndex:9},{value:"string[]",paraId:11,tocIndex:9},{value:"Optional, operation interfaces",paraId:11,tocIndex:9},{value:"allowConfigure",paraId:11,tocIndex:9},{value:"boolean",paraId:11,tocIndex:9},{value:"Optional, whether to allow configuring the user interface",paraId:11,tocIndex:9},{value:"resource",paraId:11,tocIndex:9},{value:"*",paraId:11,tocIndex:9},{value:"Applies to all resources",paraId:11,tocIndex:9},{value:"Property",paraId:12,tocIndex:10},{value:"Type",paraId:12,tocIndex:10},{value:"Description",paraId:12,tocIndex:10},{value:"fields",paraId:12,tocIndex:10},{value:"string[]",paraId:12,tocIndex:10},{value:"Optional, fields of the data table to operate on",paraId:12,tocIndex:10},{value:"filter",paraId:12,tocIndex:10},{value:"any",paraId:12,tocIndex:10},{value:"Optional, filter parameters that must be met, only records that meet the conditions can be operated on",paraId:12,tocIndex:10},{value:"own",paraId:12,tocIndex:10},{value:"boolean",paraId:12,tocIndex:10},{value:"Optional, whether to operate only on records created by oneself",paraId:12,tocIndex:10},{value:"whitelist",paraId:12,tocIndex:10},{value:"string[]",paraId:12,tocIndex:10},{value:"Optional, whitelist of fields that can be accessed, only fields in the whitelist can be accessed",paraId:12,tocIndex:10},{value:"blacklist",paraId:12,tocIndex:10},{value:"string[]",paraId:12,tocIndex:10},{value:"Optional, blacklist of fields that cannot be accessed, fields in the blacklist cannot be accessed",paraId:12,tocIndex:10},{value:"can()",paraId:4},{value:"Determines the permission to execute an action and returns the final action parameters. Returns ",paraId:13,tocIndex:11},{value:"null",paraId:13,tocIndex:11},{value:" if no permission.",paraId:13,tocIndex:11},{value:"can(options: CanArgs): CanResult | null",paraId:14,tocIndex:12},{value:`interface CanArgs {
  role: string;
  resource: string;
  action: string;
  ctx?: any;
}

interface CanResult {
  role: string;
  resource: string;
  action: string;
  params?: any;
}
`,paraId:15,tocIndex:13},{value:"Property",paraId:16,tocIndex:15},{value:"Type",paraId:16,tocIndex:15},{value:"Description",paraId:16,tocIndex:15},{value:"role",paraId:16,tocIndex:15},{value:"string",paraId:16,tocIndex:15},{value:"Role identifier",paraId:16,tocIndex:15},{value:"resource",paraId:16,tocIndex:15},{value:"string",paraId:16,tocIndex:15},{value:"Resource identifier",paraId:16,tocIndex:15},{value:"action",paraId:16,tocIndex:15},{value:"string",paraId:16,tocIndex:15},{value:"Action identifier",paraId:16,tocIndex:15},{value:"ctx",paraId:16,tocIndex:15},{value:"any",paraId:16,tocIndex:15},{value:"Optional, request context",paraId:16,tocIndex:15},{value:"Property",paraId:17,tocIndex:16},{value:"Type",paraId:17,tocIndex:16},{value:"Description",paraId:17,tocIndex:16},{value:"role",paraId:17,tocIndex:16},{value:"string",paraId:17,tocIndex:16},{value:"Role identifier",paraId:17,tocIndex:16},{value:"resource",paraId:17,tocIndex:16},{value:"string",paraId:17,tocIndex:16},{value:"Resource identifier",paraId:17,tocIndex:16},{value:"action",paraId:17,tocIndex:16},{value:"string",paraId:17,tocIndex:16},{value:"Action identifier",paraId:17,tocIndex:16},{value:"params",paraId:17,tocIndex:16},{value:"any",paraId:17,tocIndex:16},{value:"Optional, action parameters",paraId:17,tocIndex:16},{value:"registerSnippet()",paraId:4},{value:"Registers a snippet.",paraId:18,tocIndex:17},{value:"registerSnippet(snippet: SnippetOptions)",paraId:19,tocIndex:18},{value:`export type SnippetOptions = {
  name: string;
  actions: string[];
};
`,paraId:20,tocIndex:19},{value:"Property",paraId:21,tocIndex:20},{value:"Type",paraId:21,tocIndex:20},{value:"Description",paraId:21,tocIndex:20},{value:"name",paraId:21,tocIndex:20},{value:"string",paraId:21,tocIndex:20},{value:"Snippet identifier, can be matched using the ",paraId:21,tocIndex:20},{value:"minimatch",paraId:21,tocIndex:20},{value:" rules. E.g., ",paraId:21,tocIndex:20},{value:"auth.auth",paraId:21,tocIndex:20},{value:" matches ",paraId:21,tocIndex:20},{value:"auth.*",paraId:21,tocIndex:20},{value:".",paraId:21,tocIndex:20},{value:"actions",paraId:21,tocIndex:20},{value:"string[]",paraId:21,tocIndex:20},{value:"Resource operations included in the snippet, in the format ",paraId:21,tocIndex:20},{value:"resource:action",paraId:21,tocIndex:20},{value:". E.g., ",paraId:21,tocIndex:20},{value:"users:list",paraId:21,tocIndex:20},{value:".",paraId:21,tocIndex:20},{value:"setAvailableAction()",paraId:4},{value:"Sets allowed actions.",paraId:22,tocIndex:21},{value:"setAvailableAction(name: string, options: AvailableActionOptions = {})",paraId:23,tocIndex:22},{value:`export interface AvailableActionOptions {
  displayName?: string;
  aliases?: string[] | string;
  resource?: string;
  // Perform operations on new data
  onNewRecord?: boolean;
  // Allow configuring fields
  allowConfigureFields?: boolean;
}
`,paraId:24,tocIndex:22},{value:"Property",paraId:25,tocIndex:23},{value:"Type",paraId:25,tocIndex:23},{value:"Description",paraId:25,tocIndex:23},{value:"displayName",paraId:25,tocIndex:23},{value:"string",paraId:25,tocIndex:23},{value:"Optional, display name for the action",paraId:25,tocIndex:23},{value:"aliases",paraId:25,tocIndex:23},{value:"string",paraId:25,tocIndex:23},{value:" | ",paraId:25,tocIndex:23},{value:"string[]",paraId:25,tocIndex:23},{value:"Optional, action aliases. E.g., aliases for ",paraId:25,tocIndex:23},{value:"get",paraId:25,tocIndex:23},{value:", ",paraId:25,tocIndex:23},{value:"list",paraId:25,tocIndex:23},{value:" operations are both ",paraId:25,tocIndex:23},{value:"view",paraId:25,tocIndex:23},{value:".",paraId:25,tocIndex:23},{value:"resource",paraId:25,tocIndex:23},{value:"string",paraId:25,tocIndex:23},{value:"Optional, resource",paraId:25,tocIndex:23},{value:"onNewRecord",paraId:25,tocIndex:23},{value:"boolean",paraId:25,tocIndex:23},{value:"Optional, whether the operation applies to new data, such as create operation",paraId:25,tocIndex:23},{value:"allowConfigureFields",paraId:25,tocIndex:23},{value:"boolean",paraId:25,tocIndex:23},{value:"Optional, whether to allow configuring fields",paraId:25,tocIndex:23},{value:"setAvailableStrategy()",paraId:4},{value:"Sets allowed strategies for actions.",paraId:26,tocIndex:24},{value:"setAvailableStrategy(name: string, options: AvailableStrategyOptions)",paraId:27,tocIndex:25},{value:"Refer to ",paraId:28,tocIndex:25},{value:"AvailableStrategyOptions",paraId:29,tocIndex:25},{value:".",paraId:28,tocIndex:25},{value:"allow()",paraId:4},{value:"Defines the conditions under which operations are allowed.",paraId:30,tocIndex:26},{value:`acl.allow('plugins', '*', 'public');
`,paraId:31,tocIndex:26},{value:"allow(resourceName: string, actionNames: string[] | string, condition?: string | ConditionFunc)",paraId:32,tocIndex:27},{value:`export type ConditionFunc = (ctx: any) => Promise<boolean> | boolean;
`,paraId:33,tocIndex:28},{value:"Parameter",paraId:34,tocIndex:29},{value:"Type",paraId:34,tocIndex:29},{value:"Description",paraId:34,tocIndex:29},{value:"Default",paraId:34,tocIndex:29},{value:"resourceName",paraId:34,tocIndex:29},{value:"string",paraId:34,tocIndex:29},{value:"Resource",paraId:34,tocIndex:29},{value:"-",paraId:34,tocIndex:29},{value:"actionNames",paraId:34,tocIndex:29},{value:"string",paraId:34,tocIndex:29},{value:" | ",paraId:34,tocIndex:29},{value:"string[]",paraId:34,tocIndex:29},{value:"Action",paraId:34,tocIndex:29},{value:"-",paraId:34,tocIndex:29},{value:"condition",paraId:34,tocIndex:29},{value:"string",paraId:34,tocIndex:29},{value:" | ",paraId:34,tocIndex:29},{value:"ConditionFunc",paraId:34,tocIndex:29},{value:"Optional, predefined condition identifier, or condition evaluation function",paraId:34,tocIndex:29},{value:"public",paraId:34,tocIndex:29},{value:"Predefined condition identifiers:",paraId:35,tocIndex:29},{value:"public",paraId:36,tocIndex:29},{value:": Public interface.",paraId:36,tocIndex:29},{value:"loggedIn",paraId:36,tocIndex:29},{value:": Allowed when the user is logged in.",paraId:36,tocIndex:29},{value:"allowConfigure",paraId:36,tocIndex:29},{value:": Allowed when the current user role has permission to configure the user interface.",paraId:36,tocIndex:29},{value:"addFixedParams()",paraId:4},{value:"Adds fixed parameters to operations, merging them with current request parameters.",paraId:37,tocIndex:30},{value:`acl.addFixedParams('users', 'list', () => {
  return {
    filter: {
      id: {
        $eq: 1,
      },
    },
  };
});
`,paraId:38,tocIndex:30},{value:"addFixedParams(resource: string, action: string, merger: Merger)",paraId:39,tocIndex:31},{value:`export type Merger = () => object;
`,paraId:40,tocIndex:32},{value:"Parameter",paraId:41,tocIndex:33},{value:"Type",paraId:41,tocIndex:33},{value:"Description",paraId:41,tocIndex:33},{value:"resource",paraId:41,tocIndex:33},{value:"string",paraId:41,tocIndex:33},{value:"Resource",paraId:41,tocIndex:33},{value:"action",paraId:41,tocIndex:33},{value:"string",paraId:41,tocIndex:33},{value:"Action",paraId:41,tocIndex:33},{value:"merger",paraId:41,tocIndex:33},{value:"Merger",paraId:41,tocIndex:33},{value:"Function returning the fixed parameter object to be added",paraId:41,tocIndex:33},{value:"use()",paraId:4},{value:"Adds the ",paraId:42,tocIndex:34},{value:"ACL",paraId:42,tocIndex:34},{value:" middleware.",paraId:42,tocIndex:34},{value:`acl.use(async () => {
  return async function (ctx, next) {
    // ...
    await next();
  };
});
`,paraId:43,tocIndex:34},{value:"use(fn: any, options?: ToposortOptions)",paraId:44,tocIndex:35},{value:"Refer to ",paraId:45,tocIndex:36},{value:"Middleware",paraId:46,tocIndex:36},{value:".",paraId:45,tocIndex:36},{value:"middleware()",paraId:4},{value:"NocoBase access control middleware.",paraId:47,tocIndex:37}]},356604:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"@nocobase/actions",paraId:0,tocIndex:1},{value:" package encapsulates frequently used CRUD-related methods. By simply registering it with the ",paraId:0,tocIndex:1},{value:"ResourceManager",paraId:1,tocIndex:1},{value:", CRUD operation interfaces can be globally added to system resources.",paraId:0,tocIndex:1},{value:`import * as actions from \`@nocobase/actions\`;

const resourceManager = new ResourceManager({
  // ...options
});

resourceManager.registerActionHandlers(actions);
`,paraId:2,tocIndex:2},{value:"Creates a resource. ",paraId:3,tocIndex:4},{value:"POST /api/<resource>:create",paraId:3,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:`curl "http://localhost:13000/api/users:create" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '{"username": "admin"}'
`,paraId:4,tocIndex:4},{value:"Parameter Name",paraId:5,tocIndex:5},{value:"Type",paraId:5,tocIndex:5},{value:"Description",paraId:5,tocIndex:5},{value:"[key: string]",paraId:5,tocIndex:5},{value:"any",paraId:5,tocIndex:5},{value:"Key-value pairs representing resource fields",paraId:5,tocIndex:5},{value:"Retrieves a list of resources. ",paraId:6,tocIndex:6},{value:"GET /api/<resource>:list",paraId:6,tocIndex:6},{value:".",paraId:6,tocIndex:6},{value:`curl -X GET http://localhost:13000/api/users:list
`,paraId:7,tocIndex:6},{value:"Parameter",paraId:8,tocIndex:7},{value:"Type",paraId:8,tocIndex:7},{value:"Description",paraId:8,tocIndex:7},{value:"Default",paraId:8,tocIndex:7},{value:"filter",paraId:8,tocIndex:7},{value:"Filter",paraId:8,tocIndex:7},{value:"Filtering parameters, see ",paraId:8,tocIndex:7},{value:"Filter Operators",paraId:9,tocIndex:7},{value:"-",paraId:8,tocIndex:7},{value:"fields",paraId:8,tocIndex:7},{value:"string[]",paraId:8,tocIndex:7},{value:"Fields to retrieve",paraId:8,tocIndex:7},{value:"-",paraId:8,tocIndex:7},{value:"except",paraId:8,tocIndex:7},{value:"string[]",paraId:8,tocIndex:7},{value:"Fields to exclude",paraId:8,tocIndex:7},{value:"-",paraId:8,tocIndex:7},{value:"appends",paraId:8,tocIndex:7},{value:"string[]",paraId:8,tocIndex:7},{value:"Related fields to append",paraId:8,tocIndex:7},{value:"-",paraId:8,tocIndex:7},{value:"sort",paraId:8,tocIndex:7},{value:"string[]",paraId:8,tocIndex:7},{value:"Sorting parameters",paraId:8,tocIndex:7},{value:"-",paraId:8,tocIndex:7},{value:"paginate",paraId:8,tocIndex:7},{value:"boolean",paraId:8,tocIndex:7},{value:"Whether to use pagination",paraId:8,tocIndex:7},{value:"true",paraId:8,tocIndex:7},{value:"page",paraId:8,tocIndex:7},{value:"number",paraId:8,tocIndex:7},{value:"Current page number",paraId:8,tocIndex:7},{value:"1",paraId:8,tocIndex:7},{value:"pageSize",paraId:8,tocIndex:7},{value:"number",paraId:8,tocIndex:7},{value:"Number of items per page",paraId:8,tocIndex:7},{value:"20",paraId:8,tocIndex:7},{value:"Retrieves a specific resource. ",paraId:10,tocIndex:8},{value:"GET /api/<resource>:get",paraId:10,tocIndex:8},{value:".",paraId:10,tocIndex:8},{value:`curl -X GET http://localhost:13000/api/users:get?filterByTk=1
`,paraId:11,tocIndex:8},{value:"Parameter",paraId:12,tocIndex:9},{value:"Type",paraId:12,tocIndex:9},{value:"Description",paraId:12,tocIndex:9},{value:"Default",paraId:12,tocIndex:9},{value:"filterByTk",paraId:12,tocIndex:9},{value:"number | string",paraId:12,tocIndex:9},{value:"Filter by primary key value",paraId:12,tocIndex:9},{value:"-",paraId:12,tocIndex:9},{value:"filter",paraId:12,tocIndex:9},{value:"Filter",paraId:12,tocIndex:9},{value:"Filtering parameters, see ",paraId:12,tocIndex:9},{value:"Filter Operators",paraId:13,tocIndex:9},{value:"-",paraId:12,tocIndex:9},{value:"fields",paraId:12,tocIndex:9},{value:"string[]",paraId:12,tocIndex:9},{value:"Fields to retrieve",paraId:12,tocIndex:9},{value:"-",paraId:12,tocIndex:9},{value:"except",paraId:12,tocIndex:9},{value:"string[]",paraId:12,tocIndex:9},{value:"Fields to exclude",paraId:12,tocIndex:9},{value:"-",paraId:12,tocIndex:9},{value:"appends",paraId:12,tocIndex:9},{value:"string[]",paraId:12,tocIndex:9},{value:"Related fields to append",paraId:12,tocIndex:9},{value:"-",paraId:12,tocIndex:9},{value:"Updates one or more resources. ",paraId:14,tocIndex:10},{value:"PUT /api/<resource>:update",paraId:14,tocIndex:10},{value:".",paraId:14,tocIndex:10},{value:`curl "http://localhost:13000/api/users:update?filterByTk=1" \\
  -X PUT \\
  -H "Content-Type: application/json" \\
  -d '{"username": "admin"}'
`,paraId:15,tocIndex:10},{value:"Parameter",paraId:16,tocIndex:11},{value:"Type",paraId:16,tocIndex:11},{value:"Description",paraId:16,tocIndex:11},{value:"filter",paraId:16,tocIndex:11},{value:"Filter",paraId:16,tocIndex:11},{value:"Filtering parameters, see ",paraId:16,tocIndex:11},{value:"Filter Operators",paraId:17,tocIndex:11},{value:"filterByTk",paraId:16,tocIndex:11},{value:"number | string",paraId:16,tocIndex:11},{value:"Filter by primary key value",paraId:16,tocIndex:11},{value:"Note: At least one of ",paraId:18,tocIndex:11},{value:"filter",paraId:18,tocIndex:11},{value:" or ",paraId:18,tocIndex:11},{value:"filterByTk",paraId:18,tocIndex:11},{value:" must be provided.",paraId:18,tocIndex:11},{value:"Parameter Name",paraId:19,tocIndex:12},{value:"Type",paraId:19,tocIndex:12},{value:"Description",paraId:19,tocIndex:12},{value:"[key: string]",paraId:19,tocIndex:12},{value:"any",paraId:19,tocIndex:12},{value:"Key-value pairs representing resource fields",paraId:19,tocIndex:12},{value:"Deletes one or more resources. ",paraId:20,tocIndex:13},{value:"DELETE /api/<resource>:destroy",paraId:20,tocIndex:13},{value:".",paraId:20,tocIndex:13},{value:`curl -X DELETE http://localhost:13000/api/users:destroy?filterByTk=1
`,paraId:21,tocIndex:13},{value:"Parameter",paraId:22,tocIndex:14},{value:"Type",paraId:22,tocIndex:14},{value:"Description",paraId:22,tocIndex:14},{value:"filter",paraId:22,tocIndex:14},{value:"Filter",paraId:22,tocIndex:14},{value:"Filtering parameters, see ",paraId:22,tocIndex:14},{value:"Filter Operators",paraId:23,tocIndex:14},{value:"filterByTk",paraId:22,tocIndex:14},{value:"number | string",paraId:22,tocIndex:14},{value:"Filter by primary key value",paraId:22,tocIndex:14},{value:"Note: At least one of ",paraId:24,tocIndex:14},{value:"filter",paraId:24,tocIndex:14},{value:" or ",paraId:24,tocIndex:14},{value:"filterByTk",paraId:24,tocIndex:14},{value:" must be provided.",paraId:24,tocIndex:14},{value:"Retrieves or creates a resource. ",paraId:25,tocIndex:15},{value:"POST /api/<resource>:firstOrCreate",paraId:25,tocIndex:15},{value:".",paraId:25,tocIndex:15},{value:`curl "http://localhost:13000/api/users:firstOrCreate?filterKeys[]=username" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '{"username": "admin", "nickname": "Admin"}'
`,paraId:26,tocIndex:15},{value:"Parameter",paraId:27,tocIndex:16},{value:"Type",paraId:27,tocIndex:16},{value:"Description",paraId:27,tocIndex:16},{value:"filterKeys",paraId:27,tocIndex:16},{value:"string[]",paraId:27,tocIndex:16},{value:"Fields in the request body used to find existing resources",paraId:27,tocIndex:16},{value:"Parameter Name",paraId:28,tocIndex:17},{value:"Type",paraId:28,tocIndex:17},{value:"Description",paraId:28,tocIndex:17},{value:"[key: string]",paraId:28,tocIndex:17},{value:"any",paraId:28,tocIndex:17},{value:"Key-value pairs representing resource fields",paraId:28,tocIndex:17},{value:"Updates or creates a resource. ",paraId:29,tocIndex:18},{value:"POST /api/<resource>:updateOrCreate",paraId:29,tocIndex:18},{value:".",paraId:29,tocIndex:18},{value:`curl "http://localhost:13000/api/users:updateOrCreate?filterKeys[]=username" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '{"username": "admin", "nickname": "Admin"}'
`,paraId:30,tocIndex:18},{value:"Parameter",paraId:31,tocIndex:19},{value:"Type",paraId:31,tocIndex:19},{value:"Description",paraId:31,tocIndex:19},{value:"filterKeys",paraId:31,tocIndex:19},{value:"string[]",paraId:31,tocIndex:19},{value:"Fields in the request body used to find existing resources",paraId:31,tocIndex:19},{value:"Parameter Name",paraId:32,tocIndex:20},{value:"Type",paraId:32,tocIndex:20},{value:"Description",paraId:32,tocIndex:20},{value:"[key: string]",paraId:32,tocIndex:20},{value:"any",paraId:32,tocIndex:20},{value:"Key-value pairs representing resource fields",paraId:32,tocIndex:20},{value:"Moves resources, adjusting the order. Typically used for drag-and-drop sorting in pages. ",paraId:33,tocIndex:21},{value:"POST /api/<resource>:move",paraId:33,tocIndex:21},{value:".",paraId:33,tocIndex:21},{value:`curl -X POST "http://localhost:13000/api/users:move?sourceId=1&targetId=2"
`,paraId:34,tocIndex:21},{value:"Parameter",paraId:35,tocIndex:22},{value:"Type",paraId:35,tocIndex:22},{value:"Description",paraId:35,tocIndex:22},{value:"Default",paraId:35,tocIndex:22},{value:"sourceId",paraId:35,tocIndex:22},{value:"targetKey",paraId:35,tocIndex:22},{value:"ID of the element to move",paraId:35,tocIndex:22},{value:"-",paraId:35,tocIndex:22},{value:"targetId",paraId:35,tocIndex:22},{value:"targetKey",paraId:35,tocIndex:22},{value:"ID of the element to swap positions with",paraId:35,tocIndex:22},{value:"-",paraId:35,tocIndex:22},{value:"sortField",paraId:35,tocIndex:22},{value:"string",paraId:35,tocIndex:22},{value:"Name of the field where sorting is stored",paraId:35,tocIndex:22},{value:"sort",paraId:35,tocIndex:22},{value:"targetScope",paraId:35,tocIndex:22},{value:"string",paraId:35,tocIndex:22},{value:"Sorting scope, a resource can be sorted by different scopes",paraId:35,tocIndex:22},{value:"-",paraId:35,tocIndex:22},{value:"sticky",paraId:35,tocIndex:22},{value:"boolean",paraId:35,tocIndex:22},{value:"Whether to stick the moved element",paraId:35,tocIndex:22},{value:"-",paraId:35,tocIndex:22},{value:"method",paraId:35,tocIndex:22},{value:"insertAfter",paraId:35,tocIndex:22},{value:" | ",paraId:35,tocIndex:22},{value:"prepend",paraId:35,tocIndex:22},{value:"Insertion method: whether to insert before",paraId:35,tocIndex:22},{value:"Sets associated objects for a resource. ",paraId:36,tocIndex:23},{value:"POST /api/<resource>/<resourceKey>/<association>:set",paraId:36,tocIndex:23},{value:".",paraId:36,tocIndex:23},{value:`curl "http://localhost:13000/api/users/1/roles:set" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '["admin", "member"]'
`,paraId:37,tocIndex:23},{value:"TargetKey | TargetKey[]",paraId:38,tocIndex:24},{value:" - Array of primary key values for associated objects.",paraId:38,tocIndex:24},{value:"Adds associated objects to a resource. ",paraId:39,tocIndex:25},{value:"POST /api/<resource>/<resourceKey>/<association>:add",paraId:39,tocIndex:25},{value:".",paraId:39,tocIndex:25},{value:`curl "http://localhost:13000/api/users/1/roles:add" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '["admin"]'
`,paraId:40,tocIndex:25},{value:"TargetKey | TargetKey[]",paraId:41,tocIndex:26},{value:" - Array of primary key values for associated objects.",paraId:41,tocIndex:26},{value:"Removes associated objects from a resource. ",paraId:42,tocIndex:27},{value:"POST /api/<resource>/<resourceKey>/<association>:remove",paraId:42,tocIndex:27},{value:".",paraId:42,tocIndex:27},{value:`curl "http://localhost:13000/api/users/1/roles:remove" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '["admin"]'
`,paraId:43,tocIndex:27},{value:"TargetKey | TargetKey[]",paraId:44,tocIndex:28},{value:" - Array of primary key values for associated objects.",paraId:44,tocIndex:28},{value:"Toggles associated objects for a resource, adding them if they don't exist, or removing them if they do. ",paraId:45,tocIndex:29},{value:"POST /api/<resource>/<resourceKey>/<association>:toggle",paraId:45,tocIndex:29},{value:".",paraId:45,tocIndex:29},{value:`curl "http://localhost:13000/api/users/1/roles:toggle" \\
  -X POST \\
  -H "Content-Type: application/json" \\
  -d '["admin", "member"]'
`,paraId:46,tocIndex:29},{value:"TargetKey | TargetKey[]",paraId:47,tocIndex:30},{value:" - Array of primary key values for associated objects.",paraId:47,tocIndex:30}]},41179:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"AuthManager",paraId:0,tocIndex:1},{value:" is the user authentication management module in NocoBase, used for registering different types of user authentication.",paraId:0,tocIndex:1},{value:`const authManager = new AuthManager({
  // Key to retrieve the current authenticator identifier from the request header
  authKey: 'X-Authenticator',
});

// Set methods for storing and retrieving authenticators in AuthManager
authManager.setStorer({
  get: async (name: string) => {
    return db.getRepository('authenticators').find({ filter: { name } });
  },
});

// Register an authentication type
authManager.registerTypes('basic', {
  auth: BasicAuth,
  title: 'Password',
});

// Use authentication middleware
app.resourceManager.use(authManager.middleware());
`,paraId:1,tocIndex:2},{value:"Authentication type (",paraId:2,tocIndex:3},{value:"AuthType",paraId:2,tocIndex:3},{value:")",paraId:2,tocIndex:3},{value:": Different types of authentication, such as Password, SMS, OIDC, SAML, etc.",paraId:2,tocIndex:3},{value:"Authenticator",paraId:2,tocIndex:3},{value:": An authenticator is a database-stored entity linked to a configuration record for a specific authentication type (",paraId:2,tocIndex:3},{value:"AuthType",paraId:2,tocIndex:3},{value:"). Multiple authenticators can exist for one authentication type, each offering diffrent authentications.",paraId:2,tocIndex:3},{value:"Authenticator name",paraId:2,tocIndex:3},{value:": Unique identifier for an authenticator, used to determine the current authentication employed by the current request.",paraId:2,tocIndex:3},{value:"constructor()",paraId:3},{value:"Constructor, creates an instance of ",paraId:4,tocIndex:5},{value:"AuthManager",paraId:4,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:"constructor(options: AuthManagerOptions)",paraId:5,tocIndex:6},{value:`export interface JwtOptions {
  secret: string;
  expiresIn?: string;
}

export type AuthManagerOptions = {
  authKey: string;
  default?: string;
  jwt?: JwtOptions;
};
`,paraId:6,tocIndex:7},{value:"Attribute",paraId:7,tocIndex:9},{value:"Type",paraId:7,tocIndex:9},{value:"Description",paraId:7,tocIndex:9},{value:"Default",paraId:7,tocIndex:9},{value:"authKey",paraId:7,tocIndex:9},{value:"string",paraId:7,tocIndex:9},{value:"Optional key to save the current authenticator identifier in the request header",paraId:7,tocIndex:9},{value:"X-Authenticator",paraId:7,tocIndex:9},{value:"default",paraId:7,tocIndex:9},{value:"string",paraId:7,tocIndex:9},{value:"Optional, default authenticator identifier",paraId:7,tocIndex:9},{value:"basic",paraId:7,tocIndex:9},{value:"jwt",paraId:7,tocIndex:9},{value:"JwtOptions",paraId:8,tocIndex:9},{value:"Optional, configure if using JWT for authentication",paraId:7,tocIndex:9},{value:"-",paraId:7,tocIndex:9},{value:"Attribute",paraId:9,tocIndex:10},{value:"Type",paraId:9,tocIndex:10},{value:"Description",paraId:9,tocIndex:10},{value:"Default",paraId:9,tocIndex:10},{value:"secret",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Token secret key",paraId:9,tocIndex:10},{value:"X-Authenticator",paraId:9,tocIndex:10},{value:"expiresIn",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Optional, token expiration period",paraId:9,tocIndex:10},{value:"7d",paraId:9,tocIndex:10},{value:"setStorer()",paraId:3},{value:"Set methods for storing and retrieving authenticator data.",paraId:10,tocIndex:11},{value:"setStorer(storer: Storer)",paraId:11,tocIndex:12},{value:`export interface Authenticator = {
  authType: string;
  options: Record<string, any>;
  [key: string]: any;
};

export interface Storer {
  get: (name: string) => Promise<Authenticator>;
}
`,paraId:12,tocIndex:13},{value:"Attribute",paraId:13,tocIndex:15},{value:"Type",paraId:13,tocIndex:15},{value:"Description",paraId:13,tocIndex:15},{value:"authType",paraId:13,tocIndex:15},{value:"string",paraId:13,tocIndex:15},{value:"Authentication type",paraId:13,tocIndex:15},{value:"options",paraId:13,tocIndex:15},{value:"Record<string, any>",paraId:13,tocIndex:15},{value:"Authenticator-related configurations",paraId:13,tocIndex:15},{value:"Storer",paraId:14,tocIndex:16},{value:" is the interface for authenticator storage, containing one method.",paraId:14,tocIndex:16},{value:"get(name: string): Promise<Authenticator>",paraId:15,tocIndex:16},{value:" - Get authenticator by identifier. In NocoBase, the actual returned type is ",paraId:15,tocIndex:16},{value:"AuthModel",paraId:16,tocIndex:16},{value:".",paraId:15,tocIndex:16},{value:"registerTypes()",paraId:3},{value:"Register authentication types.",paraId:17,tocIndex:17},{value:"registerTypes(authType: string, authConfig: AuthConfig)",paraId:18,tocIndex:18},{value:`export type AuthExtend<T extends Auth> = new (config: Config) => T;

type AuthConfig = {
  auth: AuthExtend<Auth>; // The authentication class.
  title?: string; // The display name of the authentication type.
};
`,paraId:19,tocIndex:19},{value:"Attribute",paraId:20,tocIndex:20},{value:"Type",paraId:20,tocIndex:20},{value:"Description",paraId:20,tocIndex:20},{value:"auth",paraId:20,tocIndex:20},{value:"AuthExtend<Auth>",paraId:20,tocIndex:20},{value:"Authentication type implementation, refer to ",paraId:20,tocIndex:20},{value:"Auth",paraId:21,tocIndex:20},{value:"title",paraId:20,tocIndex:20},{value:"string",paraId:20,tocIndex:20},{value:"Optional. Title of the authentication type displayed on the frontend",paraId:20,tocIndex:20},{value:"listTypes()",paraId:3},{value:"Get a list of registered authentication types.",paraId:22,tocIndex:21},{value:"listTypes(): { name: string; title: string }[]",paraId:23,tocIndex:22},{value:"Attribute",paraId:24,tocIndex:23},{value:"Type",paraId:24,tocIndex:23},{value:"Description",paraId:24,tocIndex:23},{value:"name",paraId:24,tocIndex:23},{value:"string",paraId:24,tocIndex:23},{value:"Authentication type identifier",paraId:24,tocIndex:23},{value:"title",paraId:24,tocIndex:23},{value:"string",paraId:24,tocIndex:23},{value:"Title of the authentication type",paraId:24,tocIndex:23},{value:"get()",paraId:3},{value:"Get authenticator.",paraId:25,tocIndex:24},{value:"get(name: string, ctx: Context)",paraId:26,tocIndex:25},{value:"Attribute",paraId:27,tocIndex:26},{value:"Type",paraId:27,tocIndex:26},{value:"Description",paraId:27,tocIndex:26},{value:"name",paraId:27,tocIndex:26},{value:"string",paraId:27,tocIndex:26},{value:"Authenticator identifier",paraId:27,tocIndex:26},{value:"ctx",paraId:27,tocIndex:26},{value:"Context",paraId:27,tocIndex:26},{value:"Request context",paraId:27,tocIndex:26},{value:"middleware()",paraId:3},{value:"Authentication middleware. Get the current authenticator and perform user authentication.",paraId:28,tocIndex:27}]},651172:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Auth",paraId:0,tocIndex:1},{value:" is an abstract class for user authentication types, defining the interfaces required to complete user authentication. To extend new user authentication types, you need to inherit from the ",paraId:0,tocIndex:1},{value:"Auth",paraId:0,tocIndex:1},{value:" class and implement its methods. The basic implementation can be referred to as ",paraId:0,tocIndex:1},{value:"BaseAuth",paraId:1,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:`interface IAuth {
  user: Model;
  // Check the authentication status and return the current user.
  check(): Promise<Model>;
  signIn(): Promise<any>;
  signUp(): Promise<any>;
  signOut(): Promise<any>;
}

export abstract class Auth implements IAuth {
  abstract user: Model;
  abstract check(): Promise<Model>;
  // ...
}

class CustomAuth extends Auth {
  // check: Authentication
  async check() {
    // ...
  }
}
`,paraId:2,tocIndex:1},{value:"user",paraId:3},{value:"Information of the authenticated user.",paraId:4,tocIndex:3},{value:"abstract user: Model",paraId:5,tocIndex:4},{value:"constructor()",paraId:3},{value:"Constructor, creates an instance of ",paraId:6,tocIndex:6},{value:"Auth",paraId:6,tocIndex:6},{value:".",paraId:6,tocIndex:6},{value:"constructor(config: AuthConfig)",paraId:7,tocIndex:7},{value:`export type AuthConfig = {
  authenticator: Authenticator;
  options: {
    [key: string]: any;
  };
  ctx: Context;
};
`,paraId:8,tocIndex:8},{value:"Attribute",paraId:9,tocIndex:10},{value:"Type",paraId:9,tocIndex:10},{value:"Description",paraId:9,tocIndex:10},{value:"authenticator",paraId:9,tocIndex:10},{value:"Authenticator",paraId:10,tocIndex:10},{value:"Authenticator data model, the actual type in NocoBase applications is ",paraId:9,tocIndex:10},{value:"AuthModel",paraId:11,tocIndex:10},{value:"options",paraId:9,tocIndex:10},{value:"Record<string, any>",paraId:9,tocIndex:10},{value:"Authenticator-related configurations",paraId:9,tocIndex:10},{value:"ctx",paraId:9,tocIndex:10},{value:"Context",paraId:9,tocIndex:10},{value:"Request context",paraId:9,tocIndex:10},{value:"check()",paraId:3},{value:"User authentication, returns user information. This is an abstract method that all authentication types must implement.",paraId:12,tocIndex:11},{value:"abstract check(): Promise<Model>",paraId:13,tocIndex:12},{value:"signIn()",paraId:3},{value:"User login.",paraId:14,tocIndex:13},{value:"signIn(): Promise<any>",paraId:15,tocIndex:14},{value:"signUp()",paraId:3},{value:"User registration.",paraId:16,tocIndex:15},{value:"signUp(): Promise<any>",paraId:17,tocIndex:16},{value:"signOut()",paraId:3},{value:"User logout.",paraId:18,tocIndex:17},{value:"signOut(): Promise<any>",paraId:19,tocIndex:18}]},897536:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"BaseAuth",paraId:0,tocIndex:1},{value:" inherits from the abstract class ",paraId:0,tocIndex:1},{value:"Auth",paraId:1,tocIndex:1},{value:" and serves as the basic implementation for user authentication types, using JWT as the authentication method. In most cases, extending user authentication types can be achieved by inheriting from ",paraId:0,tocIndex:1},{value:"BaseAuth",paraId:0,tocIndex:1},{value:" instead of directly inheriting from the ",paraId:0,tocIndex:1},{value:"Auth",paraId:0,tocIndex:1},{value:" abstract class.",paraId:0,tocIndex:1},{value:`class BasicAuth extends BaseAuth {
  constructor(config: AuthConfig) {
    // Set user collection
    const userCollection = config.ctx.db.getCollection('users');
    super({ ...config, userCollection });
  }

  // User authentication logic, called by \`auth.signIn\`
  // Returns user data
  async validate() {
    const ctx = this.ctx;
    const { values } = ctx.action.params;
    // ...
    return user;
  }
}
`,paraId:2,tocIndex:1},{value:"constructor()",paraId:3},{value:"Constructor, creates an instance of ",paraId:4,tocIndex:3},{value:"BaseAuth",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"constructor(config: AuthConfig & { userCollection: Collection })",paraId:5,tocIndex:4},{value:"Parameter",paraId:6,tocIndex:5},{value:"Type",paraId:6,tocIndex:5},{value:"Description",paraId:6,tocIndex:5},{value:"config",paraId:6,tocIndex:5},{value:"AuthConfig",paraId:6,tocIndex:5},{value:"Refer to ",paraId:6,tocIndex:5},{value:"Auth - AuthConfig",paraId:7,tocIndex:5},{value:"userCollection",paraId:6,tocIndex:5},{value:"Collection",paraId:6,tocIndex:5},{value:"User collection, e.g., ",paraId:6,tocIndex:5},{value:"db.getCollection('users')",paraId:6,tocIndex:5},{value:", refer to ",paraId:6,tocIndex:5},{value:"DataBase - Collection",paraId:8,tocIndex:5},{value:"user()",paraId:3},{value:"Accessor for setting and getting user information, defaulting to using the ",paraId:9,tocIndex:6},{value:"ctx.state.currentUser",paraId:9,tocIndex:6},{value:" object.",paraId:9,tocIndex:6},{value:"set user()",paraId:10,tocIndex:7},{value:"get user()",paraId:10,tocIndex:7},{value:"check()",paraId:3},{value:"Authenticates through the request token and returns user information.",paraId:11,tocIndex:8},{value:"signIn()",paraId:3},{value:"User login, generates a token.",paraId:12,tocIndex:9},{value:"signUp()",paraId:3},{value:"User registration.",paraId:13,tocIndex:10},{value:"signOut()",paraId:3},{value:"User logout, token expiration.",paraId:14,tocIndex:11},{value:"validate()",paraId:3},{value:"Core authentication logic, called by the ",paraId:15,tocIndex:12},{value:"signIn",paraId:15,tocIndex:12},{value:" interface, to determine whether the user can successfully log in.",paraId:15,tocIndex:12}]},689524:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"CacheManager is based on ",paraId:0,tocIndex:1},{value:"node-cache-manager",paraId:0,tocIndex:1},{value:" and provides caching module management for NocoBase. The built-in cache types are:",paraId:0,tocIndex:1},{value:"memory",paraId:1,tocIndex:1},{value:": Provided by the default lru-cache of node-cache-manager.",paraId:1,tocIndex:1},{value:"redis",paraId:1,tocIndex:1},{value:": Supported by node-cache-manager-redis-yet for Redis caching.",paraId:1,tocIndex:1},{value:"More types can be extended and registered through the API.",paraId:2,tocIndex:1},{value:"Store",paraId:3,tocIndex:2},{value:": Defines a caching method, including a factory method for creating caches and other related configurations. Each caching method has a unique identifier provided during registration. The two built-in caching methods correspond to the unique identifiers ",paraId:3,tocIndex:2},{value:"memory",paraId:3,tocIndex:2},{value:" and ",paraId:3,tocIndex:2},{value:"redis",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Store Factory Method",paraId:4,tocIndex:2},{value:": Provided by ",paraId:4,tocIndex:2},{value:"node-cache-manager",paraId:4,tocIndex:2},{value:" and related extension packages, used to create caches. Examples include ",paraId:4,tocIndex:2},{value:"memory",paraId:4,tocIndex:2},{value:" provided by ",paraId:4,tocIndex:2},{value:"node-cache-manager",paraId:4,tocIndex:2},{value:" by default, and ",paraId:4,tocIndex:2},{value:"redisStore",paraId:4,tocIndex:2},{value:" provided by ",paraId:4,tocIndex:2},{value:"node-cache-manager-redis-yet",paraId:4,tocIndex:2},{value:". In this context, the object to be provided corresponds to ",paraId:4,tocIndex:2},{value:"StoreOptions",paraId:5,tocIndex:2},{value:", which is the first parameter of the ",paraId:4,tocIndex:2},{value:"caching",paraId:4,tocIndex:2},{value:" method in ",paraId:4,tocIndex:2},{value:"node-cache-manager",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:"Cache",paraId:6,tocIndex:2},{value:": A class encapsulated by NocoBase, providing methods related to cache usage. When actually using caching, operations are performed on instances of ",paraId:6,tocIndex:2},{value:"Cache",paraId:6,tocIndex:2},{value:". Each ",paraId:6,tocIndex:2},{value:"Cache",paraId:6,tocIndex:2},{value:" instance has a unique identifier, which serves as a namespace for distinguishing different modules.",paraId:6,tocIndex:2},{value:"constructor()",paraId:7},{value:"constructor(options?: CacheManagerOptions)",paraId:8,tocIndex:5},{value:`export type CacheManagerOptions = Partial<{
  defaultStore: string;
  stores: {
    [storeType: string]: StoreOptions;
  };
}>;

type StoreOptions = {
  store?: 'memory' | FactoryStore<Store, any>;
  close?: (store: Store) => Promise<void>;
  // global config
  [key: string]: any;
};
`,paraId:9,tocIndex:6},{value:"Property",paraId:10,tocIndex:8},{value:"Type",paraId:10,tocIndex:8},{value:"Description",paraId:10,tocIndex:8},{value:"defaultStore",paraId:10,tocIndex:8},{value:"string",paraId:10,tocIndex:8},{value:"Unique identifier for the default cache type.",paraId:10,tocIndex:8},{value:"stores",paraId:10,tocIndex:8},{value:"Record<string, StoreOptions>",paraId:10,tocIndex:8},{value:"Registers cache types. The key is the unique identifier for the cache type, and the value is an object containing the registration method and global configurations.",paraId:10,tocIndex:8},{value:"Property",paraId:11,tocIndex:9},{value:"Type",paraId:11,tocIndex:9},{value:"Description",paraId:11,tocIndex:9},{value:"store",paraId:11,tocIndex:9},{value:"memory",paraId:11,tocIndex:9},{value:" | ",paraId:11,tocIndex:9},{value:"FactoryStore<Store, any>",paraId:11,tocIndex:9},{value:"The store factory method, corresponding to the first parameter of the ",paraId:11,tocIndex:9},{value:"caching",paraId:11,tocIndex:9},{value:" method.",paraId:11,tocIndex:9},{value:"close",paraId:11,tocIndex:9},{value:"(store: Store) => Promise<void>",paraId:11,tocIndex:9},{value:"Optional. For middleware that requires establishing a connection, such as Redis, provide a callback method for closing the connection. The parameter is the object returned by the store factory method.",paraId:11,tocIndex:9},{value:"[key: string]",paraId:11,tocIndex:9},{value:"any",paraId:11,tocIndex:9},{value:"Other global configurations for the store, corresponding to the second parameter of the ",paraId:11,tocIndex:9},{value:"caching",paraId:11,tocIndex:9},{value:" method.",paraId:11,tocIndex:9},{value:"options",paraId:7},{value:`import { redisStore, RedisStore } from 'cache-manager-redis-yet';

const defaultOptions: CacheManagerOptions = {
  defaultStore: 'memory',
  stores: {
    memory: {
      store: 'memory',
      // global config
      max: 2000,
    },
    redis: {
      store: redisStore,
      close: async (redis: RedisStore) => {
        await redis.client.quit();
      },
    },
  },
};
`,paraId:12,tocIndex:10},{value:"The ",paraId:13,tocIndex:10},{value:"options",paraId:13,tocIndex:10},{value:" parameter will be merged with the default options. Existing default options can be omitted. For example:",paraId:13,tocIndex:10},{value:`const cacheManager = new CacheManager({
  stores: {
    defaultStore: 'redis',
    redis: {
      // redisStore is already provided in the default options, so only need to provide redisStore configuration.
      url: 'redis://localhost:6379',
    },
  },
});
`,paraId:14,tocIndex:10},{value:"registerStore()",paraId:7},{value:"Register a new caching method. Example:",paraId:15,tocIndex:11},{value:`import { redisStore } from 'cache-manager-redis-yet';

cacheManager.registerStore({
  // Unique identifier for the store
  name: 'redis',
  // Factory method for creating the store
  store: redisStore,
  // Callback method for closing the store connection
  close: async (redis: RedisStore) => {
    await redis.client.quit();
  },
  // Global configurations
  url: 'xxx',
});
`,paraId:16,tocIndex:11},{value:"registerStore(options: { name: string } & StoreOptions)",paraId:17,tocIndex:12},{value:"createCache()",paraId:7},{value:"Create a cache. Example:",paraId:18,tocIndex:13},{value:`await cacheManager.createCache({
  name: 'default', // Unique identifier for the cache
  store: 'memory', // Unique identifier for the store
  prefix: 'mycache', // Automatically adds the 'mycache:' prefix to cache keys, optional
  // Other store configurations, custom configurations that will be merged with global store configurations
  max: 2000,
});
`,paraId:19,tocIndex:13},{value:"createCache(options: { name: string; prefix?: string; store?: string; [key: string]: any }): Promise<Cache>",paraId:20,tocIndex:14},{value:"Property",paraId:21,tocIndex:16},{value:"Type",paraId:21,tocIndex:16},{value:"Description",paraId:21,tocIndex:16},{value:"name",paraId:21,tocIndex:16},{value:"string",paraId:21,tocIndex:16},{value:"Unique identifier for the cache",paraId:21,tocIndex:16},{value:"store",paraId:21,tocIndex:16},{value:"string",paraId:21,tocIndex:16},{value:"Unique identifier for the store",paraId:21,tocIndex:16},{value:"prefix",paraId:21,tocIndex:16},{value:"string",paraId:21,tocIndex:16},{value:"Optional. Prefix automatically added to cache keys",paraId:21,tocIndex:16},{value:"[key: string]",paraId:21,tocIndex:16},{value:"any",paraId:21,tocIndex:16},{value:"Other custom store configurations",paraId:21,tocIndex:16},{value:"When ",paraId:22,tocIndex:16},{value:"store",paraId:22,tocIndex:16},{value:" is omitted, the ",paraId:22,tocIndex:16},{value:"defaultStore",paraId:22,tocIndex:16},{value:" will be used. In this case, the caching",paraId:22,tocIndex:16}]},661413:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"You can refer to the documentation of ",paraId:0,tocIndex:1},{value:"node-cache-manager",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"get()",paraId:1,tocIndex:1},{value:"set()",paraId:1,tocIndex:1},{value:"del()",paraId:1,tocIndex:1},{value:"reset()",paraId:1,tocIndex:1},{value:"wrap()",paraId:1,tocIndex:1},{value:"mset()",paraId:1,tocIndex:1},{value:"mget()",paraId:1,tocIndex:1},{value:"mdel()",paraId:1,tocIndex:1},{value:"keys()",paraId:1,tocIndex:1},{value:"ttl()",paraId:1,tocIndex:1},{value:"wrapWithCondition()",paraId:2},{value:"Similar to ",paraId:3,tocIndex:3},{value:"wrap()",paraId:3,tocIndex:3},{value:", but can decide whether to use caching based on conditions.",paraId:3,tocIndex:3},{value:`async wrapWithCondition<T>(
  key: string,
  fn: () => T | Promise<T>,
  options?: {
    // External parameter to control whether to use cache results
    useCache?: boolean;
    // Determine whether to cache based on data results
    isCacheable?: (val: unknown) => boolean | Promise<boolean>;
    ttl?: Milliseconds;
  },
): Promise<T> {
`,paraId:4,tocIndex:3},{value:"setValueInObject()",paraId:2},{value:"When the cached content is an object, changes the value of a specific key.",paraId:5,tocIndex:4},{value:`async setValueInObject(key: string, objectKey: string, value: unknown)
`,paraId:6,tocIndex:4},{value:"getValueInObject()",paraId:2},{value:"When the cached content is an object, retrieves the value of a specific key.",paraId:7,tocIndex:5},{value:`async getValueInObject(key: string, objectKey: string)
`,paraId:8,tocIndex:5},{value:"delValueInObject()",paraId:2},{value:"When the cached content is an object, deletes a specific key.",paraId:9,tocIndex:6},{value:`async delValueInObject(key: string, objectKey: string)
`,paraId:10,tocIndex:6}]},476496:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The NocoBase CLI is designed to help you develop, build, and deploy NocoBase applications.",paraId:0,tocIndex:0},{value:"NocoBase CLI supports ",paraId:1},{value:"ts-node",paraId:1},{value:" and ",paraId:1},{value:"node",paraId:1},{value:" two operation modes.",paraId:1},{value:"ts-node mode (Default): Used for development environment, support real-time compilation, with relatively slow response",paraId:2},{value:"node mode\uFF1AUsed for production environment, with quick response, but you need to execute ",paraId:2},{value:"yarn nocobase build",paraId:2},{value:" to compile the entire source code first",paraId:2},{value:`$ yarn nocobase -h

Usage: nocobase [command] [options]

Options:
  -h, --help

Commands:
  console
  db:auth               Verify if the database is successfully connected
  db:sync               Generate relevant data tables and fields through the configuration of collections
  install               Install
  start                 Start application in production environment
  build                 Compile and package
  clean                 Delete the compiled files
  dev                   Start application for development environment with real-time compilation
  doc                   Documentation development
  test                  Testing
  umi
  upgrade               Upgrade
  migrator              Data migration
  pm                    Plugin manager
  help
`,paraId:3,tocIndex:1},{value:"scripts",paraId:4,tocIndex:2},{value:" in the application scaffolding ",paraId:4,tocIndex:2},{value:"package.json",paraId:4,tocIndex:2},{value:" is as below:",paraId:4,tocIndex:2},{value:`{
  "scripts": {
    "dev": "nocobase dev",
    "start": "nocobase start",
    "clean": "nocobase clean",
    "build": "nocobase build",
    "test": "nocobase test",
    "pm": "nocobase pm",
    "postinstall": "nocobase postinstall"
  }
}
`,paraId:5,tocIndex:2},{value:"NocoBase CLI is built based on ",paraId:6,tocIndex:3},{value:"commander",paraId:6,tocIndex:3},{value:". You can write the extended commands freely in ",paraId:6,tocIndex:3},{value:"app/server/index.ts",paraId:6,tocIndex:3},{value:":",paraId:6,tocIndex:3},{value:`const app = new Application(config);

app.command('hello').action(() => {});
`,paraId:7,tocIndex:3},{value:"or in the plugin:",paraId:8,tocIndex:3},{value:`class MyPlugin extends Plugin {
  beforeLoad() {
    this.app.command('hello').action(() => {});
  }
}
`,paraId:9,tocIndex:3},{value:"Run in the terminal:",paraId:10,tocIndex:3},{value:`$ yarn nocobase hello
`,paraId:11,tocIndex:3},{value:"Sorted by frequency of use.",paraId:12,tocIndex:4},{value:"dev",paraId:13},{value:"Start application and compile code in real time in development environment.",paraId:14,tocIndex:5},{value:"\nNocoBase is installed automatically if it is not installed (Refer to the `install` command).\n",paraId:15},{value:`Usage: nocobase dev [options]

Options:
  -p, --port [port]
  --client
  --server
  -h, --help
`,paraId:16},{value:"Example:",paraId:17},{value:`# Launch application for development environment, with real-time compilation
yarn nocobase dev
# Start the server side only
yarn nocobase dev --server
# Start the client side only
yarn nocobase dev --client
`,paraId:18},{value:"start",paraId:13},{value:"Start application in production environment, the code needs ",paraId:19,tocIndex:6},{value:"yarn build",paraId:19,tocIndex:6},{value:".",paraId:19,tocIndex:6},{value:"NocoBase is installed automatically if it is not installed (Refer to the ",paraId:20},{value:"install",paraId:20},{value:" command).",paraId:20},{value:"The source code needs to be re-packaged if it has any modification (Refer to the ",paraId:20},{value:"build",paraId:20},{value:" command).",paraId:20},{value:`$ yarn nocobase start -h

Usage: nocobase start [options]

Options:
  -p, --port
  -s, --silent
  -h, --help
`,paraId:21},{value:"Example:",paraId:22},{value:`# Launch application for production environment
yarn nocobase start
`,paraId:23},{value:"install",paraId:13},{value:"Install.",paraId:24,tocIndex:7},{value:`$ yarn nocobase install -h

Usage: nocobase install [options]

Options:
  -f, --force
  -c, --clean
  -s, --silent
  -l, --lang [lang]
  -e, --root-email <rootEmail>
  -p, --root-password <rootPassword>
  -n, --root-nickname [rootNickname]
  -h, --help
`,paraId:25,tocIndex:7},{value:"Example:",paraId:26,tocIndex:7},{value:`# Initial installation
yarn nocobase install -l zh-CN -e admin@nocobase.com -p admin123
# Delete all data tables from NocoBase and reinstall
yarn nocobase install -f -l zh-CN -e admin@nocobase.com -p admin123
# Clear database and reinstall
yarn nocobase install -c -l zh-CN -e admin@nocobase.com -p admin123
`,paraId:27,tocIndex:7},{value:"Difference between ",paraId:28},{value:"-f/--force",paraId:28},{value:" and ",paraId:28},{value:"-c/--clean",paraId:28},{value:":",paraId:28},{value:"-f/--force",paraId:29},{value:" Delete data tables of NocoBase",paraId:29},{value:"-c/--clean",paraId:29},{value:" Clear database, all data tables are deleted",paraId:29},{value:"upgrade",paraId:13},{value:"Upgrade.",paraId:30,tocIndex:8},{value:`yarn nocobase upgrade
`,paraId:31,tocIndex:8},{value:"test",paraId:13},{value:"jest",paraId:32,tocIndex:9},{value:" test, which supports all ",paraId:32,tocIndex:9},{value:"jest-cli",paraId:32,tocIndex:9},{value:" options, also supports ",paraId:32,tocIndex:9},{value:"-c, --db-clean",paraId:32,tocIndex:9},{value:".",paraId:32,tocIndex:9},{value:`$ yarn nocobase test -h

Usage: nocobase test [options]

Options:
  -c, --db-clean        Clear database before running all tests
  -h, --help
`,paraId:33,tocIndex:9},{value:"Example:",paraId:34,tocIndex:9},{value:`# Run all test files
yarn nocobase test
# Run all test files in the specified folder
yarn nocobase test packages/core/server
# Run all tests in the specified file
yarn nocobase test packages/core/database/src/__tests__/database.test.ts

# Clear database before running all tests
yarn nocobase test -c
yarn nocobase test packages/core/server -c
`,paraId:35,tocIndex:9},{value:"build",paraId:13},{value:"The source code needs to be compiled and packaged before the code is deployed to the production environment; and you need to re-build the code if it has any modification.",paraId:36,tocIndex:10},{value:`# All packages
yarn nocobase build
# Specified packages
yarn nocobase build app/server app/client
`,paraId:37,tocIndex:10},{value:"clean",paraId:13},{value:"Delete the compiled files.",paraId:38,tocIndex:11},{value:`yarn clean
# Equivalent to
yarn rimraf -rf packages/*/*/{lib,esm,es,dist}
`,paraId:39,tocIndex:11},{value:"doc",paraId:13},{value:"Documentation development.",paraId:40,tocIndex:12},{value:`# Start the documentation
yarn doc  --lang=zh-CN # Equivalent to yarn doc dev
# Build the documentation, and output it to . /docs/dist/ directory by default
yarn doc build
# View the final result of the output documentation of dist
yarn doc serve --lang=zh-CN
`,paraId:41,tocIndex:12},{value:"db:auth",paraId:13},{value:"Verify if the database is successfully connected.",paraId:42,tocIndex:13},{value:`$ yarn nocobase db:auth -h

Usage: nocobase db:auth [options]

Options:
  -r, --retry [retry]   Number of retries
  -h, --help
`,paraId:43,tocIndex:13},{value:"db:sync",paraId:13},{value:"Generate relevant data tables and fields through the configuration of collections.",paraId:44,tocIndex:14},{value:`$ yarn nocobase db:sync -h

Usage: nocobase db:sync [options]

Options:
  -f, --force
  -h, --help   display help for command
`,paraId:45,tocIndex:14},{value:"migrator",paraId:13},{value:"Data migration.",paraId:46,tocIndex:15},{value:`$ yarn nocobase migrator

Positional arguments:
  <command>
    up        Applies pending migrations
    down      Revert migrations
    pending   Lists pending migrations
    executed  Lists executed migrations
    create    Create a migration file
`,paraId:47,tocIndex:15},{value:"pm",paraId:13},{value:"Plugin manager.",paraId:48,tocIndex:16},{value:`# Create plugin
yarn pm create hello
# Register plugin
yarn pm add hello
# Enable plugin
yarn pm enable hello
# Disable plugin
yarn pm disable hello
# Remove plugin
yarn pm remove hello
`,paraId:49,tocIndex:16},{value:"Not achieved yet:",paraId:50,tocIndex:16},{value:`# Upgrade plugin
yarn pm upgrade hello
# Publish plugin
yarn pm publish hello
`,paraId:51,tocIndex:16},{value:"umi",paraId:13},{value:"app/client",paraId:52,tocIndex:17},{value:" is built based on ",paraId:52,tocIndex:17},{value:"umi",paraId:52,tocIndex:17},{value:", you can run other relevant commands through ",paraId:52,tocIndex:17},{value:"nocobase umi",paraId:52,tocIndex:17},{value:".",paraId:52,tocIndex:17},{value:`# Generate the .umi cache needed for the development environment
yarn nocobase umi generate tmp
`,paraId:53,tocIndex:17},{value:"help",paraId:13},{value:"The help command, you can also use the option parameter, ",paraId:54,tocIndex:18},{value:"-h",paraId:54,tocIndex:18},{value:" and ",paraId:54,tocIndex:18},{value:"--help",paraId:54,tocIndex:18},{value:".",paraId:54,tocIndex:18},{value:`# View all cli
yarn nocobase help
# Use -h instead
yarn nocobase -h
# Or --help
yarn nocobase --help
# View options of command db:sync
yarn nocobase db:sync -h
`,paraId:55,tocIndex:18}]},438409:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"constructor()",paraId:0},{value:"Create an application instance.",paraId:1,tocIndex:2},{value:"Signature",paraId:2,tocIndex:2},{value:"constructor(options: ApplicationOptions)",paraId:3,tocIndex:2},{value:"Example",paraId:4,tocIndex:2},{value:`const app = new Application({
  apiClient: {
    baseURL: process.env.API_BASE_URL,
  },
  dynamicImport: (name: string) => {
    return import(\`../plugins/\${name}\`);
  },
});
`,paraId:5,tocIndex:2},{value:"Add Providers, build-in Providers are:",paraId:6,tocIndex:4},{value:"APIClientProvider",paraId:7,tocIndex:4},{value:"I18nextProvider",paraId:7,tocIndex:4},{value:"AntdConfigProvider",paraId:7,tocIndex:4},{value:"SystemSettingsProvider",paraId:7,tocIndex:4},{value:"PluginManagerProvider",paraId:7,tocIndex:4},{value:"SchemaComponentProvider",paraId:7,tocIndex:4},{value:"SchemaInitializerProvider",paraId:7,tocIndex:4},{value:"BlockSchemaComponentProvider",paraId:7,tocIndex:4},{value:"AntdSchemaComponentProvider",paraId:7,tocIndex:4},{value:"ACLProvider",paraId:7,tocIndex:4},{value:"RemoteDocumentTitleProvider",paraId:7,tocIndex:4},{value:"Component to render the App.",paraId:8,tocIndex:5},{value:`import { Application } from '@nocobase/client';

export const app = new Application({
  apiClient: {
    baseURL: process.env.API_BASE_URL,
  },
  dynamicImport: (name: string) => {
    return import(\`../plugins/\${name}\`);
  },
});

export default app.render();
`,paraId:9,tocIndex:5}]},786325:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"<ACLProvider />",paraId:0},{value:"<ACLRolesCheckProvider />",paraId:0},{value:"<ACLCollectionProvider />",paraId:0},{value:"<ACLActionProvider />",paraId:0},{value:"<ACLCollectionFieldProvider />",paraId:0},{value:"<ACLMenuItemProvider />",paraId:0},{value:"useACLContext()",paraId:0},{value:"useACLRoleContext()",paraId:0},{value:"useRoleRecheck()",paraId:0}]},286515:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"<BlockProvider />",paraId:0},{value:"useBlockRequestContext()",paraId:0},{value:"<CalendarBlockProvider />",paraId:0},{value:"<TableFieldProvider />",paraId:0},{value:"<TableBlockProvider />",paraId:0},{value:"<TableSelectorProvider />",paraId:0},{value:"<FormBlockProvider />",paraId:0},{value:"<FormFieldProvider />",paraId:0},{value:"<DetailsBlockProvider />",paraId:0},{value:"<KanbanBlockProvider />",paraId:0}]},999465:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`<CollectionManagerProvider
  interfaces={{}}
  collections={[]}
></CollectionManagerProvider>
`,paraId:0,tocIndex:2},{value:`const collection = {
  name: 'tests',
  fields: [
    {
      type: 'string',
      name: 'title',
      interface: 'input',
      uiSchema: {
        type: 'string',
        'x-component': 'Input',
      },
    },
  ],
};
<CollectionProvider collection={collection}></CollectionProvider>;
`,paraId:1,tocIndex:3},{value:"If there is no collection parameter passed in, get the collection from CollectionManagerProvider with the corresponding name.",paraId:2,tocIndex:3},{value:`const collections = [
  {
    name: 'tests',
    fields: [
      {
        type: 'string',
        name: 'title',
        interface: 'input',
        uiSchema: {
          type: 'string',
          'x-component': 'Input',
        },
      },
    ],
  },
];
<CollectionManagerProvider collections={collections}>
  <CollectionProvider name={'tests'}></CollectionProvider>
</CollectionManagerProvider>;
`,paraId:3,tocIndex:3},{value:`const field = {
  type: 'string',
  name: 'title',
  interface: 'input',
  uiSchema: {
    type: 'string',
    'x-component': 'Input',
  },
};
<CollectionFieldProvider field={field}></CollectionFieldProvider>;
`,paraId:4,tocIndex:4},{value:"If there is no field parameter passed in, get the field from CollectionProvider with the corresponding name.",paraId:5,tocIndex:4},{value:`const collection = {
  name: 'tests',
  fields: [
    {
      type: 'string',
      name: 'title',
      interface: 'input',
      uiSchema: {
        type: 'string',
        'x-component': 'Input',
      },
    },
  ],
};
<CollectionProvider collection={collection}>
  <CollectionFieldProvider name={'title'}></CollectionFieldProvider>
</CollectionProvider>;
`,paraId:6,tocIndex:4},{value:"Universal field component that needs to be used with ",paraId:7,tocIndex:5},{value:"<CollectionProvider/>",paraId:7,tocIndex:5},{value:", but only in schema scenarios. Get the field schema from CollectionProvider with the corresponding name. Extend the configuration via the schema where the CollectionField is located.",paraId:7,tocIndex:5},{value:`{
  name: 'title',
  'x-decorator': 'FormItem',
  'x-decorator-props': {},
  'x-component': 'CollectionField',
  'x-component-props': {},
  properties: {},
}
`,paraId:8,tocIndex:5},{value:"Use with ",paraId:9,tocIndex:7},{value:"<CollectionManagerProvider/>",paraId:9,tocIndex:7},{value:".",paraId:9,tocIndex:7},{value:`const { collections, get } = useCollectionManager();
`,paraId:10,tocIndex:7},{value:"Use with ",paraId:11,tocIndex:8},{value:"<CollectionProvider/>",paraId:11,tocIndex:8},{value:".",paraId:11,tocIndex:8},{value:`const { name, fields, getField, findField, resource } = useCollection();
`,paraId:12,tocIndex:8},{value:"Use with ",paraId:13,tocIndex:9},{value:"<CollectionFieldProvider/>",paraId:13,tocIndex:9},{value:".",paraId:13,tocIndex:9},{value:`const { name, uiSchema, resource } = useCollectionField();
`,paraId:14,tocIndex:9},{value:"The resource needs to be used with ",paraId:15,tocIndex:9},{value:"<RecordProvider/>",paraId:15,tocIndex:9},{value:" to provide context of the record of the current data table row.",paraId:15,tocIndex:9},{value:`<CollectionManagerProvider
  interfaces={{}}
  collections={[]}
></CollectionManagerProvider>
`,paraId:16,tocIndex:12},{value:`const collection = {
  name: 'tests',
  fields: [
    {
      type: 'string',
      name: 'title',
      interface: 'input',
      uiSchema: {
        type: 'string',
        'x-component': 'Input',
      },
    },
  ],
};
<CollectionProvider collection={collection}></CollectionProvider>;
`,paraId:17,tocIndex:13},{value:"If there is no collection parameter passed in, get the collection from CollectionManagerProvider with the corresponding name.",paraId:18,tocIndex:13},{value:`const collections = [
  {
    name: 'tests',
    fields: [
      {
        type: 'string',
        name: 'title',
        interface: 'input',
        uiSchema: {
          type: 'string',
          'x-component': 'Input',
        },
      },
    ],
  },
];
<CollectionManagerProvider collections={collections}>
  <CollectionProvider name={'tests'}></CollectionProvider>
</CollectionManagerProvider>;
`,paraId:19,tocIndex:13},{value:`const field = {
  type: 'string',
  name: 'title',
  interface: 'input',
  uiSchema: {
    type: 'string',
    'x-component': 'Input',
  },
};
<CollectionFieldProvider field={field}></CollectionFieldProvider>;
`,paraId:20,tocIndex:14},{value:"If there is no field parameter passed in, get the field from CollectionProvider with the corresponding name.",paraId:21,tocIndex:14},{value:`const collection = {
  name: 'tests',
  fields: [
    {
      type: 'string',
      name: 'title',
      interface: 'input',
      uiSchema: {
        type: 'string',
        'x-component': 'Input',
      },
    },
  ],
};
<CollectionProvider collection={collection}>
  <CollectionFieldProvider name={'title'}></CollectionFieldProvider>
</CollectionProvider>;
`,paraId:22,tocIndex:14},{value:"Universal field component that needs to be used with ",paraId:23,tocIndex:15},{value:"<CollectionProvider/>",paraId:23,tocIndex:15},{value:", but only in schema scenarios. Get the field schema from CollectionProvider with the corresponding name. Extend the configuration via the schema where the CollectionField is located.",paraId:23,tocIndex:15},{value:`{
  name: 'title',
  'x-decorator': 'FormItem',
  'x-decorator-props': {},
  'x-component': 'CollectionField',
  'x-component-props': {},
  properties: {},
}
`,paraId:24,tocIndex:15},{value:"Use with ",paraId:25,tocIndex:17},{value:"<CollectionManagerProvider/>",paraId:25,tocIndex:17},{value:".",paraId:25,tocIndex:17},{value:`const { collections, get } = useCollectionManager();
`,paraId:26,tocIndex:17},{value:"Use with ",paraId:27,tocIndex:18},{value:"<CollectionProvider/>",paraId:27,tocIndex:18},{value:".",paraId:27,tocIndex:18},{value:`const { name, fields, getField, findField, resource } = useCollection();
`,paraId:28,tocIndex:18},{value:"Use with ",paraId:29,tocIndex:19},{value:"<CollectionFieldProvider/>",paraId:29,tocIndex:19},{value:".",paraId:29,tocIndex:19},{value:`const { name, uiSchema, resource } = useCollectionField();
`,paraId:30,tocIndex:19},{value:"The resource needs to be used with ",paraId:31,tocIndex:19},{value:"<RecordProvider/>",paraId:31,tocIndex:19},{value:" to provide context of the record of the current data table row.",paraId:31,tocIndex:19}]},582497:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"DndContext",paraId:0,tocIndex:1},{value:"SortableItem",paraId:0,tocIndex:1},{value:"Action",paraId:1,tocIndex:2},{value:"BlockItem",paraId:1,tocIndex:2},{value:"Calendar",paraId:1,tocIndex:2},{value:"CardItem",paraId:1,tocIndex:2},{value:"Cascader",paraId:1,tocIndex:2}]},583533:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"test",paraId:0,tocIndex:0}]},625467:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`const app = new Application({
  router: {
    type: 'browser', // type default value is \`browser\`
  },
});

// or
const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
});
`,paraId:0,tocIndex:2},{value:`import { RouteObject } from 'react-router-dom';
const app = new Application();

const Hello = () => {
  return <div>Hello</div>;
};

// first argument is \`name\` of route, second argument is \`RouteObject\`
app.router.add('root', {
  path: '/',
  element: <Hello />,
});

app.router.add('root', {
  path: '/',
  Component: Hello,
});
`,paraId:1,tocIndex:4},{value:`app.addComponents({
  Hello,
});
app.router.add('root', {
  path: '/',
  Component: 'Hello',
});
`,paraId:2,tocIndex:5},{value:`import { Outlet } from 'react-router-dom';

const Layout = () => {
  return (
    <div>
      <Link to="/home">Home</Link>
      <Link to="/about">about</Link>

      <Outlet />
    </div>
  );
};

const Home = () => {
  return <div>Home</div>;
};

const About = () => {
  return <div>About</div>;
};

app.router.add('root', {
  element: <Layout />,
});
app.router.add('root.home', {
  path: '/home',
  element: <Home />,
});
app.router.add('root.about', {
  path: '/about',
  element: <About />,
});
`,paraId:3,tocIndex:6},{value:"It will generate the following routes:",paraId:4,tocIndex:6},{value:`{
  element: <Layout />,
  children: [
    {
      path: '/home',
      element: <Home />
    },
    {
      path: '/about',
      element: <About />
    }
  ]
}
`,paraId:5,tocIndex:6},{value:`// remove route by name
app.router.remove('root.home');
app.router.remove('hello');
`,paraId:6,tocIndex:7},{value:`class MyPlugin extends Plugin {
  async load() {
    // add route
    this.app.router.add('hello', {
      path: '/hello',
      element: <div>hello</div>,
    });

    // remove route
    this.app.router.remove('world');
  }
}
`,paraId:7,tocIndex:8}]},964987:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"<SchemaComponentProvider />",paraId:0},{value:"<SchemaComponentOptions>",paraId:0},{value:"<SchemaComponent>",paraId:0},{value:"createDesignable()",paraId:0},{value:"useDesignable()",paraId:0},{value:"useCompile()",paraId:0}]},264337:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used for the initialization of various schemas. Newly added schema can be inserted anywhere in an existing schema node, including:",paraId:0,tocIndex:0},{value:`{
  properties: {
    // beforeBegin - Insert in front of the current node
    node1: {
      properties: {
        // afterBegin - Insert in front of the first child node of the current node
        // ...
        // beforeEnd - After the last child node of the current node
      },
    },
    // afterEnd - After the current node
  },
}
`,paraId:1,tocIndex:0},{value:"The core of SchemaInitializer includes ",paraId:2,tocIndex:0},{value:"<SchemaInitializer.Button />",paraId:2,tocIndex:0},{value:" and ",paraId:2,tocIndex:0},{value:"<SchemaInitializer.Item />",paraId:2,tocIndex:0},{value:" the two components. ",paraId:2,tocIndex:0},{value:"<SchemaInitializer.Button />",paraId:2,tocIndex:0},{value:" is used to create the dropdown menu button of schema, and the options of the dropdown menu is ",paraId:2,tocIndex:0},{value:"<SchemaInitializer.Item/>",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"<SchemaInitializerProvider />",paraId:3},{value:"<SchemaInitializer.Button />",paraId:3},{value:"<SchemaInitializer.Item/>",paraId:3}]},118470:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"<SchemaSettings />",paraId:0},{value:"<SchemaSettings.Item />",paraId:0},{value:"<SchemaSettings.ItemGroup />",paraId:0},{value:"<SchemaSettings.SubMenu />",paraId:0},{value:"<SchemaSettings.Divider />",paraId:0},{value:"<SchemaSettings.Remove />",paraId:0},{value:"<SchemaSettings.SelectItem />",paraId:0},{value:"<SchemaSettings.SwitchItem />",paraId:0},{value:"<SchemaSettings.ModalItem />",paraId:0},{value:"<SchemaSettings.ActionModalItem />",paraId:0},{value:"<SchemaSettings.Template />",paraId:0},{value:"<SchemaSettings.BlockTitleItem />",paraId:0}]},229779:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:0},{value:"DataSource",paraId:0,tocIndex:0},{value:" abstract class is used to represent a type of data source, which can be a database, API, etc.",paraId:0,tocIndex:0},{value:"The CollectionManager instance of the data source, which needs to implement the ",paraId:1,tocIndex:2},{value:"ICollectionManager",paraId:2,tocIndex:2},{value:" interface.",paraId:1,tocIndex:2},{value:"The resourceManager instance of the data source, see: ",paraId:3,tocIndex:3},{value:"resourceManager",paraId:4,tocIndex:3},{value:"The ACL instance of the data source, see: ",paraId:5,tocIndex:4},{value:"ACL",paraId:6,tocIndex:4},{value:"Constructor, creates a ",paraId:7,tocIndex:6},{value:"DataSource",paraId:7,tocIndex:6},{value:" instance.",paraId:7,tocIndex:6},{value:"constructor(options: DataSourceOptions)",paraId:8,tocIndex:7},{value:"Initialization function, called immediately after ",paraId:9,tocIndex:8},{value:"constructor",paraId:9,tocIndex:8},{value:".",paraId:9,tocIndex:8},{value:"init(options: DataSourceOptions)",paraId:10,tocIndex:9},{value:"get name()",paraId:11,tocIndex:11},{value:"Returns the instance name of the data source.",paraId:12,tocIndex:11},{value:"Gets the middleware of the DataSource, used to mount to the Server to receive requests.",paraId:13,tocIndex:12},{value:"Static method, called during the test connection operation, can be used for parameter validation, specific logic is implemented by subclasses.",paraId:14,tocIndex:13},{value:"static testConnection(options?: any): Promise<boolean>",paraId:15,tocIndex:14},{value:"async load(options: any = {})",paraId:16,tocIndex:16},{value:"The loading operation of the data source, logic is implemented by subclasses.",paraId:17,tocIndex:16},{value:"abstract createCollectionManager(options?: any): ICollectionManager",paraId:18,tocIndex:18},{value:"Creates a CollectionManager instance for the data source, logic is implemented by subclasses.",paraId:19,tocIndex:18},{value:"Creates a ResourceManager instance for the data source, subclasses can override the implementation, by default creates ",paraId:20,tocIndex:19},{value:"ResourceManager",paraId:20,tocIndex:19},{value:" from ",paraId:20,tocIndex:19},{value:"@nocobase/resourcer",paraId:20,tocIndex:19},{value:".",paraId:20,tocIndex:19},{value:"Creates an ACL instance for the DataSource, subclasses can override the implementation, by default creates ",paraId:21,tocIndex:20},{value:"ACL",paraId:21,tocIndex:20},{value:" from ",paraId:21,tocIndex:20},{value:"@nocobase/acl",paraId:21,tocIndex:20},{value:".",paraId:21,tocIndex:20}]},453220:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:0},{value:"ICollectionManager",paraId:0,tocIndex:0},{value:" interface is used to manage ",paraId:0,tocIndex:0},{value:"Collection",paraId:0,tocIndex:0},{value:" instances of data sources.",paraId:0,tocIndex:0},{value:"Registers the field types in a ",paraId:1,tocIndex:2},{value:"Collection",paraId:1,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"registerFieldTypes(types: Record<string, any>): void",paraId:2,tocIndex:3},{value:"Registers the ",paraId:3,tocIndex:4},{value:"Interface",paraId:3,tocIndex:4},{value:" for a ",paraId:3,tocIndex:4},{value:"Collection",paraId:3,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"registerFieldInterfaces(interfaces: Record<string, any>): void",paraId:4,tocIndex:5},{value:"Registers ",paraId:5,tocIndex:6},{value:"Collection Templates",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"registerCollectionTemplates(templates: Record<string, any>): void",paraId:6,tocIndex:7},{value:"Registers ",paraId:7,tocIndex:8},{value:"Models",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"registerModels(models: Record<string, any>): void",paraId:8,tocIndex:9},{value:"Registers ",paraId:9,tocIndex:10},{value:"Repositories",paraId:9,tocIndex:10},{value:".",paraId:9,tocIndex:10},{value:"registerRepositories(repositories: Record<string, any>): void",paraId:10,tocIndex:11},{value:"Retrieves an instance of a registered repository.",paraId:11,tocIndex:12},{value:"getRegisteredRepository(key: string): IRepository",paraId:12,tocIndex:13},{value:"Defines a ",paraId:13,tocIndex:14},{value:"Collection",paraId:13,tocIndex:14},{value:".",paraId:13,tocIndex:14},{value:"defineCollection(options: CollectionOptions): ICollection",paraId:14,tocIndex:15},{value:"Modifies an existing ",paraId:15,tocIndex:16},{value:"Collection",paraId:15,tocIndex:16},{value:" property.",paraId:15,tocIndex:16},{value:"extendCollection(collectionOptions: CollectionOptions, mergeOptions?: MergeOptions): ICollection",paraId:16,tocIndex:17},{value:"Determines if a ",paraId:17,tocIndex:18},{value:"Collection",paraId:17,tocIndex:18},{value:" exists.",paraId:17,tocIndex:18},{value:"hasCollection(name: string): boolean",paraId:18,tocIndex:19},{value:"Retrieves an instance of a ",paraId:19,tocIndex:20},{value:"Collection",paraId:19,tocIndex:20},{value:".",paraId:19,tocIndex:20},{value:"getCollection(name: string): ICollection",paraId:20,tocIndex:21},{value:"Retrieves all instances of ",paraId:21,tocIndex:22},{value:"Collection",paraId:21,tocIndex:22},{value:".",paraId:21,tocIndex:22},{value:"getCollections(): Array<ICollection>",paraId:22,tocIndex:23},{value:"Retrieves an instance of a ",paraId:23,tocIndex:24},{value:"Repository",paraId:23,tocIndex:24},{value:".",paraId:23,tocIndex:24},{value:"getRepository(name: string, sourceId?: string | number): IRepository",paraId:24,tocIndex:25},{value:"Synchronizes the data source, with the logic implemented by subclasses.",paraId:25,tocIndex:26},{value:"sync(): Promise<void>",paraId:26,tocIndex:27}]},426122:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"ICollection",paraId:0,tocIndex:0},{value:" is an interface for data models, which includes information such as the model's name, fields, associations, etc.",paraId:0,tocIndex:0},{value:`export interface ICollection {
  repository: IRepository;

  updateOptions(options: any): void;

  setField(name: string, options: any): IField;

  removeField(name: string): void;

  getFields(): Array<IField>;

  getField(name: string): IField;

  [key: string]: any;
}
`,paraId:1,tocIndex:0},{value:"The ",paraId:2,tocIndex:2},{value:"Repository",paraId:2,tocIndex:2},{value:" instance to which ",paraId:2,tocIndex:2},{value:"ICollection",paraId:2,tocIndex:2},{value:" belongs.",paraId:2,tocIndex:2},{value:"Updates the properties of the ",paraId:3,tocIndex:4},{value:"Collection",paraId:3,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"updateOptions(options: any): void",paraId:4,tocIndex:5},{value:"Sets a field of the ",paraId:5,tocIndex:6},{value:"Collection",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"setField(name: string, options: any): IField",paraId:6,tocIndex:7},{value:"Removes a field from the ",paraId:7,tocIndex:8},{value:"Collection",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"removeField(name: string): void",paraId:8,tocIndex:9},{value:"Retrieves all fields of the ",paraId:9,tocIndex:10},{value:"Collection",paraId:9,tocIndex:10},{value:".",paraId:9,tocIndex:10},{value:"getFields(): Array<IField>",paraId:10,tocIndex:11},{value:"Retrieves a field of the ",paraId:11,tocIndex:12},{value:"Collection",paraId:11,tocIndex:12},{value:" by name.",paraId:11,tocIndex:12},{value:"getField(name: string): IField",paraId:12,tocIndex:13}]},801222:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"IField",paraId:0,tocIndex:0},{value:" defines the interface that fields need to implement.",paraId:0,tocIndex:0},{value:`export type FieldOptions = {
  name: string;
  field: string;
  rawType: string;
  type: string;
  description?: string;
  interface?: string;
  uiSchema?: any;
  possibleTypes?: string[];
  defaultValue?: any;
  primaryKey: boolean;
  unique: boolean;
  allowNull?: boolean;
  autoIncrement?: boolean;
  [key: string]: any;
};

export interface IField {
  options: FieldOptions;
}
`,paraId:1,tocIndex:0},{value:"Type",paraId:2,tocIndex:2},{value:": ",paraId:2,tocIndex:2},{value:"FieldOptions",paraId:2,tocIndex:2}]},123210:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:0},{value:"IModel",paraId:0,tocIndex:0},{value:" interface defines the basic properties and methods of a model object.",paraId:0,tocIndex:0},{value:`export interface IModel {
  toJSON: () => any;
}
`,paraId:1,tocIndex:0},{value:"Converts the model object to JSON format.",paraId:2,tocIndex:2}]},48648:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:0},{value:"Repository",paraId:0,tocIndex:0},{value:" interface defines a series of model operation methods for adapting CRUD (Create, Read, Update, Delete) operations on data sources.",paraId:0,tocIndex:0},{value:"Returns a list of models that match the query parameters.",paraId:1,tocIndex:2},{value:"find(options?: any): Promise<IModel[]>",paraId:2,tocIndex:3},{value:"Returns the first model that matches the query parameters. If multiple models match, only the first one is returned.",paraId:3,tocIndex:4},{value:"findOne(options?: any): Promise<IModel>",paraId:4,tocIndex:5},{value:"Returns the number of models that match the query parameters.",paraId:5,tocIndex:6},{value:"count(options?: any): Promise<Number>",paraId:6,tocIndex:7},{value:"Returns both the list of models and the count of models that match the query parameters.",paraId:7,tocIndex:8},{value:"findAndCount(options?: any): Promise<[IModel[], Number]>",paraId:8,tocIndex:9},{value:"Creates a model data object.",paraId:9,tocIndex:10},{value:"create(options: any): void",paraId:10,tocIndex:11},{value:"Updates the model data object based on the query conditions.",paraId:11,tocIndex:12},{value:"update(options: any): void",paraId:12,tocIndex:13},{value:"Deletes the model data object based on the query conditions.",paraId:13,tocIndex:14},{value:"destroy(options: any): void",paraId:14,tocIndex:15}]},85545:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"DataSourceManager",paraId:0,tocIndex:0},{value:" is a management class for multiple ",paraId:0,tocIndex:0},{value:"dataSource",paraId:0,tocIndex:0},{value:" instances.",paraId:0,tocIndex:0},{value:"Adds a ",paraId:1,tocIndex:2},{value:"dataSource",paraId:1,tocIndex:2},{value:" instance.",paraId:1,tocIndex:2},{value:"add(dataSource: DataSource, options: any = {}): Promise<void>",paraId:2,tocIndex:3},{value:"Adds a global middleware to the ",paraId:3,tocIndex:4},{value:"dataSource",paraId:3,tocIndex:4},{value:" instance.",paraId:3,tocIndex:4},{value:"Retrieves the middleware of the current ",paraId:4,tocIndex:5},{value:"dataSourceManager",paraId:4,tocIndex:5},{value:" instance, which can be used to respond to HTTP requests.",paraId:4,tocIndex:5},{value:"A hook function that is triggered after a new ",paraId:5,tocIndex:6},{value:"dataSource",paraId:5,tocIndex:6},{value:" is added.",paraId:5,tocIndex:6},{value:"afterAddDataSource(hook: DataSourceHook)",paraId:6,tocIndex:7},{value:`type DataSourceHook = (dataSource: DataSource) => void;
`,paraId:7,tocIndex:7},{value:"Registers the data source type and its class.",paraId:8,tocIndex:8},{value:"registerDataSourceType(type: string, dataSourceClass: typeof DataSource)",paraId:9,tocIndex:9},{value:"Retrieves the data source class.",paraId:10,tocIndex:10},{value:"getDataSourceType(type: string): typeof DataSource",paraId:11,tocIndex:11},{value:"Creates a data source instance based on the registered data source type and instance parameters.",paraId:12,tocIndex:12},{value:"buildDataSourceByType(type: string, options: any): DataSource",paraId:13,tocIndex:13}]},796863:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Collection",paraId:0,tocIndex:1},{value:" is used to define the data model in the system, such as model name, fields, indexes, associations, and other information. It is usually called through the ",paraId:0,tocIndex:1},{value:"collection",paraId:0,tocIndex:1},{value:" method of the ",paraId:0,tocIndex:1},{value:"Database",paraId:0,tocIndex:1},{value:" instance as a proxy entry.",paraId:0,tocIndex:1},{value:`const { Database } = require('@nocobase/database')

// Create database instance
const db = new Database({...});

// Define data model
db.collection({
  name: 'users',
  // Define model fields
  fields: [
    // Scalar field
    {
      name: 'name',
      type: 'string',
    },

    // Association field
    {
      name: 'profile',
      type: 'hasOne' // 'hasMany', 'belongsTo', 'belongsToMany'
    }
  ],
});
`,paraId:1,tocIndex:1},{value:"Refer to ",paraId:2,tocIndex:1},{value:"Fields",paraId:3,tocIndex:1},{value:" for more field types.",paraId:2,tocIndex:1},{value:"Signature",paraId:4,tocIndex:2},{value:"constructor(options: CollectionOptions, context: CollectionContext)",paraId:5,tocIndex:2},{value:"Parameter",paraId:6,tocIndex:2},{value:"Name",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"options.name",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Identifier of the collection",paraId:7,tocIndex:2},{value:"options.tableName?",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Database table name, the value of ",paraId:7,tocIndex:2},{value:"options.name",paraId:7,tocIndex:2},{value:" is used if not set",paraId:7,tocIndex:2},{value:"options.fields?",paraId:7,tocIndex:2},{value:"FieldOptions[]",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Definition of fields, refer to ",paraId:7,tocIndex:2},{value:"Field",paraId:8,tocIndex:2},{value:" for details",paraId:7,tocIndex:2},{value:"options.model?",paraId:7,tocIndex:2},{value:"string | ModelStatic<Model>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Model type of Sequelize; in case ",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" is used, this model name needs to be registered in the db before being called",paraId:7,tocIndex:2},{value:"options.repository?",paraId:7,tocIndex:2},{value:"string | RepositoryType",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Data repository type; in case ",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" is used, this repository type needs to be registered in the db before being called",paraId:7,tocIndex:2},{value:"options.sortable?",paraId:7,tocIndex:2},{value:"string | boolean | { name?: string; scopeKey?: string }",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Configure which fields are sortable; not sortable by default",paraId:7,tocIndex:2},{value:"options.autoGenId?",paraId:7,tocIndex:2},{value:"boolean",paraId:7,tocIndex:2},{value:"true",paraId:7,tocIndex:2},{value:"Whether to automatically generate unique primary key; ",paraId:7,tocIndex:2},{value:"true",paraId:7,tocIndex:2},{value:" by default",paraId:7,tocIndex:2},{value:"context.database",paraId:7,tocIndex:2},{value:"Database",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"The context database in which it resides",paraId:7,tocIndex:2},{value:"Example",paraId:9,tocIndex:2},{value:"Create a table ",paraId:10,tocIndex:2},{value:"posts",paraId:10,tocIndex:2},{value:":",paraId:10,tocIndex:2},{value:`const posts = new Collection(
  {
    name: 'posts',
    fields: [
      {
        type: 'string',
        name: 'title',
      },
      {
        type: 'double',
        name: 'price',
      },
    ],
  },
  {
    // An existing database instance
    database: db,
  },
);
`,paraId:11,tocIndex:2},{value:"options",paraId:12},{value:"Initial parameters for data table configuration, which are consistent with the ",paraId:13,tocIndex:4},{value:"options",paraId:13,tocIndex:4},{value:" parameter of the constructor.",paraId:13,tocIndex:4},{value:"context",paraId:12},{value:"The contextual environment to which the current data table belongs, currently mainly the database instance.",paraId:14,tocIndex:5},{value:"name",paraId:12},{value:"Name of the data table.",paraId:15,tocIndex:6},{value:"db",paraId:12},{value:"The database instance to which it belongs.",paraId:16,tocIndex:7},{value:"filterTargetKey",paraId:12},{value:"Name of the field that is used as the primary key.",paraId:17,tocIndex:8},{value:"isThrough",paraId:12},{value:"Whether it is an intermediate table.",paraId:18,tocIndex:9},{value:"model",paraId:12},{value:"Match the Model type of Sequelize.",paraId:19,tocIndex:10},{value:"repository",paraId:12},{value:"Data repository instance.",paraId:20,tocIndex:11},{value:"getField()",paraId:12},{value:"Get a field object whose corresponding name has been defined in the data table.",paraId:21,tocIndex:13},{value:"Signature",paraId:22,tocIndex:13},{value:"getField(name: string): Field",paraId:23,tocIndex:13},{value:"Parameter",paraId:24,tocIndex:13},{value:"Name",paraId:25,tocIndex:13},{value:"Type",paraId:25,tocIndex:13},{value:"Default",paraId:25,tocIndex:13},{value:"Description",paraId:25,tocIndex:13},{value:"name",paraId:25,tocIndex:13},{value:"string",paraId:25,tocIndex:13},{value:"-",paraId:25,tocIndex:13},{value:"Name of the field",paraId:25,tocIndex:13},{value:"Example",paraId:26,tocIndex:13},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

const field = posts.getField('title');
`,paraId:27,tocIndex:13},{value:"setField()",paraId:12},{value:"Set a field to the data table.",paraId:28,tocIndex:14},{value:"Signature",paraId:29,tocIndex:14},{value:"setField(name: string, options: FieldOptions): Field",paraId:30,tocIndex:14},{value:"Parameter",paraId:31,tocIndex:14},{value:"Name",paraId:32,tocIndex:14},{value:"Type",paraId:32,tocIndex:14},{value:"Default",paraId:32,tocIndex:14},{value:"Description",paraId:32,tocIndex:14},{value:"name",paraId:32,tocIndex:14},{value:"string",paraId:32,tocIndex:14},{value:"-",paraId:32,tocIndex:14},{value:"Name of the field",paraId:32,tocIndex:14},{value:"options",paraId:32,tocIndex:14},{value:"FieldOptions",paraId:32,tocIndex:14},{value:"-",paraId:32,tocIndex:14},{value:"Configuration of the field, refer to ",paraId:32,tocIndex:14},{value:"Field",paraId:33,tocIndex:14},{value:" for details",paraId:32,tocIndex:14},{value:"Example",paraId:34,tocIndex:14},{value:`const posts = db.collection({ name: 'posts' });

posts.setField('title', { type: 'string' });
`,paraId:35,tocIndex:14},{value:"setFields()",paraId:12},{value:"Set multiple fields to the data table.",paraId:36,tocIndex:15},{value:"Signature",paraId:37,tocIndex:15},{value:"setFields(fields: FieldOptions[], resetFields = true): Field[]",paraId:38,tocIndex:15},{value:"Parameter",paraId:39,tocIndex:15},{value:"Name",paraId:40,tocIndex:15},{value:"Type",paraId:40,tocIndex:15},{value:"Default",paraId:40,tocIndex:15},{value:"Description",paraId:40,tocIndex:15},{value:"fields",paraId:40,tocIndex:15},{value:"FieldOptions[]",paraId:40,tocIndex:15},{value:"-",paraId:40,tocIndex:15},{value:"Configuration of the fields, refer to ",paraId:40,tocIndex:15},{value:"Field",paraId:41,tocIndex:15},{value:" for details",paraId:40,tocIndex:15},{value:"resetFields",paraId:40,tocIndex:15},{value:"boolean",paraId:40,tocIndex:15},{value:"true",paraId:40,tocIndex:15},{value:"Whether to reset existing fields",paraId:40,tocIndex:15},{value:"Example",paraId:42,tocIndex:15},{value:`const posts = db.collection({ name: 'posts' });

posts.setFields([
  { type: 'string', name: 'title' },
  { type: 'double', name: 'price' },
]);
`,paraId:43,tocIndex:15},{value:"removeField()",paraId:12},{value:"Remove a field object whose corresponding name has been defined in the data table.",paraId:44,tocIndex:16},{value:"Signature",paraId:45,tocIndex:16},{value:"removeField(name: string): void | Field",paraId:46,tocIndex:16},{value:"Parameter",paraId:47,tocIndex:16},{value:"Name",paraId:48,tocIndex:16},{value:"Type",paraId:48,tocIndex:16},{value:"Default",paraId:48,tocIndex:16},{value:"Description",paraId:48,tocIndex:16},{value:"name",paraId:48,tocIndex:16},{value:"string",paraId:48,tocIndex:16},{value:"-",paraId:48,tocIndex:16},{value:"Name of the field",paraId:48,tocIndex:16},{value:"Example",paraId:49,tocIndex:16},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.removeField('title');
`,paraId:50,tocIndex:16},{value:"resetFields()",paraId:12},{value:"Reset (Empty) fields of the data table.",paraId:51,tocIndex:17},{value:"Signature",paraId:52,tocIndex:17},{value:"resetFields(): void",paraId:53,tocIndex:17},{value:"Example",paraId:54,tocIndex:17},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.resetFields();
`,paraId:55,tocIndex:17},{value:"hasField()",paraId:12},{value:"Check if the data table has defined a field object with the corresponding name.",paraId:56,tocIndex:18},{value:"Signature",paraId:57,tocIndex:18},{value:"hasField(name: string): boolean",paraId:58,tocIndex:18},{value:"Parameter",paraId:59,tocIndex:18},{value:"Name",paraId:60,tocIndex:18},{value:"Type",paraId:60,tocIndex:18},{value:"Default",paraId:60,tocIndex:18},{value:"Description",paraId:60,tocIndex:18},{value:"name",paraId:60,tocIndex:18},{value:"string",paraId:60,tocIndex:18},{value:"-",paraId:60,tocIndex:18},{value:"Name of the field",paraId:60,tocIndex:18},{value:"Example",paraId:61,tocIndex:18},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.hasField('title'); // true
`,paraId:62,tocIndex:18},{value:"findField()",paraId:12},{value:"Find field objects in the data table that match the conditions.",paraId:63,tocIndex:19},{value:"Signature",paraId:64,tocIndex:19},{value:"findField(predicate: (field: Field) => boolean): Field | undefined",paraId:65,tocIndex:19},{value:"Parameter",paraId:66,tocIndex:19},{value:"Name",paraId:67,tocIndex:19},{value:"Type",paraId:67,tocIndex:19},{value:"Default",paraId:67,tocIndex:19},{value:"Description",paraId:67,tocIndex:19},{value:"predicate",paraId:67,tocIndex:19},{value:"(field: Field) => boolean",paraId:67,tocIndex:19},{value:"-",paraId:67,tocIndex:19},{value:"The condition",paraId:67,tocIndex:19},{value:"Example",paraId:68,tocIndex:19},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.findField((field) => field.name === 'title');
`,paraId:69,tocIndex:19},{value:"forEachField()",paraId:12},{value:"Iterate over field objects in the data table.",paraId:70,tocIndex:20},{value:"Signature",paraId:71,tocIndex:20},{value:"forEachField(callback: (field: Field) => void): void",paraId:72,tocIndex:20},{value:"Parameter",paraId:73,tocIndex:20},{value:"Name",paraId:74,tocIndex:20},{value:"Type",paraId:74,tocIndex:20},{value:"Default",paraId:74,tocIndex:20},{value:"Description",paraId:74,tocIndex:20},{value:"callback",paraId:74,tocIndex:20},{value:"(field: Field) => void",paraId:74,tocIndex:20},{value:"-",paraId:74,tocIndex:20},{value:"Callback function",paraId:74,tocIndex:20},{value:"Example",paraId:75,tocIndex:20},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.forEachField((field) => console.log(field.name));
`,paraId:76,tocIndex:20},{value:"addIndex()",paraId:12},{value:"Add data table index.",paraId:77,tocIndex:22},{value:"Signature",paraId:78,tocIndex:22},{value:"addIndex(index: string | string[] | { fields: string[], unique?: boolean,[key: string]: any })",paraId:79,tocIndex:22},{value:"Parameter",paraId:80,tocIndex:22},{value:"Name",paraId:81,tocIndex:22},{value:"Type",paraId:81,tocIndex:22},{value:"Default",paraId:81,tocIndex:22},{value:"Description",paraId:81,tocIndex:22},{value:"index",paraId:81,tocIndex:22},{value:"string | string[]",paraId:81,tocIndex:22},{value:"-",paraId:81,tocIndex:22},{value:"Names of fields to be indexed",paraId:81,tocIndex:22},{value:"index",paraId:81,tocIndex:22},{value:"{ fields: string[], unique?: boolean, [key: string]: any }",paraId:81,tocIndex:22},{value:"-",paraId:81,tocIndex:22},{value:"Full configuration",paraId:81,tocIndex:22},{value:"Example",paraId:82,tocIndex:22},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.addIndex({
  fields: ['title'],
  unique: true,
});
`,paraId:83,tocIndex:22},{value:"removeIndex()",paraId:12},{value:"Remove data table index.",paraId:84,tocIndex:23},{value:"Signature",paraId:85,tocIndex:23},{value:"removeIndex(fields: string[])",paraId:86,tocIndex:23},{value:"Parameter",paraId:87,tocIndex:23},{value:"Name",paraId:88,tocIndex:23},{value:"Type",paraId:88,tocIndex:23},{value:"Default",paraId:88,tocIndex:23},{value:"Description",paraId:88,tocIndex:23},{value:"fields",paraId:88,tocIndex:23},{value:"string[]",paraId:88,tocIndex:23},{value:"-",paraId:88,tocIndex:23},{value:"Names of fields to remove indexes",paraId:88,tocIndex:23},{value:"Example",paraId:89,tocIndex:23},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
  indexes: [
    {
      fields: ['title'],
      unique: true,
    },
  ],
});

posts.removeIndex(['title']);
`,paraId:90,tocIndex:23},{value:"remove()",paraId:12},{value:"Remove data table.",paraId:91,tocIndex:25},{value:"Signature",paraId:92,tocIndex:25},{value:"remove(): void",paraId:93,tocIndex:25},{value:"Example",paraId:94,tocIndex:25},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

posts.remove();
`,paraId:95,tocIndex:25},{value:"sync()",paraId:12},{value:"Synchronize the definitions in data table to the database. In addition to the default ",paraId:96,tocIndex:27},{value:"Model.sync",paraId:96,tocIndex:27},{value:" logic in Sequelize, the data tables corresponding to the relational fields will also be handled together.",paraId:96,tocIndex:27},{value:"Signature",paraId:97,tocIndex:27},{value:"sync(): Promise<void>",paraId:98,tocIndex:27},{value:"Example",paraId:99,tocIndex:27},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

await posts.sync();
`,paraId:100,tocIndex:27},{value:"existsInDb()",paraId:12},{value:"Check whether the data table exists in the database.",paraId:101,tocIndex:28},{value:"Signature",paraId:102,tocIndex:28},{value:"existsInDb(options?: Transactionable): Promise<boolean>",paraId:103,tocIndex:28},{value:"Parameter",paraId:104,tocIndex:28},{value:"Name",paraId:105,tocIndex:28},{value:"Type",paraId:105,tocIndex:28},{value:"Default",paraId:105,tocIndex:28},{value:"Description",paraId:105,tocIndex:28},{value:"options?.transaction",paraId:105,tocIndex:28},{value:"Transaction",paraId:105,tocIndex:28},{value:"-",paraId:105,tocIndex:28},{value:"Transaction instance",paraId:105,tocIndex:28},{value:"Example",paraId:106,tocIndex:28},{value:`const posts = db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});

const existed = await posts.existsInDb();

console.log(existed); // false
`,paraId:107,tocIndex:28},{value:"removeFromDb()",paraId:12},{value:"Signature",paraId:108,tocIndex:29},{value:"removeFromDb(): Promise<void>",paraId:109,tocIndex:29},{value:"Example",paraId:110,tocIndex:29},{value:`const books = db.collection({
  name: 'books',
});

//  Synchronize the table books to the database
await db.sync();

// Remove the table books from the database
await books.removeFromDb();
`,paraId:111,tocIndex:29}]},618805:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data table field management class (abstract class). It is also the base class for all field types, and any other field types are implemented by inheriting from this class.",paraId:0,tocIndex:1},{value:"Refer to ",paraId:1,tocIndex:1},{value:"Extended Field Types",paraId:2,tocIndex:1},{value:" to see how to customize fields.",paraId:1,tocIndex:1},{value:"It is usually not called directly by the developer, but mainly through the ",paraId:3,tocIndex:2},{value:"db.collection({ fields: [] })",paraId:3,tocIndex:2},{value:" method as a proxy entry.",paraId:3,tocIndex:2},{value:"Extended field is implemented mainly by inheriting the ",paraId:4,tocIndex:2},{value:"Field",paraId:4,tocIndex:2},{value:" abstract class and registering it to a Database instance.",paraId:4,tocIndex:2},{value:"Signature",paraId:5,tocIndex:2},{value:"constructor(options: FieldOptions, context: FieldContext)",paraId:6,tocIndex:2},{value:"Parameter",paraId:7,tocIndex:2},{value:"Name",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"options",paraId:8,tocIndex:2},{value:"FieldOptions",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Field configuration object",paraId:8,tocIndex:2},{value:"options.name",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Field name",paraId:8,tocIndex:2},{value:"options.type",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Field type, corresponding to the name of the field type registered in the db",paraId:8,tocIndex:2},{value:"context",paraId:8,tocIndex:2},{value:"FieldContext",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Field context object",paraId:8,tocIndex:2},{value:"context.database",paraId:8,tocIndex:2},{value:"Database",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Database instance",paraId:8,tocIndex:2},{value:"context.collection",paraId:8,tocIndex:2},{value:"Collection",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"Data table instance",paraId:8,tocIndex:2},{value:"name",paraId:9},{value:"Field name.",paraId:10,tocIndex:4},{value:"type",paraId:9},{value:"Field type.",paraId:11,tocIndex:5},{value:"dataType",paraId:9},{value:"Data type of the field.",paraId:12,tocIndex:6},{value:"options",paraId:9},{value:"Configuration parameters to initialize the field.",paraId:13,tocIndex:7},{value:"context",paraId:9},{value:"Field context object.",paraId:14,tocIndex:8},{value:"on()",paraId:9},{value:"Quick definition method based on data table events. It is equivalent to ",paraId:15,tocIndex:10},{value:"db.on(this.collection.name + '.' + eventName, listener)",paraId:15,tocIndex:10},{value:".",paraId:15,tocIndex:10},{value:"It is usually not necessary to override this method when inheriting.",paraId:16,tocIndex:10},{value:"Signature",paraId:17,tocIndex:10},{value:"on(eventName: string, listener: (...args: any[]) => void)",paraId:18,tocIndex:10},{value:"Parameter",paraId:19,tocIndex:10},{value:"Name",paraId:20,tocIndex:10},{value:"Type",paraId:20,tocIndex:10},{value:"Default",paraId:20,tocIndex:10},{value:"Description",paraId:20,tocIndex:10},{value:"eventName",paraId:20,tocIndex:10},{value:"string",paraId:20,tocIndex:10},{value:"-",paraId:20,tocIndex:10},{value:"Event name",paraId:20,tocIndex:10},{value:"listener",paraId:20,tocIndex:10},{value:"(...args: any[]) => void",paraId:20,tocIndex:10},{value:"-",paraId:20,tocIndex:10},{value:"Event listener",paraId:20,tocIndex:10},{value:"off()",paraId:9},{value:"Quick removal method based on data table events. It is equivalent to ",paraId:21,tocIndex:11},{value:"db.off(this.collection.name + '.' + eventName, listener)",paraId:21,tocIndex:11},{value:".",paraId:21,tocIndex:11},{value:"It is usually not necessary to override this method when inheriting.",paraId:22,tocIndex:11},{value:"Signature",paraId:23,tocIndex:11},{value:"off(eventName: string, listener: (...args: any[]) => void)",paraId:24,tocIndex:11},{value:"Parameter",paraId:25,tocIndex:11},{value:"Name",paraId:26,tocIndex:11},{value:"Type",paraId:26,tocIndex:11},{value:"Default",paraId:26,tocIndex:11},{value:"Description",paraId:26,tocIndex:11},{value:"eventName",paraId:26,tocIndex:11},{value:"string",paraId:26,tocIndex:11},{value:"-",paraId:26,tocIndex:11},{value:"Event name",paraId:26,tocIndex:11},{value:"listener",paraId:26,tocIndex:11},{value:"(...args: any[]) => void",paraId:26,tocIndex:11},{value:"-",paraId:26,tocIndex:11},{value:"Event listener",paraId:26,tocIndex:11},{value:"bind()",paraId:9},{value:"The execution content that is triggered when a field is added to data table. Typically used to add data table event listeners and other processing.",paraId:27,tocIndex:12},{value:"The corresponding ",paraId:28,tocIndex:12},{value:"super.bind()",paraId:28,tocIndex:12},{value:" method needs to be called first when inheriting.",paraId:28,tocIndex:12},{value:"Signature",paraId:29,tocIndex:12},{value:"bind()",paraId:30,tocIndex:12},{value:"unbind()",paraId:9},{value:"The execution content that is triggered when a field is removed from data table. Typically used to remove data table event listeners and other processing.",paraId:31,tocIndex:13},{value:"The corresponding ",paraId:32,tocIndex:13},{value:"super.unbind()",paraId:32,tocIndex:13},{value:" method needs to be called first when inheriting.",paraId:32,tocIndex:13},{value:"Signature",paraId:33,tocIndex:13},{value:"unbind()",paraId:34,tocIndex:13},{value:"get()",paraId:9},{value:"Get the values of a configuration item of the field.",paraId:35,tocIndex:14},{value:"Signature",paraId:36,tocIndex:14},{value:"get(key: string): any",paraId:37,tocIndex:14},{value:"Parameter",paraId:38,tocIndex:14},{value:"Name",paraId:39,tocIndex:14},{value:"Type",paraId:39,tocIndex:14},{value:"Default",paraId:39,tocIndex:14},{value:"Description",paraId:39,tocIndex:14},{value:"key",paraId:39,tocIndex:14},{value:"string",paraId:39,tocIndex:14},{value:"-",paraId:39,tocIndex:14},{value:"Name of the configuration item",paraId:39,tocIndex:14},{value:"Example",paraId:40,tocIndex:14},{value:`const field = db.collection('users').getField('name');

// Get and return the values of the configuration item 'name'
console.log(field.get('name'));
`,paraId:41,tocIndex:14},{value:"merge()",paraId:9},{value:"Merge the values of a configuration item of the field.",paraId:42,tocIndex:15},{value:"Signature",paraId:43,tocIndex:15},{value:"merge(options: { [key: string]: any }): void",paraId:44,tocIndex:15},{value:"Parameter",paraId:45,tocIndex:15},{value:"Name",paraId:46,tocIndex:15},{value:"Type",paraId:46,tocIndex:15},{value:"Default",paraId:46,tocIndex:15},{value:"Description",paraId:46,tocIndex:15},{value:"options",paraId:46,tocIndex:15},{value:"{ [key: string]: any }",paraId:46,tocIndex:15},{value:"-",paraId:46,tocIndex:15},{value:"The configuration item to merge",paraId:46,tocIndex:15},{value:"Example",paraId:47,tocIndex:15},{value:`const field = db.collection('users').getField('name');

field.merge({
  // Add an index configuration
  index: true,
});
`,paraId:48,tocIndex:15},{value:"remove()",paraId:9},{value:"Remove a field from data table (from memory only).",paraId:49,tocIndex:16},{value:"Example",paraId:50,tocIndex:16},{value:`const books = db.getCollections('books');

books.getField('isbn').remove();

// really remove from db
await books.sync();
`,paraId:51,tocIndex:16},{value:"removeFromDb()",paraId:9},{value:"Remove a field from the database.",paraId:52,tocIndex:18},{value:"Signature",paraId:53,tocIndex:18},{value:"removeFromDb(options?: Transactionable): Promise<void>",paraId:54,tocIndex:18},{value:"Parameter",paraId:55,tocIndex:18},{value:"Name",paraId:56,tocIndex:18},{value:"Type",paraId:56,tocIndex:18},{value:"Default",paraId:56,tocIndex:18},{value:"Description",paraId:56,tocIndex:18},{value:"options.transaction?",paraId:56,tocIndex:18},{value:"Transaction",paraId:56,tocIndex:18},{value:"-",paraId:56,tocIndex:18},{value:"Transaction instance",paraId:56,tocIndex:18},{value:"existsInDb()",paraId:9},{value:"Check if a field exists in the database.",paraId:57,tocIndex:19},{value:"Signature",paraId:58,tocIndex:19},{value:"existsInDb(options?: Transactionable): Promise<boolean>",paraId:59,tocIndex:19},{value:"Parameter",paraId:60,tocIndex:19},{value:"Name",paraId:61,tocIndex:19},{value:"Type",paraId:61,tocIndex:19},{value:"Default",paraId:61,tocIndex:19},{value:"Description",paraId:61,tocIndex:19},{value:"options.transaction?",paraId:61,tocIndex:19},{value:"Transaction",paraId:61,tocIndex:19},{value:"-",paraId:61,tocIndex:19},{value:"Transaction instance",paraId:61,tocIndex:19},{value:"NocoBase has some built-in common field types, the corresponding type name can be used directly to specify the type of field upon definition. Fields of different types are configured differently, please refer to the list below.",paraId:62,tocIndex:20},{value:"The configuration items of all field types are passed through to Sequelize in addition to those described below. Therefore, all field configuration items supported by Sequelize can be used here (e.g. ",paraId:63,tocIndex:20},{value:"allowNull",paraId:63,tocIndex:20},{value:", ",paraId:63,tocIndex:20},{value:"defaultValue",paraId:63,tocIndex:20},{value:", etc.).",paraId:63,tocIndex:20},{value:"Moreover, server-side field types are mainly used for solving the problems of database storage and some algorithms, they are barely relevant to the field display types and the use of components in front-end. The front-end field types can be found in the corresponding tutorials.",paraId:64,tocIndex:20},{value:"'boolean'",paraId:9},{value:"Boolean type.",paraId:65,tocIndex:21},{value:"Example",paraId:66,tocIndex:21},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'boolean',
      name: 'published',
    },
  ],
});
`,paraId:67,tocIndex:21},{value:"'integer'",paraId:9},{value:"Integer type (32 bits).",paraId:68,tocIndex:22},{value:"Example",paraId:69,tocIndex:22},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'integer',
      name: 'pages',
    },
  ],
});
`,paraId:70,tocIndex:22},{value:"'bigInt'",paraId:9},{value:"Long integer type (64 bits).",paraId:71,tocIndex:23},{value:"Example",paraId:72,tocIndex:23},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'bigInt',
      name: 'words',
    },
  ],
});
`,paraId:73,tocIndex:23},{value:"'double'",paraId:9},{value:"Double-precision floating-point format (64 bits).",paraId:74,tocIndex:24},{value:"Example",paraId:75,tocIndex:24},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'double',
      name: 'price',
    },
  ],
});
`,paraId:76,tocIndex:24},{value:"'real'",paraId:9},{value:"Real type (PG only).",paraId:77,tocIndex:25},{value:"'decimal'",paraId:9},{value:"Decimal type.",paraId:78,tocIndex:26},{value:"'string'",paraId:9},{value:"String type. Equivalent to the ",paraId:79,tocIndex:27},{value:"VARCHAR",paraId:79,tocIndex:27},{value:" type for most databases.",paraId:79,tocIndex:27},{value:"Example",paraId:80,tocIndex:27},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});
`,paraId:81,tocIndex:27},{value:"'text'",paraId:9},{value:"Text type. Equivalent to the ",paraId:82,tocIndex:28},{value:"TEXT",paraId:82,tocIndex:28},{value:" type for most databases.",paraId:82,tocIndex:28},{value:"Example",paraId:83,tocIndex:28},{value:`db.collection({
  name: 'books',
  fields: [
    {
      type: 'text',
      name: 'content',
    },
  ],
});
`,paraId:84,tocIndex:28},{value:"'password'",paraId:9},{value:"Password type (NocoBase extension). Password encryption based on the ",paraId:85,tocIndex:29},{value:"scrypt",paraId:85,tocIndex:29},{value:" method of Node.js native crypto packages.",paraId:85,tocIndex:29},{value:"Example",paraId:86,tocIndex:29},{value:`db.collection({
  name: 'users',
  fields: [
    {
      type: 'password',
      name: 'password',
      length: 64, // Length, default is 64
      randomBytesSize: 8, // Length of random bytes, default is 8
    },
  ],
});
`,paraId:87,tocIndex:29},{value:"Parameter",paraId:88,tocIndex:29},{value:"Name",paraId:89,tocIndex:29},{value:"Type",paraId:89,tocIndex:29},{value:"Default",paraId:89,tocIndex:29},{value:"Description",paraId:89,tocIndex:29},{value:"length",paraId:89,tocIndex:29},{value:"number",paraId:89,tocIndex:29},{value:"64",paraId:89,tocIndex:29},{value:"Length of characters",paraId:89,tocIndex:29},{value:"randomBytesSize",paraId:89,tocIndex:29},{value:"number",paraId:89,tocIndex:29},{value:"8",paraId:89,tocIndex:29},{value:"Length of random bytes",paraId:89,tocIndex:29},{value:"'date'",paraId:9},{value:"Date type.",paraId:90,tocIndex:30},{value:"'time'",paraId:9},{value:"Time type.",paraId:91,tocIndex:31},{value:"'array'",paraId:9},{value:"Array type (PG only).",paraId:92,tocIndex:32},{value:"'json'",paraId:9},{value:"JSON type.",paraId:93,tocIndex:33},{value:"'jsonb'",paraId:9},{value:"JSONB type (PG only, others will be compatible with the ",paraId:94,tocIndex:34},{value:"'json'",paraId:94,tocIndex:34},{value:" type).",paraId:94,tocIndex:34},{value:"'uuid'",paraId:9},{value:"UUID type.",paraId:95,tocIndex:35},{value:"'uid'",paraId:9},{value:"UID type (NocoBase extension). Short random string identifier type.",paraId:96,tocIndex:36},{value:"'formula'",paraId:9},{value:"Formula type (NocoBase extension). Mathematical formula calculation can be configured based on ",paraId:97,tocIndex:37},{value:"mathjs",paraId:97,tocIndex:37},{value:", and the formula can refer to the values of other columns in the same record to participate in the calculation.",paraId:97,tocIndex:37},{value:"Example",paraId:98,tocIndex:37},{value:`db.collection({
  name: 'orders',
  fields: [
    {
      type: 'double',
      name: 'price',
    },
    {
      type: 'integer',
      name: 'quantity',
    },
    {
      type: 'formula',
      name: 'total',
      expression: 'price * quantity',
    },
  ],
});
`,paraId:99,tocIndex:37},{value:"'radio'",paraId:9},{value:"Radio type (NocoBase extension). The field value is 'true' for at most one row of data for the full table, all others are 'false' or 'null'.",paraId:100,tocIndex:38},{value:"Example",paraId:101,tocIndex:38},{value:"There is only one user marked as ",paraId:102,tocIndex:38},{value:"root",paraId:102,tocIndex:38},{value:" in the entire system, once the ",paraId:102,tocIndex:38},{value:"root",paraId:102,tocIndex:38},{value:" value of any other user is changed to ",paraId:102,tocIndex:38},{value:"true",paraId:102,tocIndex:38},{value:", all other records with ",paraId:102,tocIndex:38},{value:"root",paraId:102,tocIndex:38},{value:" of ",paraId:102,tocIndex:38},{value:"true",paraId:102,tocIndex:38},{value:" will be changed to ",paraId:102,tocIndex:38},{value:"false",paraId:102,tocIndex:38},{value:":",paraId:102,tocIndex:38},{value:`db.collection({
  name: 'users',
  fields: [
    {
      type: 'radio',
      name: 'root',
    },
  ],
});
`,paraId:103,tocIndex:38},{value:"'sort'",paraId:9},{value:"Sorting type (NocoBase extension). Sorting based on integer numbers, automatically generating new serial numbers for new records, and rearranging serial numbers when moving data.",paraId:104,tocIndex:39},{value:"If data table has the ",paraId:105,tocIndex:39},{value:"sortable",paraId:105,tocIndex:39},{value:" option defined, the corresponding fields will be generated automatically.",paraId:105,tocIndex:39},{value:"Example",paraId:106,tocIndex:39},{value:"Posts are sortable based on the users they belong to.",paraId:107,tocIndex:39},{value:`db.collection({
  name: 'posts',
  fields: [
    {
      type: 'belongsTo',
      name: 'user',
    },
    {
      type: 'sort',
      name: 'priority',
      scopeKey: 'userId', // Sort data grouped by the values of userId
    },
  ],
});
`,paraId:108,tocIndex:39},{value:"'virtual'",paraId:9},{value:"Virtual type. No Data is actually stored, it is used only when special getter/setter is defined.",paraId:109,tocIndex:40},{value:"'belongsTo'",paraId:9},{value:"Many-to-one association type. Foreign key is stored in its own table, as opposed to ",paraId:110,tocIndex:41},{value:"'hasOne'",paraId:110,tocIndex:41},{value:"/",paraId:110,tocIndex:41},{value:"'hasMany'",paraId:110,tocIndex:41},{value:".",paraId:110,tocIndex:41},{value:"Example",paraId:111,tocIndex:41},{value:"Any post belongs to an author:",paraId:112,tocIndex:41},{value:`db.collection({
  name: 'posts',
  fields: [
    {
      type: 'belongsTo',
      name: 'author',
      target: 'users', // Default table name is the plural form of <name>
      foreignKey: 'authorId', // Default is '<name> + Id'
      sourceKey: 'id', // Default is id of the <target> table
    },
  ],
});
`,paraId:113,tocIndex:41},{value:"'hasOne'",paraId:9},{value:"One-to-one association type. Foreign key is stored in the association table, as opposed to ",paraId:114,tocIndex:42},{value:"'belongsTo'",paraId:114,tocIndex:42},{value:".",paraId:114,tocIndex:42},{value:"Example",paraId:115,tocIndex:42},{value:"Any user has a profile:",paraId:116,tocIndex:42},{value:`db.collection({
  name: 'users',
  fields: [
    {
      type: 'hasOne',
      name: 'profile',
      target: 'profiles', // Can be omitted
    },
  ],
});
`,paraId:117,tocIndex:42},{value:"'hasMany'",paraId:9},{value:"One-to-many association type. The foreign key is stored in the association table, as opposed to ",paraId:118,tocIndex:43},{value:"'belongsTo'",paraId:118,tocIndex:43},{value:".",paraId:118,tocIndex:43},{value:"Example",paraId:119,tocIndex:43},{value:"Any user can have multiple posts:",paraId:120,tocIndex:43},{value:`db.collection({
  name: 'users',
  fields: [
    {
      type: 'hasMany',
      name: 'posts',
      foreignKey: 'authorId',
      sourceKey: 'id',
    },
  ],
});
`,paraId:121,tocIndex:43},{value:"'belongsToMany'",paraId:9},{value:"Many-to-many association type. Intermediate table is used to store both foreign keys. If no existing table is specified as intermediate table, it will be created automatically.",paraId:122,tocIndex:44},{value:"Example",paraId:123,tocIndex:44},{value:"Any post can have multiple tags added to it, and any tag can be added to multiple posts:",paraId:124,tocIndex:44},{value:`db.collection({
  name: 'posts',
  fields: [
    {
      type: 'belongsToMany',
      name: 'tags',
      target: 'tags', // Can be omitted if name is the same
      through: 'postsTags', // Intermediate table will be generated automatically if not specified
      foreignKey: 'postId', // Foreign key in the intermediate table referring to the table itself
      sourceKey: 'id', // Primary key of the table itself
      otherKey: 'tagId', // Foreign key in the intermediate table referring to the association table
    },
  ],
});

db.collection({
  name: 'tags',
  fields: [
    {
      type: 'belongsToMany',
      name: 'posts',
      through: 'postsTags', // Refer to the same intermediate table in the same set of relation
    },
  ],
});
`,paraId:125,tocIndex:44}]},765093:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"BaseInterface is the foundational class for all Interface types. Users can extend this class to implement custom Interface logic.",paraId:0,tocIndex:1},{value:`class CustomInterface extends BaseInterface {
  async toValue(value: string, ctx?: any): Promise<any> {
    // Custom toValue logic
  }

  toString(value: any, ctx?: any) {
    // Custom toString logic
  }
}
// Register Interface
db.interfaceManager.registerInterfaceType('customInterface', CustomInterface)
`,paraId:1,tocIndex:1},{value:"Converts an external string to the actual value of the interface, which can be directly passed to the Repository for write operations.",paraId:2,tocIndex:3},{value:"Converts the actual value of the interface to a string type, which can be used for exporting or displaying purposes.",paraId:3,tocIndex:4}]},987972:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used in the filter parameters of the ",paraId:0,tocIndex:0},{value:"find",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"findOne",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"findAndCount",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"count",paraId:0,tocIndex:0},{value:", etc. APIs of repository:",paraId:0,tocIndex:0},{value:`const repository = db.getRepository('books');

repository.find({
  filter: {
    title: {
      $eq: 'Spring and Autumn',
    },
  },
});
`,paraId:1,tocIndex:0},{value:"To support JSON, NocoBase identifies query operators as a string prefixed with $.",paraId:2,tocIndex:0},{value:"Moreover, NocoBase provides API to extend operators. Refer to ",paraId:3,tocIndex:0},{value:"db.registerOperators()",paraId:4,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"$eq",paraId:5},{value:"Check if the field value is equal to the specified value. Equivalent to ",paraId:6,tocIndex:2},{value:"=",paraId:6,tocIndex:2},{value:" in SQL.",paraId:6,tocIndex:2},{value:"Example",paraId:7,tocIndex:2},{value:`repository.find({
  filter: {
    title: {
      $eq: 'Spring and Autumn',
    },
  },
});
`,paraId:8,tocIndex:2},{value:"Equal to ",paraId:9,tocIndex:2},{value:"title: 'Spring and Autumn'",paraId:9,tocIndex:2},{value:"$ne",paraId:5},{value:"Check if the field value is not equal to the specified value. Equivalent to ",paraId:10,tocIndex:3},{value:"!=",paraId:10,tocIndex:3},{value:" in SQL.",paraId:10,tocIndex:3},{value:"Example",paraId:11,tocIndex:3},{value:`repository.find({
  filter: {
    title: {
      $ne: 'Spring and Autumn',
    },
  },
});
`,paraId:12,tocIndex:3},{value:"$is",paraId:5},{value:"Check if the field value is the specified value. Equivalent to ",paraId:13,tocIndex:4},{value:"IS",paraId:13,tocIndex:4},{value:" in SQL.",paraId:13,tocIndex:4},{value:"Example",paraId:14,tocIndex:4},{value:`repository.find({
  filter: {
    title: {
      $is: null,
    },
  },
});
`,paraId:15,tocIndex:4},{value:"$not",paraId:5},{value:"Check if the field value is not the specified value. Equivalent to ",paraId:16,tocIndex:5},{value:"IS NOT",paraId:16,tocIndex:5},{value:" in SQL.",paraId:16,tocIndex:5},{value:"Example",paraId:17,tocIndex:5},{value:`repository.find({
  filter: {
    title: {
      $not: null,
    },
  },
});
`,paraId:18,tocIndex:5},{value:"$col",paraId:5},{value:"Check if the field value is equal to the value of another field. Equivalent to ",paraId:19,tocIndex:6},{value:"=",paraId:19,tocIndex:6},{value:" in SQL.",paraId:19,tocIndex:6},{value:"Example",paraId:20,tocIndex:6},{value:`repository.find({
  filter: {
    title: {
      $col: 'name',
    },
  },
});
`,paraId:21,tocIndex:6},{value:"$in",paraId:5},{value:"Check if the field value is in the specified array. Equivalent to ",paraId:22,tocIndex:7},{value:"IN",paraId:22,tocIndex:7},{value:" in SQL.",paraId:22,tocIndex:7},{value:"Example",paraId:23,tocIndex:7},{value:`repository.find({
  filter: {
    title: {
      $in: ['Spring and Autumn', 'Warring States'],
    },
  },
});
`,paraId:24,tocIndex:7},{value:"$notIn",paraId:5},{value:"Check if the field value is not in the specified array. Equivalent to ",paraId:25,tocIndex:8},{value:"NOT IN",paraId:25,tocIndex:8},{value:" in SQL.",paraId:25,tocIndex:8},{value:"Example",paraId:26,tocIndex:8},{value:`repository.find({
  filter: {
    title: {
      $notIn: ['Spring and Autumn', 'Warring States'],
    },
  },
});
`,paraId:27,tocIndex:8},{value:"$empty",paraId:5},{value:"Check if the general field is empty. For string field, check if it is an empty string; for array field, check if it is an empty array.",paraId:28,tocIndex:9},{value:"Example",paraId:29,tocIndex:9},{value:`repository.find({
  filter: {
    title: {
      $empty: true,
    },
  },
});
`,paraId:30,tocIndex:9},{value:"$notEmpty",paraId:5},{value:"Check if the general field is not empty. For string field, check if it is not an empty string; for array field, check if it is not an empty array.",paraId:31,tocIndex:10},{value:"Example",paraId:32,tocIndex:10},{value:`repository.find({
  filter: {
    title: {
      $notEmpty: true,
    },
  },
});
`,paraId:33,tocIndex:10},{value:"$and",paraId:5},{value:"Logical AND. Equivalent to ",paraId:34,tocIndex:12},{value:"AND",paraId:34,tocIndex:12},{value:" in SQL.",paraId:34,tocIndex:12},{value:"Example",paraId:35,tocIndex:12},{value:`repository.find({
  filter: {
    $and: [{ title: 'Book of Songs' }, { isbn: '1234567890' }],
  },
});
`,paraId:36,tocIndex:12},{value:"$or",paraId:5},{value:"Logical OR. Equivalent to ",paraId:37,tocIndex:13},{value:"OR",paraId:37,tocIndex:13},{value:" in SQL.",paraId:37,tocIndex:13},{value:"Example",paraId:38,tocIndex:13},{value:`repository.find({
  filter: {
    $or: [
      { title: 'Book of Songs' },
      { publishedAt: { $lt: '0000-00-00T00:00:00Z' } },
    ],
  },
});
`,paraId:39,tocIndex:13},{value:"For boolean fields: ",paraId:40,tocIndex:14},{value:"type: 'boolean'",paraId:40,tocIndex:14},{value:"$isFalsy",paraId:5},{value:"Check if a Boolean field value is false. Boolean field values of ",paraId:41,tocIndex:15},{value:"false",paraId:41,tocIndex:15},{value:", ",paraId:41,tocIndex:15},{value:"0",paraId:41,tocIndex:15},{value:" and ",paraId:41,tocIndex:15},{value:"NULL",paraId:41,tocIndex:15},{value:" are all judged to be ",paraId:41,tocIndex:15},{value:"$isFalsy: true",paraId:41,tocIndex:15},{value:".",paraId:41,tocIndex:15},{value:"Example",paraId:42,tocIndex:15},{value:`repository.find({
  filter: {
    isPublished: {
      $isFalsy: true,
    },
  },
});
`,paraId:43,tocIndex:15},{value:"$isTruly",paraId:5},{value:"Check if a Boolean field value is true. Boolean field values of ",paraId:44,tocIndex:16},{value:"true",paraId:44,tocIndex:16},{value:" and ",paraId:44,tocIndex:16},{value:"1",paraId:44,tocIndex:16},{value:" are all judged to be ",paraId:44,tocIndex:16},{value:"$isTruly: true",paraId:44,tocIndex:16},{value:".",paraId:44,tocIndex:16},{value:"Example",paraId:45,tocIndex:16},{value:`repository.find({
  filter: {
    isPublished: {
      $isTruly: true,
    },
  },
});
`,paraId:46,tocIndex:16},{value:"For numeric type fields, including:",paraId:47,tocIndex:17},{value:"type: 'integer'",paraId:48,tocIndex:17},{value:"type: 'float'",paraId:48,tocIndex:17},{value:"type: 'double'",paraId:48,tocIndex:17},{value:"type: 'real'",paraId:48,tocIndex:17},{value:"type: 'decimal'",paraId:48,tocIndex:17},{value:"$gt",paraId:5},{value:"Check if the field value is greater than the specified value. Equivalent to ",paraId:49,tocIndex:18},{value:">",paraId:49,tocIndex:18},{value:" in SQL.",paraId:49,tocIndex:18},{value:"Example",paraId:50,tocIndex:18},{value:`repository.find({
  filter: {
    price: {
      $gt: 100,
    },
  },
});
`,paraId:51,tocIndex:18},{value:"$gte",paraId:5},{value:"Check if the field value is equal to or greater than the specified value. Equivalent to ",paraId:52,tocIndex:19},{value:">=",paraId:52,tocIndex:19},{value:" in SQL.",paraId:52,tocIndex:19},{value:"Example",paraId:53,tocIndex:19},{value:`repository.find({
  filter: {
    price: {
      $gte: 100,
    },
  },
});
`,paraId:54,tocIndex:19},{value:"$lt",paraId:5},{value:"Check if the field value is less than the specified value. Equivalent to ",paraId:55,tocIndex:20},{value:"<",paraId:55,tocIndex:20},{value:" in SQL.",paraId:55,tocIndex:20},{value:"Example",paraId:56,tocIndex:20},{value:`repository.find({
  filter: {
    price: {
      $lt: 100,
    },
  },
});
`,paraId:57,tocIndex:20},{value:"$lte",paraId:5},{value:"Check if the field value is equal to or less than the specified value. Equivalent to ",paraId:58,tocIndex:21},{value:"<=",paraId:58,tocIndex:21},{value:" in SQL.",paraId:58,tocIndex:21},{value:"Example",paraId:59,tocIndex:21},{value:`repository.find({
  filter: {
    price: {
      $lte: 100,
    },
  },
});
`,paraId:60,tocIndex:21},{value:"$between",paraId:5},{value:"Check if the field value is between the specified two values. Equivalent to ",paraId:61,tocIndex:22},{value:"BETWEEN",paraId:61,tocIndex:22},{value:" in SQL.",paraId:61,tocIndex:22},{value:"Example",paraId:62,tocIndex:22},{value:`repository.find({
  filter: {
    price: {
      $between: [100, 200],
    },
  },
});
`,paraId:63,tocIndex:22},{value:"$notBetween",paraId:5},{value:"Check if the field value is not between the specified two values. Equivalent to ",paraId:64,tocIndex:23},{value:"NOT BETWEEN",paraId:64,tocIndex:23},{value:" in SQL.",paraId:64,tocIndex:23},{value:"Example",paraId:65,tocIndex:23},{value:`repository.find({
  filter: {
    price: {
      $notBetween: [100, 200],
    },
  },
});
`,paraId:66,tocIndex:23},{value:"For string type fields, including ",paraId:67,tocIndex:24},{value:"string",paraId:67,tocIndex:24},{value:".",paraId:67,tocIndex:24},{value:"$includes",paraId:5},{value:"Check if the string field contains the specified substring.",paraId:68,tocIndex:25},{value:"Example",paraId:69,tocIndex:25},{value:`repository.find({
  filter: {
    title: {
      $includes: 'Three Character Classic',
    },
  },
});
`,paraId:70,tocIndex:25},{value:"$notIncludes",paraId:5},{value:"Check if the string field does not contain the specified substring.",paraId:71,tocIndex:26},{value:"Example",paraId:72,tocIndex:26},{value:`repository.find({
  filter: {
    title: {
      $notIncludes: 'Three Character Classic',
    },
  },
});
`,paraId:73,tocIndex:26},{value:"$startsWith",paraId:5},{value:"Check if the string field starts with the specified substring.",paraId:74,tocIndex:27},{value:"Example",paraId:75,tocIndex:27},{value:`repository.find({
  filter: {
    title: {
      $startsWith: 'Three Character Classic',
    },
  },
});
`,paraId:76,tocIndex:27},{value:"$notStatsWith",paraId:5},{value:"Check if the string field does not start with the specified substring.",paraId:77,tocIndex:28},{value:"Example",paraId:78,tocIndex:28},{value:`repository.find({
  filter: {
    title: {
      $notStatsWith: 'Three Character Classic',
    },
  },
});
`,paraId:79,tocIndex:28},{value:"$endsWith",paraId:5},{value:"Check if the string field ends with the specified substring.",paraId:80,tocIndex:29},{value:"Example",paraId:81,tocIndex:29},{value:`repository.find({
  filter: {
    title: {
      $endsWith: 'Three Character Classic',
    },
  },
});
`,paraId:82,tocIndex:29},{value:"$notEndsWith",paraId:5},{value:"Check if the string field does not end with the specified substring.",paraId:83,tocIndex:30},{value:"Example",paraId:84,tocIndex:30},{value:`repository.find({
  filter: {
    title: {
      $notEndsWith: 'Three Character Classic',
    },
  },
});
`,paraId:85,tocIndex:30},{value:"$like",paraId:5},{value:"Check if the field value contains the specified string. Equivalent to ",paraId:86,tocIndex:31},{value:"LIKE",paraId:86,tocIndex:31},{value:" in SQL.",paraId:86,tocIndex:31},{value:"Example",paraId:87,tocIndex:31},{value:`repository.find({
  filter: {
    title: {
      $like: 'Computer',
    },
  },
});
`,paraId:88,tocIndex:31},{value:"$notLike",paraId:5},{value:"Check if the field value does not contain the specified string. Equivalent to ",paraId:89,tocIndex:32},{value:"NOT LIKE",paraId:89,tocIndex:32},{value:" in SQL.",paraId:89,tocIndex:32},{value:"Example",paraId:90,tocIndex:32},{value:`repository.find({
  filter: {
    title: {
      $notLike: 'Computer',
    },
  },
});
`,paraId:91,tocIndex:32},{value:"$iLike",paraId:5},{value:"Check if a field value contains the specified string, case ignored. Equivalent to ",paraId:92,tocIndex:33},{value:"ILIKE",paraId:92,tocIndex:33},{value:" in SQL (PG only).",paraId:92,tocIndex:33},{value:"Example",paraId:93,tocIndex:33},{value:`repository.find({
  filter: {
    title: {
      $iLike: 'Computer',
    },
  },
});
`,paraId:94,tocIndex:33},{value:"$notILike",paraId:5},{value:"Check if a field value does not contain the specified string, case ignored. Equivalent to ",paraId:95,tocIndex:34},{value:"NOT ILIKE",paraId:95,tocIndex:34},{value:" in SQL (PG only).",paraId:95,tocIndex:34},{value:"Example",paraId:96,tocIndex:34},{value:`repository.find({
  filter: {
    title: {
      $notILike: 'Computer',
    },
  },
});
`,paraId:97,tocIndex:34},{value:"$regexp",paraId:5},{value:"Check if the field value matches the specified regular expression. Equivalent to ",paraId:98,tocIndex:35},{value:"REGEXP",paraId:98,tocIndex:35},{value:" in SQL (PG only).",paraId:98,tocIndex:35},{value:"Example",paraId:99,tocIndex:35},{value:`repository.find({
  filter: {
    title: {
      $regexp: '^Computer',
    },
  },
});
`,paraId:100,tocIndex:35},{value:"$notRegexp",paraId:5},{value:"Check if the field value does not match the specified regular expression. Equivalent to ",paraId:101,tocIndex:36},{value:"NOT REGEXP",paraId:101,tocIndex:36},{value:" in SQL (PG only).",paraId:101,tocIndex:36},{value:"Example",paraId:102,tocIndex:36},{value:`repository.find({
  filter: {
    title: {
      $notRegexp: '^Computer',
    },
  },
});
`,paraId:103,tocIndex:36},{value:"$iRegexp",paraId:5},{value:"Check if the field value matches the specified regular expression, case ignored. Equivalent to ",paraId:104,tocIndex:37},{value:"~*",paraId:104,tocIndex:37},{value:" in SQL (PG only).",paraId:104,tocIndex:37},{value:"Example",paraId:105,tocIndex:37},{value:`repository.find({
  filter: {
    title: {
      $iRegexp: '^COMPUTER',
    },
  },
});
`,paraId:106,tocIndex:37},{value:"$notIRegexp",paraId:5},{value:"Check if the field value does not match the specified regular expression, case ignored. Equivalent to ",paraId:107,tocIndex:38},{value:"!~*",paraId:107,tocIndex:38},{value:" in SQL (PG only).",paraId:107,tocIndex:38},{value:"Example",paraId:108,tocIndex:38},{value:`repository.find({
  filter: {
    title: {
      $notIRegexp: '^COMPUTER',
    },
  },
});
`,paraId:109,tocIndex:38},{value:"For date type fields: ",paraId:110,tocIndex:39},{value:"type: 'date'",paraId:110,tocIndex:39},{value:"$dateOn",paraId:5},{value:"Check if the date field value is within a certain day.",paraId:111,tocIndex:40},{value:"Example",paraId:112,tocIndex:40},{value:`repository.find({
  filter: {
    createdAt: {
      $dateOn: '2021-01-01',
    },
  },
});
`,paraId:113,tocIndex:40},{value:"$dateNotOn",paraId:5},{value:"Check if the date field value is not within a certain day.",paraId:114,tocIndex:41},{value:"Example",paraId:115,tocIndex:41},{value:`repository.find({
  filter: {
    createdAt: {
      $dateNotOn: '2021-01-01',
    },
  },
});
`,paraId:116,tocIndex:41},{value:"$dateBefore",paraId:5},{value:"Check if the date field value is before a certain value, i.e., less than the one passed in.",paraId:117,tocIndex:42},{value:"Example",paraId:118,tocIndex:42},{value:`repository.find({
  filter: {
    createdAt: {
      $dateBefore: '2021-01-01T00:00:00.000Z',
    },
  },
});
`,paraId:119,tocIndex:42},{value:"$dateNotBefore",paraId:5},{value:"Check if the date field value is not before a certain value, i.e., equal to or greater than the one passed in.",paraId:120,tocIndex:43},{value:"Example",paraId:121,tocIndex:43},{value:`repository.find({
  filter: {
    createdAt: {
      $dateNotBefore: '2021-01-01T00:00:00.000Z',
    },
  },
});
`,paraId:122,tocIndex:43},{value:"$dateAfter",paraId:5},{value:"Check if the date field value is after a certain value, i.e., greater than the one passed in.",paraId:123,tocIndex:44},{value:"Example",paraId:124,tocIndex:44},{value:`repository.find({
  filter: {
    createdAt: {
      $dateAfter: '2021-01-01T00:00:00.000Z',
    },
  },
});
`,paraId:125,tocIndex:44},{value:"$dateNotAfter",paraId:5},{value:"Check if the date field value is not after a certain value, i.e., equal to or greater than the one passed in.",paraId:126,tocIndex:45},{value:"Example",paraId:127,tocIndex:45},{value:`repository.find({
  filter: {
    createdAt: {
      $dateNotAfter: '2021-01-01T00:00:00.000Z',
    },
  },
});
`,paraId:128,tocIndex:45},{value:"For array type fields: ",paraId:129,tocIndex:46},{value:"type: 'array'",paraId:129,tocIndex:46},{value:"$match",paraId:5},{value:"Check if the array field values match values of the specified array.",paraId:130,tocIndex:47},{value:"Example",paraId:131,tocIndex:47},{value:`repository.find({
  filter: {
    tags: {
      $match: ['literature', 'history'],
    },
  },
});
`,paraId:132,tocIndex:47},{value:"$notMatch",paraId:5},{value:"Check if the array field values do not match values of the specified array.",paraId:133,tocIndex:48},{value:"Example",paraId:134,tocIndex:48},{value:`repository.find({
  filter: {
    tags: {
      $notMatch: ['literature', 'history'],
    },
  },
});
`,paraId:135,tocIndex:48},{value:"$anyOf",paraId:5},{value:"Check if the array field values contain any of the values of the specified array.",paraId:136,tocIndex:49},{value:"Example",paraId:137,tocIndex:49},{value:`repository.find({
  filter: {
    tags: {
      $anyOf: ['literature', 'history'],
    },
  },
});
`,paraId:138,tocIndex:49},{value:"$noneOf",paraId:5},{value:"Check if the array field values contain none of the values of the specified array.",paraId:139,tocIndex:50},{value:"Example",paraId:140,tocIndex:50},{value:`repository.find({
  filter: {
    tags: {
      $noneOf: ['literature', 'history'],
    },
  },
});
`,paraId:141,tocIndex:50},{value:"$arrayEmpty",paraId:5},{value:"Check if the array field is empty.",paraId:142,tocIndex:51},{value:"Example",paraId:143,tocIndex:51},{value:`repository.find({
  filter: {
    tags: {
      $arrayEmpty: true,
    },
  },
});
`,paraId:144,tocIndex:51},{value:"$arrayNotEmpty",paraId:5},{value:"Check if the array field is not empty.",paraId:145,tocIndex:52},{value:"Example",paraId:146,tocIndex:52},{value:`repository.find({
  filter: {
    tags: {
      $arrayNotEmpty: true,
    },
  },
});
`,paraId:147,tocIndex:52},{value:"For checking if a relationship exists, field types include:",paraId:148,tocIndex:53},{value:"type: 'hasOne'",paraId:149,tocIndex:53},{value:"type: 'hasMany'",paraId:149,tocIndex:53},{value:"type: 'belongsTo'",paraId:149,tocIndex:53},{value:"type: 'belongsToMany'",paraId:149,tocIndex:53},{value:"$exists",paraId:5},{value:"There is relational data existing.",paraId:150,tocIndex:54},{value:"Example",paraId:151,tocIndex:54},{value:`repository.find({
  filter: {
    author: {
      $exists: true,
    },
  },
});
`,paraId:152,tocIndex:54},{value:"$notExists",paraId:5},{value:"There is no relational data existing.",paraId:153,tocIndex:55},{value:"Example",paraId:154,tocIndex:55},{value:`repository.find({
  filter: {
    author: {
      $notExists: true,
    },
  },
});
`,paraId:155,tocIndex:55}]},573054:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"BelongsToManyRepository",paraId:0,tocIndex:0},{value:" is the ",paraId:0,tocIndex:0},{value:"Relation Repository",paraId:0,tocIndex:0},{value:" for handling ",paraId:0,tocIndex:0},{value:"BelongsToMany",paraId:0,tocIndex:0},{value:" relationships.",paraId:0,tocIndex:0},{value:"Unlike other relationship types, the ",paraId:1,tocIndex:0},{value:"BelongsToMany",paraId:1,tocIndex:0},{value:" type of relationship needs to be recorded through an intermediate table. The intermediate table can be created automatically or explicitly specified when defining association relationships in NocoBase.",paraId:1,tocIndex:0},{value:"find()",paraId:2},{value:"Find associated objects.",paraId:3,tocIndex:2},{value:"Signature",paraId:4,tocIndex:2},{value:"async find(options?: FindOptions): Promise<M[]>",paraId:5,tocIndex:2},{value:"Detailed Information",paraId:6,tocIndex:2},{value:"Query parameters are the same as ",paraId:7,tocIndex:2},{value:"Repository.find()",paraId:8,tocIndex:2},{value:".",paraId:7,tocIndex:2},{value:"findOne()",paraId:2},{value:"Find associated objects, only to return one record.",paraId:9,tocIndex:3},{value:"Signature",paraId:10,tocIndex:3},{value:"async findOne(options?: FindOneOptions): Promise<M>",paraId:11,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:`type FindOneOptions = Omit<FindOptions, 'limit'>;
`,paraId:13,tocIndex:3},{value:"Parameters",paraId:14,tocIndex:3},{value:"Most parameters are the same as those in ",paraId:15,tocIndex:3},{value:"find()",paraId:15,tocIndex:3},{value:". The difference is that ",paraId:15,tocIndex:3},{value:"findOne()",paraId:15,tocIndex:3},{value:" returns only a single piece of data, so the ",paraId:15,tocIndex:3},{value:"limit",paraId:15,tocIndex:3},{value:" parameter is not needed, and the query is always set to ",paraId:15,tocIndex:3},{value:"1",paraId:15,tocIndex:3},{value:".",paraId:15,tocIndex:3},{value:"count()",paraId:2},{value:"Return the number of records matching the query criteria.",paraId:16,tocIndex:4},{value:"Signature",paraId:17,tocIndex:4},{value:"async count(options?: CountOptions)",paraId:18,tocIndex:4},{value:"Type",paraId:19,tocIndex:4},{value:`interface CountOptions
  extends Omit<SequelizeCountOptions, 'distinct' | 'where' | 'include'>,
    Transactionable {
  filter?: Filter;
}
`,paraId:20,tocIndex:4},{value:"findAndCount()",paraId:2},{value:"Find datasets from the database with the specified filtering conditions and return the number of results.",paraId:21,tocIndex:5},{value:"Signature",paraId:22,tocIndex:5},{value:"async findAndCount(options?: FindAndCountOptions): Promise<[any[], number]>",paraId:23,tocIndex:5},{value:"Type",paraId:24,tocIndex:5},{value:`type FindAndCountOptions = CommonFindOptions;
`,paraId:25,tocIndex:5},{value:"create()",paraId:2},{value:"Create associated objects.",paraId:26,tocIndex:6},{value:"Signature",paraId:27,tocIndex:6},{value:"async create(options?: CreateOptions): Promise<M>",paraId:28,tocIndex:6},{value:"Type",paraId:29,tocIndex:6},{value:`type WhiteList = string[];
type BlackList = string[];
type AssociationKeysToBeUpdate = string[];

interface CreateOptions extends SequelizeCreateOptions {
  values?: Values;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:30,tocIndex:6},{value:"Details",paraId:31,tocIndex:6},{value:"values",paraId:32,tocIndex:6},{value:": The data object of the record to be created.",paraId:32,tocIndex:6},{value:"whitelist",paraId:32,tocIndex:6},{value:": Specifies which fields in the data object of the record to be created ",paraId:32,tocIndex:6},{value:"can be written",paraId:32,tocIndex:6},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:32,tocIndex:6},{value:"blacklist",paraId:32,tocIndex:6},{value:": Specifies which fields in the data object of the record to be created ",paraId:32,tocIndex:6},{value:"are not allowed to be written",paraId:32,tocIndex:6},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:32,tocIndex:6},{value:"transaction",paraId:32,tocIndex:6},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:32,tocIndex:6},{value:"update()",paraId:2},{value:"Update associated objects that match the conditions.",paraId:33,tocIndex:7},{value:"Signature",paraId:34,tocIndex:7},{value:"async update(options?: UpdateOptions): Promise<M>",paraId:35,tocIndex:7},{value:"Type",paraId:36,tocIndex:7},{value:`interface UpdateOptions extends Omit<SequelizeUpdateOptions, 'where'> {
  values: Values;
  filter?: Filter;
  filterByTk?: TargetKey;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:37,tocIndex:7},{value:"Details",paraId:38,tocIndex:7},{value:"values",paraId:39,tocIndex:7},{value:": The data object of the records to be updated.",paraId:39,tocIndex:7},{value:"filter",paraId:39,tocIndex:7},{value:": Specifies the filter conditions for the records to be updated. For detailed usage of Filter, refer to the ",paraId:39,tocIndex:7},{value:"find()",paraId:40,tocIndex:7},{value:" method.",paraId:39,tocIndex:7},{value:"filterByTk",paraId:39,tocIndex:7},{value:": Specifies the filter conditions for the records to be updated by TargetKey.",paraId:39,tocIndex:7},{value:"whitelist",paraId:39,tocIndex:7},{value:": A whitelist for the ",paraId:39,tocIndex:7},{value:"values",paraId:39,tocIndex:7},{value:" fields. Only fields listed will be written.",paraId:39,tocIndex:7},{value:"blacklist",paraId:39,tocIndex:7},{value:": A blacklist for the ",paraId:39,tocIndex:7},{value:"values",paraId:39,tocIndex:7},{value:" fields. Fields listed will not be written.",paraId:39,tocIndex:7},{value:"transaction",paraId:39,tocIndex:7},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:39,tocIndex:7},{value:"At least one of ",paraId:41,tocIndex:7},{value:"filterByTk",paraId:41,tocIndex:7},{value:" or ",paraId:41,tocIndex:7},{value:"filter",paraId:41,tocIndex:7},{value:" must be provided.",paraId:41,tocIndex:7},{value:"destroy()",paraId:2},{value:"Delete associated objects.",paraId:42,tocIndex:8},{value:"Signature",paraId:43,tocIndex:8},{value:"async destroy(options?: TargetKey | TargetKey[] | DestroyOptions): Promise<Boolean>",paraId:44,tocIndex:8},{value:"Type",paraId:45,tocIndex:8},{value:`interface DestroyOptions extends SequelizeDestroyOptions {
  filter?: Filter;
  filterByTk?: TargetKey | TargetKey[];
  truncate?: boolean;
  context?: any;
}
`,paraId:46,tocIndex:8},{value:"Details",paraId:47,tocIndex:8},{value:"filter",paraId:48,tocIndex:8},{value:": Specifies the filtering conditions for the records to be deleted. For detailed usage of Filter, refer to the ",paraId:48,tocIndex:8},{value:"find()",paraId:49,tocIndex:8},{value:" method.",paraId:48,tocIndex:8},{value:"filterByTk",paraId:48,tocIndex:8},{value:": Specifies the filtering conditions for the records to be deleted by TargetKey.",paraId:48,tocIndex:8},{value:"truncate",paraId:48,tocIndex:8},{value:": Whether to truncate the table data, effective when no ",paraId:48,tocIndex:8},{value:"filter",paraId:48,tocIndex:8},{value:" or ",paraId:48,tocIndex:8},{value:"filterByTk",paraId:48,tocIndex:8},{value:" parameters are passed.",paraId:48,tocIndex:8},{value:"transaction",paraId:48,tocIndex:8},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:48,tocIndex:8},{value:"add()",paraId:2},{value:"Add new associated objects.",paraId:50,tocIndex:9},{value:"Signature",paraId:51,tocIndex:9},{value:"async add( options: TargetKey | TargetKey[] | PrimaryKeyWithThroughValues | PrimaryKeyWithThroughValues[] | AssociatedOptions ): Promise<void>",paraId:52,tocIndex:9},{value:"Type",paraId:53,tocIndex:9},{value:`type PrimaryKeyWithThroughValues = [TargetKey, Values];

interface AssociatedOptions extends Transactionable {
  tk?:
    | TargetKey
    | TargetKey[]
    | PrimaryKeyWithThroughValues
    | PrimaryKeyWithThroughValues[];
}
`,paraId:54,tocIndex:9},{value:"Detailed Information",paraId:55,tocIndex:9},{value:"Pass the ",paraId:56,tocIndex:9},{value:"targetKey",paraId:56,tocIndex:9},{value:" of the associated object directly, or pass the ",paraId:56,tocIndex:9},{value:"targetKey",paraId:56,tocIndex:9},{value:" along with the field values of the intermediate table.",paraId:56,tocIndex:9},{value:"Example",paraId:57,tocIndex:9},{value:`const t1 = await Tag.repository.create({
  values: { name: 't1' },
});

const t2 = await Tag.repository.create({
  values: { name: 't2' },
});

const p1 = await Post.repository.create({
  values: { title: 'p1' },
});

const PostTagRepository = new BelongsToManyRepository(Post, 'tags', p1.id);

// Pass in the targetKey
PostTagRepository.add([t1.id, t2.id]);

// Pass in intermediate table fields
PostTagRepository.add([
  [t1.id, { tagged_at: '123' }],
  [t2.id, { tagged_at: '456' }],
]);
`,paraId:58,tocIndex:9},{value:"set()",paraId:2},{value:"Set the associated objects.",paraId:59,tocIndex:10},{value:"Signature",paraId:60,tocIndex:10},{value:`async set(
options: TargetKey | TargetKey[] | PrimaryKeyWithThroughValues | PrimaryKeyWithThroughValues[] | AssociatedOptions,
): Promise`,paraId:61,tocIndex:10},{value:"Detailed Information",paraId:62,tocIndex:10},{value:"Parameters are the same as ",paraId:63,tocIndex:10},{value:"add()",paraId:64,tocIndex:10},{value:".",paraId:63,tocIndex:10},{value:"remove()",paraId:2},{value:"Remove the association with the given objects.",paraId:65,tocIndex:11},{value:"Signature",paraId:66,tocIndex:11},{value:"async remove(options: TargetKey | TargetKey[] | AssociatedOptions)",paraId:67,tocIndex:11},{value:"Type",paraId:68,tocIndex:11},{value:`interface AssociatedOptions extends Transactionable {
  tk?: TargetKey | TargetKey[];
}
`,paraId:69,tocIndex:11},{value:"toggle()",paraId:2},{value:"Toggle the associated object.",paraId:70,tocIndex:12},{value:"In some business scenarios, it is often needed to toggle the associated object. For example, user adds a product into collection, and the user cancels the collection and collect it again. Using the ",paraId:71,tocIndex:12},{value:"toggle",paraId:71,tocIndex:12},{value:" method can quickly implement similar functions.",paraId:71,tocIndex:12},{value:"Signature",paraId:72,tocIndex:12},{value:"async toggle(options: TargetKey | { tk?: TargetKey; transaction?: Transaction }): Promise<void>",paraId:73,tocIndex:12},{value:"Detailed Information",paraId:74,tocIndex:12},{value:"The ",paraId:75,tocIndex:12},{value:"toggle",paraId:75,tocIndex:12},{value:" method automatically checks whether the associated object already exists, and removes it if it does, or adds it if it does not.",paraId:75,tocIndex:12}]},561009:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The interface is the same as ",paraId:0,tocIndex:0},{value:"HasOneRepository",paraId:1,tocIndex:0},{value:". ",paraId:0,tocIndex:0},{value:"BelongsToRepository",paraId:0,tocIndex:0},{value:" is the ",paraId:0,tocIndex:0},{value:"Repository",paraId:0,tocIndex:0},{value:" for handling ",paraId:0,tocIndex:0},{value:"BelongsTo",paraId:0,tocIndex:0},{value:" relationships, and it provides some convenient methods to handle ",paraId:0,tocIndex:0},{value:"BelongsTo",paraId:0,tocIndex:0},{value:" relationships.",paraId:0,tocIndex:0}]},23567:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"HasManyRepository",paraId:0,tocIndex:0},{value:" is the ",paraId:0,tocIndex:0},{value:"Relation Repository",paraId:0,tocIndex:0},{value:" for handling ",paraId:0,tocIndex:0},{value:"HasMany",paraId:0,tocIndex:0},{value:" relationships.",paraId:0,tocIndex:0},{value:"find()",paraId:1},{value:"Find associated objects.",paraId:2,tocIndex:2},{value:"Signature",paraId:3,tocIndex:2},{value:"async find(options?: FindOptions): Promise<M[]>",paraId:4,tocIndex:2},{value:"Detailed Information",paraId:5,tocIndex:2},{value:"Query parameters are the same as ",paraId:6,tocIndex:2},{value:"Repository.find()",paraId:7,tocIndex:2},{value:".",paraId:6,tocIndex:2},{value:"findOne()",paraId:1},{value:"Find associated objects, only to return one record.",paraId:8,tocIndex:3},{value:"Signature",paraId:9,tocIndex:3},{value:"async findOne(options?: FindOneOptions): Promise<M>",paraId:10,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:`type FindOneOptions = Omit<FindOptions, 'limit'>;
`,paraId:12,tocIndex:3},{value:"Parameters",paraId:13,tocIndex:3},{value:"Most parameters are the same as those in ",paraId:14,tocIndex:3},{value:"find()",paraId:14,tocIndex:3},{value:". The difference is that ",paraId:14,tocIndex:3},{value:"findOne()",paraId:14,tocIndex:3},{value:" returns only a single piece of data, so the ",paraId:14,tocIndex:3},{value:"limit",paraId:14,tocIndex:3},{value:" parameter is not needed, and the query is always set to ",paraId:14,tocIndex:3},{value:"1",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"count()",paraId:1},{value:"Return the number of records matching the query criteria.",paraId:15,tocIndex:4},{value:"Signature",paraId:16,tocIndex:4},{value:"async count(options?: CountOptions)",paraId:17,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:`interface CountOptions
  extends Omit<SequelizeCountOptions, 'distinct' | 'where' | 'include'>,
    Transactionable {
  filter?: Filter;
}
`,paraId:19,tocIndex:4},{value:"findAndCount()",paraId:1},{value:"Find datasets from the database with the specified filtering conditions and return the number of results.",paraId:20,tocIndex:5},{value:"Signature",paraId:21,tocIndex:5},{value:"async findAndCount(options?: FindAndCountOptions): Promise<[any[], number]>",paraId:22,tocIndex:5},{value:"Type",paraId:23,tocIndex:5},{value:`type FindAndCountOptions = CommonFindOptions;
`,paraId:24,tocIndex:5},{value:"create()",paraId:1},{value:"Create associated objects.",paraId:25,tocIndex:6},{value:"Signature",paraId:26,tocIndex:6},{value:"async create(options?: CreateOptions): Promise<M>",paraId:27,tocIndex:6},{value:"Type",paraId:28,tocIndex:6},{value:`type WhiteList = string[];
type BlackList = string[];
type AssociationKeysToBeUpdate = string[];

interface CreateOptions extends SequelizeCreateOptions {
  values?: Values;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:29,tocIndex:6},{value:"Details",paraId:30,tocIndex:6},{value:"values",paraId:31,tocIndex:6},{value:": The data object of the record to be created.",paraId:31,tocIndex:6},{value:"whitelist",paraId:31,tocIndex:6},{value:": Specifies which fields in the data object of the record to be created ",paraId:31,tocIndex:6},{value:"can be written",paraId:31,tocIndex:6},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:31,tocIndex:6},{value:"blacklist",paraId:31,tocIndex:6},{value:": Specifies which fields in the data object of the record to be created ",paraId:31,tocIndex:6},{value:"are not allowed to be written",paraId:31,tocIndex:6},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:31,tocIndex:6},{value:"transaction",paraId:31,tocIndex:6},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:31,tocIndex:6},{value:"update()",paraId:1},{value:"Update associated objects that match the conditions.",paraId:32,tocIndex:7},{value:"Signature",paraId:33,tocIndex:7},{value:"async update(options?: UpdateOptions): Promise<M>",paraId:34,tocIndex:7},{value:"Type",paraId:35,tocIndex:7},{value:`interface UpdateOptions extends Omit<SequelizeUpdateOptions, 'where'> {
  values: Values;
  filter?: Filter;
  filterByTk?: TargetKey;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:36,tocIndex:7},{value:"Details",paraId:37,tocIndex:7},{value:"values",paraId:38,tocIndex:7},{value:": The data object of the records to be updated.",paraId:38,tocIndex:7},{value:"filter",paraId:38,tocIndex:7},{value:": Specifies the filter conditions for the records to be updated. For detailed usage of Filter, refer to the ",paraId:38,tocIndex:7},{value:"find()",paraId:39,tocIndex:7},{value:" method.",paraId:38,tocIndex:7},{value:"filterByTk",paraId:38,tocIndex:7},{value:": Specifies the filter conditions for the records to be updated by TargetKey.",paraId:38,tocIndex:7},{value:"whitelist",paraId:38,tocIndex:7},{value:": A whitelist for the ",paraId:38,tocIndex:7},{value:"values",paraId:38,tocIndex:7},{value:" fields. Only fields listed will be written.",paraId:38,tocIndex:7},{value:"blacklist",paraId:38,tocIndex:7},{value:": A blacklist for the ",paraId:38,tocIndex:7},{value:"values",paraId:38,tocIndex:7},{value:" fields. Fields listed will not be written.",paraId:38,tocIndex:7},{value:"transaction",paraId:38,tocIndex:7},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:38,tocIndex:7},{value:"At least one of ",paraId:40,tocIndex:7},{value:"filterByTk",paraId:40,tocIndex:7},{value:" or ",paraId:40,tocIndex:7},{value:"filter",paraId:40,tocIndex:7},{value:" must be provided.",paraId:40,tocIndex:7},{value:"destroy()",paraId:1},{value:"Delete associated objects.",paraId:41,tocIndex:8},{value:"Signature",paraId:42,tocIndex:8},{value:"async destroy(options?: TK | DestroyOptions): Promise<M>",paraId:43,tocIndex:8},{value:"Type",paraId:44,tocIndex:8},{value:`interface DestroyOptions extends SequelizeDestroyOptions {
  filter?: Filter;
  filterByTk?: TargetKey | TargetKey[];
  truncate?: boolean;
  context?: any;
}
`,paraId:45,tocIndex:8},{value:"Details",paraId:46,tocIndex:8},{value:"filter",paraId:47,tocIndex:8},{value:": Specifies the filtering conditions for the records to be deleted. For detailed usage of Filter, refer to the ",paraId:47,tocIndex:8},{value:"find()",paraId:48,tocIndex:8},{value:" method.",paraId:47,tocIndex:8},{value:"filterByTk",paraId:47,tocIndex:8},{value:": Specifies the filtering conditions for the records to be deleted by TargetKey.",paraId:47,tocIndex:8},{value:"truncate",paraId:47,tocIndex:8},{value:": Whether to truncate the table data, effective when no ",paraId:47,tocIndex:8},{value:"filter",paraId:47,tocIndex:8},{value:" or ",paraId:47,tocIndex:8},{value:"filterByTk",paraId:47,tocIndex:8},{value:" parameters are passed.",paraId:47,tocIndex:8},{value:"transaction",paraId:47,tocIndex:8},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:47,tocIndex:8},{value:"add()",paraId:1},{value:"Add association relationships between objects.",paraId:49,tocIndex:9},{value:"Signature",paraId:50,tocIndex:9},{value:"async add(options: TargetKey | TargetKey[] | AssociatedOptions)",paraId:51,tocIndex:9},{value:"Type",paraId:52,tocIndex:9},{value:`interface AssociatedOptions extends Transactionable {
  tk?: TargetKey | TargetKey[];
}
`,paraId:53,tocIndex:9},{value:"Detailed Information",paraId:54,tocIndex:9},{value:"tk",paraId:55,tocIndex:9},{value:` - The targetKey value of the associated object, either as a single value or an array.

`,paraId:55,tocIndex:9},{value:"transaction",paraId:56,tocIndex:9},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:56,tocIndex:9},{value:"remove()",paraId:1},{value:"Remove the association with the given objects.",paraId:57,tocIndex:10},{value:"Signature",paraId:58,tocIndex:10},{value:"async remove(options: TargetKey | TargetKey[] | AssociatedOptions)",paraId:59,tocIndex:10},{value:"Detailed Information",paraId:60,tocIndex:10},{value:"Same parameters as the ",paraId:61,tocIndex:10},{value:"add()",paraId:62,tocIndex:10},{value:" method.",paraId:61,tocIndex:10},{value:"set()",paraId:1},{value:"Set the associated object of the current relationship.",paraId:63,tocIndex:11},{value:"Signature",paraId:64,tocIndex:11},{value:"async set(options: TargetKey | TargetKey[] | AssociatedOptions)",paraId:65,tocIndex:11},{value:"Detailed Information",paraId:66,tocIndex:11},{value:"Same parameters as the ",paraId:67,tocIndex:11},{value:"add()",paraId:68,tocIndex:11},{value:" method.",paraId:67,tocIndex:11}]},927783:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"HasOneRepository",paraId:0,tocIndex:1},{value:" is the associated repository of type ",paraId:0,tocIndex:1},{value:"HasOne",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:`const User = db.collection({
  name: 'users',
  fields: [
    { type: 'hasOne', name: 'profile' },
    { type: 'string', name: 'name' },
  ],
});

const Profile = db.collection({
  name: 'profiles',
  fields: [{ type: 'string', name: 'avatar' }],
});

const user = await User.repository.create({
  values: { name: 'u1' },
});

// Get the associated repository
const userProfileRepository = User.repository
  .relation('profile')
  .of(user.get('id'));

// Or to initialize directly
new HasOneRepository(User, 'profile', user.get('id'));
`,paraId:1,tocIndex:1},{value:"find()",paraId:2},{value:"Find associated objects.",paraId:3,tocIndex:3},{value:"Signature",paraId:4,tocIndex:3},{value:"async find(options?: SingleRelationFindOption): Promise<Model<any> | null>",paraId:5,tocIndex:3},{value:"Type",paraId:6,tocIndex:3},{value:`interface SingleRelationFindOption extends Transactionable {
  fields?: Fields;
  except?: Except;
  appends?: Appends;
  filter?: Filter;
}
`,paraId:7,tocIndex:3},{value:"Detailed Information",paraId:8,tocIndex:3},{value:"Query parameters are the same as ",paraId:9,tocIndex:3},{value:"Repository.find()",paraId:10,tocIndex:3},{value:".",paraId:9,tocIndex:3},{value:"Example",paraId:11,tocIndex:3},{value:`const profile = await UserProfileRepository.find();
// Return null if the associated object does not exist
`,paraId:12,tocIndex:3},{value:"create()",paraId:2},{value:"Create associated objects.",paraId:13,tocIndex:4},{value:"Signature",paraId:14,tocIndex:4},{value:"async create(options?: CreateOptions): Promise<Model>",paraId:15,tocIndex:4},{value:"Type",paraId:16,tocIndex:4},{value:`type WhiteList = string[];
type BlackList = string[];
type AssociationKeysToBeUpdate = string[];

interface CreateOptions extends SequelizeCreateOptions {
  values?: Values;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:17,tocIndex:4},{value:"Details",paraId:18,tocIndex:4},{value:"values",paraId:19,tocIndex:4},{value:": The data object of the record to be created.",paraId:19,tocIndex:4},{value:"whitelist",paraId:19,tocIndex:4},{value:": Specifies which fields in the data object of the record to be created ",paraId:19,tocIndex:4},{value:"can be written",paraId:19,tocIndex:4},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:19,tocIndex:4},{value:"blacklist",paraId:19,tocIndex:4},{value:": Specifies which fields in the data object of the record to be created ",paraId:19,tocIndex:4},{value:"are not allowed to be written",paraId:19,tocIndex:4},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:19,tocIndex:4},{value:"transaction",paraId:19,tocIndex:4},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:19,tocIndex:4},{value:"Example",paraId:20,tocIndex:4},{value:`const profile = await UserProfileRepository.create({
  values: { avatar: 'avatar1' },
});

console.log(profile.toJSON());
/*
{
  id: 1,
  avatar: 'avatar1',
  userId: 1,
  updatedAt: 2022-09-24T13:59:40.025Z,
  createdAt: 2022-09-24T13:59:40.025Z
}
*/
`,paraId:21,tocIndex:4},{value:"update()",paraId:2},{value:"Update associated objects.",paraId:22,tocIndex:5},{value:"Signature",paraId:23,tocIndex:5},{value:"async update(options: UpdateOptions): Promise<Model>",paraId:24,tocIndex:5},{value:"Type",paraId:25,tocIndex:5},{value:`interface UpdateOptions extends Omit<SequelizeUpdateOptions, 'where'> {
  values: Values;
  filter?: Filter;
  filterByTk?: TargetKey;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:26,tocIndex:5},{value:"Details",paraId:27,tocIndex:5},{value:"values",paraId:28,tocIndex:5},{value:": The data object of the records to be updated.",paraId:28,tocIndex:5},{value:"filter",paraId:28,tocIndex:5},{value:": Specifies the filter conditions for the records to be updated. For detailed usage of Filter, refer to the ",paraId:28,tocIndex:5},{value:"find()",paraId:29,tocIndex:5},{value:" method.",paraId:28,tocIndex:5},{value:"filterByTk",paraId:28,tocIndex:5},{value:": Specifies the filter conditions for the records to be updated by TargetKey.",paraId:28,tocIndex:5},{value:"whitelist",paraId:28,tocIndex:5},{value:": A whitelist for the ",paraId:28,tocIndex:5},{value:"values",paraId:28,tocIndex:5},{value:" fields. Only fields listed will be written.",paraId:28,tocIndex:5},{value:"blacklist",paraId:28,tocIndex:5},{value:": A blacklist for the ",paraId:28,tocIndex:5},{value:"values",paraId:28,tocIndex:5},{value:" fields. Fields listed will not be written.",paraId:28,tocIndex:5},{value:"transaction",paraId:28,tocIndex:5},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:28,tocIndex:5},{value:"At least one of ",paraId:30,tocIndex:5},{value:"filterByTk",paraId:30,tocIndex:5},{value:" or ",paraId:30,tocIndex:5},{value:"filter",paraId:30,tocIndex:5},{value:" must be provided.",paraId:30,tocIndex:5},{value:"Example",paraId:31,tocIndex:5},{value:`const profile = await UserProfileRepository.update({
  values: { avatar: 'avatar2' },
});

profile.get('avatar'); // 'avatar2'
`,paraId:32,tocIndex:5},{value:"remove()",paraId:2},{value:"Remove associated objects. Only to unassociate, not to delete the associated object.",paraId:33,tocIndex:6},{value:"Signature",paraId:34,tocIndex:6},{value:"async remove(options?: Transactionable): Promise<void>",paraId:35,tocIndex:6},{value:"Detailed Information",paraId:36,tocIndex:6},{value:"transaction",paraId:37,tocIndex:6},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:37,tocIndex:6},{value:"Example",paraId:38,tocIndex:6},{value:`await UserProfileRepository.remove();
(await UserProfileRepository.find()) == null; // true

(await Profile.repository.count()) === 1; // true
`,paraId:39,tocIndex:6},{value:"destroy()",paraId:2},{value:"Delete associated objects.",paraId:40,tocIndex:7},{value:"Signature",paraId:41,tocIndex:7},{value:"async destroy(options?: Transactionable): Promise<Boolean>",paraId:42,tocIndex:7},{value:"Detailed Information",paraId:43,tocIndex:7},{value:"transaction",paraId:44,tocIndex:7},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:44,tocIndex:7},{value:"Example",paraId:45,tocIndex:7},{value:`await UserProfileRepository.destroy();
(await UserProfileRepository.find()) == null; // true
(await Profile.repository.count()) === 0; // true
`,paraId:46,tocIndex:7},{value:"set()",paraId:2},{value:"Set associated objects.",paraId:47,tocIndex:8},{value:"Signature",paraId:48,tocIndex:8},{value:"async set(options: TargetKey | SetOption): Promise<void>",paraId:49,tocIndex:8},{value:"Type",paraId:50,tocIndex:8},{value:`interface SetOption extends Transactionable {
  tk?: TargetKey;
}
`,paraId:51,tocIndex:8},{value:"Detailed Information",paraId:52,tocIndex:8},{value:"tk: Set the targetKey of the associated object.",paraId:53,tocIndex:8},{value:"transaction: Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:53,tocIndex:8},{value:"Example",paraId:54,tocIndex:8},{value:`const newProfile = await Profile.repository.create({
  values: { avatar: 'avatar2' },
});

await UserProfileRepository.set(newProfile.get('id'));

(await UserProfileRepository.find()).get('id') === newProfile.get('id'); // true
`,paraId:55,tocIndex:8}]},876830:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"RelationRepository",paraId:0,tocIndex:0},{value:" is a ",paraId:0,tocIndex:0},{value:"Repository",paraId:0,tocIndex:0},{value:" object for relation types, which allows operations on associated data without loading the associations. Based on ",paraId:0,tocIndex:0},{value:"RelationRepository",paraId:0,tocIndex:0},{value:", each association type derives its corresponding implementation, which are:",paraId:0,tocIndex:0},{value:"HasOneRepository",paraId:1,tocIndex:0},{value:"HasManyRepository",paraId:2,tocIndex:0},{value:"BelongsToRepository",paraId:2,tocIndex:0},{value:"BelongsToManyRepository",paraId:2,tocIndex:0},{value:"Signature",paraId:3,tocIndex:1},{value:"constructor(sourceCollection: Collection, association: string, sourceKeyValue: string | number)",paraId:4,tocIndex:1},{value:"Parameters",paraId:5,tocIndex:1},{value:"Parameter Name",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default Value",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"sourceCollection",paraId:6,tocIndex:1},{value:"Collection",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"The Collection corresponding to the referencing relation in the association",paraId:6,tocIndex:1},{value:"association",paraId:6,tocIndex:1},{value:"string",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"The name of the association",paraId:6,tocIndex:1},{value:"sourceKeyValue",paraId:6,tocIndex:1},{value:"string | number",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"The key value corresponding to the referencing relation",paraId:6,tocIndex:1},{value:"db: Database",paraId:7},{value:"Database object",paraId:8,tocIndex:3},{value:"sourceCollection",paraId:7},{value:"The Collection corresponding to the referencing relation in the association",paraId:9,tocIndex:4},{value:"targetCollection",paraId:7},{value:"The Collection corresponding to the referenced relation in the association",paraId:10,tocIndex:5},{value:"association",paraId:7},{value:"The association object in Sequelize corresponding to the current association",paraId:11,tocIndex:6},{value:"associationField",paraId:7},{value:"The field in the Collection corresponding to the current association",paraId:12,tocIndex:7},{value:"sourceKeyValue",paraId:7},{value:"The key value corresponding to the referencing relation",paraId:13,tocIndex:8}]},530267:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Parameters",paraId:0},{value:"Parameter Name",paraId:1},{value:"Type",paraId:1},{value:"Default",paraId:1},{value:"Description",paraId:1},{value:"options.values",paraId:1},{value:"M",paraId:1},{value:"{}",paraId:1},{value:"The data object to be inserted",paraId:1},{value:"options.whitelist?",paraId:1},{value:"string[]",paraId:1},{value:"-",paraId:1},{value:"Whitelist for the ",paraId:1},{value:"values",paraId:1},{value:" field; only fields in the list will be stored",paraId:1},{value:"options.blacklist?",paraId:1},{value:"string[]",paraId:1},{value:"-",paraId:1},{value:"Blacklist for the ",paraId:1},{value:"values",paraId:1},{value:" field; fields in the list will not be stored",paraId:1},{value:"options.transaction?",paraId:1},{value:"Transaction",paraId:1},{value:"-",paraId:1},{value:"Transaction",paraId:1}]},952596:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Type",paraId:0},{value:`type WhiteList = string[];
type BlackList = string[];
type AssociationKeysToBeUpdate = string[];

interface CreateOptions extends SequelizeCreateOptions {
  values?: Values;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:1},{value:"Details",paraId:2},{value:"values",paraId:3},{value:": The data object of the record to be created.",paraId:3},{value:"whitelist",paraId:3},{value:": Specifies which fields in the data object of the record to be created ",paraId:3},{value:"can be written",paraId:3},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:3},{value:"blacklist",paraId:3},{value:": Specifies which fields in the data object of the record to be created ",paraId:3},{value:"are not allowed to be written",paraId:3},{value:". If this parameter is not passed, all fields are allowed to be written by default.",paraId:3},{value:"transaction",paraId:3},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:3}]},585450:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Type",paraId:0},{value:`interface DestroyOptions extends SequelizeDestroyOptions {
  filter?: Filter;
  filterByTk?: TargetKey | TargetKey[];
  truncate?: boolean;
  context?: any;
}
`,paraId:1},{value:"Details",paraId:2},{value:"filter",paraId:3},{value:": Specifies the filtering conditions for the records to be deleted. For detailed usage of Filter, refer to the ",paraId:3},{value:"find()",paraId:4},{value:" method.",paraId:3},{value:"filterByTk",paraId:3},{value:": Specifies the filtering conditions for the records to be deleted by TargetKey.",paraId:3},{value:"truncate",paraId:3},{value:": Whether to truncate the table data, effective when no ",paraId:3},{value:"filter",paraId:3},{value:" or ",paraId:3},{value:"filterByTk",paraId:3},{value:" parameters are passed.",paraId:3},{value:"transaction",paraId:3},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:3}]},445909:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Type",paraId:0},{value:`type FindOneOptions = Omit<FindOptions, 'limit'>;
`,paraId:1},{value:"Parameters",paraId:2},{value:"Most parameters are the same as those in ",paraId:3},{value:"find()",paraId:3},{value:". The difference is that ",paraId:3},{value:"findOne()",paraId:3},{value:" returns only a single piece of data, so the ",paraId:3},{value:"limit",paraId:3},{value:" parameter is not needed, and the query is always set to ",paraId:3},{value:"1",paraId:3},{value:".",paraId:3}]},349516:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},622068:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"transaction",paraId:0},{value:": Transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:0}]},380507:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Type",paraId:0},{value:`interface UpdateOptions extends Omit<SequelizeUpdateOptions, 'where'> {
  values: Values;
  filter?: Filter;
  filterByTk?: TargetKey;
  whitelist?: WhiteList;
  blacklist?: BlackList;
  updateAssociationValues?: AssociationKeysToBeUpdate;
  context?: any;
}
`,paraId:1},{value:"Details",paraId:2},{value:"values",paraId:3},{value:": The data object of the records to be updated.",paraId:3},{value:"filter",paraId:3},{value:": Specifies the filter conditions for the records to be updated. For detailed usage of Filter, refer to the ",paraId:3},{value:"find()",paraId:4},{value:" method.",paraId:3},{value:"filterByTk",paraId:3},{value:": Specifies the filter conditions for the records to be updated by TargetKey.",paraId:3},{value:"whitelist",paraId:3},{value:": A whitelist for the ",paraId:3},{value:"values",paraId:3},{value:" fields. Only fields listed will be written.",paraId:3},{value:"blacklist",paraId:3},{value:": A blacklist for the ",paraId:3},{value:"values",paraId:3},{value:" fields. Fields listed will not be written.",paraId:3},{value:"transaction",paraId:3},{value:": The transaction object. If no transaction parameter is passed, the method will automatically create an internal transaction.",paraId:3},{value:"At least one of ",paraId:5},{value:"filterByTk",paraId:5},{value:" or ",paraId:5},{value:"filter",paraId:5},{value:" must be provided.",paraId:5}]},629187:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This is an embedded Markdown editor:",paraId:0,tocIndex:1}]},55283:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"https://handlebarsjs.com/guide/builtin-helpers.html",paraId:0,tocIndex:0},{value:"Renders a block if the given condition is truthy.",paraId:1,tocIndex:1},{value:"Params",paraId:2,tocIndex:1},{value:"condition",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"{Any}",paraId:3,tocIndex:1},{value:": The condition to evaluate.",paraId:3,tocIndex:1},{value:"Returns",paraId:4,tocIndex:1},{value:": The content inside the block if the condition is truthy, otherwise returns nothing.",paraId:4,tocIndex:1},{value:"Example",paraId:5,tocIndex:1},{value:`{{#if condition}}
  This will be displayed if the condition is true.
{{/if}}
`,paraId:6,tocIndex:1},{value:"Renders a block if the given condition is falsy. This is the opposite of ",paraId:7,tocIndex:2},{value:"if",paraId:7,tocIndex:2},{value:".",paraId:7,tocIndex:2},{value:"Params",paraId:8,tocIndex:2},{value:"condition",paraId:9,tocIndex:2},{value:" ",paraId:9,tocIndex:2},{value:"{Any}",paraId:9,tocIndex:2},{value:": The condition to evaluate.",paraId:9,tocIndex:2},{value:"Returns",paraId:10,tocIndex:2},{value:": The content inside the block if the condition is falsy, otherwise returns nothing.",paraId:10,tocIndex:2},{value:"Example",paraId:11,tocIndex:2},{value:`{{#unless condition}}
  This will be displayed if the condition is false.
{{/unless}}
`,paraId:12,tocIndex:2},{value:"Iterates over an array or object and renders a block for each item.",paraId:13,tocIndex:3},{value:"Params",paraId:14,tocIndex:3},{value:"collection",paraId:15,tocIndex:3},{value:" ",paraId:15,tocIndex:3},{value:"{Array|Object}",paraId:15,tocIndex:3},{value:": The array or object to iterate over.",paraId:15,tocIndex:3},{value:"Returns",paraId:16,tocIndex:3},{value:": Renders the block for each item in the collection.",paraId:16,tocIndex:3},{value:"Example",paraId:17,tocIndex:3},{value:`{{#each items}}
  <li>{{this}}</li>
{{/each}}
`,paraId:18,tocIndex:3},{value:"Renders a block with a given context. It allows you to specify a context for the block, simplifying access to deeply nested properties.",paraId:19,tocIndex:4},{value:"Params",paraId:20,tocIndex:4},{value:"context",paraId:21,tocIndex:4},{value:" ",paraId:21,tocIndex:4},{value:"{Any}",paraId:21,tocIndex:4},{value:": The context to use within the block.",paraId:21,tocIndex:4},{value:"Returns",paraId:22,tocIndex:4},{value:": Renders the block with the provided context.",paraId:22,tocIndex:4},{value:"Example",paraId:23,tocIndex:4},{value:`{{#with person}}
  <p>Name: {{name}}</p>
  <p>Age: {{age}}</p>
{{/with}}
`,paraId:24,tocIndex:4},{value:"Looks up the value of a specified key in an object. This helper is useful for accessing dynamic keys.",paraId:25,tocIndex:5},{value:"Params",paraId:26,tocIndex:5},{value:"context",paraId:27,tocIndex:5},{value:" ",paraId:27,tocIndex:5},{value:"{Object}",paraId:27,tocIndex:5},{value:": The object to look up the key from.",paraId:27,tocIndex:5},{value:"key",paraId:27,tocIndex:5},{value:" ",paraId:27,tocIndex:5},{value:"{String|Number}",paraId:27,tocIndex:5},{value:": The key to look up.",paraId:27,tocIndex:5},{value:"Returns",paraId:28,tocIndex:5},{value:": The value of the specified key in the object.",paraId:28,tocIndex:5},{value:"Example",paraId:29,tocIndex:5},{value:`{{lookup person "name"}}
<!-- If person is { name: "Alice", age: 30 }, it results in: "Alice" -->
`,paraId:30,tocIndex:5}]},730830:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The "dateFormat" helper in Handlebars is used to format a date using the day.js library. It takes two required arguments and an optional third argument for the timezone.',paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"datetime",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"format",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"timezone",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"Example",paraId:3,tocIndex:1},{value:`{{dateFormat now "YYYY-MM-DD HH:mm:ss"}}
{{dateFormat now "YYYY-MM-DD HH:mm:ss" "Asia/Tokyo"}}
{{dateFormat now "YYYY-MM-DD HH:mm:ss" "UTC"}}
`,paraId:4,tocIndex:1}]},952682:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},106435:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Params",paraId:0,tocIndex:1},{value:"key",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"{String}",paraId:1,tocIndex:1},{value:"ns",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"{String}",paraId:1,tocIndex:1},{value:"returns",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"{String}",paraId:1,tocIndex:1},{value:"Example",paraId:2,tocIndex:1},{value:`{{t "Today"}}
{{t "Permissions" "@nocobase/plugin-acl"}}
`,paraId:3,tocIndex:1}]},247993:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Category",paraId:0,tocIndex:0},{value:"Description",paraId:0,tocIndex:0},{value:"Core",paraId:1,tocIndex:0},{value:"Built-in helpers",paraId:0,tocIndex:0},{value:"Array",paraId:2,tocIndex:0},{value:"Operations and methods related to arrays",paraId:0,tocIndex:0},{value:"Comparison",paraId:3,tocIndex:0},{value:"Comparison operators and related methods",paraId:0,tocIndex:0},{value:"Date",paraId:4,tocIndex:0},{value:"Operations and methods related to date and time handling",paraId:0,tocIndex:0},{value:"HTML",paraId:5,tocIndex:0},{value:"Content related to HTML documents and elements",paraId:0,tocIndex:0},{value:"I18n",paraId:6,tocIndex:0},{value:"Support for internationalization and multilingual handling",paraId:0,tocIndex:0},{value:"Math",paraId:7,tocIndex:0},{value:"Mathematical functions and calculations",paraId:0,tocIndex:0},{value:"Number",paraId:8,tocIndex:0},{value:"Content related to number handling and formatting",paraId:0,tocIndex:0},{value:"Object",paraId:9,tocIndex:0},{value:"Methods related to object operations and properties",paraId:0,tocIndex:0},{value:"Path",paraId:10,tocIndex:0},{value:"Path operations and content related to the file system",paraId:0,tocIndex:0},{value:"Regex",paraId:11,tocIndex:0},{value:"Regular expressions and their usage",paraId:0,tocIndex:0},{value:"String",paraId:12,tocIndex:0},{value:"Methods related to string manipulation and operations",paraId:0,tocIndex:0},{value:"URL",paraId:13,tocIndex:0},{value:"Content related to URL parsing and construction",paraId:0,tocIndex:0}]},991069:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Return the magnitude of ",paraId:0,tocIndex:1},{value:"a",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"a",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{Number}",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{Number}",paraId:2,tocIndex:1},{value:"Return the sum of ",paraId:3,tocIndex:2},{value:"a",paraId:3,tocIndex:2},{value:" plus ",paraId:3,tocIndex:2},{value:"b",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Params",paraId:4,tocIndex:2},{value:"a",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{Number}",paraId:5,tocIndex:2},{value:"b",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{Number}",paraId:5,tocIndex:2},{value:"returns",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{Number}",paraId:5,tocIndex:2},{value:"Returns the average of all numbers in the given array.",paraId:6,tocIndex:3},{value:"Params",paraId:7,tocIndex:3},{value:"array",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{Array}",paraId:8,tocIndex:3},{value:": Array of numbers to add up.",paraId:8,tocIndex:3},{value:"returns",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{Number}",paraId:8,tocIndex:3},{value:"Example",paraId:9,tocIndex:3},{value:`{{avg "[1, 2, 3, 4, 5]"}}
<!-- results in: '3' -->
`,paraId:10,tocIndex:3},{value:"Get the ",paraId:11,tocIndex:4},{value:"Math.ceil()",paraId:11,tocIndex:4},{value:" of the given value.",paraId:11,tocIndex:4},{value:"Params",paraId:12,tocIndex:4},{value:"value",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"{Number}",paraId:13,tocIndex:4},{value:"returns",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"{Number}",paraId:13,tocIndex:4},{value:"Divide ",paraId:14,tocIndex:5},{value:"a",paraId:14,tocIndex:5},{value:" by ",paraId:14,tocIndex:5},{value:"b",paraId:14,tocIndex:5},{value:"Params",paraId:15,tocIndex:5},{value:"a",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"{Number}",paraId:16,tocIndex:5},{value:": numerator",paraId:16,tocIndex:5},{value:"b",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"{Number}",paraId:16,tocIndex:5},{value:": denominator",paraId:16,tocIndex:5},{value:"Get the ",paraId:17,tocIndex:6},{value:"Math.floor()",paraId:17,tocIndex:6},{value:" of the given value.",paraId:17,tocIndex:6},{value:"Params",paraId:18,tocIndex:6},{value:"value",paraId:19,tocIndex:6},{value:" ",paraId:19,tocIndex:6},{value:"{Number}",paraId:19,tocIndex:6},{value:"returns",paraId:19,tocIndex:6},{value:" ",paraId:19,tocIndex:6},{value:"{Number}",paraId:19,tocIndex:6},{value:"Return the difference of ",paraId:20,tocIndex:7},{value:"a",paraId:20,tocIndex:7},{value:" minus ",paraId:20,tocIndex:7},{value:"b",paraId:20,tocIndex:7},{value:".",paraId:20,tocIndex:7},{value:"Params",paraId:21,tocIndex:7},{value:"a",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"{Number}",paraId:22,tocIndex:7},{value:"b",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"{Number}",paraId:22,tocIndex:7},{value:"Get the remainder of a division operation.",paraId:23,tocIndex:8},{value:"Params",paraId:24,tocIndex:8},{value:"a",paraId:25,tocIndex:8},{value:" ",paraId:25,tocIndex:8},{value:"{Number}",paraId:25,tocIndex:8},{value:"b",paraId:25,tocIndex:8},{value:" ",paraId:25,tocIndex:8},{value:"{Number}",paraId:25,tocIndex:8},{value:"returns",paraId:25,tocIndex:8},{value:" ",paraId:25,tocIndex:8},{value:"{Number}",paraId:25,tocIndex:8},{value:"Return the product of ",paraId:26,tocIndex:9},{value:"a",paraId:26,tocIndex:9},{value:" times ",paraId:26,tocIndex:9},{value:"b",paraId:26,tocIndex:9},{value:".",paraId:26,tocIndex:9},{value:"Params",paraId:27,tocIndex:9},{value:"a",paraId:28,tocIndex:9},{value:" ",paraId:28,tocIndex:9},{value:"{Number}",paraId:28,tocIndex:9},{value:": factor",paraId:28,tocIndex:9},{value:"b",paraId:28,tocIndex:9},{value:" ",paraId:28,tocIndex:9},{value:"{Number}",paraId:28,tocIndex:9},{value:": multiplier",paraId:28,tocIndex:9},{value:"returns",paraId:28,tocIndex:9},{value:" ",paraId:28,tocIndex:9},{value:"{Number}",paraId:28,tocIndex:9},{value:"Add ",paraId:29,tocIndex:10},{value:"a",paraId:29,tocIndex:10},{value:" by ",paraId:29,tocIndex:10},{value:"b",paraId:29,tocIndex:10},{value:".",paraId:29,tocIndex:10},{value:"Params",paraId:30,tocIndex:10},{value:"a",paraId:31,tocIndex:10},{value:" ",paraId:31,tocIndex:10},{value:"{Number}",paraId:31,tocIndex:10},{value:": factor",paraId:31,tocIndex:10},{value:"b",paraId:31,tocIndex:10},{value:" ",paraId:31,tocIndex:10},{value:"{Number}",paraId:31,tocIndex:10},{value:": multiplier",paraId:31,tocIndex:10},{value:"Generate a random number between two values",paraId:32,tocIndex:11},{value:"Params",paraId:33,tocIndex:11},{value:"min",paraId:34,tocIndex:11},{value:" ",paraId:34,tocIndex:11},{value:"{Number}",paraId:34,tocIndex:11},{value:"max",paraId:34,tocIndex:11},{value:" ",paraId:34,tocIndex:11},{value:"{Number}",paraId:34,tocIndex:11},{value:"returns",paraId:34,tocIndex:11},{value:" ",paraId:34,tocIndex:11},{value:"{String}",paraId:34,tocIndex:11},{value:"Get the remainder when ",paraId:35,tocIndex:12},{value:"a",paraId:35,tocIndex:12},{value:" is divided by ",paraId:35,tocIndex:12},{value:"b",paraId:35,tocIndex:12},{value:".",paraId:35,tocIndex:12},{value:"Params",paraId:36,tocIndex:12},{value:"a",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"{Number}",paraId:37,tocIndex:12},{value:": a",paraId:37,tocIndex:12},{value:"b",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"{Number}",paraId:37,tocIndex:12},{value:": b",paraId:37,tocIndex:12},{value:"Round the given number.",paraId:38,tocIndex:13},{value:"Params",paraId:39,tocIndex:13},{value:"number",paraId:40,tocIndex:13},{value:" ",paraId:40,tocIndex:13},{value:"{Number}",paraId:40,tocIndex:13},{value:"returns",paraId:40,tocIndex:13},{value:" ",paraId:40,tocIndex:13},{value:"{Number}",paraId:40,tocIndex:13},{value:"Return the product of ",paraId:41,tocIndex:14},{value:"a",paraId:41,tocIndex:14},{value:" minus ",paraId:41,tocIndex:14},{value:"b",paraId:41,tocIndex:14},{value:".",paraId:41,tocIndex:14},{value:"Params",paraId:42,tocIndex:14},{value:"a",paraId:43,tocIndex:14},{value:" ",paraId:43,tocIndex:14},{value:"{Number}",paraId:43,tocIndex:14},{value:"b",paraId:43,tocIndex:14},{value:" ",paraId:43,tocIndex:14},{value:"{Number}",paraId:43,tocIndex:14},{value:"returns",paraId:43,tocIndex:14},{value:" ",paraId:43,tocIndex:14},{value:"{Number}",paraId:43,tocIndex:14},{value:"Returns the sum of all numbers in the given array.",paraId:44,tocIndex:15},{value:"Params",paraId:45,tocIndex:15},{value:"array",paraId:46,tocIndex:15},{value:" ",paraId:46,tocIndex:15},{value:"{Array}",paraId:46,tocIndex:15},{value:": Array of numbers to add up.",paraId:46,tocIndex:15},{value:"returns",paraId:46,tocIndex:15},{value:" ",paraId:46,tocIndex:15},{value:"{Number}",paraId:46,tocIndex:15},{value:"Example",paraId:47,tocIndex:15},{value:`{{sum "[1, 2, 3, 4, 5]"}}
<!-- results in: '15' -->
`,paraId:48,tocIndex:15},{value:"Multiply number ",paraId:49,tocIndex:16},{value:"a",paraId:49,tocIndex:16},{value:" by number ",paraId:49,tocIndex:16},{value:"b",paraId:49,tocIndex:16},{value:".",paraId:49,tocIndex:16},{value:"Params",paraId:50,tocIndex:16},{value:"a",paraId:51,tocIndex:16},{value:" ",paraId:51,tocIndex:16},{value:"{Number}",paraId:51,tocIndex:16},{value:": factor",paraId:51,tocIndex:16},{value:"b",paraId:51,tocIndex:16},{value:" ",paraId:51,tocIndex:16},{value:"{Number}",paraId:51,tocIndex:16},{value:": multiplier",paraId:51,tocIndex:16},{value:"returns",paraId:51,tocIndex:16},{value:" ",paraId:51,tocIndex:16},{value:"{Number}",paraId:51,tocIndex:16}]},481469:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Format a number to it's equivalent in bytes. If a string is passed, it's length will be formatted and returned.",paraId:0,tocIndex:1},{value:"Examples:",paraId:1,tocIndex:1},{value:"'foo' => 3 B",paraId:2,tocIndex:1},{value:"13661855 => 13.66 MB",paraId:2,tocIndex:1},{value:"825399 => 825.39 kB",paraId:2,tocIndex:1},{value:"1396 => 1.4 kB",paraId:2,tocIndex:1},{value:"Params",paraId:3,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"{Number|String}",paraId:4,tocIndex:1},{value:"returns",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"{String}",paraId:4,tocIndex:1},{value:"Add commas to numbers",paraId:5,tocIndex:2},{value:"Params",paraId:6,tocIndex:2},{value:"num",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{Number}",paraId:7,tocIndex:2},{value:"returns",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{Number}",paraId:7,tocIndex:2},{value:"Convert a string or number to a formatted phone number.",paraId:8,tocIndex:3},{value:"Params",paraId:9,tocIndex:3},{value:"num",paraId:10,tocIndex:3},{value:" ",paraId:10,tocIndex:3},{value:"{Number|String}",paraId:10,tocIndex:3},{value:": The phone number to format, e.g. ",paraId:10,tocIndex:3},{value:"8005551212",paraId:10,tocIndex:3},{value:"returns",paraId:10,tocIndex:3},{value:" ",paraId:10,tocIndex:3},{value:"{Number}",paraId:10,tocIndex:3},{value:": Formatted phone number: ",paraId:10,tocIndex:3},{value:"(800) 555-1212",paraId:10,tocIndex:3},{value:"Abbreviate numbers to the given number of ",paraId:11,tocIndex:4},{value:"precision",paraId:11,tocIndex:4},{value:`. This is for
general numbers, not size in bytes.`,paraId:11,tocIndex:4},{value:"Params",paraId:12,tocIndex:4},{value:"number",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"{Number}",paraId:13,tocIndex:4},{value:"precision",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"{Number}",paraId:13,tocIndex:4},{value:"returns",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"{String}",paraId:13,tocIndex:4},{value:"Returns a string representing the given number in exponential notation.",paraId:14,tocIndex:5},{value:"Params",paraId:15,tocIndex:5},{value:"number",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"{Number}",paraId:16,tocIndex:5},{value:"fractionDigits",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"{Number}",paraId:16,tocIndex:5},{value:": Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.",paraId:16,tocIndex:5},{value:"returns",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"{Number}",paraId:16,tocIndex:5},{value:"Example",paraId:17,tocIndex:5},{value:`{{toExponential number digits}};
`,paraId:18,tocIndex:5},{value:"Formats the given number using fixed-point notation.",paraId:19,tocIndex:6},{value:"Params",paraId:20,tocIndex:6},{value:"number",paraId:21,tocIndex:6},{value:" ",paraId:21,tocIndex:6},{value:"{Number}",paraId:21,tocIndex:6},{value:"digits",paraId:21,tocIndex:6},{value:" ",paraId:21,tocIndex:6},{value:"{Number}",paraId:21,tocIndex:6},{value:": (Optional) The number of digits to appear after the decimal point; this may be a value between 0 and 20. If this argument is omitted, it is treated as 0.",paraId:21,tocIndex:6},{value:"returns",paraId:21,tocIndex:6},{value:" ",paraId:21,tocIndex:6},{value:"{String}",paraId:21,tocIndex:6},{value:": A string representing the given number using fixed-point notation.",paraId:21,tocIndex:6},{value:"Example",paraId:22,tocIndex:6},{value:`{{toFixed "1.1234" 2}}
//=> '1.12'
`,paraId:23,tocIndex:6},{value:"Params",paraId:24,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:" ",paraId:25,tocIndex:7},{value:"{Number}",paraId:25,tocIndex:7},{value:"returns",paraId:25,tocIndex:7},{value:" ",paraId:25,tocIndex:7},{value:"{Number}",paraId:25,tocIndex:7},{value:"Params",paraId:26,tocIndex:8},{value:"number",paraId:27,tocIndex:8},{value:" ",paraId:27,tocIndex:8},{value:"{Number}",paraId:27,tocIndex:8},{value:"returns",paraId:27,tocIndex:8},{value:" ",paraId:27,tocIndex:8},{value:"{Number}",paraId:27,tocIndex:8},{value:"Returns a string representing the ",paraId:28,tocIndex:9},{value:"Number",paraId:28,tocIndex:9},{value:" object to the specified precision.",paraId:28,tocIndex:9},{value:"Params",paraId:29,tocIndex:9},{value:"number",paraId:30,tocIndex:9},{value:" ",paraId:30,tocIndex:9},{value:"{Number}",paraId:30,tocIndex:9},{value:"precision",paraId:30,tocIndex:9},{value:" ",paraId:30,tocIndex:9},{value:"{Number}",paraId:30,tocIndex:9},{value:": (Optional) An integer specifying the number of significant digits. If precison is not between 1 and 100 (inclusive), it will be coerced to ",paraId:30,tocIndex:9},{value:"0",paraId:30,tocIndex:9},{value:".",paraId:30,tocIndex:9},{value:"returns",paraId:30,tocIndex:9},{value:" ",paraId:30,tocIndex:9},{value:"{String}",paraId:30,tocIndex:9},{value:": A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits.",paraId:30,tocIndex:9},{value:"Example",paraId:31,tocIndex:9},{value:`{{toPrecision "1.1234" 2}}
//=> '1.1'
`,paraId:32,tocIndex:9}]},590276:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Extend the context with the properties of other objects.
A shallow merge is performed to avoid mutating the context.`,paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"objects",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{Object}",paraId:2,tocIndex:1},{value:": One or more objects to extend.",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{Object}",paraId:2,tocIndex:1},{value:`Block helper that iterates over the properties of
an object, exposing each key and value on the context.`,paraId:3,tocIndex:2},{value:"Params",paraId:4,tocIndex:2},{value:"context",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{Object}",paraId:5,tocIndex:2},{value:"options",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{Object}",paraId:5,tocIndex:2},{value:"returns",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{String}",paraId:5,tocIndex:2},{value:"Block helper that iterates over the ",paraId:6,tocIndex:3},{value:"own",paraId:6,tocIndex:3},{value:` properties of
an object, exposing each key and value on the context.`,paraId:6,tocIndex:3},{value:"Params",paraId:7,tocIndex:3},{value:"obj",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{Object}",paraId:8,tocIndex:3},{value:": The object to iterate over.",paraId:8,tocIndex:3},{value:"options",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{Object}",paraId:8,tocIndex:3},{value:"returns",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{String}",paraId:8,tocIndex:3},{value:"Take arguments and, if they are string or number, convert them to a dot-delineated object property path.",paraId:9,tocIndex:4},{value:"Params",paraId:10,tocIndex:4},{value:"prop",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"{String|Number}",paraId:11,tocIndex:4},{value:": The property segments to assemble (can be multiple).",paraId:11,tocIndex:4},{value:"returns",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"{String}",paraId:11,tocIndex:4},{value:"Use property paths (",paraId:12,tocIndex:5},{value:"a.b.c",paraId:12,tocIndex:5},{value:`) to get a value or nested value from
the context. Works as a regular helper or block helper.`,paraId:12,tocIndex:5},{value:"Params",paraId:13,tocIndex:5},{value:"prop",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"{String}",paraId:14,tocIndex:5},{value:": The property to get, optionally using dot notation for nested properties.",paraId:14,tocIndex:5},{value:"context",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"{Object}",paraId:14,tocIndex:5},{value:": The context object",paraId:14,tocIndex:5},{value:"options",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"{Object}",paraId:14,tocIndex:5},{value:": The handlebars options object, if used as a block helper.",paraId:14,tocIndex:5},{value:"returns",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"{String}",paraId:14,tocIndex:5},{value:"Use property paths (",paraId:15,tocIndex:6},{value:"a.b.c",paraId:15,tocIndex:6},{value:`) to get an object from
the context. Differs from the `,paraId:15,tocIndex:6},{value:"get",paraId:15,tocIndex:6},{value:` helper in that this
helper will return the actual object, including the
given property key. Also, this helper does not work as a
block helper.`,paraId:15,tocIndex:6},{value:"Params",paraId:16,tocIndex:6},{value:"prop",paraId:17,tocIndex:6},{value:" ",paraId:17,tocIndex:6},{value:"{String}",paraId:17,tocIndex:6},{value:": The property to get, optionally using dot notation for nested properties.",paraId:17,tocIndex:6},{value:"context",paraId:17,tocIndex:6},{value:" ",paraId:17,tocIndex:6},{value:"{Object}",paraId:17,tocIndex:6},{value:": The context object",paraId:17,tocIndex:6},{value:"returns",paraId:17,tocIndex:6},{value:" ",paraId:17,tocIndex:6},{value:"{String}",paraId:17,tocIndex:6},{value:"Return true if ",paraId:18,tocIndex:7},{value:"key",paraId:18,tocIndex:7},{value:" is an own, enumerable property of the given ",paraId:18,tocIndex:7},{value:"context",paraId:18,tocIndex:7},{value:" object.",paraId:18,tocIndex:7},{value:"Params",paraId:19,tocIndex:7},{value:"key",paraId:20,tocIndex:7},{value:" ",paraId:20,tocIndex:7},{value:"{String}",paraId:20,tocIndex:7},{value:"context",paraId:20,tocIndex:7},{value:" ",paraId:20,tocIndex:7},{value:"{Object}",paraId:20,tocIndex:7},{value:": The context object.",paraId:20,tocIndex:7},{value:"returns",paraId:20,tocIndex:7},{value:" ",paraId:20,tocIndex:7},{value:"{Boolean}",paraId:20,tocIndex:7},{value:"Example",paraId:21,tocIndex:7},{value:`{{hasOwn context key}}
`,paraId:22,tocIndex:7},{value:"Return true if ",paraId:23,tocIndex:8},{value:"value",paraId:23,tocIndex:8},{value:" is an object.",paraId:23,tocIndex:8},{value:"Params",paraId:24,tocIndex:8},{value:"value",paraId:25,tocIndex:8},{value:" ",paraId:25,tocIndex:8},{value:"{String}",paraId:25,tocIndex:8},{value:"returns",paraId:25,tocIndex:8},{value:" ",paraId:25,tocIndex:8},{value:"{Boolean}",paraId:25,tocIndex:8},{value:"Example",paraId:26,tocIndex:8},{value:`{{isObject "foo"}}
//=> false
`,paraId:27,tocIndex:8},{value:"Parses the given string using ",paraId:28,tocIndex:9},{value:"JSON.parse",paraId:28,tocIndex:9},{value:".",paraId:28,tocIndex:9},{value:"Params",paraId:29,tocIndex:9},{value:"string",paraId:30,tocIndex:9},{value:" ",paraId:30,tocIndex:9},{value:"{String}",paraId:30,tocIndex:9},{value:": The string to parse",paraId:30,tocIndex:9},{value:"Example",paraId:31,tocIndex:9},{value:`<!-- string: '{"foo": "bar"}' -->
{{JSONparse string}}
<!-- results in: { foo: 'bar' } -->
`,paraId:32,tocIndex:9},{value:"Stringify an object using ",paraId:33,tocIndex:10},{value:"JSON.stringify",paraId:33,tocIndex:10},{value:".",paraId:33,tocIndex:10},{value:"Params",paraId:34,tocIndex:10},{value:"obj",paraId:35,tocIndex:10},{value:" ",paraId:35,tocIndex:10},{value:"{Object}",paraId:35,tocIndex:10},{value:": Object to stringify",paraId:35,tocIndex:10},{value:"returns",paraId:35,tocIndex:10},{value:" ",paraId:35,tocIndex:10},{value:"{String}",paraId:35,tocIndex:10},{value:"Example",paraId:36,tocIndex:10},{value:`<!-- object: { foo: 'bar' } -->
{{JSONstringify object}}
<!-- results in: '{"foo": "bar"}' -->
`,paraId:37,tocIndex:10},{value:"Deeply merge the properties of the given ",paraId:38,tocIndex:11},{value:"objects",paraId:38,tocIndex:11},{value:` with the
context object.`,paraId:38,tocIndex:11},{value:"Params",paraId:39,tocIndex:11},{value:"object",paraId:40,tocIndex:11},{value:" ",paraId:40,tocIndex:11},{value:"{Object}",paraId:40,tocIndex:11},{value:": The target object. Pass an empty object to shallow clone.",paraId:40,tocIndex:11},{value:"objects",paraId:40,tocIndex:11},{value:" ",paraId:40,tocIndex:11},{value:"{Object}",paraId:40,tocIndex:11},{value:"returns",paraId:40,tocIndex:11},{value:" ",paraId:40,tocIndex:11},{value:"{Object}",paraId:40,tocIndex:11},{value:"Pick properties from the context object.",paraId:41,tocIndex:12},{value:"Params",paraId:42,tocIndex:12},{value:"properties",paraId:43,tocIndex:12},{value:" ",paraId:43,tocIndex:12},{value:"{Array|String}",paraId:43,tocIndex:12},{value:": One or more properties to pick.",paraId:43,tocIndex:12},{value:"context",paraId:43,tocIndex:12},{value:" ",paraId:43,tocIndex:12},{value:"{Object}",paraId:43,tocIndex:12},{value:"options",paraId:43,tocIndex:12},{value:" ",paraId:43,tocIndex:12},{value:"{Object}",paraId:43,tocIndex:12},{value:": Handlebars options object.",paraId:43,tocIndex:12},{value:"returns",paraId:43,tocIndex:12},{value:" ",paraId:43,tocIndex:12},{value:"{Object}",paraId:43,tocIndex:12},{value:": Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.",paraId:43,tocIndex:12}]},850782:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Get the directory path segment from the given ",paraId:0,tocIndex:1},{value:"filepath",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"ext",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"Example",paraId:3,tocIndex:1},{value:`{{absolute "docs/toc.md"}}
<!-- results in: 'docs' -->
`,paraId:4,tocIndex:1},{value:"Get the directory path segment from the given ",paraId:5,tocIndex:2},{value:"filepath",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:"Params",paraId:6,tocIndex:2},{value:"ext",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{String}",paraId:7,tocIndex:2},{value:"returns",paraId:7,tocIndex:2},{value:" ",paraId:7,tocIndex:2},{value:"{String}",paraId:7,tocIndex:2},{value:"Example",paraId:8,tocIndex:2},{value:`{{dirname "docs/toc.md"}}
<!-- results in: 'docs' -->
`,paraId:9,tocIndex:2},{value:"Get the relative filepath from ",paraId:10,tocIndex:3},{value:"a",paraId:10,tocIndex:3},{value:" to ",paraId:10,tocIndex:3},{value:"b",paraId:10,tocIndex:3},{value:".",paraId:10,tocIndex:3},{value:"Params",paraId:11,tocIndex:3},{value:"a",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"{String}",paraId:12,tocIndex:3},{value:"b",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"{String}",paraId:12,tocIndex:3},{value:"returns",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"{String}",paraId:12,tocIndex:3},{value:"Example",paraId:13,tocIndex:3},{value:`{{relative a b}}
`,paraId:14,tocIndex:3},{value:"Get the file extension from the given ",paraId:15,tocIndex:4},{value:"filepath",paraId:15,tocIndex:4},{value:".",paraId:15,tocIndex:4},{value:"Params",paraId:16,tocIndex:4},{value:"ext",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"{String}",paraId:17,tocIndex:4},{value:"returns",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"{String}",paraId:17,tocIndex:4},{value:"Example",paraId:18,tocIndex:4},{value:`{{basename "docs/toc.md"}}
<!-- results in: 'toc.md' -->
`,paraId:19,tocIndex:4},{value:'Get the "stem" from the given ',paraId:20,tocIndex:5},{value:"filepath",paraId:20,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:"Params",paraId:21,tocIndex:5},{value:"filepath",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"{String}",paraId:22,tocIndex:5},{value:"returns",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"{String}",paraId:22,tocIndex:5},{value:"Example",paraId:23,tocIndex:5},{value:`{{stem "docs/toc.md"}}
<!-- results in: 'toc' -->
`,paraId:24,tocIndex:5},{value:"Get the file extension from the given ",paraId:25,tocIndex:6},{value:"filepath",paraId:25,tocIndex:6},{value:".",paraId:25,tocIndex:6},{value:"Params",paraId:26,tocIndex:6},{value:"filepath",paraId:27,tocIndex:6},{value:" ",paraId:27,tocIndex:6},{value:"{String}",paraId:27,tocIndex:6},{value:"returns",paraId:27,tocIndex:6},{value:" ",paraId:27,tocIndex:6},{value:"{String}",paraId:27,tocIndex:6},{value:"Example",paraId:28,tocIndex:6},{value:`{{extname "docs/toc.md"}}
<!-- results in: '.md' -->
`,paraId:29,tocIndex:6},{value:"Resolve an absolute path from the given ",paraId:30,tocIndex:7},{value:"filepath",paraId:30,tocIndex:7},{value:".",paraId:30,tocIndex:7},{value:"Params",paraId:31,tocIndex:7},{value:"filepath",paraId:32,tocIndex:7},{value:" ",paraId:32,tocIndex:7},{value:"{String}",paraId:32,tocIndex:7},{value:"returns",paraId:32,tocIndex:7},{value:" ",paraId:32,tocIndex:7},{value:"{String}",paraId:32,tocIndex:7},{value:"Example",paraId:33,tocIndex:7},{value:`{{resolve "docs/toc.md"}}
<!-- results in: '/User/dev/docs/toc.md' -->
`,paraId:34,tocIndex:7},{value:"Get specific (joined) segments of a file path by passing a range of array indices.",paraId:35,tocIndex:8},{value:"Params",paraId:36,tocIndex:8},{value:"filepath",paraId:37,tocIndex:8},{value:" ",paraId:37,tocIndex:8},{value:"{String}",paraId:37,tocIndex:8},{value:": The file path to split into segments.",paraId:37,tocIndex:8},{value:"returns",paraId:37,tocIndex:8},{value:" ",paraId:37,tocIndex:8},{value:"{String}",paraId:37,tocIndex:8},{value:": Returns a single, joined file path.",paraId:37,tocIndex:8},{value:"Example",paraId:38,tocIndex:8},{value:`{{segments "a/b/c/d" "2" "3"}}
<!-- results in: 'c/d' -->

{{segments "a/b/c/d" "1" "3"}}
<!-- results in: 'b/c/d' -->

{{segments "a/b/c/d" "1" "2"}}
<!-- results in: 'b/c' -->
`,paraId:39,tocIndex:8}]},783692:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Convert the given string to a regular expression.",paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"str",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{RegExp}",paraId:2,tocIndex:1},{value:"Example",paraId:3,tocIndex:1},{value:`{{toRegex "foo"}}
<!-- results in: /foo/ -->
`,paraId:4,tocIndex:1},{value:"Returns true if the given ",paraId:5,tocIndex:2},{value:"str",paraId:5,tocIndex:2},{value:" matches the given regex. A regex can be passed on the context, or using the ",paraId:5,tocIndex:2},{value:"toRegex",paraId:6,tocIndex:2},{value:" helper as a subexpression.",paraId:5,tocIndex:2},{value:"Params",paraId:7,tocIndex:2},{value:"str",paraId:8,tocIndex:2},{value:" ",paraId:8,tocIndex:2},{value:"{String}",paraId:8,tocIndex:2},{value:"returns",paraId:8,tocIndex:2},{value:" ",paraId:8,tocIndex:2},{value:"{RegExp}",paraId:8,tocIndex:2},{value:"Example",paraId:9,tocIndex:2},{value:`{{test "bar" (toRegex "foo")}}
<!-- results in: false -->
{{test "foobar" (toRegex "foo")}}
<!-- results in: true -->
{{test "foobar" (toRegex "^foo$")}}
<!-- results in: false -->
`,paraId:10,tocIndex:2}]},360301:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Encodes a Uniform Resource Identifier (URI) component
by replacing each instance of certain characters by
one, two, three, or four escape sequences representing
the UTF-8 encoding of the character.`,paraId:0,tocIndex:1},{value:"Params",paraId:1,tocIndex:1},{value:"str",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:": The un-encoded string",paraId:2,tocIndex:1},{value:"returns",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"{String}",paraId:2,tocIndex:1},{value:": The endcoded string",paraId:2,tocIndex:1},{value:`Escape the given string by replacing characters with escape sequences.
Useful for allowing the string to be used in a URL, etc.`,paraId:3,tocIndex:2},{value:"Params",paraId:4,tocIndex:2},{value:"str",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{String}",paraId:5,tocIndex:2},{value:"returns",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"{String}",paraId:5,tocIndex:2},{value:": Escaped string.",paraId:5,tocIndex:2},{value:"Decode a Uniform Resource Identifier (URI) component.",paraId:6,tocIndex:3},{value:"Params",paraId:7,tocIndex:3},{value:"str",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{String}",paraId:8,tocIndex:3},{value:"returns",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"{String}",paraId:8,tocIndex:3},{value:"Alias for ",paraId:9,tocIndex:4},{value:"encodeURI",paraId:10,tocIndex:4},{value:".",paraId:9,tocIndex:4},{value:"Alias for ",paraId:11,tocIndex:5},{value:"decodeURI",paraId:12,tocIndex:5},{value:".",paraId:11,tocIndex:5},{value:`Take a base URL, and a href URL, and resolve them as a
browser would for an anchor tag.`,paraId:13,tocIndex:6},{value:"Params",paraId:14,tocIndex:6},{value:"base",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"{String}",paraId:15,tocIndex:6},{value:"href",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"{String}",paraId:15,tocIndex:6},{value:"returns",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"{String}",paraId:15,tocIndex:6},{value:"Parses a ",paraId:16,tocIndex:7},{value:"url",paraId:16,tocIndex:7},{value:" string into an object.",paraId:16,tocIndex:7},{value:"Params",paraId:17,tocIndex:7},{value:"str",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"{String}",paraId:18,tocIndex:7},{value:": URL string",paraId:18,tocIndex:7},{value:"returns",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"{String}",paraId:18,tocIndex:7},{value:": Returns stringified JSON",paraId:18,tocIndex:7},{value:"Strip the query string from the given ",paraId:19,tocIndex:8},{value:"url",paraId:19,tocIndex:8},{value:".",paraId:19,tocIndex:8},{value:"Params",paraId:20,tocIndex:8},{value:"url",paraId:21,tocIndex:8},{value:" ",paraId:21,tocIndex:8},{value:"{String}",paraId:21,tocIndex:8},{value:"returns",paraId:21,tocIndex:8},{value:" ",paraId:21,tocIndex:8},{value:"{String}",paraId:21,tocIndex:8},{value:": the url without the queryString",paraId:21,tocIndex:8},{value:"Strip protocol from a ",paraId:22,tocIndex:9},{value:"url",paraId:22,tocIndex:9},{value:". Useful for displaying media that may have an 'http' protocol on secure connections.",paraId:22,tocIndex:9},{value:"Params",paraId:23,tocIndex:9},{value:"str",paraId:24,tocIndex:9},{value:" ",paraId:24,tocIndex:9},{value:"{String}",paraId:24,tocIndex:9},{value:"returns",paraId:24,tocIndex:9},{value:" ",paraId:24,tocIndex:9},{value:"{String}",paraId:24,tocIndex:9},{value:": the url with http protocol stripped",paraId:24,tocIndex:9},{value:"Example",paraId:25,tocIndex:9},{value:`<!-- url = 'http://foo.bar' -->
{{stripProtocol url}}
<!-- results in: '//foo.bar' -->
`,paraId:26,tocIndex:9}]},946477:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"HTTP API of NocoBase is designed based on Resource & Action, a superset of REST API. The operation includes but not limited to create, read, update and delete. Resource Action can be extended arbitrarily in NocoBase.",paraId:0,tocIndex:0},{value:"In NocoBase, resource has two expressions:",paraId:1,tocIndex:1},{value:"<collection>",paraId:2,tocIndex:1},{value:"<collection>.<association>",paraId:2,tocIndex:1},{value:"Collection is the set of all abstract data",paraId:3},{value:"Association is the associated data of collection",paraId:3},{value:"Resource includes both collection and collection.association",paraId:3},{value:"posts",paraId:4,tocIndex:2},{value:" Post",paraId:4,tocIndex:2},{value:"posts.user",paraId:4,tocIndex:2},{value:" Post user",paraId:4,tocIndex:2},{value:"posts.tags",paraId:4,tocIndex:2},{value:" Post tags",paraId:4,tocIndex:2},{value:"Action on resource is expressed by ",paraId:5,tocIndex:3},{value:":<action>",paraId:5,tocIndex:3},{value:"<collection>:<action>",paraId:6,tocIndex:3},{value:"<collection>.<association>:<action>",paraId:6,tocIndex:3},{value:"Built-in global actions for collection or association:",paraId:7,tocIndex:3},{value:"create",paraId:8,tocIndex:3},{value:"get",paraId:8,tocIndex:3},{value:"list",paraId:8,tocIndex:3},{value:"update",paraId:8,tocIndex:3},{value:"destroy",paraId:8,tocIndex:3},{value:"move",paraId:8,tocIndex:3},{value:"Built-in association actions for association only:",paraId:9,tocIndex:3},{value:"set",paraId:10,tocIndex:3},{value:"add",paraId:10,tocIndex:3},{value:"remove",paraId:10,tocIndex:3},{value:"toggle",paraId:10,tocIndex:3},{value:"posts:create",paraId:11,tocIndex:4},{value:" Create post",paraId:11,tocIndex:4},{value:"posts.user:get",paraId:11,tocIndex:4},{value:" Get post user",paraId:11,tocIndex:4},{value:"posts.tags:add",paraId:11,tocIndex:4},{value:" Add tags to post (associate existing tags with post)",paraId:11,tocIndex:4},{value:`<GET|POST>   /api/<collection>:<action>
<GET|POST>   /api/<collection>:<action>/<collectionIndex>
<GET|POST>   /api/<collection>/<collectionIndex>/<association>:<action>
<GET|POST>   /api/<collection>/<collectionIndex>/<association>:<action>/<associationIndex>
`,paraId:12,tocIndex:5},{value:"posts resource",paraId:13,tocIndex:6},{value:`POST  /api/posts:create
GET   /api/posts:list
GET   /api/posts:get/1
POST  /api/posts:update/1
POST  /api/posts:destroy/1
`,paraId:14,tocIndex:6},{value:"posts.comments resource",paraId:15,tocIndex:6},{value:`POST  /api/posts/1/comments:create
GET   /api/posts/1/comments:list
GET   /api/posts/1/comments:get/1
POST  /api/posts/1/comments:update/1
POST  /api/posts/1/comments:destroy/1
`,paraId:16,tocIndex:6},{value:"posts.tags resource",paraId:17,tocIndex:6},{value:`POST  /api/posts/1/tags:create
GET   /api/posts/1/tags:get
GET   /api/posts/1/tags:list
POST  /api/posts/1/tags:update
POST  /api/posts/1/tags:destroy
POST  /api/posts/1/tags:add
GET   /api/posts/1/tags:remove
`,paraId:18,tocIndex:6},{value:"Collection resource locates the data to be processed by ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:", ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" must be unique.",paraId:19,tocIndex:7},{value:"Association resource locates the data to be processed by ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" and ",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" jointly, ",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" may not be unique, but the joint index of ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" and ",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" must be unique.",paraId:19,tocIndex:7},{value:"When viewing details of association resource, the requested URL needs to provide both ",paraId:20,tocIndex:7},{value:"<collectionIndex>",paraId:20,tocIndex:7},{value:" and ",paraId:20,tocIndex:7},{value:"<associationIndex>",paraId:20,tocIndex:7},{value:", ",paraId:20,tocIndex:7},{value:"<collectionIndex>",paraId:20,tocIndex:7},{value:" is necessary as ",paraId:20,tocIndex:7},{value:"<associationIndex>",paraId:20,tocIndex:7},{value:" may not be unique.",paraId:20,tocIndex:7},{value:"For example, ",paraId:21,tocIndex:7},{value:"tables.fields",paraId:21,tocIndex:7},{value:" represents the fields of a data table:",paraId:21,tocIndex:7},{value:`GET   /api/tables/table1/fields/title
GET   /api/tables/table2/fields/title
`,paraId:22,tocIndex:7},{value:"Both table1 and table2 have the title field, title is unique in one table, but other tables may also have fields of that name.",paraId:23,tocIndex:7},{value:"Request parameters can be placed in the headers, parameters (query string), and body (GET requests do not have a body) of the request.",paraId:24,tocIndex:8},{value:"Some special request parameters:",paraId:25,tocIndex:8},{value:"filter",paraId:26,tocIndex:8},{value:" Data filtering, used in actions related to query.",paraId:26,tocIndex:8},{value:"filterByTk",paraId:26,tocIndex:8},{value:" Filter by tk field, used in actions to specify details of data.",paraId:26,tocIndex:8},{value:"sort",paraId:26,tocIndex:8},{value:" Sorting, used in actions related to query.",paraId:26,tocIndex:8},{value:"fields",paraId:26,tocIndex:8},{value:" Date to output, used in actions related to query",paraId:26,tocIndex:8},{value:"appends",paraId:26,tocIndex:8},{value:" Fields of additional relationship, used in actions related to query.",paraId:26,tocIndex:8},{value:"except",paraId:26,tocIndex:8},{value:" Exclude some fields (not to output), used in actions related to query.",paraId:26,tocIndex:8},{value:"whitelist",paraId:26,tocIndex:8},{value:" Fields whitelist, used in actions related to data creation and update.",paraId:26,tocIndex:8},{value:"blacklist",paraId:26,tocIndex:8},{value:" Fields blacklist, used in actions related to data creation and update.",paraId:26,tocIndex:8},{value:"Data filtering.",paraId:27,tocIndex:9},{value:`# simple
GET /api/posts?filter[status]=publish
# json string format is recommended, which requires encodeURIComponent encoding
GET /api/posts?filter={"status":"published"}

# filter operators
GET /api/posts?filter[status.$eq]=publish
GET /api/posts?filter={"status.$eq":"published"}

# $and
GET /api/posts?filter={"$and": [{"status.$eq":"published"}, {"title.$includes":"a"}]}
# $or
GET /api/posts?filter={"$or": [{"status.$eq":"pending"}, {"status.$eq":"draft"}]}

# association field
GET /api/posts?filter[user.email.$includes]=gmail
GET /api/posts?filter={"user.email.$includes":"gmail"}
`,paraId:28,tocIndex:9},{value:"Click here for more information about filter operators",paraId:29},{value:"Filter by tk field. In the default settings:",paraId:30,tocIndex:10},{value:"collection resource: tk is the primary key of the data table.",paraId:31,tocIndex:10},{value:"association resource: tk is the targetKey field of the association.",paraId:31,tocIndex:10},{value:`GET   /api/posts:get?filterByTk=1&fields=name,title&appends=tags
`,paraId:32,tocIndex:10},{value:"Sorting. To sort in the descending order, put ",paraId:33,tocIndex:11},{value:"-",paraId:33,tocIndex:11},{value:" in front of the field.",paraId:33,tocIndex:11},{value:`# Sort createAt field in the ascending order
GET /api/posts:get?sort=createdAt
# Sort createAt field in the descending order
GET /api/posts:get?sort=-createdAt
# Sort multiple fields jointly, createAt field descending, title A-Z ascending
GET /api/posts:get?sort=-createdAt,title
`,paraId:34,tocIndex:11},{value:"Data to output.",paraId:35,tocIndex:12},{value:`GET   /api/posts:list?fields=name,title

Response 200 (application/json)
{
  "data": [
    {
      "name": "",
      "title": ""
    }
  ],
  "meta": {}
}
`,paraId:36,tocIndex:12},{value:"Fields of additional relationship.",paraId:37,tocIndex:13},{value:"Exclude some fields (not to output), used in actions related to query.",paraId:38,tocIndex:14},{value:"Whitelist.",paraId:39,tocIndex:15},{value:`POST  /api/posts:create?whitelist=title

{
  "title": "My first post",
  "date": "2022-05-19"      # The date field will be filtered out and not be written to the database
}
`,paraId:40,tocIndex:15},{value:"Blacklist.",paraId:41,tocIndex:16},{value:`POST  /api/posts:create?blacklist=date

# The date field will be filtered out and not be written to the database
{
  "title": "My first post"
}
`,paraId:42,tocIndex:16},{value:"Format of the response:",paraId:43,tocIndex:17},{value:`type ResponseResult = {
  data?: any; // Main data
  meta?: any; // Additional Data
  errors?: ResponseError[]; // Errors
};

type ResponseError = {
  code?: string;
  message: string;
};
`,paraId:44,tocIndex:17},{value:"View list:",paraId:45,tocIndex:18},{value:`GET /api/posts:list

Response 200 (application/json)

{
  data: [
    {
      id: 1
    }
  ],
  meta: {
    count: 1
    page: 1,
    pageSize: 1,
    totalPage: 1
  },
}
`,paraId:46,tocIndex:18},{value:"View details:",paraId:47,tocIndex:18},{value:`GET /api/posts:get/1

Response 200 (application/json)

{
  data: {
    id: 1
  }
}
`,paraId:48,tocIndex:18},{value:"Error:",paraId:49,tocIndex:18},{value:`POST /api/posts:create

Response 400 (application/json)

{
  errors: [
    {
      message: 'name must be required',
    },
  ],
}
`,paraId:50,tocIndex:18}]},753299:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"HTTP API of NocoBase is a superset of REST API, and the standard CRUD API also supports the RESTful style.",paraId:0,tocIndex:0},{value:"HTTP API",paraId:1,tocIndex:2},{value:`POST  /api/<collection>:create

{} # JSON body
`,paraId:2,tocIndex:2},{value:"REST API",paraId:3,tocIndex:2},{value:`POST  /api/<collection>

{} # JSON body
`,paraId:4,tocIndex:2},{value:"HTTP API",paraId:5,tocIndex:3},{value:`GET   /api/<collection>:list
`,paraId:6,tocIndex:3},{value:"REST API",paraId:7,tocIndex:3},{value:`GET   /api/<collection>
`,paraId:8,tocIndex:3},{value:"HTTP API",paraId:9,tocIndex:4},{value:`GET   /api/<collection>:get?filterByTk=<collectionIndex>
GET   /api/<collection>:get/<collectionIndex>
`,paraId:10,tocIndex:4},{value:"REST API",paraId:11,tocIndex:4},{value:`GET   /api/<collection>/<collectionIndex>
`,paraId:12,tocIndex:4},{value:"HTTP API",paraId:13,tocIndex:5},{value:`POST   /api/<collection>:update?filterByTk=<collectionIndex>

{} # JSON body

# Or
POST   /api/<collection>:update/<collectionIndex>

{} # JSON body
`,paraId:14,tocIndex:5},{value:"REST API",paraId:15,tocIndex:5},{value:`PUT    /api/<collection>/<collectionIndex>

{} # JSON body
`,paraId:16,tocIndex:5},{value:"HTTP API",paraId:17,tocIndex:6},{value:`POST      /api/<collection>:destroy?filterByTk=<collectionIndex>
# Or
POST      /api/<collection>:destroy/<collectionIndex>
`,paraId:18,tocIndex:6},{value:"REST API",paraId:19,tocIndex:6},{value:`DELETE    /api/<collection>/<collectionIndex>
`,paraId:20,tocIndex:6},{value:"HTTP API",paraId:21,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>:create

{} # JSON body
`,paraId:22,tocIndex:8},{value:"REST API",paraId:23,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>

{} # JSON body
`,paraId:24,tocIndex:8},{value:"HTTP API",paraId:25,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>:list
`,paraId:26,tocIndex:9},{value:"REST API",paraId:27,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>
`,paraId:28,tocIndex:9},{value:"HTTP API",paraId:29,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get?filterByTk=<associationIndex>
# Or
GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:30,tocIndex:10},{value:"REST API",paraId:31,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:32,tocIndex:10},{value:"HTTP API",paraId:33,tocIndex:11},{value:`POST   /api/<collection>/<collectionIndex>/<association>:update?filterByTk=<associationIndex>

{} # JSON body

# Or
POST   /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON body
`,paraId:34,tocIndex:11},{value:"REST API",paraId:35,tocIndex:11},{value:`PUT    /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON
`,paraId:36,tocIndex:11},{value:"HTTP API",paraId:37,tocIndex:12},{value:`POST    /api/<collection>/<collectionIndex>/<association>:destroy?filterByTk=<associationIndex>
# Or
POST    /api/<collection>/<collectionIndex>/<association>:destroy/<associationIndex>
`,paraId:38,tocIndex:12},{value:"REST API",paraId:39,tocIndex:12},{value:`DELETE  /api/<collection>/<collectionIndex>/<association>/<associationIndex>
`,paraId:40,tocIndex:12}]},99906:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Module",paraId:0,tocIndex:0},{value:"Package",paraId:0,tocIndex:0},{value:"Description",paraId:0,tocIndex:0},{value:"Server",paraId:1,tocIndex:0},{value:"@nocobase/server",paraId:0,tocIndex:0},{value:"Server-side application",paraId:0,tocIndex:0},{value:"Database",paraId:2,tocIndex:0},{value:"@nocobase/database",paraId:0,tocIndex:0},{value:"Database access layer",paraId:0,tocIndex:0},{value:"Resourcer",paraId:3,tocIndex:0},{value:"@nocobase/resourcer",paraId:0,tocIndex:0},{value:"Resource and route mapping",paraId:0,tocIndex:0},{value:"ACL",paraId:4,tocIndex:0},{value:"@nocobase/acl",paraId:0,tocIndex:0},{value:"Access Control",paraId:0,tocIndex:0},{value:"Auth",paraId:5,tocIndex:0},{value:"@nocobase/auth",paraId:0,tocIndex:0},{value:"User Authentication",paraId:0,tocIndex:0},{value:"Client",paraId:0,tocIndex:0},{value:"@nocobase/client",paraId:0,tocIndex:0},{value:"Client-side application",paraId:0,tocIndex:0},{value:"Cache",paraId:6,tocIndex:0},{value:"@nocobase/cache",paraId:0,tocIndex:0},{value:"Server-side cache",paraId:0,tocIndex:0},{value:"Logger",paraId:7,tocIndex:0},{value:"@nocobase/logger",paraId:0,tocIndex:0},{value:"Server-side logging",paraId:0,tocIndex:0},{value:"Telemetry",paraId:8,tocIndex:0},{value:"@nocobase/telemetry",paraId:0,tocIndex:0},{value:"Server-side telemetry",paraId:0,tocIndex:0},{value:"CLI",paraId:9,tocIndex:0},{value:"@nocobase/cli",paraId:0,tocIndex:0},{value:"NocoBase Command Line Interface",paraId:0,tocIndex:0},{value:"SDK",paraId:10,tocIndex:0},{value:"@nocobase/sdk",paraId:0,tocIndex:0},{value:"NocoBase SDK",paraId:0,tocIndex:0},{value:"Actions",paraId:11,tocIndex:0},{value:"@nocobase/actions",paraId:0,tocIndex:0},{value:"Built-in resource operations",paraId:0,tocIndex:0},{value:"Test",paraId:12,tocIndex:0},{value:"@nocobase/test",paraId:0,tocIndex:0},{value:"Automated testing",paraId:0,tocIndex:0}]},115505:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Creates a custom logger.",paraId:0,tocIndex:2},{value:"createLogger(options: LoggerOptions)",paraId:1,tocIndex:3},{value:`interface LoggerOptions
  extends Omit<winston.LoggerOptions, 'transports' | 'format'> {
  dirname?: string;
  filename?: string;
  format?: 'logfmt' | 'json' | 'delimiter' | 'console' | winston.Logform.Format;
  transports?: ('console' | 'file' | 'dailyRotateFile' | winston.transport)[];
}
`,paraId:2,tocIndex:4},{value:"dirname",paraId:3,tocIndex:5},{value:": Log directory",paraId:3,tocIndex:5},{value:"filename",paraId:3,tocIndex:5},{value:": Log file name",paraId:3,tocIndex:5},{value:"format",paraId:3,tocIndex:5},{value:": Log format",paraId:3,tocIndex:5},{value:"transports",paraId:3,tocIndex:5},{value:": Log transports",paraId:3,tocIndex:5},{value:"Creates system runtime logs printed in a specified method. Refer to ",paraId:4,tocIndex:6},{value:"Logger plugin - System log",paraId:5,tocIndex:6},{value:".",paraId:4,tocIndex:6},{value:"createSystemLogger(options: SystemLoggerOptions)",paraId:6,tocIndex:7},{value:`export interface SystemLoggerOptions extends LoggerOptions {
  seperateError?: boolean; // print error seperately, default true
}
`,paraId:7,tocIndex:8},{value:"seperateError",paraId:8,tocIndex:9},{value:": Whether to print ",paraId:8,tocIndex:9},{value:"error",paraId:8,tocIndex:9},{value:" level logs separately",paraId:8,tocIndex:9},{value:`class Application {
  createLogger(options: LoggerOptions) {
    const { dirname } = options;
    return createLogger({
      ...options,
      dirname: getLoggerFilePath(this.name || 'main', dirname || ''),
    });
  }
}
`,paraId:9,tocIndex:11},{value:"When ",paraId:10,tocIndex:11},{value:"dirname",paraId:10,tocIndex:11},{value:" is a relative path, the log files will be output to the directory named after the current application.",paraId:10,tocIndex:11},{value:"Usage is the same as ",paraId:11,tocIndex:12},{value:"app.createLogger()",paraId:11,tocIndex:12},{value:".",paraId:11,tocIndex:12},{value:`class Plugin {
  createLogger(options: LoggerOptions) {
    return this.app.createLogger(options);
  }
}
`,paraId:12,tocIndex:13},{value:"getLoggerLevel(): 'debug' | 'info' | 'warn' | 'error'",paraId:13,tocIndex:15},{value:"Gets the log level currently configured in the system.",paraId:14,tocIndex:15},{value:"getLoggerFilePath(...paths: string[]): string",paraId:15,tocIndex:16},{value:"Concatenates directory paths based on the log directory currently configured in the system.",paraId:16,tocIndex:16},{value:"getLoggerTransports(): ('console' | 'file' | 'dailyRotateFile')[]",paraId:17,tocIndex:17},{value:"Gets the log output methods currently configured in the system.",paraId:18,tocIndex:17},{value:"getLoggerFormat(): 'logfmt' | 'json' | 'delimiter' | 'console'",paraId:19,tocIndex:18},{value:"Gets the log format currently configured in the system.",paraId:20,tocIndex:18},{value:"Predefined output methods.",paraId:21,tocIndex:20},{value:"Transports.console",paraId:22,tocIndex:20},{value:"Transports.file",paraId:22,tocIndex:20},{value:"Transports.dailyRotateFile",paraId:22,tocIndex:20},{value:`import { Transports } from '@nocobase/logger';

const transport = Transports.console({
  //...
});
`,paraId:23,tocIndex:20},{value:"Development - Logger",paraId:24,tocIndex:21},{value:"Logger Plugin",paraId:25,tocIndex:21}]},627419:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After the resource operation request is parsed by ",paraId:0,tocIndex:1},{value:"resourceManager.middleware()",paraId:1,tocIndex:1},{value:", some important request parameters are stored in ",paraId:0,tocIndex:1},{value:"ctx.action",paraId:0,tocIndex:1},{value:" for use by subsequent middleware.",paraId:0,tocIndex:1},{value:"ctx.action.resourceName",paraId:2,tocIndex:3},{value:"The name of the resource. It can take two forms:",paraId:3,tocIndex:3},{value:"a",paraId:4,tocIndex:3},{value:" - Operates on resource ",paraId:4,tocIndex:3},{value:"a",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"a.b",paraId:4,tocIndex:3},{value:" - Operates on associated object ",paraId:4,tocIndex:3},{value:"b",paraId:4,tocIndex:3},{value:" of resource ",paraId:4,tocIndex:3},{value:"a",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"ctx.action.actionName",paraId:5,tocIndex:4},{value:"The name of the action.",paraId:6,tocIndex:4},{value:"ctx.action.sourceId",paraId:7,tocIndex:5},{value:"When the operation object is an associated object of the resource, it represents the primary key value of the corresponding resource. For example: when ",paraId:8,tocIndex:5},{value:"resourceName",paraId:8,tocIndex:5},{value:" is ",paraId:8,tocIndex:5},{value:"a.b",paraId:8,tocIndex:5},{value:", ",paraId:8,tocIndex:5},{value:"sourceId",paraId:8,tocIndex:5},{value:" represents the primary key value of ",paraId:8,tocIndex:5},{value:"a",paraId:8,tocIndex:5},{value:".",paraId:8,tocIndex:5},{value:"Request parameters.",paraId:9,tocIndex:6},{value:"URL parameters can be directly obtained from ",paraId:10,tocIndex:6},{value:"ctx.action.params",paraId:10,tocIndex:6},{value:".",paraId:10,tocIndex:6},{value:`const { filterByTk } = ctx.action.params;
`,paraId:11,tocIndex:6},{value:"Request body parameters can be obtained using ",paraId:12,tocIndex:6},{value:"ctx.action.params.values",paraId:12,tocIndex:6},{value:".",paraId:12,tocIndex:6},{value:"Combines parameter content with request parameters.",paraId:13,tocIndex:7},{value:`ctx.action.mergeParams(
  {
    filter: {
      name: 'foo',
    },
    fields: ['id', 'name'],
    except: ['name'],
    sort: ['id'],
    page: 1,
    pageSize: 10,
    values: {
      name: 'foo',
    },
  },
  {
    filter: 'and',
    fields: 'union',
    except: 'union',
    sort: 'overwrite',
    page: 'overwrite',
    pageSize: 'overwrite',
    values: 'deepMerge',
  },
);

ctx.action.mergeParams(
  {
    filter: {},
  },
  {
    filter: (x, y) => {
      // ...
    },
  },
);
`,paraId:14,tocIndex:7},{value:"mergeParams(params: ActionParams, strategies: MergeStrategies = {})",paraId:15,tocIndex:8},{value:`export interface ActionParams {
  filterByTk?: any;
  fields?: string[];
  appends?: string[];
  except?: string[];
  whitelist?: string[];
  blacklist?: string[];
  filter?: FilterOptions;
  sort?: string[];
  page?: number;
  pageSize?: number;
  values?: any;
  [key: string]: any;
}

type MergeStrategyType =
  | 'merge'
  | 'deepMerge'
  | 'overwrite'
  | 'andMerge'
  | 'orMerge'
  | 'intersect'
  | 'union';
type MergeStrategyFunc = (x: any, y: any) => any;
export type MergeStrategy = MergeStrategyType | MergeStrategyFunc;
export interface MergeStrategies {
  [key: string]: MergeStrategy;
}
`,paraId:16,tocIndex:9},{value:"Property",paraId:17,tocIndex:10},{value:"Type",paraId:17,tocIndex:10},{value:"Description",paraId:17,tocIndex:10},{value:"params",paraId:17,tocIndex:10},{value:"ActionParams",paraId:18,tocIndex:10},{value:"Request parameters",paraId:17,tocIndex:10},{value:"strategies",paraId:17,tocIndex:10},{value:"{ [key: string]: MergeStrategies }",paraId:19,tocIndex:10},{value:"Merge strategies for various fields in the request parameters",paraId:17,tocIndex:10},{value:"Default ",paraId:20,tocIndex:10},{value:"strategies",paraId:20,tocIndex:10},{value:":",paraId:20,tocIndex:10},{value:`{
  filter: 'andMerge',
  fields: 'intersect',
  appends: 'union',
  except: 'union',
  whitelist: 'intersect',
  blacklist: 'intersect',
  sort: 'overwrite',
};
`,paraId:21,tocIndex:10},{value:"Property",paraId:22,tocIndex:11},{value:"Type",paraId:22,tocIndex:11},{value:"Description",paraId:22,tocIndex:11},{value:"filterByTk",paraId:22,tocIndex:11},{value:"any",paraId:22,tocIndex:11},{value:"The primary key value of the operated resource",paraId:22,tocIndex:11},{value:"filter",paraId:22,tocIndex:11},{value:"Filter",paraId:22,tocIndex:11},{value:"Filtering parameters, refer to ",paraId:22,tocIndex:11},{value:"Filter Operators",paraId:23,tocIndex:11},{value:"fields",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Fields to retrieve",paraId:22,tocIndex:11},{value:"except",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Fields to exclude",paraId:22,tocIndex:11},{value:"appends",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Related fields to append",paraId:22,tocIndex:11},{value:"whitelist",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Field whitelist",paraId:22,tocIndex:11},{value:"blacklist",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Field blacklist",paraId:22,tocIndex:11},{value:"sort",paraId:22,tocIndex:11},{value:"string[]",paraId:22,tocIndex:11},{value:"Sorting parameters",paraId:22,tocIndex:11},{value:"page",paraId:22,tocIndex:11},{value:"number",paraId:22,tocIndex:11},{value:"Current page",paraId:22,tocIndex:11},{value:"pageSize",paraId:22,tocIndex:11},{value:"number",paraId:22,tocIndex:11},{value:"Number of data items per page",paraId:22,tocIndex:11},{value:"values",paraId:22,tocIndex:11},{value:"any",paraId:22,tocIndex:11},{value:"Request body",paraId:22,tocIndex:11},{value:"[key: string]",paraId:22,tocIndex:11},{value:"any",paraId:22,tocIndex:11},{value:"Other extended configurations",paraId:22,tocIndex:11},{value:"Predefined merge strategies or custom merge functions.",paraId:24,tocIndex:12},{value:"Predefined merge strategies:",paraId:25,tocIndex:12},{value:"Strategy Name",paraId:26,tocIndex:12},{value:"Description",paraId:26,tocIndex:12},{value:"merge",paraId:26,tocIndex:12},{value:"Object.assign",paraId:26,tocIndex:12},{value:"deepMerge",paraId:26,tocIndex:12},{value:"Deep traversal merge",paraId:26,tocIndex:12},{value:"overwrite",paraId:26,tocIndex:12},{value:"Overwrite",paraId:26,tocIndex:12},{value:"andMerge",paraId:26,tocIndex:12},{value:"Merge filter parameters using the ",paraId:26,tocIndex:12},{value:"$and",paraId:26,tocIndex:12},{value:" operator",paraId:26,tocIndex:12},{value:"orMerge",paraId:26,tocIndex:12},{value:"Merge filter parameters using the ",paraId:26,tocIndex:12},{value:"$or",paraId:26,tocIndex:12},{value:" operator",paraId:26,tocIndex:12},{value:"intersect",paraId:26,tocIndex:12},{value:"Intersection",paraId:26,tocIndex:12},{value:"union",paraId:26,tocIndex:12},{value:"Union",paraId:26,tocIndex:12}]},192435:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"It is similar to the middleware of Koa, but with more enhanced features for easy extensions.",paraId:0,tocIndex:0},{value:"The defined middleware can be inserted for use in multiple places, such as the resourcer, and it is up to the developer for when to invoke it.",paraId:1,tocIndex:0},{value:"Signature",paraId:2,tocIndex:1},{value:"constructor(options: Function)",paraId:3,tocIndex:1},{value:"constructor(options: MiddlewareOptions)",paraId:3,tocIndex:1},{value:"Parameter",paraId:4,tocIndex:1},{value:"Name",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"options",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Handler function of middlware",paraId:5,tocIndex:1},{value:"options",paraId:5,tocIndex:1},{value:"MiddlewareOptions ",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configuration items of middlware",paraId:5,tocIndex:1},{value:"options.only",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Only the specified actions are allowed",paraId:5,tocIndex:1},{value:"options.except",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"The specified actions are excluded",paraId:5,tocIndex:1},{value:"options.handler",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Handler function",paraId:5,tocIndex:1},{value:"Example",paraId:6,tocIndex:1},{value:"Simple definition:",paraId:7,tocIndex:1},{value:`const middleware = new Middleware((ctx, next) => {
  await next();
});
`,paraId:8,tocIndex:1},{value:"Definition with relevant parameters:",paraId:9,tocIndex:1},{value:`const middleware = new Middleware({
  only: ['create', 'update'],
  async handler(ctx, next) {
    await next();
  },
});
`,paraId:10,tocIndex:1},{value:"getHandler()",paraId:11},{value:"Get the orchestrated handler functions.",paraId:12,tocIndex:3},{value:"Example",paraId:13,tocIndex:3},{value:"The following middleware will output ",paraId:14,tocIndex:3},{value:"1",paraId:14,tocIndex:3},{value:" and then ",paraId:14,tocIndex:3},{value:"2",paraId:14,tocIndex:3},{value:" when requested.",paraId:14,tocIndex:3},{value:`const middleware = new Middleware((ctx, next) => {
  console.log(1);
  await next();
});

middleware.use(async (ctx, next) => {
  console.log(2);
  await next();
});

app.resourcer.use(middleware.getHandler());
`,paraId:15,tocIndex:3},{value:"use()",paraId:11},{value:"Add a middleware function to the current middleware. Used to provide extension points for the middleware. See ",paraId:16,tocIndex:4},{value:"getHandler()",paraId:16,tocIndex:4},{value:" for the examples.",paraId:16,tocIndex:4},{value:"Signature",paraId:17,tocIndex:4},{value:"use(middleware: Function)",paraId:18,tocIndex:4},{value:"Parameter",paraId:19,tocIndex:4},{value:"Name",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Default",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"middleware",paraId:20,tocIndex:4},{value:"Function",paraId:20,tocIndex:4},{value:"-",paraId:20,tocIndex:4},{value:"Handler function of the middleware",paraId:20,tocIndex:4},{value:"disuse()",paraId:11},{value:"Remove the middleware functions that have been added to the current middleware.",paraId:21,tocIndex:5},{value:"Signature",paraId:22,tocIndex:5},{value:"disuse(middleware: Function)",paraId:23,tocIndex:5},{value:"Parameter",paraId:24,tocIndex:5},{value:"Name",paraId:25,tocIndex:5},{value:"Type",paraId:25,tocIndex:5},{value:"Default",paraId:25,tocIndex:5},{value:"Description",paraId:25,tocIndex:5},{value:"middleware",paraId:25,tocIndex:5},{value:"Function",paraId:25,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"Handler function of the middleware",paraId:25,tocIndex:5},{value:"Example",paraId:26,tocIndex:5},{value:"The following example will only output ",paraId:27,tocIndex:5},{value:"1",paraId:27,tocIndex:5},{value:" when requested, the output of ",paraId:27,tocIndex:5},{value:"2",paraId:27,tocIndex:5},{value:" in fn1 will not be executed.",paraId:27,tocIndex:5},{value:`const middleware = new Middleware((ctx, next) => {
  console.log(1);
  await next();
});

async function fn1(ctx, next) {
  console.log(2);
  await next();
}

middleware.use(fn1);

app.resourcer.use(middleware.getHandler());

middleware.disuse(fn1);
`,paraId:28,tocIndex:5},{value:"canAccess()",paraId:11},{value:"Check whether the current middleware is to be invoked for a specific action, it is usually handled by the resourcer internally.",paraId:29,tocIndex:6},{value:"Signature",paraId:30,tocIndex:6},{value:"canAccess(name: string): boolean",paraId:31,tocIndex:6},{value:"Parameter",paraId:32,tocIndex:6},{value:"Name",paraId:33,tocIndex:6},{value:"Type",paraId:33,tocIndex:6},{value:"Default",paraId:33,tocIndex:6},{value:"Description",paraId:33,tocIndex:6},{value:"name",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"Name of the action",paraId:33,tocIndex:6},{value:"branch()",paraId:11},{value:"Create a branch middleware for branching in the middleware.",paraId:34,tocIndex:8},{value:"Signature",paraId:35,tocIndex:8},{value:"branch(map: { [key: string]: Function }, reducer: Function, options): Function",paraId:36,tocIndex:8},{value:"Parameter",paraId:37,tocIndex:8},{value:"Name",paraId:38,tocIndex:8},{value:"Type",paraId:38,tocIndex:8},{value:"Default",paraId:38,tocIndex:8},{value:"Description",paraId:38,tocIndex:8},{value:"map",paraId:38,tocIndex:8},{value:"{ [key: string]: Function }",paraId:38,tocIndex:8},{value:"-",paraId:38,tocIndex:8},{value:"Mapping table of the branch handler function, key names are given by subsequent calculation functions when called",paraId:38,tocIndex:8},{value:"reducer",paraId:38,tocIndex:8},{value:"(ctx) => string",paraId:38,tocIndex:8},{value:"-",paraId:38,tocIndex:8},{value:"Calculation function, it is used to calculate the key name of the branch based on the context",paraId:38,tocIndex:8},{value:"options?",paraId:38,tocIndex:8},{value:"Object",paraId:38,tocIndex:8},{value:"-",paraId:38,tocIndex:8},{value:"Configuration items of the branch",paraId:38,tocIndex:8},{value:"options.keyNotFound?",paraId:38,tocIndex:8},{value:"Function",paraId:38,tocIndex:8},{value:"ctx.throw(404)",paraId:38,tocIndex:8},{value:"Handler function when key name is not found",paraId:38,tocIndex:8},{value:"options.handlerNotSet?",paraId:38,tocIndex:8},{value:"Function",paraId:38,tocIndex:8},{value:"ctx.throw(404)",paraId:38,tocIndex:8},{value:"The function when no handler function is defined",paraId:38,tocIndex:8},{value:"Example",paraId:39,tocIndex:8},{value:"When authenticating user, determine what to do next according to the value of the ",paraId:40,tocIndex:8},{value:"authenticator",paraId:40,tocIndex:8},{value:" parameter in the query section of the request URL.",paraId:40,tocIndex:8},{value:`app.resourcer.use(
  branch(
    {
      password: async (ctx, next) => {
        // ...
      },
      sms: async (ctx, next) => {
        // ...
      },
    },
    (ctx) => {
      return ctx.action.params.authenticator ?? 'password';
    },
  ),
);
`,paraId:41,tocIndex:8}]},827790:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"ResourceManager",paraId:0,tocIndex:1},{value:" is the resource management module of NocoBase, used to define resources and register operation methods for resources.",paraId:0,tocIndex:1},{value:"define()",paraId:1},{value:"Defines a resource.",paraId:2,tocIndex:3},{value:`app.resourceManager.define({
  name: 'auth',
  actions: {
    check: async (ctx, next) => {
      // ...
      await next();
    },
  },
});
`,paraId:3,tocIndex:3},{value:"define(options: ResourceOptions): Resource",paraId:4,tocIndex:4},{value:`export interface ResourceOptions {
  name: string;
  type?: ResourceType;
  actions?: {
    [key: string]: ActionType;
  };
  only?: Array<ActionName>;
  except?: Array<ActionName>;
  middleware?: MiddlewareType;
  middlewares?: MiddlewareType;
}

export type ResourceType =
  | 'single'
  | 'hasOne'
  | 'hasMany'
  | 'belongsTo'
  | 'belongsToMany';

export type ActionType = HandlerType | ActionOptions;
export type HandlerType = (
  ctx: ResourcerContext,
  next: () => Promise<any>,
) => any;
export interface ActionOptions {
  values?: any;
  fields?: string[];
  appends?: string[];
  except?: string[];
  whitelist?: string[];
  blacklist?: string[];
  filter?: FilterOptions;
  sort?: string[];
  page?: number;
  pageSize?: number;
  maxPageSize?: number;
  middleware?: MiddlewareType;
  middlewares?: MiddlewareType;
  handler?: HandlerType;
  [key: string]: any;
}
`,paraId:5,tocIndex:5},{value:"Property",paraId:6,tocIndex:7},{value:"Type",paraId:6,tocIndex:7},{value:"Description",paraId:6,tocIndex:7},{value:"Default",paraId:6,tocIndex:7},{value:"name",paraId:6,tocIndex:7},{value:"string",paraId:6,tocIndex:7},{value:"Resource name",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"type",paraId:6,tocIndex:7},{value:"ResourceType",paraId:6,tocIndex:7},{value:"Resource type",paraId:6,tocIndex:7},{value:"single",paraId:6,tocIndex:7},{value:"actions",paraId:6,tocIndex:7},{value:"{ [key: string]: ActionType }",paraId:7,tocIndex:7},{value:"Actions",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"only",paraId:6,tocIndex:7},{value:"ActionName[]",paraId:6,tocIndex:7},{value:"Whitelist of ",paraId:6,tocIndex:7},{value:"actions",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"except",paraId:6,tocIndex:7},{value:"ActionName[]",paraId:6,tocIndex:7},{value:"Blacklist of ",paraId:6,tocIndex:7},{value:"actions",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"middleware",paraId:6,tocIndex:7},{value:"MiddlewareType",paraId:6,tocIndex:7},{value:"Middleware",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"middlewares",paraId:6,tocIndex:7},{value:"MiddlewareType",paraId:6,tocIndex:7},{value:"Middlewares",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"There are two types of action methods:",paraId:8,tocIndex:8},{value:"HandlerType",paraId:9,tocIndex:8},{value:"This type directly defines the operation method through middleware. Example:",paraId:10,tocIndex:8},{value:`app.resourceManager.define({
  name: 'users',
  actions: {
    updateProfile: async (ctx, next) => {
      // ...
      await next();
    },
  },
});
`,paraId:11,tocIndex:8},{value:"ActionOptions",paraId:12,tocIndex:8},{value:"This type is mainly used to override the request parameters of a certain existing operation. Example:",paraId:13,tocIndex:8},{value:`app.resourceManager.define({
  name: 'users',
  actions: {
    list: {
      fields: [],
      filter: {},
      // ...
    },
  },
});
`,paraId:14,tocIndex:8},{value:"Property",paraId:15,tocIndex:8},{value:"Type",paraId:15,tocIndex:8},{value:"Description",paraId:15,tocIndex:8},{value:"values",paraId:15,tocIndex:8},{value:"any",paraId:15,tocIndex:8},{value:"Default values for the action request",paraId:15,tocIndex:8},{value:"filter",paraId:15,tocIndex:8},{value:"Filter",paraId:15,tocIndex:8},{value:"Filtering parameters, refer to ",paraId:15,tocIndex:8},{value:"Filter Operators",paraId:16,tocIndex:8},{value:"fields",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Fields to retrieve",paraId:15,tocIndex:8},{value:"except",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Fields to exclude",paraId:15,tocIndex:8},{value:"appends",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Related fields to append",paraId:15,tocIndex:8},{value:"whitelist",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Field whitelist",paraId:15,tocIndex:8},{value:"blacklist",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Field blacklist",paraId:15,tocIndex:8},{value:"sort",paraId:15,tocIndex:8},{value:"string[]",paraId:15,tocIndex:8},{value:"Sorting parameters",paraId:15,tocIndex:8},{value:"page",paraId:15,tocIndex:8},{value:"number",paraId:15,tocIndex:8},{value:"Current page",paraId:15,tocIndex:8},{value:"pageSize",paraId:15,tocIndex:8},{value:"number",paraId:15,tocIndex:8},{value:"Number of data items per page",paraId:15,tocIndex:8},{value:"maxPageSize",paraId:15,tocIndex:8},{value:"number",paraId:15,tocIndex:8},{value:"Maximum number of data items per page",paraId:15,tocIndex:8},{value:"middleware",paraId:15,tocIndex:8},{value:"MiddlewareType",paraId:15,tocIndex:8},{value:"Middleware",paraId:15,tocIndex:8},{value:"middlewares",paraId:15,tocIndex:8},{value:"MiddlewareType",paraId:15,tocIndex:8},{value:"Middlewares",paraId:15,tocIndex:8},{value:"handler",paraId:15,tocIndex:8},{value:"HandlerType",paraId:15,tocIndex:8},{value:"Method executed for the action",paraId:15,tocIndex:8},{value:"[key: string]",paraId:15,tocIndex:8},{value:"any",paraId:15,tocIndex:8},{value:"Other extended configurations",paraId:15,tocIndex:8},{value:"registerActionHandlers()",paraId:1},{value:"Registers action methods.",paraId:17,tocIndex:9},{value:"registerActionHandler(name: ActionName, handler: HandlerType)",paraId:18,tocIndex:10},{value:`export type DefaultActionType =
  | 'list'
  | 'create'
  | 'get'
  | 'update'
  | 'destroy'
  | 'set'
  | 'add'
  | 'remove';
export type ActionName = DefaultActionType | Omit<string, DefaultActionType>;

export type HandlerType = (
  ctx: ResourcerContext,
  next: () => Promise<any>,
) => any;
`,paraId:19,tocIndex:11},{value:"Property",paraId:20,tocIndex:12},{value:"Type",paraId:20,tocIndex:12},{value:"Description",paraId:20,tocIndex:12},{value:"name",paraId:20,tocIndex:12},{value:"ActionName",paraId:20,tocIndex:12},{value:"Action name.",paraId:20,tocIndex:12},{value:"1. As a regular string, registers actions for all resources.",paraId:20,tocIndex:12},{value:"2. In the form ",paraId:20,tocIndex:12},{value:"<resource>:<action>",paraId:20,tocIndex:12},{value:", registers actions for specific resources",paraId:20,tocIndex:12},{value:"handler",paraId:20,tocIndex:12},{value:"HandlerType",paraId:20,tocIndex:12},{value:"Middleware for the action",paraId:20,tocIndex:12},{value:"isDefined()",paraId:1},{value:"Checks if a resource is defined.",paraId:21,tocIndex:13},{value:"isDefined(name: string)",paraId:22,tocIndex:14},{value:"Property",paraId:23,tocIndex:15},{value:"Type",paraId:23,tocIndex:15},{value:"Description",paraId:23,tocIndex:15},{value:"name",paraId:23,tocIndex:15},{value:"string",paraId:23,tocIndex:15},{value:"Resource name",paraId:23,tocIndex:15},{value:"import()",paraId:1},{value:"Loads resource configurations from a specified directory.",paraId:24,tocIndex:16},{value:`// ./resources/demo.ts
export default {
  name: 'demo',
  actions: {
    async list(ctx, next) {
      // ...
      await next();
    },
  },
};

const resourceManager = new ResourceManager();
await resourceManager.import({
  directory: path.resolve(__dirname, 'resources'),
});
`,paraId:25,tocIndex:16},{value:"import(options: ImportOptions): Promise<Map<string, Resource>>",paraId:26,tocIndex:17},{value:`export interface ImportOptions {
  directory: string;
  extensions?: string[];
}
`,paraId:27,tocIndex:18},{value:"Property",paraId:28,tocIndex:19},{value:"Type",paraId:28,tocIndex:19},{value:"Description",paraId:28,tocIndex:19},{value:"Default Value",paraId:28,tocIndex:19},{value:"directory",paraId:28,tocIndex:19},{value:"string",paraId:28,tocIndex:19},{value:"Directory path",paraId:28,tocIndex:19},{value:"-",paraId:28,tocIndex:19},{value:"extensions",paraId:28,tocIndex:19},{value:"string[]",paraId:28,tocIndex:19},{value:"Optional, file extensions",paraId:28,tocIndex:19},{value:"['js', 'ts', 'json']",paraId:28,tocIndex:19},{value:"use()",paraId:1},{value:"Adds ",paraId:29,tocIndex:20},{value:"ResourceManager",paraId:29,tocIndex:20},{value:" middleware.",paraId:29,tocIndex:20},{value:`resourceManager.use(async () => {
  return async function (ctx, next) {
    // ...
    await next();
  };
});
`,paraId:30,tocIndex:20},{value:"use(middlewares: HandlerType | HandlerType[], options: ToposortOptions = {})",paraId:31,tocIndex:21},{value:"Refer to ",paraId:32,tocIndex:22},{value:"Middleware",paraId:33,tocIndex:22},{value:".",paraId:32,tocIndex:22},{value:"middleware()",paraId:1},{value:"Middleware for ",paraId:34,tocIndex:23},{value:"ResourceManager",paraId:34,tocIndex:23},{value:", parses request parameters (refer to ",paraId:34,tocIndex:23},{value:"ctx.action",paraId:35,tocIndex:23},{value:") and executes operation methods.",paraId:34,tocIndex:23}]},359166:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Resource is used to define resource instance. Resource instances managed by resourcer can be accessed through HTTP requests.",paraId:0,tocIndex:0},{value:"To create resource instance. Normally it is not used directly, but replaced by the call of the ",paraId:1,tocIndex:1},{value:"define()",paraId:1,tocIndex:1},{value:" interface of resourcer.",paraId:1,tocIndex:1},{value:"Signature",paraId:2,tocIndex:1},{value:"constructor(options: ResourceOptions, resourcer: Resourcer)",paraId:3,tocIndex:1},{value:"Parameter",paraId:4,tocIndex:1},{value:"Name",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"options.name",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Name of the resource, corresponding to the resource address in the route of the URL",paraId:5,tocIndex:1},{value:"options.type",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"'single'",paraId:5,tocIndex:1},{value:"Type of the resource, options are ",paraId:5,tocIndex:1},{value:"'single'",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"'hasOne'",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"'hasMany'",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"'belongsTo'",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"'belongsToMany'",paraId:5,tocIndex:1},{value:"options.actions",paraId:5,tocIndex:1},{value:"Object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"List of actions that can be taken on the resource, see the example for details",paraId:5,tocIndex:1},{value:"options.middlewares",paraId:5,tocIndex:1},{value:"MiddlewareType | MiddlewareType[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"List of middlewares for any operational access to the resource that is defining\uFF0Csee the example for details",paraId:5,tocIndex:1},{value:"options.only",paraId:5,tocIndex:1},{value:"ActionName[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"Whitelist for global actions, only actions contained in the array (if ",paraId:5,tocIndex:1},{value:"length > 0",paraId:5,tocIndex:1},{value:") can be accessed",paraId:5,tocIndex:1},{value:"options.except",paraId:5,tocIndex:1},{value:"ActionName[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"Blacklist for global actions, all actions except those contained in the array (if ",paraId:5,tocIndex:1},{value:"length > 0",paraId:5,tocIndex:1},{value:") can be accessed",paraId:5,tocIndex:1},{value:"resourcer",paraId:5,tocIndex:1},{value:"Resourcer",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"The resourcer instance",paraId:5,tocIndex:1},{value:"Example",paraId:6,tocIndex:1},{value:`app.resourcer.define({
  name: 'books',
  actions: {
    // Extended action
    publish(ctx, next) {
      ctx.body = 'ok';
    },
  },
  middleware: [
    // Extended middleware
    async (ctx, next) => {
      await next();
    },
  ],
});
`,paraId:7,tocIndex:1},{value:"options",paraId:8},{value:"Configuration items for the current resource.",paraId:9,tocIndex:3},{value:"resourcer",paraId:8},{value:"The resourcer instance to which the resource belongs.",paraId:10,tocIndex:4},{value:"middlewares",paraId:8},{value:"The registered middlewares.",paraId:11,tocIndex:5},{value:"actions",paraId:8},{value:"The registered mapping table of actions.",paraId:12,tocIndex:6},{value:"except",paraId:8},{value:"Actions that are excluded.",paraId:13,tocIndex:7},{value:"getName()",paraId:8},{value:"Get the name of the current resource.",paraId:14,tocIndex:9},{value:"Signature",paraId:15,tocIndex:9},{value:"getName(): string",paraId:16,tocIndex:9},{value:"Example",paraId:17,tocIndex:9},{value:`const resource = app.resourcer.define({
  name: 'books',
});

resource.getName(); // 'books'
`,paraId:18,tocIndex:9},{value:"getAction()",paraId:8},{value:"Get action with the corresponding name.",paraId:19,tocIndex:10},{value:"Signature",paraId:20,tocIndex:10},{value:"getAction(name: string): Action",paraId:21,tocIndex:10},{value:"Parameter",paraId:22,tocIndex:10},{value:"Name",paraId:23,tocIndex:10},{value:"Type",paraId:23,tocIndex:10},{value:"Default",paraId:23,tocIndex:10},{value:"Description",paraId:23,tocIndex:10},{value:"name",paraId:23,tocIndex:10},{value:"string",paraId:23,tocIndex:10},{value:"-",paraId:23,tocIndex:10},{value:"Name of the action",paraId:23,tocIndex:10},{value:"Example",paraId:24,tocIndex:10},{value:`const resource = app.resourcer.define({
  name: 'books',
  actions: {
    publish(ctx, next) {
      ctx.body = 'ok';
    },
  },
});

resource.getAction('publish'); // [Function: publish]
`,paraId:25,tocIndex:10}]},514513:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"Auth",paraId:0,tocIndex:1},{value:" class is primarily used for accessing user information on the client-side, as well as requesting user authentication-related APIs.",paraId:0,tocIndex:1},{value:"locale",paraId:1},{value:"The language used by the current user.",paraId:2,tocIndex:3},{value:"role",paraId:1},{value:"The role used by the current user.",paraId:3,tocIndex:4},{value:"token",paraId:1},{value:"The API interface token.",paraId:4,tocIndex:5},{value:"authenticator",paraId:1},{value:"The authenticator used for current user authentication. Refer to ",paraId:5,tocIndex:6},{value:"User Authentication",paraId:6,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"signIn()",paraId:1},{value:"User login.",paraId:7,tocIndex:8},{value:"async signIn(values: any, authenticator?: string): Promise<AxiosResponse<any>>",paraId:8,tocIndex:9},{value:"Parameter",paraId:9,tocIndex:10},{value:"Type",paraId:9,tocIndex:10},{value:"Description",paraId:9,tocIndex:10},{value:"values",paraId:9,tocIndex:10},{value:"any",paraId:9,tocIndex:10},{value:"Login API request parameters",paraId:9,tocIndex:10},{value:"authenticator",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Authenticator identifier used for login",paraId:9,tocIndex:10},{value:"signUp()",paraId:1},{value:"User registration.",paraId:10,tocIndex:11},{value:"async signUp(values: any, authenticator?: string): Promise<AxiosResponse<any>>",paraId:11,tocIndex:12},{value:"Parameter",paraId:12,tocIndex:13},{value:"Type",paraId:12,tocIndex:13},{value:"Description",paraId:12,tocIndex:13},{value:"values",paraId:12,tocIndex:13},{value:"any",paraId:12,tocIndex:13},{value:"Registration API request parameters",paraId:12,tocIndex:13},{value:"authenticator",paraId:12,tocIndex:13},{value:"string",paraId:12,tocIndex:13},{value:"Authenticator identifier used for registration",paraId:12,tocIndex:13},{value:"signOut()",paraId:1},{value:"Log out.",paraId:13,tocIndex:14},{value:"async signOut(values: any, authenticator?: string): Promise<AxiosResponse<any>>",paraId:14,tocIndex:15},{value:"Parameter",paraId:15,tocIndex:16},{value:"Type",paraId:15,tocIndex:16},{value:"Description",paraId:15,tocIndex:16},{value:"values",paraId:15,tocIndex:16},{value:"any",paraId:15,tocIndex:16},{value:"Logout API request parameters",paraId:15,tocIndex:16},{value:"authenticator",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"Authenticator identifier used for logout",paraId:15,tocIndex:16}]},601922:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"APIClient",paraId:0,tocIndex:1},{value:" is a wrapper based on ",paraId:0,tocIndex:1},{value:"axios",paraId:0,tocIndex:1},{value:", used for making HTTP requests to perform resource operations in NocoBase from the client-side.",paraId:0,tocIndex:1},{value:`class PluginSampleAPIClient extends Plugin {
  async load() {
    const res = await this.app.apiClient.request({
      // ...
    });
  }
}
`,paraId:1,tocIndex:2},{value:"axios",paraId:2},{value:"An ",paraId:3,tocIndex:4},{value:"axios",paraId:3,tocIndex:4},{value:" instance that provides access to the ",paraId:3,tocIndex:4},{value:"axios",paraId:3,tocIndex:4},{value:" API, such as ",paraId:3,tocIndex:4},{value:"apiClient.axios.interceptors",paraId:3,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"auth",paraId:2},{value:"A client-side authentication class, refer to ",paraId:4,tocIndex:5},{value:"Auth",paraId:5,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:"storage",paraId:2},{value:"A client-side storage class, refer to ",paraId:6,tocIndex:6},{value:"Storage",paraId:7,tocIndex:6},{value:".",paraId:6,tocIndex:6},{value:"constructor()",paraId:2},{value:"Constructor to create an ",paraId:8,tocIndex:8},{value:"APIClient",paraId:8,tocIndex:8},{value:" instance.",paraId:8,tocIndex:8},{value:"constructor(instance?: APIClientOptions)",paraId:9,tocIndex:9},{value:`interface ExtendedOptions {
  authClass?: any;
  storageClass?: any;
}

export type APIClientOptions =
  | AxiosInstance
  | (AxiosRequestConfig & ExtendedOptions);
`,paraId:10,tocIndex:10},{value:"request()",paraId:2},{value:"Makes an HTTP request.",paraId:11,tocIndex:11},{value:"request<T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D> | ResourceActionOptions): Promise<R>",paraId:12,tocIndex:12},{value:`type ResourceActionOptions<P = any> = {
  resource?: string;
  resourceOf?: any;
  action?: string;
  params?: P;
};
`,paraId:13,tocIndex:13},{value:"Common axios request parameters. Refer to ",paraId:14,tocIndex:15},{value:"Request Config",paraId:14,tocIndex:15},{value:".",paraId:14,tocIndex:15},{value:`const res = await apiClient.request({ url: '' });
`,paraId:15,tocIndex:15},{value:"Parameters for NocoBase resource operations.",paraId:16,tocIndex:16},{value:`const res = await apiClient.request({
  resource: 'users',
  action: 'list',
  params: {
    pageSize: 10,
  },
});
`,paraId:17,tocIndex:16},{value:"Property",paraId:18,tocIndex:16},{value:"Type",paraId:18,tocIndex:16},{value:"Description",paraId:18,tocIndex:16},{value:"resource",paraId:18,tocIndex:16},{value:"string",paraId:18,tocIndex:16},{value:"1. Resource name, such as ",paraId:18,tocIndex:16},{value:"a",paraId:18,tocIndex:16},{value:"2. Name of the associated object, such as ",paraId:18,tocIndex:16},{value:"a.b",paraId:18,tocIndex:16},{value:"resourceOf",paraId:18,tocIndex:16},{value:"any",paraId:18,tocIndex:16},{value:"Primary key value of the resource when ",paraId:18,tocIndex:16},{value:"resource",paraId:18,tocIndex:16},{value:" is the name of an associated object. For example, for ",paraId:18,tocIndex:16},{value:"a.b",paraId:18,tocIndex:16},{value:", it represents the primary key value of ",paraId:18,tocIndex:16},{value:"a",paraId:18,tocIndex:16},{value:".",paraId:18,tocIndex:16},{value:"action",paraId:18,tocIndex:16},{value:"string",paraId:18,tocIndex:16},{value:"Action name",paraId:18,tocIndex:16},{value:"params",paraId:18,tocIndex:16},{value:"any",paraId:18,tocIndex:16},{value:"Request parameter object, mainly URL parameters, request body is put into ",paraId:18,tocIndex:16},{value:"params.values",paraId:18,tocIndex:16},{value:"params.values",paraId:18,tocIndex:16},{value:"any",paraId:18,tocIndex:16},{value:"Request body object",paraId:18,tocIndex:16},{value:"resource()",paraId:2},{value:"Gets the object containing NocoBase resource operation methods.",paraId:19,tocIndex:17},{value:`const resource = apiClient.resource('users');

await resource.create({
  values: {
    username: 'admin',
  },
});

const res = await resource.list({
  page: 2,
  pageSize: 20,
});
`,paraId:20,tocIndex:17},{value:"resource(name: string, of?: any, headers?: AxiosRequestHeaders): IResource",paraId:21,tocIndex:18},{value:`export interface ActionParams {
  filterByTk?: any;
  [key: string]: any;
}

type ResourceAction = (params?: ActionParams) => Promise<any>;

export type IResource = {
  [key: string]: ResourceAction;
};
`,paraId:22,tocIndex:19},{value:"Parameter",paraId:23,tocIndex:20},{value:"Type",paraId:23,tocIndex:20},{value:"Description",paraId:23,tocIndex:20},{value:"name",paraId:23,tocIndex:20},{value:"string",paraId:23,tocIndex:20},{value:"Resource name, such as ",paraId:23,tocIndex:20},{value:"a",paraId:23,tocIndex:20},{value:"2. Name of the associated object, such as ",paraId:23,tocIndex:20},{value:"a.b",paraId:23,tocIndex:20},{value:"of",paraId:23,tocIndex:20},{value:"any",paraId:23,tocIndex:20},{value:"Primary key value of the resource when ",paraId:23,tocIndex:20},{value:"resource",paraId:23,tocIndex:20},{value:" is the name of an associated object. For example, for ",paraId:23,tocIndex:20},{value:"a.b",paraId:23,tocIndex:20},{value:", it represents the primary key value of ",paraId:23,tocIndex:20},{value:"a",paraId:23,tocIndex:20},{value:".",paraId:23,tocIndex:20},{value:"headers",paraId:23,tocIndex:20},{value:"AxiosRequestHeaders",paraId:23,tocIndex:20},{value:"HTTP request headers to be sent with subsequent resource operation requests",paraId:23,tocIndex:20}]},46396:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"Storage",paraId:0,tocIndex:1},{value:" class is used for client-side information storage, defaulting to ",paraId:0,tocIndex:1},{value:"localStorage",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:`export abstract class Storage {
  abstract clear(): void;
  abstract getItem(key: string): string | null;
  abstract removeItem(key: string): void;
  abstract setItem(key: string, value: string): void;
}

export class CustomStorage extends Storage {
  // ...
}
`,paraId:1,tocIndex:2},{value:"setItem()",paraId:2},{value:"Store content.",paraId:3,tocIndex:4},{value:"setItem(key: string, value: string): void",paraId:4,tocIndex:5},{value:"getItem()",paraId:2},{value:"Retrieve content.",paraId:5,tocIndex:6},{value:"getItem(key: string): string | null",paraId:6,tocIndex:7},{value:"removeItem()",paraId:2},{value:"Delete content.",paraId:7,tocIndex:8},{value:"removeItem(key: string): void",paraId:8,tocIndex:9},{value:"clear()",paraId:2},{value:"Clear all content.",paraId:9,tocIndex:10},{value:"clear(): void",paraId:10,tocIndex:11}]},148975:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Application",paraId:0,tocIndex:0},{value:" is the core module of the NocoBase server, based on ",paraId:0,tocIndex:0},{value:"Koa",paraId:0,tocIndex:0},{value:" extensions. It's responsible for major application initialization logic and managing the application lifecycle.",paraId:0,tocIndex:0},{value:"constructor()",paraId:1},{value:"constructor(public options: ApplicationOptions)",paraId:2,tocIndex:3},{value:`export type PluginType = string | typeof Plugin;
export type PluginConfiguration = PluginType | [PluginType, any];

export interface ResourceManagerOptions {
  prefix?: string;
}

export interface AppLoggerOptions {
  request: RequestLoggerOptions;
  system: SystemLoggerOptions;
}

export interface AppTelemetryOptions extends TelemetryOptions {
  enabled?: boolean;
}

export interface ApplicationOptions {
  database?: IDatabaseOptions | Database;
  cacheManager?: CacheManagerOptions;
  resourceManager?: ResourceManagerOptions;
  bodyParser?: any;
  cors?: any;
  dataWrapping?: boolean;
  registerActions?: boolean;
  i18n?: i18n | InitOptions;
  plugins?: PluginConfiguration[];
  acl?: boolean;
  logger?: AppLoggerOptions;
  name?: string;
  authManager?: AuthManagerOptions;
  telemetry?: AppTelemetryOptions;
}
`,paraId:3,tocIndex:4},{value:"Property",paraId:4,tocIndex:6},{value:"Type",paraId:4,tocIndex:6},{value:"Description",paraId:4,tocIndex:6},{value:"name",paraId:4,tocIndex:6},{value:"string",paraId:4,tocIndex:6},{value:"Application identifier",paraId:4,tocIndex:6},{value:"database",paraId:4,tocIndex:6},{value:"IDatabaseOptions",paraId:4,tocIndex:6},{value:" | ",paraId:4,tocIndex:6},{value:"DataBase",paraId:4,tocIndex:6},{value:"Configuration for ",paraId:4,tocIndex:6},{value:"DataBase",paraId:4,tocIndex:6},{value:" instance or the instance itself",paraId:4,tocIndex:6},{value:"cacheManager",paraId:4,tocIndex:6},{value:"CacheManagerOptions",paraId:4,tocIndex:6},{value:"Configuration for ",paraId:4,tocIndex:6},{value:"CacheManager",paraId:4,tocIndex:6},{value:" instance",paraId:4,tocIndex:6},{value:"resourceManager",paraId:4,tocIndex:6},{value:"ResourcerOptions",paraId:5,tocIndex:6},{value:"Configuration for resource management",paraId:4,tocIndex:6},{value:"authManager",paraId:4,tocIndex:6},{value:"AuthManagerOptions",paraId:4,tocIndex:6},{value:"Configuration for user authentication management",paraId:4,tocIndex:6},{value:"bodyParser",paraId:4,tocIndex:6},{value:"bodyParser.Options",paraId:4,tocIndex:6},{value:"Parameters passed to the ",paraId:4,tocIndex:6},{value:"@koa/bodyparser",paraId:4,tocIndex:6},{value:" middleware",paraId:4,tocIndex:6},{value:"bodyParser",paraId:4,tocIndex:6},{value:"any",paraId:4,tocIndex:6},{value:"Parameters passed to the ",paraId:4,tocIndex:6},{value:"@koa/cors",paraId:4,tocIndex:6},{value:" middleware",paraId:4,tocIndex:6},{value:"dataWrapping",paraId:4,tocIndex:6},{value:"boolean",paraId:4,tocIndex:6},{value:"Whether to format response data",paraId:4,tocIndex:6},{value:"registerActions",paraId:4,tocIndex:6},{value:"boolean",paraId:4,tocIndex:6},{value:"Whether to register default CRUD operation interfaces for data tables",paraId:4,tocIndex:6},{value:"i18n",paraId:4,tocIndex:6},{value:"i18n",paraId:4,tocIndex:6},{value:" | ",paraId:4,tocIndex:6},{value:"InitOptions",paraId:4,tocIndex:6},{value:"i18n",paraId:4,tocIndex:6},{value:" instance or initialization configuration",paraId:4,tocIndex:6},{value:"plugins",paraId:4,tocIndex:6},{value:"PluginConfiguration[]",paraId:4,tocIndex:6},{value:"Names of built-in installed plugins or an array of instances",paraId:4,tocIndex:6},{value:"acl",paraId:4,tocIndex:6},{value:"boolean",paraId:4,tocIndex:6},{value:"Whether to enable access control",paraId:4,tocIndex:6},{value:"logger",paraId:4,tocIndex:6},{value:"AppLoggerOptions",paraId:6,tocIndex:6},{value:"Configuration for application logging",paraId:4,tocIndex:6},{value:"telemetry",paraId:4,tocIndex:6},{value:"AppTelemetryOptions",paraId:4,tocIndex:6},{value:"Configuration for telemetry module",paraId:4,tocIndex:6},{value:"Property",paraId:7,tocIndex:7},{value:"Type",paraId:7,tocIndex:7},{value:"Description",paraId:7,tocIndex:7},{value:"prefix",paraId:7,tocIndex:7},{value:"string",paraId:7,tocIndex:7},{value:"Prefix for resource APIs",paraId:7,tocIndex:7},{value:"Property",paraId:8,tocIndex:8},{value:"Type",paraId:8,tocIndex:8},{value:"Description",paraId:8,tocIndex:8},{value:"request",paraId:8,tocIndex:8},{value:"RequestLoggerOptions",paraId:8,tocIndex:8},{value:"Refer to ",paraId:8,tocIndex:8},{value:"Logger - requestLogger()",paraId:9,tocIndex:8},{value:"system",paraId:8,tocIndex:8},{value:"SystemLoggerOptions",paraId:8,tocIndex:8},{value:"Refer to ",paraId:8,tocIndex:8},{value:"Logger - createSystemLogger()",paraId:10,tocIndex:8},{value:"name",paraId:1},{value:"Application identifier. Default is ",paraId:11,tocIndex:10},{value:"main",paraId:11,tocIndex:10},{value:".",paraId:11,tocIndex:10},{value:"version",paraId:1},{value:"Application version management. Application version can be obtained using ",paraId:12,tocIndex:11},{value:"version.get()",paraId:12,tocIndex:11},{value:".",paraId:12,tocIndex:11},{value:"mainDataSource",paraId:1},{value:"Main data source.",paraId:13,tocIndex:12},{value:"db",paraId:1},{value:"Instance of ",paraId:14,tocIndex:13},{value:"DataBase",paraId:14,tocIndex:13},{value:" for the main data source. Refer to ",paraId:14,tocIndex:13},{value:"DataBase",paraId:15,tocIndex:13},{value:".",paraId:14,tocIndex:13},{value:"acl",paraId:1},{value:"Instance of ",paraId:16,tocIndex:14},{value:"ACL",paraId:16,tocIndex:14},{value:". Refer to ",paraId:16,tocIndex:14},{value:"ACL",paraId:17,tocIndex:14},{value:".",paraId:16,tocIndex:14},{value:"log",paraId:1},{value:"System logs. Refer to ",paraId:18,tocIndex:15},{value:"Logger",paraId:19,tocIndex:15},{value:".",paraId:18,tocIndex:15},{value:"logger",paraId:1},{value:"Equivalent to ",paraId:20,tocIndex:16},{value:"log",paraId:20,tocIndex:16},{value:".",paraId:20,tocIndex:16},{value:"cache",paraId:1},{value:"Application cache, instance of ",paraId:21,tocIndex:17},{value:"Cache",paraId:21,tocIndex:17},{value:". Refer to ",paraId:21,tocIndex:17},{value:"Cache",paraId:22,tocIndex:17},{value:".",paraId:21,tocIndex:17},{value:"cli",paraId:1},{value:"Application command-line methods.",paraId:23,tocIndex:18},{value:"i18n",paraId:1},{value:"Internationalization. Instance of ",paraId:24,tocIndex:19},{value:"i18n",paraId:24,tocIndex:19},{value:".",paraId:24,tocIndex:19},{value:"telemetry",paraId:1},{value:"Instance of ",paraId:25,tocIndex:20},{value:"Telemetry",paraId:25,tocIndex:20},{value:". Refer to ",paraId:25,tocIndex:20},{value:"Telemetry",paraId:26,tocIndex:20},{value:".",paraId:25,tocIndex:20},{value:"pm",paraId:1},{value:"Plugin management. Refer to ",paraId:27,tocIndex:21},{value:"PluginManager",paraId:28,tocIndex:21},{value:".",paraId:27,tocIndex:21},{value:"dataSourceManager",paraId:1},{value:"Data source management. Refer to ",paraId:29,tocIndex:22},{value:"DataSourceManager",paraId:30,tocIndex:22},{value:".",paraId:29,tocIndex:22},{value:"resourceManager",paraId:1},{value:"Resource management. Refer to ",paraId:31,tocIndex:23},{value:"ResourceManager",paraId:32,tocIndex:23},{value:".",paraId:31,tocIndex:23},{value:"cacheManager",paraId:1},{value:"Cache management. Refer to ",paraId:33,tocIndex:24},{value:"CacheManager",paraId:34,tocIndex:24},{value:".",paraId:33,tocIndex:24},{value:"authManager",paraId:1},{value:"User authentication management. Refer to ",paraId:35,tocIndex:25},{value:"AuthManager",paraId:36,tocIndex:25},{value:".",paraId:35,tocIndex:25},{value:"auditManager",paraId:1},{value:"Resource audit management. Refer to ",paraId:37,tocIndex:26},{value:"AuditManager",paraId:38,tocIndex:26},{value:".",paraId:37,tocIndex:26},{value:"cronJobManager",paraId:1},{value:"Application cron job management.",paraId:39,tocIndex:27},{value:"localeManager",paraId:1},{value:"Application localization resource management.",paraId:40,tocIndex:28},{value:"load()",paraId:1},{value:"Loads the application and performs application initialization.",paraId:41,tocIndex:30},{value:"load(options?: LoadOptions): Promise<void>",paraId:42,tocIndex:31},{value:`interface LoadOptions {
  reload?: boolean;
  hooks?: boolean;
  sync?: boolean;
  [key: string]: any;
}
`,paraId:43,tocIndex:32},{value:"Property",paraId:44,tocIndex:33},{value:"Type",paraId:44,tocIndex:33},{value:"Description",paraId:44,tocIndex:33},{value:"Default",paraId:44,tocIndex:33},{value:"reload",paraId:44,tocIndex:33},{value:"boolean",paraId:44,tocIndex:33},{value:"Indicates if it's a reload operation",paraId:44,tocIndex:33},{value:"false",paraId:44,tocIndex:33},{value:"hooks",paraId:44,tocIndex:33},{value:"boolean",paraId:44,tocIndex:33},{value:"Whether to trigger ",paraId:44,tocIndex:33},{value:"beforeLoad",paraId:44,tocIndex:33},{value:" / ",paraId:44,tocIndex:33},{value:"afterLoad",paraId:44,tocIndex:33},{value:" hooks",paraId:44,tocIndex:33},{value:"true",paraId:44,tocIndex:33},{value:"sync",paraId:44,tocIndex:33},{value:"boolean",paraId:44,tocIndex:33},{value:"Whether to synchronize data table configuration changes",paraId:44,tocIndex:33},{value:"false",paraId:44,tocIndex:33},{value:"[key: string]",paraId:44,tocIndex:33},{value:"any",paraId:44,tocIndex:33},{value:"Additional configuration, will be passed to hooks",paraId:44,tocIndex:33},{value:"-",paraId:44,tocIndex:33},{value:"reload()",paraId:1},{value:"Reloads the application, triggering a re-initialization.",paraId:45,tocIndex:34},{value:"reload(options?: LoadOptions): Promise<void>",paraId:46,tocIndex:35},{value:"start()",paraId:1},{value:"Starts the application to accept requests.",paraId:47,tocIndex:36},{value:"start(options: StartOptions = {}): Promise<void>",paraId:48,tocIndex:37},{value:`interface StartOptions {
  checkInstall?: boolean;
}
`,paraId:49,tocIndex:38},{value:"Property",paraId:50,tocIndex:39},{value:"Type",paraId:50,tocIndex:39},{value:"Description",paraId:50,tocIndex:39},{value:"Default",paraId:50,tocIndex:39},{value:"checkInstall",paraId:50,tocIndex:39},{value:"boolean",paraId:50,tocIndex:39},{value:"Indicates whether to check if the application is installed",paraId:50,tocIndex:39},{value:"false",paraId:50,tocIndex:39},{value:"restart()",paraId:1},{value:"Restarts the application, executing ",paraId:51,tocIndex:40},{value:"reload()",paraId:51,tocIndex:40},{value:" and ",paraId:51,tocIndex:40},{value:"start()",paraId:51,tocIndex:40},{value:".",paraId:51,tocIndex:40},{value:"restart(options: StartOptions = {}): Promise<void>",paraId:52,tocIndex:41},{value:"install()",paraId:1},{value:"Installs the application, which involves application initialization, synchronization of data table configuration changes, plugin installation, and application restart if it's already started.",paraId:53,tocIndex:42},{value:"install(options: InstallOptions = {}): Promise<void>",paraId:54,tocIndex:43},{value:"Property",paraId:55,tocIndex:44},{value:"Type",paraId:55,tocIndex:44},{value:"Description",paraId:55,tocIndex:44},{value:"Default",paraId:55,tocIndex:44},{value:"force",paraId:55,tocIndex:44},{value:"boolean",paraId:55,tocIndex:44},{value:"Indicates whether to reinstall the application if it's already installed",paraId:55,tocIndex:44},{value:"false",paraId:55,tocIndex:44},{value:"upgrade()",paraId:1},{value:"Upgrades the application by executing migration scripts for each plugin and restarting the application.",paraId:56,tocIndex:45},{value:"upgrade(): Promise<void>",paraId:57,tocIndex:46},{value:"stop()`",paraId:58,tocIndex:47},{value:"Stops the application by closing database connections, cache middleware, and telemetry connections.",paraId:59,tocIndex:47},{value:"stop(): Promise<void>",paraId:60,tocIndex:48},{value:"destroy()",paraId:1},{value:"Destroys the application, equivalent to calling ",paraId:61,tocIndex:49},{value:"stop()",paraId:61,tocIndex:49},{value:".",paraId:61,tocIndex:49},{value:"destroy(): Promise<void>",paraId:62,tocIndex:50},{value:"isInstalled()",paraId:1},{value:"Checks if the application is installed.",paraId:63,tocIndex:51},{value:"isInstalled(): Promise<boolean>",paraId:64,tocIndex:52},{value:"isStarted()",paraId:1},{value:"Checks if the application is started.",paraId:65,tocIndex:53},{value:"isStarted(): Promise<boolean>",paraId:66,tocIndex:54},{value:"on()",paraId:1},{value:"Listens for application events. Refer to ",paraId:67,tocIndex:56},{value:"emitter.on(eventName, listener)",paraId:67,tocIndex:56},{value:".",paraId:67,tocIndex:56},{value:"on(eventName: string | symbol, listener: (...args: any[]) => void): this",paraId:68,tocIndex:57},{value:"off()",paraId:1},{value:"Removes event listeners. Refer to ",paraId:69,tocIndex:58},{value:"emitter.off(eventName, listener)",paraId:69,tocIndex:58},{value:".",paraId:69,tocIndex:58},{value:"off(eventName: string | symbol, listener: (...args: any[]) => void): this",paraId:70,tocIndex:59},{value:"use()",paraId:1},{value:"Adds application middleware. Refer to ",paraId:71,tocIndex:60},{value:"Koa - Application",paraId:71,tocIndex:60},{value:".",paraId:71,tocIndex:60},{value:"command()",paraId:1},{value:"Adds application command-line commands.",paraId:72,tocIndex:61},{value:"command(name: string, desc?: string, opts?: CommandOptions): AppCommand",paraId:73,tocIndex:62},{value:"Property",paraId:74,tocIndex:63},{value:"Type",paraId:74,tocIndex:63},{value:"Description",paraId:74,tocIndex:63},{value:"name",paraId:74,tocIndex:63},{value:"string",paraId:74,tocIndex:63},{value:"Command",paraId:74,tocIndex:63},{value:"desc",paraId:74,tocIndex:63},{value:"string",paraId:74,tocIndex:63},{value:"Command description",paraId:74,tocIndex:63},{value:"opts",paraId:74,tocIndex:63},{value:"CommandOptions",paraId:74,tocIndex:63},{value:"Command configuration, refer to ",paraId:74,tocIndex:63},{value:"Commander.js",paraId:74,tocIndex:63},{value:"runCommand()",paraId:1},{value:"Runs application commands.",paraId:75,tocIndex:64},{value:"runCommand(command: string, ...args: any[])",paraId:76,tocIndex:65},{value:"authenticate()",paraId:1},{value:"Performs DB connection check and version check.",paraId:77,tocIndex:66},{value:"authenticate(): Promise<void>",paraId:78,tocIndex:67},{value:"'beforeLoad'",paraId:1},{value:"'afterLoad'",paraId:1},{value:"Triggered before and after ",paraId:79,tocIndex:69},{value:"load()",paraId:80,tocIndex:69},{value:" and ",paraId:79,tocIndex:69},{value:"reload()",paraId:81,tocIndex:69},{value:".",paraId:79,tocIndex:69},{value:"'beforeReload'",paraId:1},{value:"'afterReload'",paraId:1},{value:"Triggered before and after ",paraId:82,tocIndex:70},{value:"reload()",paraId:83,tocIndex:70},{value:".",paraId:82,tocIndex:70},{value:"'beforeInstall'",paraId:1},{value:"'afterInstall'",paraId:1},{value:"Triggered before and after ",paraId:84,tocIndex:71},{value:"install()",paraId:85,tocIndex:71},{value:".",paraId:84,tocIndex:71},{value:"'beforeUpgrade'",paraId:1},{value:"'afterUpgrade'",paraId:1},{value:"Triggered before and after ",paraId:86,tocIndex:72},{value:"upgrade()",paraId:87,tocIndex:72},{value:".",paraId:86,tocIndex:72},{value:"'beforeStart'",paraId:1},{value:"'afterStart'",paraId:1},{value:"Triggered before and after ",paraId:88,tocIndex:73},{value:"start()",paraId:89,tocIndex:73},{value:".",paraId:88,tocIndex:73},{value:"'beforeStop'",paraId:1},{value:"'afterStop'",paraId:1},{value:"Triggered before and after ",paraId:90,tocIndex:74},{value:"stop()",paraId:91,tocIndex:74},{value:" and ",paraId:90,tocIndex:74},{value:"destroy()",paraId:92,tocIndex:74},{value:". ",paraId:90,tocIndex:74},{value:"'beforeStop'",paraId:90,tocIndex:74},{value:" is triggered before ",paraId:90,tocIndex:74},{value:"restart()",paraId:93,tocIndex:74},{value:".",paraId:90,tocIndex:74},{value:"'beforeDestroy'",paraId:1},{value:"'afterDestroy'",paraId:1},{value:"Triggered before and after ",paraId:94,tocIndex:75},{value:"destroy()",paraId:95,tocIndex:75},{value:".",paraId:94,tocIndex:75}]},397743:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"AuditManager",paraId:0,tocIndex:1},{value:" \u662F NocoBase \u4E2D\u7684\u8D44\u6E90\u5BA1\u8BA1\u7BA1\u7406\u6A21\u5757\uFF0C\u7528\u4E8E\u6CE8\u518C\u9700\u8981\u53C2\u4E0E\u5BA1\u8BA1\u7684\u8D44\u6E90\u63A5\u53E3\u3002",paraId:0,tocIndex:1},{value:`import { Plugin } from '@nocobase/server';

class PluginCustomAuditResourceServer extends Plugin {
  async load() {
    this.app.auditManager.registerAction('resource:action');
  }
}
`,paraId:1,tocIndex:2},{value:"setLogger()",paraId:2},{value:"\u8BBE\u7F6E\u5BA1\u8BA1\u65E5\u5FD7\u7684\u8F93\u51FA\u65B9\u6CD5\u3002",paraId:3,tocIndex:4},{value:`const auditManager = new AuditManager();
auditManager.setLogger({
  log: async (auditLog: AuditLog) => console.log(auditLog);
})
`,paraId:4,tocIndex:4},{value:"setLogger(logger: AuditLogger)",paraId:5,tocIndex:5},{value:`export interface AuditLog {
  uuid: string;
  dataSource: string;
  resource: string;
  action: string;
  sourceCollection?: string;
  sourceRecordUK?: string;
  targetCollection?: string;
  targetRecordUK?: string;
  userId: string;
  roleName: string;
  ip: string;
  ua: string;
  status: number;
  metadata?: Record<string, any>;
}

export interface AuditLogger {
  log(auditLog: AuditLog): Promise<void>;
}
`,paraId:6,tocIndex:6},{value:"registerAction()",paraId:2},{value:"\u6CE8\u518C\u53C2\u4E0E\u5BA1\u8BA1\u7684\u8D44\u6E90\u64CD\u4F5C\u3002",paraId:7,tocIndex:7},{value:"registerAction(action: Action)",paraId:8,tocIndex:8},{value:`export interface UserInfo {
  userId?: string;
  roleName?: string;
}

export interface SourceAndTarget {
  sourceCollection?: string;
  sourceRecordUK?: string;
  targetCollection?: string;
  targetRecordUK?: string;
}

type Action =
  | string
  | {
      name: string;
      getMetaData?: (ctx: Context) => Promise<Record<string, any>>;
      getUserInfo?: (ctx: Context) => Promise<UserInfo>;
      getSourceAndTarget?: (ctx: Context) => Promise<SourceAndTarget>;
    };
`,paraId:9,tocIndex:9},{value:"\u652F\u6301\u51E0\u79CD\u5199\u6CD5:",paraId:10,tocIndex:10},{value:"\u5BF9\u6240\u6709\u8D44\u6E90\u751F\u6548",paraId:11,tocIndex:10},{value:`registerActions(['create']);
`,paraId:12,tocIndex:10},{value:"\u5BF9\u67D0\u4E2A\u8D44\u6E90\u7684\u6240\u6709\u64CD\u4F5C\u751F\u6548 ",paraId:13,tocIndex:10},{value:"resource:*",paraId:13,tocIndex:10},{value:`registerActions(['app:*']);
`,paraId:14,tocIndex:10},{value:"\u5BF9\u67D0\u4E2A\u8D44\u6E90\u7684\u67D0\u4E2A\u64CD\u4F5C\u751F\u6548 ",paraId:15,tocIndex:10},{value:"resouce:action",paraId:15,tocIndex:10},{value:`registerAction(['pm:update']);
`,paraId:16,tocIndex:10},{value:"\u652F\u6301\u4F20\u5165\u9488\u5BF9\u64CD\u4F5C\u81EA\u5B9A\u4E49\u7684 ",paraId:17,tocIndex:10},{value:"getMetaData",paraId:17,tocIndex:10},{value:", ",paraId:17,tocIndex:10},{value:"getUserInfo",paraId:17,tocIndex:10},{value:", ",paraId:17,tocIndex:10},{value:"getSourceAndTarget",paraId:17,tocIndex:10},{value:" \u65B9\u6CD5",paraId:17,tocIndex:10},{value:`registerActions([
  'create',
  { name: 'auth:signIn', getMetaData, getUserInfo, getSourceAndTarget },
]);
`,paraId:18,tocIndex:10},{value:"\u5F53\u6CE8\u518C\u7684\u63A5\u53E3\u6709\u91CD\u53E0\u65F6\uFF0C\u9897\u7C92\u5EA6\u7EC6\u7684\u6CE8\u518C\u65B9\u65B9\u5F0F\u4F18\u5148\u7EA7\u66F4\u9AD8\uFF0C\u4F8B\u5982\uFF1A",paraId:19,tocIndex:10},{value:"registerActions('create')",paraId:20,tocIndex:10},{value:"registerAction({ name: 'user:*', getMetaData })",paraId:21,tocIndex:10},{value:"registerAction({ name: 'user:create', getMetaData })",paraId:22,tocIndex:10},{value:"\u5BF9\u4E8E ",paraId:23,tocIndex:10},{value:"user:create",paraId:23,tocIndex:10},{value:" \u63A5\u53E3\uFF0C\u751F\u6548\u7684\u662F ",paraId:23,tocIndex:10},{value:"3",paraId:23,tocIndex:10},{value:".",paraId:23,tocIndex:10},{value:"registerActions()",paraId:2},{value:"\u6CE8\u518C\u591A\u4E2A\u53C2\u4E0E\u5BA1\u8BA1\u7684\u8D44\u6E90\u64CD\u4F5C\u3002",paraId:24,tocIndex:11},{value:"registerAction(actions: Action[])",paraId:25,tocIndex:12}]},848906:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Migration",paraId:0,tocIndex:0},{value:" is a class in NocoBase used for upgrade scripts, typically used to synchronize database-related changes.",paraId:0,tocIndex:0},{value:"appVersion",paraId:1},{value:"Current application version. The script will be executed only if it matches the version.",paraId:2,tocIndex:2},{value:`export default class extends Migration {
  appVersion = '<=1.0.0-alpha.1';
  // ...
}
`,paraId:3,tocIndex:2},{value:"on",paraId:1},{value:"The trigger timing for the upgrade script execution, with a default value of ",paraId:4,tocIndex:3},{value:"afterLoad",paraId:4,tocIndex:3},{value:". Refer to ",paraId:4,tocIndex:3},{value:"Application - Events",paraId:5,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:`export default class extends Migration {
  on = 'afterLoad';
  // ...
}
`,paraId:6,tocIndex:3},{value:"app",paraId:1},{value:"The ",paraId:7,tocIndex:4},{value:"Application",paraId:7,tocIndex:4},{value:" instance of the current application. Refer to ",paraId:7,tocIndex:4},{value:"Application",paraId:8,tocIndex:4},{value:".",paraId:7,tocIndex:4},{value:"pm",paraId:1},{value:"The ",paraId:9,tocIndex:5},{value:"PluginManager",paraId:9,tocIndex:5},{value:" instance of the current application. Refer to ",paraId:9,tocIndex:5},{value:"PluginManager",paraId:10,tocIndex:5},{value:".",paraId:9,tocIndex:5},{value:"plugin",paraId:1},{value:"The ",paraId:11,tocIndex:6},{value:"Plugin",paraId:11,tocIndex:6},{value:" instance of the current plugin. Refer to ",paraId:11,tocIndex:6},{value:"Plugin",paraId:12,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:"db",paraId:1},{value:"The ",paraId:13,tocIndex:7},{value:"DataBase",paraId:13,tocIndex:7},{value:" instance of the current application. Refer to ",paraId:13,tocIndex:7},{value:"DataBase",paraId:14,tocIndex:7},{value:".",paraId:13,tocIndex:7},{value:"sequelize",paraId:1},{value:"The ",paraId:15,tocIndex:8},{value:"Sequelize",paraId:15,tocIndex:8},{value:" instance. Refer to ",paraId:15,tocIndex:8},{value:"Sequelize",paraId:15,tocIndex:8},{value:".",paraId:15,tocIndex:8},{value:"queryInterface",paraId:1},{value:"Refer to ",paraId:16,tocIndex:9},{value:"Sequelize - Query Interface",paraId:16,tocIndex:9},{value:".",paraId:16,tocIndex:9},{value:"up()",paraId:1},{value:"Method for upgrade execution.",paraId:17,tocIndex:11},{value:"down()",paraId:1},{value:"Method for downgrade execution.",paraId:18,tocIndex:12}]},758280:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"PluginManager",paraId:0,tocIndex:0},{value:" is the plugin manager for NocoBase.",paraId:0,tocIndex:0},{value:"repository",paraId:1},{value:"The ",paraId:2,tocIndex:2},{value:"Repository",paraId:2,tocIndex:2},{value:" instance for the plugin data table. API reference: ",paraId:2,tocIndex:2},{value:"DataBase - Repository",paraId:3,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"addPreset()",paraId:1},{value:"Adds a system built-in plugin. Built-in plugins are enabled by default and do not appear in the client plugin manager list.",paraId:4,tocIndex:4},{value:"addPreset(plugin: string | typeof Plugin, options: any = {})",paraId:5,tocIndex:5},{value:"Parameter",paraId:6,tocIndex:6},{value:"Type",paraId:6,tocIndex:6},{value:"Description",paraId:6,tocIndex:6},{value:"plugin",paraId:6,tocIndex:6},{value:"string",paraId:6,tocIndex:6},{value:" | ",paraId:6,tocIndex:6},{value:"typeof Plugin",paraId:6,tocIndex:6},{value:"Plugin name or instance",paraId:6,tocIndex:6},{value:"options",paraId:6,tocIndex:6},{value:"any",paraId:6,tocIndex:6},{value:"Plugin options",paraId:6,tocIndex:6},{value:"getPlugins()",paraId:1},{value:"Gets all plugin instances of the current application.",paraId:7,tocIndex:7},{value:"getPlugins(): Map<typeof Plugin, Plugin<any>>",paraId:8,tocIndex:8},{value:"getAliases()",paraId:1},{value:"Gets all plugin names.",paraId:9,tocIndex:9},{value:"getAliases(): IterableIterator<string>",paraId:10,tocIndex:10},{value:"get()",paraId:1},{value:"Gets a specific plugin.",paraId:11,tocIndex:11},{value:"get(name: string | typeof Plugin): Plugin<any>",paraId:12,tocIndex:12},{value:"has()",paraId:1},{value:"Checks if a plugin exists.",paraId:13,tocIndex:13},{value:"has(name: string | typeof Plugin): boolean",paraId:14,tocIndex:14},{value:"create()",paraId:1},{value:"Creates a plugin and generates the plugin directory.",paraId:15,tocIndex:15},{value:"create(pluginName: string, options?: { forceRecreate?: boolean }): Promise<void>",paraId:16,tocIndex:16},{value:"Parameter",paraId:17,tocIndex:17},{value:"Type",paraId:17,tocIndex:17},{value:"Description",paraId:17,tocIndex:17},{value:"Default",paraId:17,tocIndex:17},{value:"pluginName",paraId:17,tocIndex:17},{value:"string",paraId:17,tocIndex:17},{value:"Plugin name",paraId:17,tocIndex:17},{value:"-",paraId:17,tocIndex:17},{value:"options.forceRecreate",paraId:17,tocIndex:17},{value:"boolean",paraId:17,tocIndex:17},{value:"Whether to remove the existing plugin directory and recreate it",paraId:17,tocIndex:17},{value:"false",paraId:17,tocIndex:17},{value:"add()",paraId:1},{value:"Adds or upgrades a plugin.",paraId:18,tocIndex:18},{value:"add(plugin?: any, options: any = {}, insert = false, isUpgrade = false): Promise<void>",paraId:19,tocIndex:19},{value:"Parameter",paraId:20,tocIndex:20},{value:"Type",paraId:20,tocIndex:20},{value:"Description",paraId:20,tocIndex:20},{value:"Default",paraId:20,tocIndex:20},{value:"plugin",paraId:20,tocIndex:20},{value:"string",paraId:20,tocIndex:20},{value:" | ",paraId:20,tocIndex:20},{value:"typeof Plugin",paraId:20,tocIndex:20},{value:"Plugin name or instance",paraId:20,tocIndex:20},{value:"-",paraId:20,tocIndex:20},{value:"options",paraId:20,tocIndex:20},{value:"any",paraId:20,tocIndex:20},{value:"Plugin configuration",paraId:20,tocIndex:20},{value:"-",paraId:20,tocIndex:20},{value:"insert",paraId:20,tocIndex:20},{value:"boolean",paraId:20,tocIndex:20},{value:"Whether to add plugin table records",paraId:20,tocIndex:20},{value:"false",paraId:20,tocIndex:20},{value:"isUpgrade",paraId:20,tocIndex:20},{value:"boolean",paraId:20,tocIndex:20},{value:"Whether it's a plugin upgrade",paraId:20,tocIndex:20},{value:"false",paraId:20,tocIndex:20},{value:"load()",paraId:1},{value:"Loads all enabled plugins.",paraId:21,tocIndex:21},{value:"load(): Promise<void>",paraId:22,tocIndex:22},{value:"install()",paraId:1},{value:"Installs all enabled plugins that are not yet installed.",paraId:23,tocIndex:23},{value:"install(): Promise<void>",paraId:24,tocIndex:24},{value:"enable()",paraId:1},{value:"Enables one or more plugins that are not enabled.",paraId:25,tocIndex:25},{value:"enable(name: string | string[]): Promise<void>",paraId:26,tocIndex:26},{value:"disable()",paraId:1},{value:"Disables one or more enabled plugins.",paraId:27,tocIndex:27},{value:"disable(name: string | string[]): Promise<void>",paraId:28,tocIndex:28},{value:"remove()",paraId:1},{value:"Removes one or more plugins.",paraId:29,tocIndex:29},{value:"remove(name: string | string[], options?: { removeDir?: boolean; force?: boolean })",paraId:30,tocIndex:30},{value:"Parameter",paraId:31,tocIndex:31},{value:"Type",paraId:31,tocIndex:31},{value:"Description",paraId:31,tocIndex:31},{value:"Default",paraId:31,tocIndex:31},{value:"name",paraId:31,tocIndex:31},{value:"string",paraId:31,tocIndex:31},{value:" | ",paraId:31,tocIndex:31},{value:"string[]",paraId:31,tocIndex:31},{value:"Plugin name(s)",paraId:31,tocIndex:31},{value:"-",paraId:31,tocIndex:31},{value:"options.removeDir",paraId:31,tocIndex:31},{value:"boolean",paraId:31,tocIndex:31},{value:"Whether to remove the plugin directory",paraId:31,tocIndex:31},{value:"false",paraId:31,tocIndex:31},{value:"options.force",paraId:31,tocIndex:31},{value:"boolean",paraId:31,tocIndex:31},{value:"Whether to delete database records directly, skipping ",paraId:31,tocIndex:31},{value:"beforeRemove",paraId:31,tocIndex:31},{value:" / ",paraId:31,tocIndex:31},{value:"afterRemove",paraId:31,tocIndex:31},{value:" hooks",paraId:31,tocIndex:31},{value:"false",paraId:31,tocIndex:31}]},417092:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Plugin",paraId:0,tocIndex:1},{value:" is the plugin class for the NocoBase server, providing configuration properties and lifecycle methods related to server-side plugins.",paraId:0,tocIndex:1},{value:`import { Plugin } from '@nocobase/server';

export class PluginDemoServer extends Plugin {}

export default PluginDemoServer;
`,paraId:1,tocIndex:2},{value:"options",paraId:2},{value:"Configuration options for the plugin.",paraId:3,tocIndex:4},{value:"name",paraId:2},{value:"string",paraId:4,tocIndex:5},{value:" - The name of the plugin.",paraId:4,tocIndex:5},{value:"enabled",paraId:2},{value:"boolean",paraId:5,tocIndex:6},{value:" - Whether the plugin is enabled.",paraId:5,tocIndex:6},{value:"installed",paraId:2},{value:"boolean",paraId:6,tocIndex:7},{value:" - Whether the plugin is installed.",paraId:6,tocIndex:7},{value:"log",paraId:2},{value:"System log instance, with the default ",paraId:7,tocIndex:8},{value:"module",paraId:7,tocIndex:8},{value:" set to the plugin name. Refer to ",paraId:7,tocIndex:8},{value:"Logger",paraId:8,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"app",paraId:2},{value:"The ",paraId:9,tocIndex:9},{value:"Application",paraId:9,tocIndex:9},{value:" instance of the current application. Refer to ",paraId:9,tocIndex:9},{value:"Application",paraId:10,tocIndex:9},{value:".",paraId:9,tocIndex:9},{value:"pm",paraId:2},{value:"The ",paraId:11,tocIndex:10},{value:"PluginManager",paraId:11,tocIndex:10},{value:" instance of the current application. Refer to ",paraId:11,tocIndex:10},{value:"PluginManager",paraId:12,tocIndex:10},{value:".",paraId:11,tocIndex:10},{value:"db",paraId:2},{value:"The ",paraId:13,tocIndex:11},{value:"DataBase",paraId:13,tocIndex:11},{value:" instance of the current application. Refer to ",paraId:13,tocIndex:11},{value:"DataBase",paraId:14,tocIndex:11},{value:".",paraId:13,tocIndex:11},{value:"afterAdd()",paraId:2},{value:"Executed after the plugin is added, i.e., after ",paraId:15,tocIndex:13},{value:"pm.add()",paraId:16,tocIndex:13},{value:".",paraId:15,tocIndex:13},{value:"beforeLoad()",paraId:2},{value:"Executed during ",paraId:17,tocIndex:14},{value:"pm.load()",paraId:18,tocIndex:14},{value:". Used to register events, initialize classes, or perform other preprocessing logic before plugin loading. At this stage, the core API can be accessed, but not other plugin APIs.",paraId:17,tocIndex:14},{value:"load()",paraId:2},{value:"Loads the plugin and its related configurations. Executed during ",paraId:19,tocIndex:15},{value:"pm.load()",paraId:20,tocIndex:15},{value:", after all ",paraId:19,tocIndex:15},{value:"beforeLoad()",paraId:21,tocIndex:15},{value:" methods of plugins have finished execution. At this stage, other plugin APIs can be accessed.",paraId:19,tocIndex:15},{value:"install()",paraId:2},{value:"Installation logic of the plugin, executed during application installation, upgrade, or when the plugin is first enabled. Typically used to perform tasks such as inserting preset data into tables.",paraId:22,tocIndex:16},{value:"beforeEnable()",paraId:2},{value:"Executed before the plugin is enabled.",paraId:23,tocIndex:17},{value:"afterEnable()",paraId:2},{value:"Executed after the plugin is enabled.",paraId:24,tocIndex:18},{value:"beforeDisable()",paraId:2},{value:"Executed before the plugin is disabled.",paraId:25,tocIndex:19},{value:"afterDisable()",paraId:2},{value:"Executed after the plugin is disabled.",paraId:26,tocIndex:20},{value:"beforeRemove()",paraId:2},{value:"Executed before the plugin is removed.",paraId:27,tocIndex:21},{value:"afterRemove()",paraId:2},{value:"Executed after the plugin is removed.",paraId:28,tocIndex:22},{value:"t()",paraId:2},{value:"Internationalization method.",paraId:29,tocIndex:24},{value:"createLogger()",paraId:2},{value:"Creates a logger. Refer to ",paraId:30,tocIndex:25},{value:"Logger",paraId:31,tocIndex:25},{value:".",paraId:30,tocIndex:25},{value:"toJSON()",paraId:2},{value:"A method for internal use. Outputs plugin-related configuration information.",paraId:32,tocIndex:26},{value:"sendSyncMessage()",paraId:2},{value:"Publish synchronization messages. The synchronization messages sent by this method will only be received by the same plugin on other nodes, and will not be related to other plugins.",paraId:33,tocIndex:27},{value:`sendSyncMessage(message: any): void | Promise<void>
`,paraId:34,tocIndex:28},{value:"message",paraId:35,tocIndex:29},{value:": Sync message data.",paraId:35,tocIndex:29},{value:`this.sendSyncMessage({
  key: 'value'
});
`,paraId:36,tocIndex:30},{value:"handleSyncMessage()",paraId:2},{value:"In a distributed environment, handle synchronization events published by the current plugin from other nodes. When the plugin uses memory state, it is necessary to override the event handling logic to ensure synchronization with the state of other nodes.",paraId:37,tocIndex:31},{value:`handleSyncMessage(message: any): void | Promise<void>
`,paraId:38,tocIndex:32},{value:"message",paraId:39,tocIndex:33},{value:": Sync message data from other nodes.",paraId:39,tocIndex:33},{value:`handleSyncMessage(message: SyncMessage) {
  console.log('handleSyncMessage', message);
  // this.reloadData();
}
`,paraId:40,tocIndex:34}]},372141:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to manage synchronization signals between multiple application nodes. In a distributed deployment, when the memory state changes, it is necessary to notify other nodes for synchronization. ",paraId:0,tocIndex:0},{value:"SyncMessageManager",paraId:0,tocIndex:0},{value:" provides a common interface to be invoked, allowing it to be used in same way across different modules.",paraId:0,tocIndex:0},{value:"The SyncMessageManager itself does not implement specific synchronization functionality, but provides a unified interface, and it will invoke the underlying ",paraId:1,tocIndex:0},{value:"pubSubManager",paraId:1,tocIndex:0},{value:" to send and receive messages.",paraId:1,tocIndex:0},{value:"SyncMessageManager",paraId:2},{value:"constructor()",paraId:2},{value:"Constructor, creates an instance of the SyncMessageManager. An instance is automatically created during application initialization and is accessible globally within the application (",paraId:3,tocIndex:3},{value:"app.syncMessageManager",paraId:3,tocIndex:3},{value:"), so there is no need to call it.",paraId:3,tocIndex:3},{value:"subscribe(channel: string, callback: SyncEventCallback)",paraId:2},{value:"Subscribes to sync events.",paraId:4,tocIndex:4},{value:"channel",paraId:5,tocIndex:4},{value:": Channel name to differentiate between different sync events.",paraId:5,tocIndex:4},{value:"callback",paraId:5,tocIndex:4},{value:": Event callback function, called when a sync event occurs.",paraId:5,tocIndex:4},{value:"unsubscribe(channel: string, callback: SyncEventCallback)",paraId:2},{value:"Unsubscribes from sync events.",paraId:6,tocIndex:5},{value:"publish(channel: string, message: any)",paraId:2},{value:"Publishes a sync message.",paraId:7,tocIndex:6},{value:"channel",paraId:8,tocIndex:6},{value:": Channel name to differentiate between different sync events.",paraId:8,tocIndex:6},{value:"message",paraId:8,tocIndex:6},{value:": Sync message data.",paraId:8,tocIndex:6},{value:`export type PubSubCallback = (message: any) => Promise<void>;
`,paraId:9,tocIndex:7}]},33952:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"constructor()",paraId:0},{value:"Constructor to create a ",paraId:1,tocIndex:2},{value:"Metric",paraId:1,tocIndex:2},{value:" instance.",paraId:1,tocIndex:2},{value:"constructor(options?: MetricOptions)",paraId:2,tocIndex:3},{value:`export type MetricOptions = {
  meterName?: string;
  version?: string;
  readerName?: string | string[];
};
`,paraId:3,tocIndex:4},{value:"Property",paraId:4,tocIndex:5},{value:"Type",paraId:4,tocIndex:5},{value:"Description",paraId:4,tocIndex:5},{value:"Default Value",paraId:4,tocIndex:5},{value:"meterName",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:"Meter identifier",paraId:4,tocIndex:5},{value:"nocobase-meter",paraId:4,tocIndex:5},{value:"version",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:"Current version of NocoBase",paraId:4,tocIndex:5},{value:"readerName",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:" | ",paraId:4,tocIndex:5},{value:"string[]",paraId:4,tocIndex:5},{value:"Identifier(s) of registered ",paraId:4,tocIndex:5},{value:"MetricReader",paraId:4,tocIndex:5},{value:" to use",paraId:4,tocIndex:5},{value:"-",paraId:4,tocIndex:5},{value:"init()",paraId:0},{value:"Initializes ",paraId:5,tocIndex:6},{value:"MetricProvider",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"init(): void",paraId:6,tocIndex:7},{value:"registerReader()",paraId:0},{value:"Registers a ",paraId:7,tocIndex:8},{value:"MetricReader",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"registerReader(name: string, reader: GetMetricReader)",paraId:8,tocIndex:9},{value:`import { MetricReader } from '@opentelemetry/sdk-metrics';

type GetMetricReader = () => MetricReader;
`,paraId:9,tocIndex:10},{value:"Parameter",paraId:10,tocIndex:11},{value:"Type",paraId:10,tocIndex:11},{value:"Description",paraId:10,tocIndex:11},{value:"name",paraId:10,tocIndex:11},{value:"string",paraId:10,tocIndex:11},{value:"Unique identifier for ",paraId:10,tocIndex:11},{value:"MetricReader",paraId:10,tocIndex:11},{value:"reader",paraId:10,tocIndex:11},{value:"() => MetricReader",paraId:10,tocIndex:11},{value:"Function to get ",paraId:10,tocIndex:11},{value:"MetricReader",paraId:10,tocIndex:11},{value:"addView()",paraId:0},{value:"Adds a ",paraId:11,tocIndex:12},{value:"View",paraId:11,tocIndex:12},{value:". Refer to ",paraId:11,tocIndex:12},{value:"Configure Metric Views",paraId:11,tocIndex:12},{value:".",paraId:11,tocIndex:12},{value:"addView(...view: View[])",paraId:12,tocIndex:13},{value:`import { View } from '@opentelemetry/sdk-metrics';
`,paraId:13,tocIndex:14},{value:"getMeter()",paraId:0},{value:"Gets the ",paraId:14,tocIndex:15},{value:"Meter",paraId:14,tocIndex:15},{value:".",paraId:14,tocIndex:15},{value:"getMeter(name?: string, version?: string)",paraId:15,tocIndex:16},{value:"Parameter",paraId:16,tocIndex:17},{value:"Type",paraId:16,tocIndex:17},{value:"Description",paraId:16,tocIndex:17},{value:"Default Value",paraId:16,tocIndex:17},{value:"name",paraId:16,tocIndex:17},{value:"string",paraId:16,tocIndex:17},{value:"Meter identifier",paraId:16,tocIndex:17},{value:"nocobase-meter",paraId:16,tocIndex:17},{value:"version",paraId:16,tocIndex:17},{value:"string",paraId:16,tocIndex:17},{value:"Current version of NocoBase",paraId:16,tocIndex:17},{value:"start()",paraId:0},{value:"Starts the ",paraId:17,tocIndex:18},{value:"MetricReader",paraId:17,tocIndex:18},{value:".",paraId:17,tocIndex:18},{value:"start(): void",paraId:18,tocIndex:19},{value:"shutdown()",paraId:0},{value:"Stops the ",paraId:19,tocIndex:20},{value:"MetricReader",paraId:19,tocIndex:20},{value:".",paraId:19,tocIndex:20},{value:"shutdown(): Promise<void>",paraId:20,tocIndex:21}]},32211:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Telemetry",paraId:0,tocIndex:1},{value:" is the telemetry module of NocoBase, encapsulating OpenTelemetry support for registering metrics and traces within the OpenTelemetry ecosystem.",paraId:0,tocIndex:1},{value:"constructor()",paraId:1},{value:"Constructor to create a ",paraId:2,tocIndex:3},{value:"Telemetry",paraId:2,tocIndex:3},{value:" instance.",paraId:2,tocIndex:3},{value:"constructor(options?: TelemetryOptions)",paraId:3,tocIndex:4},{value:`export interface TelemetryOptions {
  serviceName?: string;
  version?: string;
  trace?: TraceOptions;
  metric?: MetricOptions;
}
`,paraId:4,tocIndex:5},{value:"Property",paraId:5,tocIndex:6},{value:"Type",paraId:5,tocIndex:6},{value:"Description",paraId:5,tocIndex:6},{value:"Default Value",paraId:5,tocIndex:6},{value:"serviceName",paraId:5,tocIndex:6},{value:"string",paraId:5,tocIndex:6},{value:"Optional. Refer to ",paraId:5,tocIndex:6},{value:"Semantic Conventions",paraId:5,tocIndex:6},{value:"nocobase",paraId:5,tocIndex:6},{value:"version",paraId:5,tocIndex:6},{value:"string",paraId:5,tocIndex:6},{value:"Optional. Refer to ",paraId:5,tocIndex:6},{value:"Semantic Conventions",paraId:5,tocIndex:6},{value:"Optional, current NocoBase version",paraId:5,tocIndex:6},{value:"trace",paraId:5,tocIndex:6},{value:"TraceOptions",paraId:5,tocIndex:6},{value:"Optional. Refer to ",paraId:5,tocIndex:6},{value:"Trace",paraId:6,tocIndex:6},{value:"-",paraId:5,tocIndex:6},{value:"metric",paraId:5,tocIndex:6},{value:"MetricOptions",paraId:5,tocIndex:6},{value:"Optional. Refer to ",paraId:5,tocIndex:6},{value:"Metric",paraId:7,tocIndex:6},{value:"-",paraId:5,tocIndex:6},{value:"init()",paraId:1},{value:"Registers instrumentation and initializes ",paraId:8,tocIndex:7},{value:"Trace",paraId:8,tocIndex:7},{value:" and ",paraId:8,tocIndex:7},{value:"Metric",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"init(): void",paraId:9,tocIndex:8},{value:"start()",paraId:1},{value:"Starts the processing of ",paraId:10,tocIndex:9},{value:"Trace",paraId:10,tocIndex:9},{value:" and ",paraId:10,tocIndex:9},{value:"Metric",paraId:10,tocIndex:9},{value:" related data, such as exporting to Prometheus.",paraId:10,tocIndex:9},{value:"start(): void",paraId:11,tocIndex:10},{value:"shutdown()",paraId:1},{value:"Stops the processing of ",paraId:12,tocIndex:11},{value:"Trace",paraId:12,tocIndex:11},{value:" and ",paraId:12,tocIndex:11},{value:"Metric",paraId:12,tocIndex:11},{value:" related data.",paraId:12,tocIndex:11},{value:"shutdown(): Promise<void>",paraId:13,tocIndex:12},{value:"addInstrumentation()",paraId:1},{value:"Adds instrumentation libraries.",paraId:14,tocIndex:13},{value:"addInstrumentation(...instrumentation: InstrumentationOption[])",paraId:15,tocIndex:14}]},556613:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"constructor()",paraId:0},{value:"Constructor to create a ",paraId:1,tocIndex:2},{value:"Trace",paraId:1,tocIndex:2},{value:" instance.",paraId:1,tocIndex:2},{value:"constructor(options?: TraceOptions)",paraId:2,tocIndex:3},{value:`export type TraceOptions = {
  tracerName?: string;
  version?: string;
  processorName?: string | string[];
};
`,paraId:3,tocIndex:4},{value:"Property",paraId:4,tocIndex:5},{value:"Type",paraId:4,tocIndex:5},{value:"Description",paraId:4,tocIndex:5},{value:"Default Value",paraId:4,tocIndex:5},{value:"tracerName",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:"Trace identifier",paraId:4,tocIndex:5},{value:"nocobase-trace",paraId:4,tocIndex:5},{value:"version",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:"Current version of NocoBase",paraId:4,tocIndex:5},{value:"processorName",paraId:4,tocIndex:5},{value:"string",paraId:4,tocIndex:5},{value:" | ",paraId:4,tocIndex:5},{value:"string[]",paraId:4,tocIndex:5},{value:"Identifier(s) of registered ",paraId:4,tocIndex:5},{value:"SpanProcessor",paraId:4,tocIndex:5},{value:" to use",paraId:4,tocIndex:5},{value:"-",paraId:4,tocIndex:5},{value:"init()",paraId:0},{value:"Initializes ",paraId:5,tocIndex:6},{value:"NodeTracerProvider",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"init(): void",paraId:6,tocIndex:7},{value:"registerProcessor()",paraId:0},{value:"Registers a ",paraId:7,tocIndex:8},{value:"SpanProcessor",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"registerProcessor(name: string, processor: GetSpanProcessor)",paraId:8,tocIndex:9},{value:`import { SpanProcessor } from '@opentelemetry/sdk-trace-base';

type GetSpanProcessor = () => SpanProcessor;
`,paraId:9,tocIndex:10},{value:"Parameter",paraId:10,tocIndex:11},{value:"Type",paraId:10,tocIndex:11},{value:"Description",paraId:10,tocIndex:11},{value:"name",paraId:10,tocIndex:11},{value:"string",paraId:10,tocIndex:11},{value:"Unique identifier for ",paraId:10,tocIndex:11},{value:"SpanProcessor",paraId:10,tocIndex:11},{value:"processor",paraId:10,tocIndex:11},{value:"() => SpanProcessor",paraId:10,tocIndex:11},{value:"Function to get ",paraId:10,tocIndex:11},{value:"SpanProcessor",paraId:10,tocIndex:11},{value:"getTracer()",paraId:0},{value:"Gets the ",paraId:11,tocIndex:12},{value:"Tracer",paraId:11,tocIndex:12},{value:".",paraId:11,tocIndex:12},{value:"getTracer(name?: string, version?: string)",paraId:12,tocIndex:13},{value:"Parameter",paraId:13,tocIndex:14},{value:"Type",paraId:13,tocIndex:14},{value:"Description",paraId:13,tocIndex:14},{value:"Default Value",paraId:13,tocIndex:14},{value:"name",paraId:13,tocIndex:14},{value:"string",paraId:13,tocIndex:14},{value:"Trace identifier",paraId:13,tocIndex:14},{value:"nocobase-trace",paraId:13,tocIndex:14},{value:"version",paraId:13,tocIndex:14},{value:"string",paraId:13,tocIndex:14},{value:"Current version of NocoBase",paraId:13,tocIndex:14},{value:"start()",paraId:0},{value:"Starts the ",paraId:14,tocIndex:15},{value:"SpanProcessor",paraId:14,tocIndex:15},{value:".",paraId:14,tocIndex:15},{value:"start(): void",paraId:15,tocIndex:16},{value:"shutdown()",paraId:0},{value:"Stops the ",paraId:16,tocIndex:17},{value:"SpanProcessor",paraId:16,tocIndex:17},{value:".",paraId:16,tocIndex:17},{value:"shutdown(): Promise<void>",paraId:17,tocIndex:18}]},444564:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase utilizes ",paraId:0,tocIndex:1},{value:"Vitest",paraId:0,tocIndex:1},{value:" for client-side testing. ",paraId:0,tocIndex:1},{value:"@nocobase/test/client",paraId:0,tocIndex:1},{value:" provides convenient methods for writing client-side test cases.",paraId:0,tocIndex:1},{value:"defineConfig()",paraId:1},{value:"Retrieve the Vitest configuration.",paraId:2,tocIndex:3},{value:`import { defineConfig } from '@nocobase/test/vitest.mjs';

const config = defineConfig();
`,paraId:3,tocIndex:3},{value:"sleep()",paraId:1},{value:"Delay execution for a specified period of time.",paraId:4,tocIndex:4},{value:`sleep(5000);
`,paraId:5,tocIndex:4},{value:"sleep: (timeout?: number) => Promise<unknown>",paraId:6,tocIndex:5},{value:"Parameter",paraId:7,tocIndex:6},{value:"Type",paraId:7,tocIndex:6},{value:"Description",paraId:7,tocIndex:6},{value:"timeout",paraId:7,tocIndex:6},{value:"number",paraId:7,tocIndex:6},{value:"Delay time (in ms)",paraId:7,tocIndex:6},{value:"Used for testing React components. Refer to ",paraId:8,tocIndex:7},{value:"React Testing Library",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"Used for simulating user interactions. Refer to ",paraId:9,tocIndex:8},{value:"User Interactions",paraId:9,tocIndex:8},{value:".",paraId:9,tocIndex:8},{value:`import { userEvent } from '@nocobase/test/client';

await userEvent.click();
`,paraId:10,tocIndex:8}]},740409:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase uses ",paraId:0,tocIndex:1},{value:"Playwright",paraId:0,tocIndex:1},{value:" for end-to-end (E2E) testing and provides some mock methods to simplify test writing.",paraId:0,tocIndex:1},{value:"Generates a NocoBase page based on the configuration.",paraId:1,tocIndex:2},{value:"Signature",paraId:2,tocIndex:2},{value:"mockPage(pageConfig?: PageConfig): NocoPage",paraId:3,tocIndex:2},{value:"Parameters",paraId:4,tocIndex:2},{value:"Parameter",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"pageConfig.type",paraId:5,tocIndex:2},{value:"'group' | 'page' | 'link'",paraId:5,tocIndex:2},{value:"'page'",paraId:5,tocIndex:2},{value:"Type of page",paraId:5,tocIndex:2},{value:"pageConfig.name",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"Name of the page visible to users",paraId:5,tocIndex:2},{value:"pageConfig.url",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"URL to navigate when ",paraId:5,tocIndex:2},{value:"type",paraId:5,tocIndex:2},{value:" is 'link'",paraId:5,tocIndex:2},{value:"pageConfig.basePath",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:"'/admin/'",paraId:5,tocIndex:2},{value:"Base path of the page",paraId:5,tocIndex:2},{value:"pageConfig.collections",paraId:5,tocIndex:2},{value:"CollectionSetting[]",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"Configuration of collections on the page",paraId:5,tocIndex:2},{value:"pageConfig.pageSchema",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"Schema of the entire page",paraId:5,tocIndex:2},{value:"Example",paraId:6,tocIndex:2},{value:"Create an empty page that will be automatically deleted after the current test case finishes running.",paraId:7,tocIndex:2},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockPage', async ({ mockPage }) => {
  const nocoPage = await mockPage();
  await nocoPage.goto();
});
`,paraId:8,tocIndex:2},{value:"Generates a page instance that needs to be manually destroyed.",paraId:9,tocIndex:3},{value:"Signature",paraId:10,tocIndex:3},{value:"mockManualDestroyPage(pageConfig?: PageConfig): NocoPage",paraId:11,tocIndex:3},{value:"Parameters",paraId:12,tocIndex:3},{value:"Same as ",paraId:13,tocIndex:3},{value:"mockPage",paraId:13,tocIndex:3},{value:".",paraId:13,tocIndex:3},{value:"Example",paraId:14,tocIndex:3},{value:"Create an empty page that needs to be manually destroyed. Use this method when multiple test cases share the same page to avoid creating identical pages repeatedly.",paraId:15,tocIndex:3},{value:`import { test } from '@nocobase/test/e2e';

let nocoPage;

test.beforeAll(async ({ mockManualDestroyPage }) => {
  nocoPage = await mockManualDestroyPage();
});

test.afterAll(async () => {
  await nocoPage.destroy();
});

test('learn how to use mockManualDestroyPage', async ({ page }) => {
  // Use page.goto method to navigate
  await page.goto(nocoPage.getUrl());
});
`,paraId:16,tocIndex:3},{value:"Generates multiple collections based on the configuration.",paraId:17,tocIndex:4},{value:"Signature",paraId:18,tocIndex:4},{value:"mockCollections(collectionSettings: CollectionSetting[]): Promise<void>",paraId:19,tocIndex:4},{value:"Parameters",paraId:20,tocIndex:4},{value:"Refer to the definition of ",paraId:21,tocIndex:4},{value:"CollectionSetting",paraId:21,tocIndex:4},{value:" type.",paraId:21,tocIndex:4},{value:"Example",paraId:22,tocIndex:4},{value:"Create a collection named ",paraId:23,tocIndex:4},{value:"posts",paraId:23,tocIndex:4},{value:".",paraId:23,tocIndex:4},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockCollections', async ({ mockCollections }) => {
  await mockCollections([
    {
      name: 'posts',
    },
  ]);
});
`,paraId:24,tocIndex:4},{value:"Generates a collection based on the configuration.",paraId:25,tocIndex:5},{value:"Signature",paraId:26,tocIndex:5},{value:"mockCollection(collectionSetting: CollectionSetting): Promise<void>",paraId:27,tocIndex:5},{value:"Parameters",paraId:28,tocIndex:5},{value:"Refer to the definition of ",paraId:29,tocIndex:5},{value:"CollectionSetting",paraId:29,tocIndex:5},{value:" type.",paraId:29,tocIndex:5},{value:"Example",paraId:30,tocIndex:5},{value:"Create a collection named ",paraId:31,tocIndex:5},{value:"posts",paraId:31,tocIndex:5},{value:".",paraId:31,tocIndex:5},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockCollection', async ({ mockCollection }) => {
  await mockCollection({
    name: 'posts',
  });
});
`,paraId:32,tocIndex:5},{value:"Generates data for multiple collections.",paraId:33,tocIndex:6},{value:"Signature",paraId:34,tocIndex:6},{value:"mockRecords<T>(collectionName: string, count?: number): Promise<T>",paraId:35,tocIndex:6},{value:"mockRecords<T>(collectionName: string, records?: T[]): Promise<T[]>",paraId:35,tocIndex:6},{value:"Parameters",paraId:36,tocIndex:6},{value:"Refer to the type definition ",paraId:37,tocIndex:6},{value:"here",paraId:37,tocIndex:6},{value:".",paraId:37,tocIndex:6},{value:"Example",paraId:38,tocIndex:6},{value:"Create 10 records for the ",paraId:39,tocIndex:6},{value:"posts",paraId:39,tocIndex:6},{value:" collection.",paraId:39,tocIndex:6},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockRecords', async ({ mockRecords }) => {
  await mockRecords('posts', 10);
});
`,paraId:40,tocIndex:6},{value:"Customize the value of a field.",paraId:41,tocIndex:6},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockRecords', async ({ mockRecords }) => {
  // Create a record with the title 'hello world'
  await mockRecords('posts', [
    {
      title: 'hello world',
    },
  ]);
});
`,paraId:42,tocIndex:6},{value:"Generates data for a single collection.",paraId:43,tocIndex:7},{value:"Signature",paraId:44,tocIndex:7},{value:"mockRecord<T>(collectionName: string, data?: T): Promise<T>",paraId:45,tocIndex:7},{value:"Parameters",paraId:46,tocIndex:7},{value:"Refer to the type definition ",paraId:47,tocIndex:7},{value:"here",paraId:47,tocIndex:7},{value:".",paraId:47,tocIndex:7},{value:"Example",paraId:48,tocIndex:7},{value:"Create a record for the ",paraId:49,tocIndex:7},{value:"posts",paraId:49,tocIndex:7},{value:" collection.",paraId:49,tocIndex:7},{value:`import { test } from '@nocobase/test/e2e';

test('learn how to use mockRecord', async ({ mockRecord }) => {
  await mockRecord('posts');
});
`,paraId:50,tocIndex:7}]},320589:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase conducts server-side testing based on ",paraId:0,tocIndex:1},{value:"Vitest",paraId:0,tocIndex:1},{value:". ",paraId:0,tocIndex:1},{value:"@nocobase/test",paraId:0,tocIndex:1},{value:" provides convenient methods for server-side testing to mock services and databases.",paraId:0,tocIndex:1},{value:`describe('actions', () => {
  let app: MockServer;
  let db: Database;
  let agent: any;

  beforeAll(async () => {
    app = await createMockServer({
      plugins: ['acl', 'users', 'data-source-manager'],
    });
    db = app.db;
    agent = app.agent();
  });

  afterAll(async () => {
    await app.destroy();
  });
});
`,paraId:1,tocIndex:2},{value:"defineConfig()",paraId:2},{value:"Retrieve the Vitest configuration.",paraId:3,tocIndex:4},{value:`import { defineConfig } from '@nocobase/test/vitest.mjs';

const config = defineConfig();
`,paraId:4,tocIndex:4},{value:"mockDatabase()",paraId:2},{value:"Create a ",paraId:5,tocIndex:5},{value:"MockDataBase",paraId:5,tocIndex:5},{value:" instance for testing.",paraId:5,tocIndex:5},{value:"mockDatabase(options: IDatabaseOptions = {}): MockDatabase",paraId:6,tocIndex:6},{value:"Parameter",paraId:7,tocIndex:7},{value:"Type",paraId:7,tocIndex:7},{value:"Description",paraId:7,tocIndex:7},{value:"options",paraId:7,tocIndex:7},{value:"IDatabaseOptions",paraId:7,tocIndex:7},{value:"Refer to ",paraId:7,tocIndex:7},{value:"DataBase",paraId:8,tocIndex:7},{value:"mockServer()",paraId:2},{value:"Create a ",paraId:9,tocIndex:8},{value:"MockServer",paraId:9,tocIndex:8},{value:" instance.",paraId:9,tocIndex:8},{value:"mockServer(options?: ApplicationOptions): MockServer",paraId:10,tocIndex:9},{value:"Parameter",paraId:11,tocIndex:10},{value:"Type",paraId:11,tocIndex:10},{value:"Description",paraId:11,tocIndex:10},{value:"options",paraId:11,tocIndex:10},{value:"ApplicationOptions",paraId:11,tocIndex:10},{value:"Refer to ",paraId:11,tocIndex:10},{value:"Application",paraId:12,tocIndex:10},{value:"createMockServer()",paraId:2},{value:"Create a ",paraId:13,tocIndex:11},{value:"MockServer",paraId:13,tocIndex:11},{value:" instance, perform forced installation, and start it.",paraId:13,tocIndex:11},{value:`createMockServer(options?: ApplicationOptions & {
    version?: string;
    beforeInstall?: BeforeInstallFn;
    skipInstall?: boolean;
    skipStart?: boolean;
}): Promise<MockServer>
`,paraId:14,tocIndex:12},{value:"Parameter",paraId:15,tocIndex:13},{value:"Type",paraId:15,tocIndex:13},{value:"Description",paraId:15,tocIndex:13},{value:"options",paraId:15,tocIndex:13},{value:"ApplicationOptions",paraId:15,tocIndex:13},{value:"Refer to ",paraId:15,tocIndex:13},{value:"Application",paraId:16,tocIndex:13},{value:"options.version",paraId:15,tocIndex:13},{value:"string",paraId:15,tocIndex:13},{value:"Application version",paraId:15,tocIndex:13},{value:"options.beforeInstall",paraId:15,tocIndex:13},{value:"BeforeInstallFn",paraId:15,tocIndex:13},{value:"Function to execute before installation",paraId:15,tocIndex:13},{value:"options.skipInstall",paraId:15,tocIndex:13},{value:"boolean",paraId:15,tocIndex:13},{value:"Whether to skip forced installation",paraId:15,tocIndex:13},{value:"options.skipStart",paraId:15,tocIndex:13},{value:"boolean",paraId:15,tocIndex:13},{value:"Whether to skip application startup",paraId:15,tocIndex:13},{value:"MockServer",paraId:2},{value:"MockServer",paraId:17,tocIndex:14},{value:" inherits from ",paraId:17,tocIndex:14},{value:"Application",paraId:17,tocIndex:14},{value:" and is a class for server-side testing applications.",paraId:17,tocIndex:14},{value:"loadAndInstall()",paraId:2},{value:"Load and install the application.",paraId:18,tocIndex:16},{value:"cleanDb()",paraId:2},{value:"Clear the database.",paraId:19,tocIndex:17},{value:"quickstart()",paraId:2},{value:"Execute ",paraId:20,tocIndex:18},{value:"nocobase start --quickstart",paraId:20,tocIndex:18},{value:".",paraId:20,tocIndex:18},{value:"destroy()",paraId:2},{value:"Destroy the application.",paraId:21,tocIndex:19},{value:"agent()",paraId:2},{value:"Initiate API requests in test cases.",paraId:22,tocIndex:20},{value:"Signature",paraId:23,tocIndex:20},{value:"agent(): ExtendedAgent",paraId:24,tocIndex:20},{value:"Type",paraId:25,tocIndex:20},{value:`interface ExtendedAgent extends SuperAgentTest {
  login: (user: any) => ExtendedAgent;
  loginUsingId: (userId: number) => ExtendedAgent;
  resource: (name: string, resourceOf?: any) => Resource;
}
`,paraId:26,tocIndex:20},{value:"Details",paraId:27,tocIndex:20},{value:"SuperAgentTest",paraId:28,tocIndex:20},{value:"Refer to ",paraId:29,tocIndex:20},{value:"superagent",paraId:29,tocIndex:20},{value:".",paraId:29,tocIndex:20},{value:"login()",paraId:30,tocIndex:20},{value:"Log in with a user model.",paraId:31,tocIndex:20},{value:"loginUsingId()",paraId:32,tocIndex:20},{value:"Log in with a user ID.",paraId:33,tocIndex:20},{value:"resource()",paraId:34,tocIndex:20},{value:"Retrieve a resource.",paraId:35,tocIndex:20},{value:"Parameter",paraId:36,tocIndex:20},{value:"Type",paraId:36,tocIndex:20},{value:"Description",paraId:36,tocIndex:20},{value:"name",paraId:36,tocIndex:20},{value:"string",paraId:36,tocIndex:20},{value:"1. Resource name, e.g., ",paraId:36,tocIndex:20},{value:"a",paraId:36,tocIndex:20},{value:" ",paraId:36,tocIndex:20},{value:" 2. Associated object name of the resource, e.g., ",paraId:36,tocIndex:20},{value:"a.b",paraId:36,tocIndex:20},{value:"resourceOf",paraId:36,tocIndex:20},{value:"any",paraId:36,tocIndex:20},{value:"Primary key value of the resource when ",paraId:36,tocIndex:20},{value:"resource",paraId:36,tocIndex:20},{value:" is the associated object name of the resource. For example, when ",paraId:36,tocIndex:20},{value:"a.b",paraId:36,tocIndex:20},{value:" is specified, it represents the primary key value of ",paraId:36,tocIndex:20},{value:"a",paraId:36,tocIndex:20},{value:".",paraId:36,tocIndex:20}]},512384:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},251749:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Whether it is a NocoBase application created via ",paraId:0,tocIndex:0},{value:"Git source",paraId:1,tocIndex:0},{value:" or ",paraId:0,tocIndex:0},{value:"create-nocobase-app",paraId:2,tocIndex:0},{value:", the directory structure is the same, as follows:",paraId:0,tocIndex:0},{value:`\u251C\u2500\u2500 my-nocobase-app
  \u251C\u2500\u2500 packages        # Packages under development
    \u251C\u2500\u2500 plugins       # Plugins under development
  \u251C\u2500\u2500 storage         # Used to store database files, attachments, cache, etc.
    \u251C\u2500\u2500 backups       # Backup files directory
    \u251C\u2500\u2500 plugins       # Plug-and-play plugins (already compiled)
    \u251C\u2500\u2500 tar           # Location for storing output of yarn build --tar
    \u251C\u2500\u2500 uploads       # Local storage directory
  \u251C\u2500\u2500 .env            # Environment variables
  \u251C\u2500\u2500 .env.e2e        # Environment variables for e2e tests yarn e2e test
  \u251C\u2500\u2500 .env.test       # Environment variables for unit tests yarn test
  \u251C\u2500\u2500 lerna.json
  \u251C\u2500\u2500 package.json
  \u251C\u2500\u2500 playwright.config.ts
  \u251C\u2500\u2500 tsconfig.json
  \u251C\u2500\u2500 tsconfig.server.json
  \u251C\u2500\u2500 vitest.config.mts
`,paraId:3,tocIndex:0},{value:"Plugins under development are stored in the ",paraId:4,tocIndex:1},{value:"packages/plugins",paraId:4,tocIndex:1},{value:" directory, organized as npm packages, example as below:",paraId:4,tocIndex:1},{value:`|- /packages/
  |- /plugins/
    |- /@nocobase/
      |- /plugin-hello1/
      |- /plugin-hello2/
    |- /my-nocobase-plugin-hello1/
    |- /my-nocobase-plugin-hello2/
`,paraId:5,tocIndex:1},{value:"Plugins added via the interface are stored in the ",paraId:6,tocIndex:1},{value:"storage/plugins",paraId:6,tocIndex:1},{value:" directory, organized as npm packages, example as below:",paraId:6,tocIndex:1},{value:`|- /storage/
  |- /plugins/
    |- /@nocobase/
      |- /plugin-hello1/
      |- /plugin-hello2/
    |- /my-nocobase-plugin-hello1/
    |- /my-nocobase-plugin-hello2/
`,paraId:7,tocIndex:1},{value:"Built-in plugins or plugins declared in the ",paraId:8,tocIndex:1},{value:"dependencies",paraId:8,tocIndex:1},{value:" of ",paraId:8,tocIndex:1},{value:"package.json",paraId:8,tocIndex:1},{value:" will all be in ",paraId:8,tocIndex:1},{value:"node_modules",paraId:8,tocIndex:1},{value:", example as below:",paraId:8,tocIndex:1},{value:`|- /node_modules/
  |- /@nocobase/
    |- /plugin-acl/
    |- /plugin-auth/
`,paraId:9,tocIndex:1},{value:"You can quickly create an empty plugin with ",paraId:10,tocIndex:2},{value:"yarn pm create @my-project/plugin-hello",paraId:10,tocIndex:2},{value:". The directory structure is as follows:",paraId:10,tocIndex:2},{value:`|- /packages/plugins/@my-project/plugin-hello
  |- /dist          # The produ\u0441t of build
  |- /src
    |- /client      # Plugin client code
    |- /server      # Plugin server code
  |- .npmignore     # Which files or directories should be ignored when publishing the plugin package
  |- client.d.ts
  |- client.js
  |- package.json   # Plugin package information
  |- server.d.ts
  |- server.js
`,paraId:11,tocIndex:2}]},187993:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides an ",paraId:0,tocIndex:0},{value:"APIClient",paraId:0,tocIndex:0},{value:" for making HTTP requests. Within the ",paraId:0,tocIndex:0},{value:"plugin lifecycle",paraId:1,tocIndex:0},{value:" of a client-side application, you can use ",paraId:0,tocIndex:0},{value:"app.apiClient",paraId:0,tocIndex:0},{value:" to make client-side requests. Inside components, you can use ",paraId:0,tocIndex:0},{value:"useAPIClient()",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"useRequest()",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:`class PluginSampleAPIClient extends Plugin {
  async load() {
    const { data } = await this.app.apiClient.request({ url: 'test' });
  }
}
`,paraId:2,tocIndex:1},{value:"For standard requests, refer to axios's ",paraId:3,tocIndex:2},{value:"request config",paraId:3,tocIndex:2},{value:" for more details on usage.",paraId:3,tocIndex:2},{value:`class APIClient {
  // Client-side requests, supporting AxiosRequestConfig and ResourceActionOptions
  request<T = any, R = AxiosResponse<T>, D = any>(
    config: AxiosRequestConfig<D> | ResourceActionOptions,
  ): Promise<R>;
}
`,paraId:4,tocIndex:2},{value:"Example:",paraId:5,tocIndex:2},{value:`const response = await apiClient.request({ url });
`,paraId:6,tocIndex:2},{value:"AxiosInstance",paraId:7,tocIndex:3},{value:" instance",paraId:7,tocIndex:3},{value:"It can be used to modify axios's ",paraId:8,tocIndex:3},{value:"default configuration",paraId:8,tocIndex:3},{value:".",paraId:8,tocIndex:3},{value:`axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.defaults.headers.post['Content-Type'] =
  'application/x-www-form-urlencoded';
`,paraId:9,tocIndex:3},{value:"It can also be used to ",paraId:10,tocIndex:3},{value:"intercept requests or responses",paraId:10,tocIndex:3},{value:".",paraId:10,tocIndex:3},{value:`// Add request interceptor: use qs to convert params
axios.interceptors.request.use((config) => {
  config.paramsSerializer = (params) => {
    return qs.stringify(params, {
      strictNullHandling: true,
      arrayFormat: 'brackets',
    });
  };
  return config;
});

// Add request interceptor: customize request headers
axios.interceptors.request.use((config) => {
  config.headers['Authorization'] = \`Bearer token123\`;
  config.headers['X-Hostname'] = \`localhost\`;
  config.headers['X-Timezone'] = \`+08:00\`;
  config.headers['X-Locale'] = 'zh-CN';
  config.headers['X-Role'] = 'admin';
  config.headers['X-Authenticator'] = 'basic';
  config.headers['X-App'] = 'sub1';
  return config;
});

// Add response interceptor
axios.interceptors.response.use(
  (response) => response,
  (error) => {
    // Notify the user about the error
    notification.error({
      message: 'Request Response Error',
    });
  },
);
`,paraId:11,tocIndex:3},{value:"X-App",paraId:12,tocIndex:4},{value:": Specify the current app when using multiple apps.",paraId:12,tocIndex:4},{value:"X-Locale",paraId:12,tocIndex:4},{value:": Current language.",paraId:12,tocIndex:4},{value:"X-Hostname",paraId:12,tocIndex:4},{value:": Client hostname.",paraId:12,tocIndex:4},{value:"X-Timezone",paraId:12,tocIndex:4},{value:": Client timezone.",paraId:12,tocIndex:4},{value:"X-Role",paraId:12,tocIndex:4},{value:": Current role.",paraId:12,tocIndex:4},{value:"X-Authenticator",paraId:12,tocIndex:4},{value:": Current user authentication method.",paraId:12,tocIndex:4},{value:"Within a component, you can use ",paraId:13,tocIndex:5},{value:"useAPIClient()",paraId:13,tocIndex:5},{value:" to get the APIClient instance of the current app, which is equivalent to ",paraId:13,tocIndex:5},{value:"app.apiClient",paraId:13,tocIndex:5},{value:".",paraId:13,tocIndex:5},{value:"Asynchronous data management, which can either be data from client requests or a custom asynchronous function. For detailed usage, refer to ahooks's ",paraId:14,tocIndex:6},{value:"useRequest()",paraId:14,tocIndex:6},{value:".",paraId:14,tocIndex:6},{value:`function useRequest<P>(
  service: AxiosRequestConfig<P> | ResourceActionOptions<P> | FunctionService,
  options?: Options<any, any>,
);
`,paraId:15,tocIndex:6},{value:"Example:",paraId:16,tocIndex:6},{value:`const { data, loading, refresh, run, params } = useRequest({ url: '/users' });

// Since useRequest accepts AxiosRequestConfig, the run function also accepts AxiosRequestConfig.
run({
  params: {
    pageSize: 20,
  },
});
`,paraId:17,tocIndex:6}]},61759:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the plugin, both front-end and back-end multilingual files are stored in the ",paraId:0,tocIndex:1},{value:"src/locale",paraId:0,tocIndex:1},{value:" folder. You can view ",paraId:0,tocIndex:1},{value:"all supported languages",paraId:1,tocIndex:1},{value:" in NocoBase by clicking here.",paraId:0,tocIndex:1},{value:`|- /plugin-sample-i18n
  |- /src
    |- /locale      # Multilingual files
      |- en_US.ts   # English language
      |- zh_CN.ts   # Chinese language
`,paraId:2,tocIndex:1},{value:"To add translation entries, simply update the corresponding multilingual file (",paraId:3,tocIndex:1},{value:"/src/locale/${lang}.ts",paraId:3,tocIndex:1},{value:"). If you're adding a new language file for the first time, you\u2019ll need to restart the application for the changes to take effect. You can verify the successful addition of translation entries by checking the ",paraId:3,tocIndex:1},{value:"app:getLang",paraId:3,tocIndex:1},{value:" interface.",paraId:3,tocIndex:1},{value:"http://localhost:13000/api/app:getLang?locale=zh-CN",paraId:4,tocIndex:1},{value:`import { Plugin } from '@nocobase/client';

class PluginDemoClient extends Plugin {
  async load() {
    // i18n instance
    this.app.i18n;
    this.app.i18n.t('hello');
    await this.app.i18n.changeLanguage('zh-CN');
  }
}
`,paraId:5,tocIndex:3},{value:"The i18n implementation is based on i18next. For more detailed instructions, refer to the ",paraId:6,tocIndex:3},{value:"I18next API Documentation",paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:`import { useApp } from '@nocobase/client';
import { useTranslation } from 'react-i18next';

const { i18n } = useApp();
const { t } = useTranslation('@nocobase/plugin-sample-i18n');
t('hello');
// Equivalent to
i18n.t('hello', { ns: '@nocobase/plugin-sample-i18n' });
`,paraId:7,tocIndex:4},{value:"For detailed usage of ",paraId:8,tocIndex:4},{value:"useTranslation()",paraId:8,tocIndex:4},{value:", refer to the ",paraId:8,tocIndex:4},{value:"react-i18next Documentation",paraId:8,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"Each plugin\u2019s locale is distinguished by its namespace (ns), which corresponds to the plugin name, like this:",paraId:9,tocIndex:5},{value:`app.i18n.t('Hello', { ns: '@nocobase/plugin-sample-i18n' });
`,paraId:10,tocIndex:5},{value:"When used in schema:",paraId:11,tocIndex:6},{value:`const schema = {
  type: 'string',
  title: '{{t("I\\'m fine", { ns: "@nocobase/plugin-sample-i18n" })}}',
  'x-component': 'FormItem',
  'x-component': 'Input',
};
`,paraId:12,tocIndex:6},{value:"Writing ",paraId:13,tocIndex:6},{value:`'{{t("I\\'m fine", { ns: "@nocobase/plugin-sample-i18n" })}}'`,paraId:13,tocIndex:6},{value:" directly can be prone to errors. Instead, you can use the more convenient tval function:",paraId:13,tocIndex:6},{value:`import { tval } from '@nocobase/client';

const schema = {
  type: 'string',
  title: tval("I'm fine", { ns: '@nocobase/plugin-sample-i18n', ...others }),
  'x-component': 'FormItem',
  'x-component': 'Input',
};
`,paraId:14,tocIndex:6},{value:"Avoid using the ",paraId:15,tocIndex:7},{value:"i18n",paraId:15,tocIndex:7},{value:" instance exported from ",paraId:15,tocIndex:7},{value:"@nocobase/client",paraId:15,tocIndex:7},{value:", as it will be deprecated in the future. Instead, use ",paraId:15,tocIndex:7},{value:"app.i18n",paraId:15,tocIndex:7},{value:".",paraId:15,tocIndex:7},{value:`// Incorrect
import { i18n } from '@nocobase/client';

i18n.t('hello');

// Correct
import { Plugin } from '@nocobase/client';

class PluginDemoClient extends Plugin {
  async load() {
    this.app.i18n.t('hello');
  }
}
`,paraId:16,tocIndex:7},{value:"Why is it deprecated?",paraId:17,tocIndex:7},{value:"Each app instance operates independently, including its i18n. A global i18n instance can cause interference between multiple app instances, which violates design principles, making it an undesirable practice.",paraId:18,tocIndex:7},{value:"@nocobase/plugin-sample-i18n",paraId:19,tocIndex:8}]},644544:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Initialized empty plugin, the client directory structure is as follows:",paraId:0,tocIndex:1},{value:`|- /plugin-sample-hello
  |- /src
    |- /client
      |- index.tsx
  |- client.d.ts
  |- client.js
`,paraId:1,tocIndex:1},{value:"The plugin class provides various methods for the plugin lifecycle.",paraId:2,tocIndex:2},{value:`import { Plugin } from '@nocobase/client';

export class PluginSampleHelloClient extends Plugin {
  async afterAdd() {}

  async beforeLoad() {}

  async load() {}
}

export default PluginSampleHelloClient;
`,paraId:3,tocIndex:2},{value:"After the plugin is initialized, ",paraId:4,tocIndex:3},{value:"afterAdd",paraId:4,tocIndex:3},{value:" is triggered. It's important to note that the addition of plugins is unordered, so do not attempt to obtain instances of other plugins in ",paraId:4,tocIndex:3},{value:"afterAdd",paraId:4,tocIndex:3},{value:". If you need to get instances of other plugins, you can do so in ",paraId:4,tocIndex:3},{value:"beforeLoad",paraId:4,tocIndex:3},{value:" or ",paraId:4,tocIndex:3},{value:"load",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"In ",paraId:4,tocIndex:3},{value:"beforeLoad",paraId:4,tocIndex:3},{value:", all activated plugins have been instantiated, and by then, instances can be obtained through ",paraId:4,tocIndex:3},{value:"app.pluginManager.get()",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"In ",paraId:4,tocIndex:3},{value:"load",paraId:4,tocIndex:3},{value:", the ",paraId:4,tocIndex:3},{value:"beforeLoad",paraId:4,tocIndex:3},{value:" method of all plugins has been executed.",paraId:4,tocIndex:3},{value:"API",paraId:5,tocIndex:4},{value:"Tutorial",paraId:5,tocIndex:4},{value:"app.i18n",paraId:5,tocIndex:4},{value:"Internationalization",paraId:6,tocIndex:4},{value:"app.apiClient",paraId:5,tocIndex:4},{value:"API Client",paraId:7,tocIndex:4},{value:"app.pluginManager",paraId:5,tocIndex:4},{value:"Plugin Manager",paraId:5,tocIndex:4},{value:"app.router",paraId:5,tocIndex:4},{value:"Routing Management",paraId:8,tocIndex:4},{value:"app.pluginSettingsManager",paraId:5,tocIndex:4},{value:"Plugin Settings Page",paraId:9,tocIndex:4},{value:"app.schemaInitializerManager",paraId:5,tocIndex:4},{value:"Schema Initializer Config",paraId:10,tocIndex:4},{value:"app.schemaSettingsManager",paraId:5,tocIndex:4},{value:"Schema Settings Config",paraId:11,tocIndex:4},{value:"app.addProviders",paraId:5,tocIndex:4},{value:"Provider Components",paraId:12,tocIndex:4},{value:"app.addComponents",paraId:5,tocIndex:4},{value:"Schema Rendering",paraId:13,tocIndex:4},{value:"app.addScopes",paraId:5,tocIndex:4},{value:"Schema Rendering",paraId:14,tocIndex:4},{value:"hooks",paraId:15},{value:"API",paraId:16,tocIndex:5},{value:"Tutorial",paraId:16,tocIndex:5},{value:"useApp()",paraId:16,tocIndex:5},{value:"useApp() API",paraId:16,tocIndex:5},{value:"usePlugin()",paraId:16,tocIndex:5},{value:"usePlugin() API",paraId:16,tocIndex:5},{value:"useAPIClient()",paraId:16,tocIndex:5},{value:"API Client",paraId:17,tocIndex:5},{value:"useRequest()",paraId:16,tocIndex:5},{value:"API Client",paraId:18,tocIndex:5}]},7023:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u4EE5\u4E0B\u662F ",paraId:0,tocIndex:1},{value:"Plugin",paraId:0,tocIndex:1},{value:" \u7C7B\u7684\u5B9A\u4E49\uFF0C\u6211\u4EEC\u770B\u5230\u5B83\u63D0\u4F9B\u4E86\u4E09\u4E2A\u751F\u547D\u5468\u671F\u65B9\u6CD5 ",paraId:0,tocIndex:1},{value:"afterAdd",paraId:0,tocIndex:1},{value:"\u3001",paraId:0,tocIndex:1},{value:"beforeLoad",paraId:0,tocIndex:1},{value:"\u3001",paraId:0,tocIndex:1},{value:"load",paraId:0,tocIndex:1},{value:"\u3002",paraId:0,tocIndex:1},{value:`export class Plugin<T = <em>any</em>> {
  constructor(
    protected options: T,
    protected app: Application,
  ) {}

  async afterAdd() {}

  async beforeLoad() {}

  async load() {}
}
`,paraId:1,tocIndex:1},{value:"afterAdd",paraId:2},{value:"\u8C03\u7528\u65F6\u673A\uFF1A\u63D2\u4EF6\u88AB\u6DFB\u52A0\u5E76\u5B9E\u4F8B\u5316\u540E\u7ACB\u5373\u8C03\u7528",paraId:3,tocIndex:2},{value:"\u4F5C\u7528\uFF1A\u7528\u4E8E\u52A0\u8F7D\u5176\u4ED6\u63D2\u4EF6",paraId:3,tocIndex:2},{value:`class Demo1Plugin extends Plugin {}
class Demo2Plugin extends Plugin {}

class MyPlugin extends Plugin {
  async afterrAdd() {
    // \u52A0\u8F7D\u5176\u4ED6\u63D2\u4EF6
    this.app.pluginManager.add(Demo1Plugin);
    this.app.pluginManager.add(Demo2Plugin);
  }
}

export default MyPlugin;
`,paraId:4,tocIndex:2},{value:"beforeLoad",paraId:2},{value:"\u8C03\u7528\u65F6\u673A\uFF1A\u5728\u5168\u90E8\u63D2\u4EF6\u88AB\u6DFB\u52A0\u540E\uFF0C\u4F46\u6267\u884C load \u524D",paraId:5,tocIndex:3},{value:"\u7528\u4E8E\uFF1A\u7528\u4E8E\u5904\u7406\u5728\u4E4B\u524D ",paraId:5,tocIndex:3},{value:"load",paraId:5,tocIndex:3},{value:" \u4E4B\u524D\u7684\u4E00\u4E9B\u7279\u6B8A\u903B\u8F91",paraId:5,tocIndex:3},{value:"load",paraId:2},{value:"\u8C03\u7528\u65F6\u673A\uFF1A\u5168\u90E8\u63D2\u4EF6\u6267\u884C\u5B8C ",paraId:6,tocIndex:4},{value:"beforeLoad",paraId:6,tocIndex:4},{value:" \u540E",paraId:6,tocIndex:4},{value:"\u4F5C\u7528\uFF1A\u5927\u591A\u6570\u5BF9 app \u5B9E\u4F8B\u7684\u64CD\u4F5C\u548C\u65B9\u6CD5\u7684\u8C03\u7528\u90FD\u5E94\u5728\u6B64\u58F0\u660E\u5468\u671F\u5185",paraId:6,tocIndex:4},{value:`class MyPlugin extends Plugin {
  async load() {
    // \u6DFB\u52A0\u8DEF\u7531
    this.app.router.add();

    // \u6DFB\u52A0\u5168\u5C40\u7EC4\u4EF6
    this.app.addComponents({});

    //  \u6DFB\u52A0\u63D2\u4EF6\u914D\u7F6E\u9875
    this.app.pluginSettingsManager({});

    // ...
  }
}

export default MyPlugin;
`,paraId:7,tocIndex:4},{value:"\u6574\u4F53\u6267\u884C\u6D41\u7A0B\u4E3A\uFF1A",paraId:8,tocIndex:4},{value:"app.mount()/app.getRootComponent()",paraId:9,tocIndex:4},{value:" -> ",paraId:9,tocIndex:4},{value:"pluginList.forEach(plugin.afterAdd)",paraId:9,tocIndex:4},{value:"-> ",paraId:9,tocIndex:4},{value:"pluginList.forEach(plugin.beforeLoad)",paraId:9,tocIndex:4},{value:"-> ",paraId:9,tocIndex:4},{value:"pluginList.forEach(plugin.load)",paraId:9,tocIndex:4},{value:"\u540C\u4E00\u4E2A\u7C7B\u578B\u7684\u751F\u547D\u5468\u671F\uFF0C\u63D2\u4EF6\u5217\u8868\u7684\u6267\u884C\u5E76\u65E0\u5148\u540E\u987A\u5E8F\u3002",paraId:10,tocIndex:4},{value:"\u4F5C\u7528\uFF1A\u5BF9\u63D2\u4EF6\u8FDB\u884C\u589E\u5220\u6539\u67E5",paraId:11,tocIndex:5},{value:"\u573A\u666F\uFF1A\u5F53\u63D2\u4EF6\u6709\u62C6\u5206\u548C\u805A\u5408\u9700\u6C42\u65F6",paraId:11,tocIndex:5},{value:"\u5B9E\u4F8B\u65B9\u6CD5\uFF1Aapp.pluginManager",paraId:11,tocIndex:5},{value:"API \u8BE6\u7EC6\u4ECB\u7ECD\uFF1A",paraId:11,tocIndex:5},{value:"\u63D2\u4EF6\u7BA1\u7406",paraId:11,tocIndex:5},{value:"\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7 ",paraId:12,tocIndex:6},{value:"app.pluginManager.get",paraId:12,tocIndex:6},{value:" \u83B7\u53D6\u5BF9\u5E94\u63D2\u4EF6\u7684\u5B9E\u4F8B\uFF0C\u5E76\u4FEE\u6539\u63D2\u4EF6\u5B9E\u4F8B\u5C5E\u6027\u6216\u8005\u8C03\u7528\u5B9E\u4F8B\u4E0A\u7684\u65B9\u6CD5\u3002",paraId:12,tocIndex:6},{value:`import { DemoPlugin } from 'my-demo-plugin';

class MyPlugin extends Plugin {
  async load() {
    // \u901A\u8FC7 Class \u7C7B\u83B7\u53D6\u5B9E\u4F8B
    const demoPluginInstance = this.pm.get(DemoPlugin);

    // \u5982\u679C add \u65F6\u4F20\u9012\u4E86 name\uFF0C\u5219\u53EF\u4EE5\u901A\u8FC7 name \u5B57\u7B26\u4E32\u83B7\u53D6
    const demoPluginInstance = this.pm.get('DemoPlugin');

    // \u5BF9\u5B9E\u4F8B\u8FDB\u884C\u5904\u7406 ...
  }
}
`,paraId:13,tocIndex:6},{value:"\u5982\u679C\u9700\u8981\u5728\u7EC4\u4EF6\u5185\u83B7\u53D6\uFF0C\u53EF\u4EE5\u4F7F\u7528 ",paraId:14,tocIndex:6},{value:"usePlugin()",paraId:14,tocIndex:6},{value:" \u83B7\u53D6\u3002",paraId:14,tocIndex:6},{value:`import { usePlugin } from '@nocobase/client';
const Demo = () => {
  const myPlugin = usePlugin(MyPlugin); // \u901A\u8FC7 Class \u7C7B\u83B7\u53D6\u5B9E\u4F8B

  const myPlugin = usePlugin('MyPlugin'); // \u901A\u8FC7 name \u83B7\u53D6\u5B9E\u4F8B
};
`,paraId:15,tocIndex:6},{value:"\u6DFB\u52A0\u63D2\u4EF6\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u6DFB\u52A0\uFF0C\u4E5F\u53EF\u4EE5\u4F20\u9012\u7B2C\u4E8C\u4E2A\u53C2\u6570\uFF0C",paraId:16,tocIndex:7},{value:"name",paraId:16,tocIndex:7},{value:" \u65B9\u9762\u5176\u4ED6\u63D2\u4EF6\u83B7\u53D6\u3002",paraId:16,tocIndex:7},{value:"\u5927\u90E8\u5206\u60C5\u51B5\u4E0B\u662F\u4E0D\u9700\u8981\u4E86\u89E3\u8FD9\u4E2A\u80FD\u529B\u7684\uFF0C\u9664\u975E\u8981\u8FDB\u884C\u5C06\u4E00\u4E2A\u63D2\u4EF6\u62C6\u6210\u51E0\u4E2A\u3002",paraId:17,tocIndex:7},{value:`class MyPlugin extends Plugin {
  // \u6CE8\u610F\u8981\u5728 afterrAdd \u751F\u547D\u5468\u671F\u5185
  async afterrAdd() {
    this.app.pluginManager.add(DemoPlugin);
    this.app.pluginManager.add(DemoPlugin, { name: 'DemoPlugin' });
  }
}
`,paraId:18,tocIndex:7}]},395631:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Provider component",paraId:0},{value:"In the NocoBase client application, the ",paraId:1,tocIndex:0},{value:"Provider",paraId:1,tocIndex:0},{value:" component is defined in the outer layer, with the core structure as follows:",paraId:1,tocIndex:0},{value:`<Router>
  {' '}
  {/* Context Provider for routes */}
  <ProviderA>
    <ProviderB>
      {/* Custom Provider components - Opening tag */}
      <Routes />
      {/* Custom Provider components - Closing tag */}
    </ProviderB>
  </ProviderA>
</Router>
`,paraId:2,tocIndex:0},{value:"Since it is defined at the outer layer, the ",paraId:3,tocIndex:0},{value:"Provider",paraId:3,tocIndex:0},{value:" component serves the following purposes:",paraId:3,tocIndex:0},{value:"Provides globally shared context, rendering ",paraId:4,tocIndex:0},{value:"props.children",paraId:4,tocIndex:0},{value:" when needed.",paraId:4,tocIndex:0},{value:"Displays global content by rendering ",paraId:4,tocIndex:0},{value:"props.children",paraId:4,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"Acts as an interceptor, conditionally rendering ",paraId:4,tocIndex:0},{value:"props.children",paraId:4,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"Use ",paraId:5,tocIndex:1},{value:"createContext",paraId:5,tocIndex:1},{value:" to define a context and ",paraId:5,tocIndex:1},{value:"useContext",paraId:5,tocIndex:1},{value:" to retrieve the defined context:",paraId:5,tocIndex:1}]},470231:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase client extends pages through ",paraId:0,tocIndex:1},{value:"app.router.add()",paraId:0,tocIndex:1},{value:" and ",paraId:0,tocIndex:1},{value:"app.pluginSettingsManager.add()",paraId:0,tocIndex:1},{value:", for example:",paraId:0,tocIndex:1},{value:`import { Application, Plugin } from '@nocobase/client';
import React from 'react';

class PluginHello extends Plugin {
  async load() {
    this.router.add('hello', {
      path: '/',
      Component: () => <div>Hello NocoBase</div>,
    });

    this.app.pluginSettingsManager.add('hello', {
      title: 'Hello',
      icon: 'ApiOutlined',
      Component: () => <div>Hello Setting page</div>,
    });
  }
}
`,paraId:1,tocIndex:1},{value:"You can use the ",paraId:2,tocIndex:1},{value:"app.router.getRoutes()",paraId:2,tocIndex:1},{value:" method to view all registered pages.",paraId:2,tocIndex:1},{value:`import { Application, Plugin } from '@nocobase/client';
import React from 'react';

class PluginHello extends Plugin {
  async load() {
    console.log(this.app.router.getRoutes());
  }
}
`,paraId:3,tocIndex:1},{value:"The initially installed NocoBase has the following registered page routes:",paraId:4,tocIndex:2},{value:"Name",paraId:5,tocIndex:2},{value:"Path",paraId:5,tocIndex:2},{value:"Component",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"admin",paraId:5,tocIndex:2},{value:"/admin/*",paraId:5,tocIndex:2},{value:"AdminLayout",paraId:5,tocIndex:2},{value:"Admin page",paraId:5,tocIndex:2},{value:"admin.page",paraId:5,tocIndex:2},{value:"/admin/:name",paraId:5,tocIndex:2},{value:"AdminDynamicPage",paraId:5,tocIndex:2},{value:"Dynamic page",paraId:5,tocIndex:2},{value:"admin.settings",paraId:5,tocIndex:2},{value:"/admin/settings/*",paraId:5,tocIndex:2},{value:"AdminSettingsLayout",paraId:5,tocIndex:2},{value:"Plugin configuration page",paraId:5,tocIndex:2},{value:"admin.pm.list",paraId:5,tocIndex:2},{value:"/admin/pm/list/*",paraId:5,tocIndex:2},{value:"PluginManager",paraId:5,tocIndex:2},{value:"Plugin management page",paraId:5,tocIndex:2},{value:`router.add('admin', {
  path: '/admin/*',
  Component: AdminLayout,
});
`,paraId:6,tocIndex:3},{value:`router.add('admin.page', {
  path: '/admin/:name',
  Component: AdminDynamicPage,
});
`,paraId:7,tocIndex:4},{value:"Dynamic pages are managed through menu management, by adding menu items -> page addition.",paraId:8,tocIndex:4},{value:`router.add('admin.settings', {
  path: '/admin/settings/*',
  Component: AdminSettingsLayout,
});
`,paraId:9,tocIndex:5},{value:"Plugin configuration pages.",paraId:10,tocIndex:5},{value:"The menu and tabs for plugin configuration pages are registered via ",paraId:11,tocIndex:5},{value:"app.pluginSettingsManager",paraId:11,tocIndex:5},{value:".",paraId:11,tocIndex:5},{value:"Dynamic Schema pages are added through ",paraId:12,tocIndex:6},{value:"Add Menu Item",paraId:12,tocIndex:6},{value:" -> ",paraId:12,tocIndex:6},{value:"Page",paraId:12,tocIndex:6},{value:".",paraId:12,tocIndex:6},{value:"Regular pages are added through ",paraId:12,tocIndex:6},{value:"app.router.add()",paraId:12,tocIndex:6},{value:".",paraId:12,tocIndex:6},{value:"Plugin settings pages are added through ",paraId:12,tocIndex:6},{value:"app.pluginSettingsManager.add()",paraId:12,tocIndex:6},{value:".",paraId:12,tocIndex:6},{value:"Added through ",paraId:13,tocIndex:7},{value:"Add Menu Item",paraId:13,tocIndex:7},{value:" -> ",paraId:13,tocIndex:7},{value:"Page",paraId:13,tocIndex:7},{value:".",paraId:13,tocIndex:7},{value:"Pages are extended through ",paraId:14,tocIndex:8},{value:"app.router.add()",paraId:14,tocIndex:8},{value:".",paraId:14,tocIndex:8},{value:`import React from 'react';
import { Link, Outlet } from 'react-router-dom';
import { Application, Plugin } from '@nocobase/client';

const Home = () => <h1>Home</h1>;
const About = () => <h1>About</h1>;

const Layout = () => {
  return (
    <div>
      <div>
        <Link to={'/'}>Home</Link>, <Link to={'/about'}>About</Link>
      </div>
      <Outlet />
    </div>
  );
};

class MyPlugin extends Plugin {
    async load() {
        this.app.router.add('root', {
          element: <Layout />,
        });

        this.app.router.add('root.home', {
          path: '/',
          element: <Home />,
        });

        this.app.router.add('root.about', {
          path: '/about',
          element: <About />,
        });
    }
}

const app = new Application({
  router: {
    type: 'memory',
    initialEntries: ['/'],
  },
  plugins: [MyPlugin]
});


export default app.getRootComponent();
`,paraId:15,tocIndex:8},{value:"Plugin settings pages are added through ",paraId:16,tocIndex:9},{value:"app.pluginSettingsManager.add()",paraId:16,tocIndex:9},{value:".",paraId:16,tocIndex:9},{value:`import { Plugin } from '@nocobase/client';
import React from 'react';

const HelloSettingPage = () => <div>Hello Setting page</div>;

export class HelloPlugin extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add('hello', {
      title: 'Hello', // The title and menu name of the settings page
      icon: 'ApiOutlined', // Menu icon for the settings page
      Component: HelloSettingPage,
    });
  }
}
`,paraId:17,tocIndex:9},{value:"Multi-level routing usage",paraId:18,tocIndex:9},{value:`import { Outlet } from 'react-router-dom';

const pluginName = 'hello';

class HelloPlugin extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(pluginName, {
      title: 'HelloWorld',
      icon: '',
      Component: Outlet, // No need to pass, default is \`Outlet\` component
    });

    this.app.pluginSettingsManager.add(\`\${pluginName}.demo1\`, {
      title: 'Demo1 Page',
      Component: () => <div>Demo1 Page Content</div>,
    });

    this.app.pluginSettingsManager.add(\`\${pluginName}.demo2\`, {
      title: 'Demo2 Page',
      Component: () => <div>Demo2 Page Content</div>,
    });
  }
}
`,paraId:19,tocIndex:9}]},42357:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To better accommodate NocoBase's dynamic theme capabilities, it is recommended to use ",paraId:0,tocIndex:0},{value:"antd-style",paraId:0,tocIndex:0},{value:" when writing styles in the plugin. By combining it with the existing ",paraId:0,tocIndex:0},{value:"theme tokens",paraId:0,tocIndex:0},{value:", you can efficiently manage the dynamic aspects of themes. Additionally, NocoBase provides a ",paraId:0,tocIndex:0},{value:"theme editor plugin",paraId:1,tocIndex:0},{value:" that allows for easy style adjustments.",paraId:0,tocIndex:0},{value:"createStyles",paraId:2},{value:"For detailed usage, refer to the ",paraId:3},{value:"createStyles API",paraId:3},{value:".",paraId:3},{value:"createStylish",paraId:2},{value:"For detailed usage, refer to the ",paraId:4},{value:"createStylish API",paraId:4},{value:".",paraId:4},{value:"createGlobalStyle",paraId:2},{value:"For detailed usage, refer to the ",paraId:5},{value:"createGlobalStyle API",paraId:5},{value:".",paraId:5},{value:"antd",paraId:2},{value:"createStyles",paraId:2},{value:"createGlobalStyle",paraId:2}]},646380:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},526020:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"BlockItem",paraId:0,tocIndex:1},{value:"FormItem",paraId:0,tocIndex:1},{value:"CardItem",paraId:0,tocIndex:1},{value:"Page",paraId:1,tocIndex:2},{value:"Grid",paraId:1,tocIndex:2},{value:"Tabs",paraId:1,tocIndex:2},{value:"Space",paraId:1,tocIndex:2},{value:"Field components are generally not used alone but are utilized within data display components.",paraId:2,tocIndex:3},{value:"CollectionField: Universal component",paraId:3,tocIndex:3},{value:"Cascader",paraId:3,tocIndex:3},{value:"Checkbox",paraId:3,tocIndex:3},{value:"ColorSelect",paraId:3,tocIndex:3},{value:"DatePicker",paraId:3,tocIndex:3},{value:"Filter",paraId:3,tocIndex:3},{value:"Formula",paraId:3,tocIndex:3},{value:"IconPicker",paraId:3,tocIndex:3},{value:"Input",paraId:3,tocIndex:3},{value:"InputNumber",paraId:3,tocIndex:3},{value:"Markdown",paraId:3,tocIndex:3},{value:"Password",paraId:3,tocIndex:3},{value:"Percent",paraId:3,tocIndex:3},{value:"Radio",paraId:3,tocIndex:3},{value:"RecordPicker",paraId:3,tocIndex:3},{value:"RichText",paraId:3,tocIndex:3},{value:"Select",paraId:3,tocIndex:3},{value:"TimePicker",paraId:3,tocIndex:3},{value:"TreeSelect",paraId:3,tocIndex:3},{value:"Upload",paraId:3,tocIndex:3},{value:"These need to be used in conjunction with field components.",paraId:4,tocIndex:4},{value:"Calendar",paraId:5,tocIndex:4},{value:"Form",paraId:5,tocIndex:4},{value:"Kanban",paraId:5,tocIndex:4},{value:"Table",paraId:5,tocIndex:4},{value:"TableV2",paraId:5,tocIndex:4},{value:"Action",paraId:6,tocIndex:5},{value:"Action.Drawer",paraId:6,tocIndex:5},{value:"Action.Modal",paraId:6,tocIndex:5},{value:"ActionBar: Used for action layout",paraId:6,tocIndex:5},{value:"Menu",paraId:6,tocIndex:5},{value:"G2plot",paraId:7,tocIndex:6},{value:"Markdown.Void",paraId:7,tocIndex:6},{value:"x-designer",paraId:8},{value:"x-initializer",paraId:8},{value:"x-designer",paraId:9,tocIndex:7},{value:" is effective when ",paraId:9,tocIndex:7},{value:"x-decorator",paraId:9,tocIndex:7},{value:" or ",paraId:9,tocIndex:7},{value:"x-component",paraId:9,tocIndex:7},{value:" is one of the following components:",paraId:9,tocIndex:7},{value:"BlockItem",paraId:10,tocIndex:7},{value:"CardItem",paraId:10,tocIndex:7},{value:"FormItem",paraId:10,tocIndex:7},{value:"Table.Column",paraId:10,tocIndex:7},{value:"Tabs.TabPane",paraId:10,tocIndex:7},{value:"x-initializer",paraId:11,tocIndex:7},{value:" is effective when ",paraId:11,tocIndex:7},{value:"x-decorator",paraId:11,tocIndex:7},{value:" or ",paraId:11,tocIndex:7},{value:"x-component",paraId:11,tocIndex:7},{value:" is one of the following components:",paraId:11,tocIndex:7},{value:"ActionBar",paraId:12,tocIndex:7},{value:"BlockItem",paraId:12,tocIndex:7},{value:"CardItem",paraId:12,tocIndex:7},{value:"FormItem",paraId:12,tocIndex:7},{value:"Grid",paraId:12,tocIndex:7},{value:"Table",paraId:12,tocIndex:7},{value:"Tabs",paraId:12,tocIndex:7}]},283015:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides design capabilities for Schema through the ",paraId:0,tocIndex:0},{value:"createDesignable()",paraId:0,tocIndex:0},{value:" method.",paraId:0,tocIndex:0},{value:`import React from 'react';
import { Schema } from '@formily/json-schema';
import { createDesignable } from '@nocobase/client';

// Create a schema example
const current = new Schema({
  name: 'root',
  type: 'void',
  'x-component': 'Page',
});

// Create a designable for the current schema
const dn = createDesignable({
  current,
});

// Add a hello node inside the schema node
dn.insertAfterBegin({
  name: 'hello',
  type: 'void',
  'x-component': 'Hello',
});

console.log(current.toJSON());
{
  "name": "root",
  "type": "void",
  "x-component": "Page",
  "properties": {
    "hello": {
      "type": "void",
      "name": "hello",
      "x-component": "Hello",
      "x-index": 0
    }
  }
}
`,paraId:1,tocIndex:0},{value:"In the Schema component, ",paraId:2,tocIndex:0},{value:"useDesignable()",paraId:2,tocIndex:0},{value:" can be directly used to handle the current Schema node.",paraId:2,tocIndex:0},{value:`import React from 'react';
import { Button } from 'antd';
import {
  SchemaComponent,
  SchemaComponentProvider,
  useDesignable,
} from '@nocobase.client';

const Hello = () => <h1>Hello, world!</h1>;

const Page = (props) => {
  const dn = useDesignable();
  return (
    <div>
      <Button
        onClick={() => {
          dn.insertAfterBegin({
            type: 'void',
            'x-component': 'Hello',
          });
        }}
      >
        Click to add a child node
      </Button>
      {props.children}
    </div>
  );
};

const schema = {
  type: 'void',
  name: 'page',
  'x-component': 'Page',
};

export default () => {
  return (
    <SchemaComponentProvider components={{ Page, Hello }}>
      <SchemaComponent schema={schema} />
    </SchemaComponentProvider>
  );
};
`,paraId:3,tocIndex:0},{value:"createDesignable",paraId:4,tocIndex:1},{value:" requires the ",paraId:4,tocIndex:1},{value:"current",paraId:4,tocIndex:1},{value:" parameter, while ",paraId:4,tocIndex:1},{value:"useDesignable",paraId:4,tocIndex:1},{value:" is used directly on the current node without needing ",paraId:4,tocIndex:1},{value:"current",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"createDesignable",paraId:4,tocIndex:1},{value:" can be used in events, while ",paraId:4,tocIndex:1},{value:"useDesignable",paraId:4,tocIndex:1},{value:" is a React hook method that must be executed first.",paraId:4,tocIndex:1},{value:"createDesignable",paraId:4,tocIndex:1},{value:"'s ",paraId:4,tocIndex:1},{value:"current",paraId:4,tocIndex:1},{value:" can be any schema, while ",paraId:4,tocIndex:1},{value:"useDesignable",paraId:4,tocIndex:1},{value:" can only be the current schema.",paraId:4,tocIndex:1},{value:"Use cases:",paraId:5,tocIndex:1},{value:"If it's clear that the operation is on the current node, using ",paraId:6,tocIndex:1},{value:"useDesignable",paraId:6,tocIndex:1},{value:" is more convenient.",paraId:6,tocIndex:1},{value:"If the operation is not on the current node, ",paraId:6,tocIndex:1},{value:"createDesignable",paraId:6,tocIndex:1},{value:" is more appropriate.",paraId:6,tocIndex:1},{value:"If the operation is triggered by an event, such as drag and drop, ",paraId:6,tocIndex:1},{value:"createDesignable",paraId:6,tocIndex:1},{value:" is more suitable.",paraId:6,tocIndex:1},{value:"The design capabilities provided by designable for schema are reflected in:",paraId:7,tocIndex:2},{value:"Add: Insert at an adjacent position of the current node.",paraId:8,tocIndex:2},{value:"Query: Find child nodes.",paraId:8,tocIndex:2},{value:"Modify: Change schema parameters via patch.",paraId:8,tocIndex:2},{value:"Delete: Delete the current node or a specific child node.",paraId:8,tocIndex:2},{value:"Move: Move between nodes.",paraId:8,tocIndex:2},{value:"Similar to the DOM's ",paraId:9,tocIndex:3},{value:"insert adjacent",paraId:9,tocIndex:3},{value:" concept, Schema also provides the ",paraId:9,tocIndex:3},{value:"insertAdjacent()",paraId:9,tocIndex:3},{value:" method for resolving adjacent position insertion issues.",paraId:9,tocIndex:3},{value:"Four adjacent positions:",paraId:10,tocIndex:3},{value:`<!-- root -->
<div>
  <!-- beforeBegin Insert before the current node -->
  <p>
    <!-- afterBegin Insert before the first child of the current node -->
    ...
    <!-- beforeEnd Insert after the last child of the current node -->
  </p>
  <!-- afterEnd Insert after the current node -->
</div>
`,paraId:11,tocIndex:3},{value:"The Schema is written as follows:",paraId:12,tocIndex:3},{value:`{
  type: 'void',
  'x-component': 'div',
  properties: {
    // beforeBegin Insert before the current node
    node1: {
      type: 'void',
      'x-component': 'p',
      properties: {
        // afterBegin Insert before the first child of the current node
        // ...
        // beforeEnd Insert after the last child of the current node
      },
    },
    // afterEnd Insert after the current node
  },
}
`,paraId:13,tocIndex:3},{value:"Use ",paraId:14,tocIndex:3},{value:"useDesignable()",paraId:14,tocIndex:3},{value:" to insert at an adjacent position of the current schema.",paraId:14,tocIndex:3},{value:"Use ",paraId:15},{value:"createDesignable()",paraId:15},{value:" to insert at an adjacent position of a specified schema.",paraId:15},{value:"formily's json-schema provides ",paraId:16,tocIndex:4},{value:"reduceProperties",paraId:16,tocIndex:4},{value:" for traversing and finding nodes, but it's too cumbersome to use. Therefore, Designable provides easier-to-use ",paraId:16,tocIndex:4},{value:"findProperties",paraId:16,tocIndex:4},{value:" and ",paraId:16,tocIndex:4},{value:"findProperty",paraId:16,tocIndex:4},{value:" methods to find child nodes.",paraId:16,tocIndex:4},{value:"findProperties",paraId:17},{value:"Find all child nodes that meet the conditions and return an array.",paraId:18,tocIndex:5},{value:`interface FindOptions {
  // Filter conditions
  filter: any;
  // Elements to skip during the search
  skipOn?: (s: Schema) => boolean;
  // Exit when finding a certain element
  breakOn?: (s: Schema) => boolean;
  // Recursive search
  recursive?: boolean;
}

class Designable {
  findProperties(options: FindOptions): Schema[];
}
`,paraId:19,tocIndex:5},{value:"Example to find all nodes that meet the conditions:",paraId:20,tocIndex:5},{value:`const items = dn.findProperties({
  filter: {
    'x-component': 'Hello',
  },
});
// [current.properties.hello1, current.properties.hello2]
console.log(items.map((s) => schema.toJSON()));
[
  {
    name: 'hello1',
    type: 'void',
    'x-component': 'Hello',
  },
  {
    name: 'hello2',
    type: 'void',
    'x-component': 'Hello',
  },
];
`,paraId:21,tocIndex:5},{value:"findProperty",paraId:17},{value:"Find the first child node that meets the conditions.",paraId:22,tocIndex:6},{value:`interface FindOptions {
  // Filter conditions
  filter: any;
  // Elements to skip during the search
  skipOn?: (s: Schema) => boolean;
  // Exit when finding a certain element
  breakOn?: (s: Schema) => boolean;
  // Recursive search
  recursive?: boolean;
}

class Designable {
  findProperty(options: FindOptions): Schema | null;
}
`,paraId:23,tocIndex:6},{value:"Example:",paraId:24,tocIndex:6},{value:`const current = new Schema({
  name: 'root',
  type: 'void',
  'x-component': 'Page',
  properties: {
    hello1: {
      type: 'void',
      'x-component': 'Hello',
    },
    hello2: {
      type: 'void',
      'x-component': 'Hello',
    }
  }
});

const dn = createDesignable({ current });

const schema = dn.findProperty({
  filter: {
    'x-component': 'Hello',
  },
});
// current.properties.hello1
console.log(schema.toJSON());
{
  name: 'hello1',
  type: 'void',
  'x-component': 'Hello',
}
`,paraId:25,tocIndex:6},{value:`const current = new Schema({
  name: 'root',
  type: 'void',
  'x-component': 'Page',
});

const dn = createDesignable({
  current,
});

dn.deepMerge({
  'x-component-props': {},
});

dn.shallowMerge({
  'x-component-props': {},
});
`,paraId:26,tocIndex:7},{value:`const current = new Schema({
  name: 'root',
  type: 'void',
  'x-component': 'Page',
});

const dn = createDesignable({
  current,
});

dn.remove();

dn.remove({
  filter: (s) => boolean,
  skipOn: (s) => boolean,
  breakOn: (s) => boolean,
  recursive: true,
  removeParentsIfNoChildren: true,
});
`,paraId:27,tocIndex:8},{value:"insertAdjacent",paraId:28,tocIndex:9},{value:" and other methods can also be used for node drag and drop movement.",paraId:28,tocIndex:9},{value:`import React from 'react';
import { uid } from '@formily/shared';
import { observer, useField, useFieldSchema } from '@formily/react';
import {
  DndContext,
  DragEndEvent,
  useDraggable,
  useDroppable,
} from '@dnd-kit/core';
import {
  SchemaComponent,
  SchemaComponentProvider,
  createDesignable,
  useSchemaComponentContext,
} from '@nocobase/client';

const useDragEnd = () => {
  const { refresh } = useSchemaComponentContext();

  return ({ active, over }: DragEndEvent) => {
    const activeSchema = active?.data?.current?.schema;
    const overSchema = over?.data?.current?.schema;

    if (!activeSchema or !overSchema) {
      return;
    }

    if (activeSchema === overSchema) {
      return;
    }

    const dn = createDesignable({
      current: overSchema,
    });

    dn.on('insertAdjacent', refresh);
    dn.insertBeforeBeginOrAfterEnd(activeSchema);
  };
};

const Page = observer((props) => {
  return <DndContext onDragEnd={useDragEnd()}>{props.children}</DndContext>;
});

function Draggable(props) {
  const { attributes, listeners, setNodeRef, transform } = useDraggable({
    id: props.id,
    data: props.data,
  });
  const style = transform
    ? {
        transform: \`translate3d(\${transform.x}px, \${transform.y}px, 0)\`,
      }
    : undefined;

  return (
    <button ref={setNodeRef} style={style} {...listeners} {...attributes}>
      {props.children}
    </button>
  );
}

function Droppable(props) {
  const { isOver, setNodeRef } = useDroppable({
    id: props.id,
    data: props.data,
  });
  const style = {
    color: isOver ? 'green' : undefined,
  };

  return (
    <div ref={setNodeRef} style={style}>
      {props.children}
    </div>
  );
}

const Block = observer((props) => {
  const field = useField();
  const fieldSchema = useFieldSchema();
  return (
    <Droppable id={field.address.toString()} data={{ schema: fieldSchema }}>
      <div style={{ marginBottom: 20, padding: '20px', background: '#f1f1f1' }}>
        Block {fieldSchema.name}{' '}
        <Draggable id={field.address.toString()} data={{ schema: fieldSchema }}>
          Drag
        </Draggable>
      </div>
    </Droppable>
  );
});

export default function App() {
  return (
    <SchemaComponentProvider components={{ Page, Block }}>
      <SchemaComponent
        schema={{
          type: 'void',
          name: 'page',
          'x-component': 'Page',
          properties: {
            block1: {
              'x-component': 'Block',
            },
            block2: {
              'x-component': 'Block',
            },
            block3: {
              'x-component': 'Block',
            },
          },
        }}
      />
    </SchemaComponentProvider>
  );
}
`,paraId:29,tocIndex:9}]},671137:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In addition to native HTML tags, developers can adapt more custom components to enrich the Schema component library.",paraId:0,tocIndex:0},{value:"Common methods for extending components include:",paraId:1,tocIndex:0},{value:"connect",paraId:2,tocIndex:0},{value:": Non-intrusive integration with third-party components, generally used for adapting field components, often used in conjunction with ",paraId:2,tocIndex:0},{value:"mapProps",paraId:2,tocIndex:0},{value:" and ",paraId:2,tocIndex:0},{value:"mapReadPretty",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"observer",paraId:2,tocIndex:0},{value:": Used when the component uses observable objects internally, and you want the component to respond to changes in the observable objects.",paraId:2,tocIndex:0},{value:"Register an existing React component directly.",paraId:3,tocIndex:1},{value:"props.children",paraId:4,tocIndex:4},{value:" nesting is suitable for ",paraId:4,tocIndex:4},{value:"void",paraId:4,tocIndex:4},{value:" and ",paraId:4,tocIndex:4},{value:"object",paraId:4,tocIndex:4},{value:" type properties. For examples, see ",paraId:4,tocIndex:4},{value:"Nesting void and object type schema",paraId:5,tocIndex:4},{value:"<RecursionField />",paraId:4,tocIndex:4},{value:" for custom nesting, suitable for all types. For examples, see ",paraId:4,tocIndex:4},{value:"Nesting array type schema",paraId:6,tocIndex:4},{value:".",paraId:4,tocIndex:4},{value:"Note:",paraId:7,tocIndex:4},{value:"Properties other than ",paraId:8,tocIndex:4},{value:"void",paraId:8,tocIndex:4},{value:" and ",paraId:8,tocIndex:4},{value:"object",paraId:8,tocIndex:4},{value:" types cannot be directly rendered through ",paraId:8,tocIndex:4},{value:"props.children",paraId:8,tocIndex:4},{value:", but you can use ",paraId:8,tocIndex:4},{value:"<RecursionField />",paraId:8,tocIndex:4},{value:" to solve the nesting problem.",paraId:8,tocIndex:4},{value:"Only ",paraId:8,tocIndex:4},{value:"void",paraId:8,tocIndex:4},{value:" and ",paraId:8,tocIndex:4},{value:"object",paraId:8,tocIndex:4},{value:" type schemas can be used with ",paraId:8,tocIndex:4},{value:"onlyRenderProperties",paraId:8,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:`<RecursionField schema={schema} onlyRenderProperties />
`,paraId:9,tocIndex:4},{value:"Properties nodes can be adapted directly through ",paraId:10,tocIndex:5},{value:"props.children",paraId:10,tocIndex:5},{value:".",paraId:10,tocIndex:5},{value:"Rendering results comparison of various property types:",paraId:11},{value:"You can use ",paraId:12,tocIndex:6},{value:"<RecursionField />",paraId:12,tocIndex:6},{value:" to solve custom nesting issues.",paraId:12,tocIndex:6}]},34791:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After activating the UI configuration, the various visible orange buttons on the interface are Schema initializers, used for adding various blocks, fields, actions, etc., to the interface.",paraId:0,tocIndex:0},{value:"It is recommended to use the ",paraId:1,tocIndex:2},{value:"schemaInitializerManager.addItem()",paraId:2,tocIndex:2},{value:" method to add items. For detailed item configurations, refer to ",paraId:1,tocIndex:2},{value:"SchemaInitializer Item API",paraId:3,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:`class PluginDemoAddSchemaInitializerItem extends Plugin {
  async load() {
    this.schemaInitializerManager.addItem(
      'myInitializer', // Example of an existing schema initializer
      'otherBlocks.custom', // Add custom to the otherBlocks group
      {
        type: 'item',
        useComponentProps() {},
      },
    );
  }
}
`,paraId:4,tocIndex:2},{value:"For detailed parameters of SchemaInitializer, refer to ",paraId:5,tocIndex:3},{value:"SchemaInitializerOptions API",paraId:5,tocIndex:3},{value:".",paraId:5,tocIndex:3},{value:`const myInitializer = new SchemaInitializer({
  // Unique identifier for the initializer
  name: 'myInitializer',
  title: 'Add Block',
  // Wrapper, for example, inserting into a Grid requires using Grid.wrap (adds row and column tags)
  wrap: Grid.wrap,
  // Insertion position, defaults to beforeEnd, supports 'beforeBegin' | 'afterBegin' | 'beforeEnd' | 'afterEnd'
  insertPosition: 'beforeEnd',
  // Dropdown menu items
  items: [
    {
      name: 'a',
      type: 'item',
      useComponentProps() {},
    },
  ],
});
`,paraId:6,tocIndex:3},{value:"It is recommended to use ",paraId:7,tocIndex:4},{value:"schemaInitializerManager.add()",paraId:7,tocIndex:4},{value:" to add the new initializer to the application.",paraId:7,tocIndex:4},{value:`class PluginDemoAddSchemaInitializer extends Plugin {
  async load() {
    const myInitializer = new SchemaInitializer({
      name: 'myInitializer',
      title: 'Add block',
      wrap: Grid.wrap,
      items: [
        {
          name: 'helloBlock',
          type: 'item',
          useComponentProps() {
            const { insert } = useSchemaInitializer();
            return {
              title: 'Hello',
              onClick: () => {
                insert({
                  type: 'void',
                  'x-decorator': 'CardItem',
                  'x-component': 'h1',
                  'x-content': 'Hello, world!',
                });
              },
            };
          },
        },
      ],
    });
    this.schemaInitializerManager.add(myInitializer);
  }
}
`,paraId:8,tocIndex:4},{value:"SchemaInitializer is used in the Schema's ",paraId:9,tocIndex:5},{value:"x-initializer",paraId:9,tocIndex:5},{value:" parameter.",paraId:9,tocIndex:5},{value:"x-initializer",paraId:10},{value:"General Schema components that support ",paraId:11,tocIndex:6},{value:"x-initializer",paraId:11,tocIndex:6},{value:" include Grid, ActionBar, Tabs. For example:",paraId:11,tocIndex:6},{value:`{
  type: 'void',
  'x-component': 'Grid',
  'x-initializer': 'myInitializer',
}
`,paraId:12,tocIndex:6},{value:"x-initializer",paraId:10},{value:"If Grid, ActionBar, Tabs, and similar components do not meet your needs, you can use ",paraId:13,tocIndex:7},{value:"useSchemaInitializerRender()",paraId:13,tocIndex:7},{value:" to handle the rendering of ",paraId:13,tocIndex:7},{value:"x-initializer",paraId:13,tocIndex:7},{value:" in custom components.",paraId:13,tocIndex:7},{value:"SchemaInitializerManager",paraId:14,tocIndex:8},{value:"SchemaInitializer",paraId:14,tocIndex:8}]},704410:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Render registered components by configuring ",paraId:0,tocIndex:1},{value:"x-component",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"Key Concepts:",paraId:1,tocIndex:1},{value:"UI Schema Protocol",paraId:2,tocIndex:1},{value:"Schema Rendering",paraId:3,tocIndex:1},{value:"Extending Schema Components",paraId:4,tocIndex:1},{value:"Insert new components adjacent to existing Schemas by configuring ",paraId:5,tocIndex:2},{value:"x-initializer",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:"Key Concepts:",paraId:6,tocIndex:2},{value:"Designable Designer",paraId:7,tocIndex:2},{value:"UI Schema Protocol - x-initializer Parameter",paraId:8,tocIndex:2},{value:"SchemaInitializer",paraId:9,tocIndex:2},{value:"Provide a parameter configurator for Schema components by configuring ",paraId:10,tocIndex:3},{value:"x-settings",paraId:10,tocIndex:3},{value:". The designer toolbar has drag-and-drop functionality enabled by default.",paraId:10,tocIndex:3},{value:"Key Concepts:",paraId:11,tocIndex:3},{value:"UI Schema Protocol - x-settings Parameter",paraId:12,tocIndex:3},{value:"SchemaSettings",paraId:13,tocIndex:3},{value:"Dragging and Moving Existing Schema Nodes",paraId:14,tocIndex:3}]},574901:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Schema rendering involves several core components:",paraId:0,tocIndex:1},{value:"<SchemaComponentProvider />",paraId:1,tocIndex:1},{value:" provides the context needed for schema rendering.",paraId:1,tocIndex:1},{value:"<SchemaComponentOptions />",paraId:1,tocIndex:1},{value:" extends components and scopes, optional.",paraId:1,tocIndex:1},{value:"<SchemaComponent />",paraId:1,tocIndex:1},{value:" renders the schema, must be used within ",paraId:1,tocIndex:1},{value:"<SchemaComponentProvider />",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:"Basic usage is as follows:",paraId:2,tocIndex:1},{value:"For specific API details, refer to ",paraId:3},{value:"SchemaComponent",paraId:3},{value:".",paraId:3},{value:"Scope refers to variables or functions available within the schema. For example, the function ",paraId:4,tocIndex:2},{value:"t()",paraId:4,tocIndex:2},{value:" in the following example needs to be registered in the scope to render the title correctly.",paraId:4,tocIndex:2},{value:`<SchemaComponent
  scope={{ t }}
  schema={{
    title: '{{t("Hello")}}',
  }}
>
`,paraId:5,tocIndex:2},{value:"Components and scopes can be registered with SchemaComponentProvider, SchemaComponentOptions, and SchemaComponent. The differences are:",paraId:6,tocIndex:3},{value:"SchemaComponentProvider provides the top-level context.",paraId:7,tocIndex:3},{value:"SchemaComponentOptions is used to replace and extend the local context.",paraId:7,tocIndex:3},{value:"SchemaComponent provides the current schema's context.",paraId:7,tocIndex:3},{value:"For example:",paraId:8,tocIndex:3},{value:`<SchemaComponentProvider components={{ ComponentA }}>
  <SchemaComponent components={{ ComponentB }} schema={schema1}>
  <SchemaComponent components={{ ComponentC }} schema={schema2}>
  <SchemaComponentOptions components={{ ComponentD }}>
    <SchemaComponent components={{ ComponentE }} schema={schema3}>
    <SchemaComponent components={{ ComponentF }} schema={schema4}>
  </SchemaComponentOptions>
</SchemaComponentProvider>
`,paraId:9,tocIndex:3},{value:"schema1 can use ComponentA and ComponentB",paraId:10,tocIndex:3},{value:"schema2 can use ComponentA and ComponentC",paraId:10,tocIndex:3},{value:"schema3 can use ComponentA, ComponentD, and ComponentE",paraId:10,tocIndex:3},{value:"schema4 can use ComponentA, ComponentD, and ComponentF",paraId:10,tocIndex:3},{value:"The Application in the NocoBase client has built-in SchemaComponentProvider components in its Providers.",paraId:11,tocIndex:4},{value:`class Application {
  // Default Providers
  addDefaultProviders() {
    this.addProvider(SchemaComponentProvider, {
      scopes: this.scopes,
      components: this.components,
    });
  }
}
`,paraId:12,tocIndex:4},{value:"The final rendering component structure is as follows:",paraId:13,tocIndex:4},{value:`<Router>
  {/* Context Provider for routing */}
  <SchemaComponentProvider components={app.components} scopes={app.scopes}>
    {/* Custom Provider components - start tag */}
    <Routes />
    {/* Custom Provider components - end tag */}
  </SchemaComponentProvider>
</Router>
`,paraId:14,tocIndex:4},{value:"When using it within the application, you don't need to wrap it with SchemaComponentProvider; you can directly use SchemaComponent.",paraId:15,tocIndex:4},{value:"In the application's lifecycle methods, you can use ",paraId:16},{value:"app.addComponents()",paraId:16},{value:" and ",paraId:16},{value:"app.addScopes()",paraId:16},{value:" to extend global components and scopes.",paraId:16},{value:`class PluginHello extends Plugin {
  async load() {
    this.app.addComponents({
      // Extended components
    });
    this.app.addScopes({
      // Extended scope
    });
  }
}
`,paraId:17}]},804058:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After activating the UI configuration, when the mouse moves over a specific block, field, or action, the corresponding Schema toolbar will be displayed. The settings button in the toolbar is the settings component for the current Schema.",paraId:0,tocIndex:0},{value:"It is recommended to use the ",paraId:1,tocIndex:2},{value:"schemaSettingsManager.addItem()",paraId:1,tocIndex:2},{value:" method to add settings items. For detailed item configurations, refer to ",paraId:1,tocIndex:2},{value:"SchemaSettings Item API",paraId:2,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:`class PluginDemoAddSchemaSettingsItem extends Plugin {
  async load() {
    this.schemaSettingsManager.addItem(
      'mySettings', // Example of existing schema settings
      'customItem',
      {
        type: 'item',
        useComponentProps() {},
      },
    );
  }
}
`,paraId:3,tocIndex:2},{value:"For detailed parameters of SchemaSettings, refer to ",paraId:4,tocIndex:3},{value:"SchemaSettingsOptions API",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:`const mySettings = new SchemaSettings({
  // Must be a unique identifier
  name: 'mySettings',
  // Dropdown menu items
  items: [
    {
      name: 'edit',
      type: 'item',
      useComponentProps() {},
    },
  ],
});
`,paraId:5,tocIndex:3},{value:"It is recommended to use ",paraId:6,tocIndex:4},{value:"schemaSettingsManager.add()",paraId:6,tocIndex:4},{value:" to add the new settings to the application.",paraId:6,tocIndex:4},{value:`class PluginDemoAddSchemaSettings extends Plugin {
  async load() {
    // Register global components
    this.app.addComponents({ CardItem, HomePage });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [
        {
          type: 'item',
          name: 'edit',
          useComponentProps() {
            // TODO: Add relevant settings logic
            return {
              title: 'Edit',
              onClick() {
                // todo
              },
            };
          },
        },
      ],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}
`,paraId:7,tocIndex:4},{value:"The added SchemaSettings can be used in the Schema's ",paraId:8,tocIndex:5},{value:"x-settings",paraId:8,tocIndex:5},{value:" parameter. Not all components support ",paraId:8,tocIndex:5},{value:"x-settings",paraId:8,tocIndex:5},{value:"; it is usually used in combination with wrapper components such as BlockItem, FormItem, CardItem. In custom components, you can also use ",paraId:8,tocIndex:5},{value:"useSchemaSettingsRender()",paraId:8,tocIndex:5},{value:" to handle the rendering of ",paraId:8,tocIndex:5},{value:"x-settings",paraId:8,tocIndex:5},{value:" independently.",paraId:8,tocIndex:5},{value:"x-settings",paraId:9},{value:"In most scenarios, ",paraId:10,tocIndex:6},{value:"x-settings",paraId:10,tocIndex:6},{value:" need to be used in combination with wrapper components such as BlockItem, FormItem, CardItem. For example:",paraId:10,tocIndex:6},{value:`{
  type: 'void',
  'x-settings': 'mySettings',
  'x-decorator': 'CardItem',
  'x-component': 'Hello',
}
`,paraId:11,tocIndex:6},{value:"x-settings",paraId:9},{value:"If the wrapper components like BlockItem, FormItem, CardItem do not meet your needs, you can use ",paraId:12,tocIndex:7},{value:"useSchemaSettingsRender()",paraId:12,tocIndex:7},{value:" to handle the rendering of ",paraId:12,tocIndex:7},{value:"x-settings",paraId:12,tocIndex:7},{value:".",paraId:12,tocIndex:7},{value:"In most scenarios, settings are placed on the SchemaToolbar, so supporting ",paraId:13},{value:"x-toolbar",paraId:13},{value:" for custom components can also indirectly support ",paraId:13},{value:"x-settings",paraId:13},{value:". For more usage details, refer to ",paraId:13},{value:"Schema toolbar",paraId:14},{value:".",paraId:13},{value:"Use ",paraId:15,tocIndex:8},{value:"useSchemaSettings()",paraId:15,tocIndex:8},{value:" to get the current Schema's ",paraId:15,tocIndex:8},{value:"Designable",paraId:15,tocIndex:8},{value:", and operate the Schema through ",paraId:15,tocIndex:8},{value:"Designable",paraId:15,tocIndex:8},{value:". Common APIs include:",paraId:15,tocIndex:8},{value:"dn.insertAdjacent()",paraId:16,tocIndex:8},{value:"dn.getSchemaAttribute()",paraId:16,tocIndex:8},{value:"dn.shallowMerge()",paraId:16,tocIndex:8},{value:"dn.deepMerge()",paraId:16,tocIndex:8},{value:"dn.findOne()",paraId:16,tocIndex:8},{value:"dn.find()",paraId:16,tocIndex:8},{value:"dn.remove()",paraId:16,tocIndex:8},{value:"dn.remove()",paraId:16,tocIndex:8},{value:"For more details, refer to:",paraId:17,tocIndex:8},{value:"Designable Designer",paraId:18,tocIndex:8},{value:"Designable API",paraId:19,tocIndex:8},{value:"SchemaSettingsManager",paraId:20,tocIndex:9},{value:"SchemaSettings",paraId:20,tocIndex:9},{value:"Designable",paraId:20,tocIndex:9}]},215787:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After activating the UI configuration, a toolbar corresponding to the Schema will appear when the mouse hovers over the specified block, field, or action.",paraId:0,tocIndex:0},{value:"The toolbar consists of:",paraId:1,tocIndex:0},{value:"Title, default is empty",paraId:2,tocIndex:0},{value:"Drag control, providing drag capability, default is draggable",paraId:2,tocIndex:0},{value:"Initializer, default is empty",paraId:2,tocIndex:0},{value:"Settings, default is empty",paraId:2,tocIndex:0},{value:`<SchemaToolbar
  title="Title"
  draggable
  initialize={'myInitializer'}
  settings={'mySettings'}
/>
`,paraId:3,tocIndex:0},{value:"The SchemaToolbar component is used in ",paraId:4,tocIndex:1},{value:"x-toolbar",paraId:4,tocIndex:1},{value:", for example:",paraId:4,tocIndex:1},{value:`// Using the built-in SchemaToolbar
{
  'x-toolbar': 'SchemaToolbar',
  'x-toolbar-props': {},
}
// Custom SchemaToolbar
{
  'x-toolbar': 'MySchemaToolbar',
  'x-toolbar-props': {},
}
`,paraId:5,tocIndex:1},{value:"x-toolbar",paraId:6},{value:"BlockItem",paraId:7,tocIndex:2},{value:" (wrapper component, generally used in ",paraId:7,tocIndex:2},{value:"x-decorator",paraId:7,tocIndex:2},{value:")",paraId:7,tocIndex:2},{value:"CardItem",paraId:7,tocIndex:2},{value:" (wrapper component, generally used in ",paraId:7,tocIndex:2},{value:"x-decorator",paraId:7,tocIndex:2},{value:")",paraId:7,tocIndex:2},{value:"FormItem",paraId:7,tocIndex:2},{value:" (wrapper component, generally used in ",paraId:7,tocIndex:2},{value:"x-decorator",paraId:7,tocIndex:2},{value:")",paraId:7,tocIndex:2},{value:"Action",paraId:7,tocIndex:2},{value:" (action button component, used in ",paraId:7,tocIndex:2},{value:"x-component",paraId:7,tocIndex:2},{value:")",paraId:7,tocIndex:2},{value:"If the schema's ",paraId:8,tocIndex:2},{value:"x-component",paraId:8,tocIndex:2},{value:" or ",paraId:8,tocIndex:2},{value:"x-decorator",paraId:8,tocIndex:2},{value:" uses the above components and ",paraId:8,tocIndex:2},{value:"x-settings",paraId:8,tocIndex:2},{value:" is configured, ",paraId:8,tocIndex:2},{value:"x-toolbar",paraId:8,tocIndex:2},{value:" can be omitted, and the built-in ",paraId:8,tocIndex:2},{value:"SchemaToolbar",paraId:8,tocIndex:2},{value:" will be used by default.",paraId:8,tocIndex:2},{value:"You can also customize the toolbar component.",paraId:9},{value:"When used in a Grid layout, schemas within the rows and columns will inherit the Grid's ",paraId:10},{value:"x-initializer",paraId:10},{value:".",paraId:10},{value:"x-toolbar",paraId:6}]},663782:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A protocol for describing frontend components, based on Formily Schema 2.0, in a JSON Schema style.",paraId:0,tocIndex:0},{value:`interface ISchema {
  type: 'void' | 'string' | 'number' | 'object' | 'array';
  name?: string;
  title?: any;
  // Decorator component
  ['x-decorator']?: string;
  // Decorator component properties
  ['x-decorator-props']?: any;
  // Dynamic decorator component properties
  ['x-use-decorator-props']?: any;
  // Component
  ['x-component']?: string;
  // Component properties
  ['x-component-props']?: any;
  // Dynamic component properties
  ['x-use-component-props']?: any;
  // Display state, default is 'visible'
  ['x-display']?: 'none' | 'hidden' | 'visible';
  // Component's child nodes, simple usage
  ['x-content']?: any;
  // children node schema
  properties?: Record<string, ISchema>;

  // Below are only used for field components

  // Field reactions
  ['x-reactions']?: SchemaReactions;
  // Field UI interaction mode, default is 'editable'
  ['x-pattern']?: 'editable' | 'disabled' | 'readPretty';
  // Field validation
  ['x-validator']?: Validator;
  // Default data
  default?: any;

  // For designer related

  // Initializer, determines what can be inserted adjacent to the current schema
  ['x-initializer']?: string;
  ['x-initializer-props']?: any;

  // Block settings, determines what parameters can be configured for the current schema
  ['x-settings']?: string;
  ['x-settings-props']?: any;

  // Toolbar component
  ['x-toolbar']?: string;
  ['x-toolbar-props']?: any;
}
`,paraId:1,tocIndex:0},{value:"All native HTML tags can be written as schemas. For example:",paraId:2,tocIndex:2},{value:`{
  type: 'void',
  'x-component': 'h1',
  'x-content': 'Hello, world!',
}
`,paraId:3,tocIndex:2},{value:"JSX Example",paraId:4,tocIndex:2},{value:`<h1>Hello, world!</h1>
`,paraId:5,tocIndex:2},{value:"Children components are written in properties",paraId:6,tocIndex:3},{value:`{
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      'x-component': 'input',
    },
  },
}
`,paraId:7,tocIndex:3},{value:"Equivalent JSX",paraId:8,tocIndex:3},{value:`<div className={'form-item'}>
  <input name={'title'} />
</div>
`,paraId:9,tocIndex:3},{value:"type",paraId:10},{value:"Type of the node",paraId:11,tocIndex:5},{value:`type SchemaTypes =
  | 'string'
  | 'object'
  | 'array'
  | 'number'
  | 'boolean'
  | 'void';
interface ISchema {
  type?: SchemaTypes;
}
`,paraId:12,tocIndex:5},{value:"name",paraId:10},{value:"Schema name",paraId:13,tocIndex:6},{value:`type SchemaName = string;
interface ISchema {
  name?: SchemaName; // Root node
  properties?: {
    [name: SchemaName]?: ISchema; // Child node
  }
};
`,paraId:14,tocIndex:6},{value:"All schemas have a name, and child node names are also the keys of properties",paraId:15,tocIndex:6},{value:`{
  name: 'root',
  properties: {
    child1: {
      // No need to write name here
    },
  },
}
`,paraId:16,tocIndex:6},{value:"title",paraId:10},{value:"Node title",paraId:17,tocIndex:7},{value:`type SchemaTitle = string;
interface ISchema {
  title?: SchemaTitle;
}
`,paraId:18,tocIndex:7},{value:"properties",paraId:10},{value:"Children components can be written in properties",paraId:19,tocIndex:8},{value:`{
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      'x-component': 'input',
    },
  },
}
`,paraId:20,tocIndex:8},{value:"Equivalent JSX",paraId:21,tocIndex:8},{value:`<div className={'form-item'}>
  <input name={'title'} />
</div>
`,paraId:22,tocIndex:8},{value:"x-component",paraId:10},{value:"Component",paraId:23,tocIndex:9},{value:`type Component = any;
interface ISchema {
  ['x-component']?: Component;
}
`,paraId:24,tocIndex:9},{value:"All native HTML tags can be written as schemas. For example:",paraId:25,tocIndex:9},{value:`{
  type: 'void',
  'x-component': 'h1',
  'x-content': 'Hello, world!',
}
`,paraId:26,tocIndex:9},{value:"JSX Example",paraId:27,tocIndex:9},{value:`<h1>Hello, world!</h1>
`,paraId:28,tocIndex:9},{value:"x-component-props",paraId:10},{value:"x-use-component-props",paraId:10},{value:"x-component-props",paraId:29,tocIndex:10},{value:" are component properties.",paraId:29,tocIndex:10},{value:`{
  type: 'void',
  'x-component': 'Table',
  'x-component-props': {
    loading: true,
  },
}
`,paraId:30,tocIndex:10},{value:"In some cases, component properties are dynamic, so you can use ",paraId:31,tocIndex:10},{value:"x-use-component-props",paraId:31,tocIndex:10},{value:".",paraId:31,tocIndex:10},{value:`{
  type: 'void',
  'x-component': 'MyTable',
  'x-use-component-props': 'useTableProps',
}
`,paraId:32,tocIndex:10},{value:"The ",paraId:33,tocIndex:10},{value:"MyTable",paraId:33,tocIndex:10},{value:" component needs to be wrapped with a higher-order function ",paraId:33,tocIndex:10},{value:"withDynamicSchemaProps",paraId:33,tocIndex:10},{value:". For example:",paraId:33,tocIndex:10},{value:`const MyTable = withDynamicSchemaProps(Table, { displayName: 'MyTable' });
`,paraId:34,tocIndex:10},{value:"useTableProps",paraId:35,tocIndex:10},{value:" is a custom hook for dynamically generating component properties.",paraId:35,tocIndex:10},{value:`const useTableProps = () => {
  const service = useRequest({xx});
  return {
    loading: service.loading,
  };
};
`,paraId:36,tocIndex:10},{value:"You also need to register it in the scope, refer to the documentation ",paraId:37,tocIndex:10},{value:"Schema Rendering",paraId:38,tocIndex:10},{value:".",paraId:37,tocIndex:10},{value:`<SchemaComponent
  scope={{ useTableProps }}
  components={{ MyTable }}
  schema={{
    type: 'void',
    'x-component': 'MyTable',
    'x-use-component-props': 'useTableProps',
  }}
>
`,paraId:39,tocIndex:10},{value:"x-decorator",paraId:10},{value:"Decorator component",paraId:40,tocIndex:11},{value:`type Decorator = any;
interface ISchema {
  ['x-decorator']?: Decorator;
}
`,paraId:41,tocIndex:11},{value:"The combination of x-decorator and x-component allows you to place two components in one schema node, reducing schema structure complexity and increasing component reusability.",paraId:42,tocIndex:11},{value:"For example, in a form scenario, you can combine the FormItem component with any field component, where FormItem is the Decorator.",paraId:43,tocIndex:11},{value:`{
  type: 'void',
  ['x-component']: 'div',
  properties: {
    title: {
      type: 'string',
      'x-decorator': 'FormItem',
      'x-component': 'Input',
    },
    content: {
      type: 'string',
      'x-decorator': 'FormItem',
      'x-component': 'Input.TextArea',
    },
  },
}
`,paraId:44,tocIndex:11},{value:"Equivalent JSX",paraId:45,tocIndex:11},{value:`<div>
  <FormItem>
    <Input name={'title'} />
  </FormItem>
  <FormItem>
    <Input.TextArea name={'content'} />
  </FormItem>
</div>
`,paraId:46,tocIndex:11},{value:"You can also provide a CardItem component to wrap all blocks, so all blocks are wrapped by Card.",paraId:47,tocIndex:11},{value:`{
  type: 'void',
  ['x-component']: 'div',
  properties: {
    table: {
      type: 'array',
      'x-decorator': 'CardItem',
      'x-component': 'Table',
    },
    kanban: {
      type: 'array',
      'x-decorator': 'CardItem',
      'x-component': 'Kanban',
    },
  },
}
`,paraId:48,tocIndex:11},{value:"Equivalent JSX",paraId:49,tocIndex:11},{value:`<div>
  <CardItem>
    <Table />
  </CardItem>
  <CardItem>
    <Kanban />
  </CardItem>
</div>
`,paraId:50,tocIndex:11},{value:"x-decorator-props",paraId:10},{value:"x-use-decorator-props",paraId:10},{value:"Use similarly to ",paraId:51,tocIndex:12},{value:"x-component-props",paraId:51,tocIndex:12},{value:" and ",paraId:51,tocIndex:12},{value:"x-use-component-props",paraId:51,tocIndex:12},{value:". The ",paraId:51,tocIndex:12},{value:"withDynamicSchemaProps()",paraId:51,tocIndex:12},{value:" higher-order function needs to be used for decorator components.",paraId:51,tocIndex:12},{value:"x-display",paraId:10},{value:"Component display state",paraId:52,tocIndex:13},{value:"'x-display': 'visible'",paraId:53,tocIndex:13},{value:": Show component",paraId:53,tocIndex:13},{value:"'x-display': 'hidden'",paraId:53,tocIndex:13},{value:": Hide component, data is not hidden",paraId:53,tocIndex:13},{value:"'x-display': 'none'",paraId:53,tocIndex:13},{value:": Hide component, data is also hidden",paraId:53,tocIndex:13},{value:"'x-display': 'visible'",paraId:10},{value:`{
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      'x-component': 'input',
      'x-display': 'visible'
    },
  },
}
`,paraId:54,tocIndex:14},{value:"Equivalent JSX",paraId:55,tocIndex:14},{value:`<div className={'form-item'}>
  <input name={'title'} />
</div>
`,paraId:56,tocIndex:14},{value:"'x-display': 'hidden'",paraId:10},{value:`{
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      'x-component': 'input',
      'x-display': 'hidden'
    },
  },
}
`,paraId:57,tocIndex:15},{value:"Equivalent JSX",paraId:58,tocIndex:15},{value:`<div className={'form-item'}>
  {/* No input component is output here, but the field model with name=title still exists */}
</div>
`,paraId:59,tocIndex:15},{value:"'x-display': 'none'",paraId:10},{value:`{
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      'x-component': 'input',
      'x-display': 'none'
    },
  },
}
`,paraId:60,tocIndex:16},{value:"Equivalent JSX",paraId:61,tocIndex:16},{value:`<div className={'form-item'}>
  {/* No input component is output here, and the field model with name=title does not exist */}
</div>
`,paraId:62,tocIndex:16},{value:"x-pattern",paraId:10},{value:"Component display mode",paraId:63,tocIndex:17},{value:"Used for field components, there are three display modes:",paraId:64,tocIndex:17},{value:"'x-pattern': 'editable'",paraId:65,tocIndex:17},{value:": Editable",paraId:65,tocIndex:17},{value:"'x-pattern': 'disabled'",paraId:65,tocIndex:17},{value:": Non-editable",paraId:65,tocIndex:17},{value:"'x-pattern': 'readPretty'",paraId:65,tocIndex:17},{value:": Read-only",paraId:65,tocIndex:17},{value:"For example, the single-line text ",paraId:66,tocIndex:17},{value:"<SingleText />",paraId:66,tocIndex:17},{value:" component, editable and non-editable modes are ",paraId:66,tocIndex:17},{value:"<input />",paraId:66,tocIndex:17},{value:", read-only mode is ",paraId:66,tocIndex:17},{value:"<div />",paraId:66,tocIndex:17},{value:".",paraId:66,tocIndex:17},{value:"'x-pattern': 'editable'",paraId:10},{value:`const schema = {
  name: 'test',
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      default: 'Hello',
      'x-component': 'SingleText',
      'x-pattern': 'editable',
    },
  },
};
`,paraId:67,tocIndex:18},{value:"Equivalent JSX",paraId:68,tocIndex:18},{value:`<div className={'form-item'}>
  <input name={'title'} value={'Hello'} />
</div>
`,paraId:69,tocIndex:18},{value:"'x-pattern': 'disabled'",paraId:10},{value:`const schema = {
  name: 'test',
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      default: 'Hello',
      'x-component': 'SingleText',
      'x-pattern': 'disabled',
    },
  },
};
`,paraId:70,tocIndex:19},{value:"Equivalent JSX",paraId:71,tocIndex:19},{value:`<div className={'form-item'}>
  <input name={'title'} value={'Hello'} disabled />
</div>
`,paraId:72,tocIndex:19},{value:"'x-pattern': 'readPretty'",paraId:10},{value:`const schema = {
  name: 'test',
  type: 'void',
  'x-component': 'div',
  'x-component-props': { className: 'form-item' },
  properties: {
    title: {
      type: 'string',
      default: 'Hello',
      'x-component': 'SingleText',
      'x-pattern': 'readPretty',
    },
  },
};
`,paraId:73,tocIndex:20},{value:"Equivalent JSX",paraId:74,tocIndex:20},{value:`<div className={'form-item'}>
  <div>Hello</div>
</div>
`,paraId:75,tocIndex:20},{value:"x-initializer",paraId:10},{value:"Not all components support ",paraId:76,tocIndex:21},{value:"x-initializer",paraId:76,tocIndex:21},{value:". Among existing common schema components, only Grid, ActionBar, and Tabs support the ",paraId:76,tocIndex:21},{value:"x-initializer",paraId:76,tocIndex:21},{value:" parameter.",paraId:76,tocIndex:21},{value:`{
  type: 'void',
  'x-component': 'Grid',
  'x-initializer': 'myInitializer',
}
`,paraId:77,tocIndex:21},{value:"Custom components can also use ",paraId:78,tocIndex:21},{value:"useSchemaInitializerRender()",paraId:78,tocIndex:21},{value:" to handle ",paraId:78,tocIndex:21},{value:"x-initializer",paraId:78,tocIndex:21},{value:" rendering. Refer to the ",paraId:78,tocIndex:21},{value:"SchemaInitializer Initializer",paraId:79,tocIndex:21},{value:" section for detailed usage.",paraId:78,tocIndex:21},{value:"x-settings",paraId:10},{value:"Not all components support ",paraId:80,tocIndex:22},{value:"x-settings",paraId:80,tocIndex:22},{value:". Usually, it needs to be combined with wrapper components such as BlockItem, FormItem, CardItem.",paraId:80,tocIndex:22},{value:`{
  type: 'void',
  'x-settings': 'mySettings',
  'x-decorator': 'CardItem',
  'x-component': 'Hello',
}
`,paraId:81,tocIndex:22},{value:"Custom components can also use ",paraId:82,tocIndex:22},{value:"useSchemaSettingsRender()",paraId:82,tocIndex:22},{value:" to handle ",paraId:82,tocIndex:22},{value:"x-settings",paraId:82,tocIndex:22},{value:" rendering. Refer to the ",paraId:82,tocIndex:22},{value:"SchemaSettings Configurator",paraId:83,tocIndex:22},{value:" section for detailed usage.",paraId:82,tocIndex:22},{value:"x-toolbar",paraId:10},{value:"Not all components support ",paraId:84,tocIndex:23},{value:"x-toolbar",paraId:84,tocIndex:23},{value:". Usually, it needs to be combined with wrapper components such as BlockItem, FormItem, CardItem.",paraId:84,tocIndex:23},{value:`{
  type: 'void',
  'x-toolbar': 'HelloToolbar',
  'x-decorator': 'CardItem',
  'x-component': 'Hello',
}
`,paraId:85,tocIndex:23},{value:"Custom components can also use ",paraId:86,tocIndex:23},{value:"useToolbarRender()",paraId:86,tocIndex:23},{value:" to handle ",paraId:86,tocIndex:23},{value:"x-toolbar",paraId:86,tocIndex:23},{value:" rendering. Refer to the ",paraId:86,tocIndex:23},{value:"SchemaToolbar Toolbar",paraId:87,tocIndex:23},{value:" section for detailed usage.",paraId:86,tocIndex:23}]},798252:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Collection \u548C Association \u8D44\u6E90\u901A\u7528\u3002",paraId:0,tocIndex:1},{value:"create",paraId:1},{value:`POST  /api/users:create?whitelist=a,b&blacklist=c,d

{} # Request Body
`,paraId:2,tocIndex:2},{value:`Parameters
`,paraId:3,tocIndex:2},{value:"whitelist \u767D\u540D\u5355",paraId:4,tocIndex:2},{value:"blacklist \u9ED1\u540D\u5355",paraId:4,tocIndex:2},{value:"Request body: \u5F85\u63D2\u5165\u7684 JSON \u6570\u636E",paraId:3,tocIndex:2},{value:"Response body data: \u5DF2\u521B\u5EFA\u7684\u6570\u636E JSON",paraId:3,tocIndex:2},{value:`POST  /api/users:create

Request Body
{
  "email": "demo@nocobase.com",
  "name": "Admin"
}

Response 200 (application/json)
{
  "data": {},
}
`,paraId:5,tocIndex:3},{value:`POST  /api/users/1/posts:create

Request Body
{
  "title": "My first post"
}

Response 200 (application/json)
{
  "data": {}
}
`,paraId:6,tocIndex:4},{value:`POST  /api/posts:create

Request Body
{
  "title": "My first post",
  "user": 1
}

Response 200 (application/json)
{
  "data": {
    "id": 1,
    "title": "My first post",
    "userId": 1,
    "user": {
      "id": 1
    }
  }
}
`,paraId:7,tocIndex:5},{value:"update",paraId:1},{value:`POST  /api/users:create?filterByTk=1&whitelist=a,b&blacklist=c,d

{} # Request Body
`,paraId:8,tocIndex:6},{value:`Parameters
`,paraId:9,tocIndex:6},{value:"whitelist \u767D\u540D\u5355",paraId:10,tocIndex:6},{value:"blacklist \u9ED1\u540D\u5355",paraId:10,tocIndex:6},{value:"filterByTk \u6839\u636E tk \u5B57\u6BB5\u8FC7\u6EE4\uFF0C\u9ED8\u8BA4\u60C5\u51B5 tk \u4E3A\u6570\u636E\u8868\u7684\u4E3B\u952E",paraId:10,tocIndex:6},{value:"filter \u8FC7\u6EE4\uFF0C\u652F\u6301 json string",paraId:10,tocIndex:6},{value:"Request body: \u5F85\u66F4\u65B0\u7684 JSON \u6570\u636E",paraId:9,tocIndex:6},{value:`POST  /api/posts:update/1

Request Body
{
  "title": "My first post 2",
  "user": 2
}

Response 200 (application/json)
{
  "data": [
    {
      "id": 1,
      "title": "My first post 2",
      "userId": 2,
      "user": {
        "id": 2
      }
    }
  ]
}
`,paraId:11,tocIndex:7},{value:"list",paraId:1},{value:"get",paraId:1},{value:"destroy",paraId:1},{value:"move",paraId:1},{value:"add",paraId:1},{value:"set",paraId:1},{value:"remove",paraId:1},{value:"toggle",paraId:1}]},585821:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"$eq",paraId:0,tocIndex:1},{value:"$ne",paraId:0,tocIndex:1},{value:"$gte",paraId:0,tocIndex:1},{value:"$gt",paraId:0,tocIndex:1},{value:"$lte",paraId:0,tocIndex:1},{value:"$lt",paraId:0,tocIndex:1},{value:"$not",paraId:0,tocIndex:1},{value:"$is",paraId:0,tocIndex:1},{value:"$in",paraId:0,tocIndex:1},{value:"$notIn",paraId:0,tocIndex:1},{value:"$like",paraId:0,tocIndex:1},{value:"$notLike",paraId:0,tocIndex:1},{value:"$iLike",paraId:0,tocIndex:1},{value:"$notILike",paraId:0,tocIndex:1},{value:"$and",paraId:0,tocIndex:1},{value:"$or",paraId:0,tocIndex:1},{value:"$empty",paraId:0,tocIndex:1},{value:"$notEmpty",paraId:0,tocIndex:1},{value:"$match",paraId:1,tocIndex:2},{value:"$notMatch",paraId:1,tocIndex:2},{value:"$anyOf",paraId:1,tocIndex:2},{value:"$noneOf",paraId:1,tocIndex:2},{value:"$arrayEmpty",paraId:1,tocIndex:2},{value:"$arrayNotEmpty",paraId:1,tocIndex:2},{value:"$exists",paraId:2,tocIndex:3},{value:"$notExists",paraId:2,tocIndex:3},{value:"$isTruly",paraId:3,tocIndex:4},{value:"$isFalsy",paraId:3,tocIndex:4},{value:"$dateOn",paraId:4,tocIndex:5},{value:"$dateNotOn",paraId:4,tocIndex:5},{value:"$dateBefore",paraId:4,tocIndex:5},{value:"$dateNotBefore",paraId:4,tocIndex:5},{value:"$dateAfter",paraId:4,tocIndex:5},{value:"$dateNotAfter",paraId:4,tocIndex:5},{value:"$includes",paraId:5,tocIndex:6},{value:"$notIncludes",paraId:5,tocIndex:6},{value:"$startsWith",paraId:5,tocIndex:6},{value:"$notStartsWith",paraId:5,tocIndex:6},{value:"$endWith",paraId:5,tocIndex:6},{value:"$notEndWith",paraId:5,tocIndex:6}]},749191:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684 HTTP API \u57FA\u4E8E Resource & Action \u8BBE\u8BA1\uFF0C\u662F REST API \u7684\u8D85\u96C6\uFF0C\u64CD\u4F5C\u4E0D\u5C40\u9650\u4E8E\u589E\u5220\u6539\u67E5\uFF0C\u5728 NocoBase \u91CC\uFF0CResource Action \u53EF\u4EE5\u4EFB\u610F\u7684\u6269\u5C55\u3002",paraId:0,tocIndex:0},{value:"\u5728 NocoBase \u91CC\uFF0C\u8D44\u6E90\uFF08resource\uFF09\u6709\u4E24\u79CD\u8868\u8FBE\u65B9\u5F0F\uFF1A",paraId:1,tocIndex:1},{value:"<collection>",paraId:2,tocIndex:1},{value:"<collection>.<association>",paraId:2,tocIndex:1},{value:"collection \u662F\u6240\u6709\u62BD\u8C61\u6570\u636E\u7684\u96C6\u5408",paraId:3},{value:"association \u4E3A collection \u7684\u5173\u8054\u6570\u636E",paraId:3},{value:"resource \u5305\u62EC collection \u548C collection.association \u4E24\u7C7B",paraId:3},{value:"posts",paraId:4,tocIndex:2},{value:" \u6587\u7AE0",paraId:4,tocIndex:2},{value:"posts.user",paraId:4,tocIndex:2},{value:" \u6587\u7AE0\u7528\u6237",paraId:4,tocIndex:2},{value:"posts.tags",paraId:4,tocIndex:2},{value:" \u6587\u7AE0\u6807\u7B7E",paraId:4,tocIndex:2},{value:"\u4EE5 ",paraId:5,tocIndex:3},{value:":<action>",paraId:5,tocIndex:3},{value:" \u7684\u65B9\u5F0F\u8868\u793A\u8D44\u6E90\u64CD\u4F5C",paraId:5,tocIndex:3},{value:"<collection>:<action>",paraId:6,tocIndex:3},{value:"<collection>.<association>:<action>",paraId:6,tocIndex:3},{value:"\u5185\u7F6E\u7684\u5168\u5C40\u64CD\u4F5C\uFF0C\u53EF\u7528\u4E8E collection \u6216 association",paraId:7,tocIndex:3},{value:"create",paraId:8,tocIndex:3},{value:"get",paraId:8,tocIndex:3},{value:"list",paraId:8,tocIndex:3},{value:"update",paraId:8,tocIndex:3},{value:"destroy",paraId:8,tocIndex:3},{value:"move",paraId:8,tocIndex:3},{value:"\u5185\u7F6E\u7684\u5173\u8054\u64CD\u4F5C\uFF0C\u4EC5\u7528\u4E8E association",paraId:9,tocIndex:3},{value:"set",paraId:10,tocIndex:3},{value:"add",paraId:10,tocIndex:3},{value:"remove",paraId:10,tocIndex:3},{value:"toggle",paraId:10,tocIndex:3},{value:"posts:create",paraId:11,tocIndex:4},{value:" \u521B\u5EFA\u6587\u7AE0",paraId:11,tocIndex:4},{value:"posts.user:get",paraId:11,tocIndex:4},{value:" \u67E5\u770B\u6587\u7AE0\u7528\u6237",paraId:11,tocIndex:4},{value:"posts.tags:add",paraId:11,tocIndex:4},{value:" \u9644\u52A0\u6587\u7AE0\u6807\u7B7E\uFF08\u5C06\u73B0\u6709\u7684\u6807\u7B7E\u4E0E\u6587\u7AE0\u5173\u8054\uFF09",paraId:11,tocIndex:4},{value:`<GET|POST>   /api/<collection>:<action>
<GET|POST>   /api/<collection>:<action>/<collectionIndex>
<GET|POST>   /api/<collection>/<collectionIndex>/<association>:<action>
<GET|POST>   /api/<collection>/<collectionIndex>/<association>:<action>/<associationIndex>
`,paraId:12,tocIndex:5},{value:"posts \u8D44\u6E90",paraId:13,tocIndex:6},{value:`POST  /api/posts:create
GET   /api/posts:list
GET   /api/posts:get/1
POST  /api/posts:update/1
POST  /api/posts:destroy/1
`,paraId:14,tocIndex:6},{value:"posts.comments \u8D44\u6E90",paraId:15,tocIndex:6},{value:`POST  /api/posts/1/comments:create
GET   /api/posts/1/comments:list
GET   /api/posts/1/comments:get/1
POST  /api/posts/1/comments:update/1
POST  /api/posts/1/comments:destroy/1
`,paraId:16,tocIndex:6},{value:"posts.tags \u8D44\u6E90",paraId:17,tocIndex:6},{value:`POST  /api/posts/1/tags:create
GET   /api/posts/1/tags:get
GET   /api/posts/1/tags:list
POST  /api/posts/1/tags:update
POST  /api/posts/1/tags:destroy
POST  /api/posts/1/tags:add
GET   /api/posts/1/tags:remove
`,paraId:18,tocIndex:6},{value:"collection \u8D44\u6E90\uFF0C\u901A\u8FC7 ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" \u5B9A\u4F4D\u5230\u5F85\u5904\u7406\u7684\u6570\u636E\uFF0C",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" \u5FC5\u987B\u552F\u4E00",paraId:19,tocIndex:7},{value:"association \u8D44\u6E90\uFF0C\u901A\u8FC7 ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" \u548C ",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" \u8054\u5408\u5B9A\u4F4D\u5F85\u5904\u7406\u7684\u6570\u636E\uFF0C",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" \u53EF\u80FD\u4E0D\u662F\u552F\u4E00\u7684\uFF0C\u4F46\u662F ",paraId:19,tocIndex:7},{value:"collectionIndex",paraId:19,tocIndex:7},{value:" \u548C ",paraId:19,tocIndex:7},{value:"associationIndex",paraId:19,tocIndex:7},{value:" \u7684\u8054\u5408\u7D22\u5F15\u5FC5\u987B\u552F\u4E00",paraId:19,tocIndex:7},{value:"\u67E5\u770B association \u8D44\u6E90\u8BE6\u60C5\u65F6\uFF0C\u8BF7\u6C42\u7684 URL \u9700\u8981\u540C\u65F6\u63D0\u4F9B ",paraId:20,tocIndex:7},{value:"<collectionIndex>",paraId:20,tocIndex:7},{value:" \u548C ",paraId:20,tocIndex:7},{value:"<associationIndex>",paraId:20,tocIndex:7},{value:"\uFF0C",paraId:20,tocIndex:7},{value:"<collectionIndex>",paraId:20,tocIndex:7},{value:" \u5E76\u4E0D\u591A\u4F59\uFF0C\u56E0\u4E3A ",paraId:20,tocIndex:7},{value:"<associationIndex>",paraId:20,tocIndex:7},{value:" \u53EF\u80FD\u4E0D\u662F\u552F\u4E00\u7684\u3002",paraId:20,tocIndex:7},{value:"\u4F8B\u5982 ",paraId:21,tocIndex:7},{value:"tables.fields",paraId:21,tocIndex:7},{value:" \u8868\u793A\u6570\u636E\u8868\u7684\u5B57\u6BB5",paraId:21,tocIndex:7},{value:`GET   /api/tables/table1/fields/title
GET   /api/tables/table2/fields/title
`,paraId:22,tocIndex:7},{value:"table1 \u548C table2 \u90FD\u6709 title \u5B57\u6BB5\uFF0Ctitle \u5728 table1 \u91CC\u662F\u552F\u4E00\u7684\uFF0C\u4F46\u662F\u5176\u4ED6\u8868\u4E5F\u53EF\u80FD\u6709 title \u5B57\u6BB5",paraId:23,tocIndex:7},{value:"\u8BF7\u6C42\u7684\u53C2\u6570\u53EF\u4EE5\u653E\u5728 Request \u7684 headers\u3001parameters\uFF08query string\uFF09\u3001body\uFF08GET \u8BF7\u6C42\u6CA1\u6709 body\uFF09 \u91CC\u3002",paraId:24,tocIndex:8},{value:"\u51E0\u4E2A\u7279\u6B8A\u7684 Parameters \u8BF7\u6C42\u53C2\u6570",paraId:25,tocIndex:8},{value:"filter",paraId:26,tocIndex:8},{value:" \u6570\u636E\u8FC7\u6EE4\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"filterByTk",paraId:26,tocIndex:8},{value:" \u6839\u636E tk \u5B57\u6BB5\u5B57\u8FC7\u6EE4\uFF0C\u7528\u4E8E\u6307\u5B9A\u8BE6\u60C5\u6570\u636E\u7684\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"sort",paraId:26,tocIndex:8},{value:" \u6392\u5E8F\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\u3002",paraId:26,tocIndex:8},{value:"fields",paraId:26,tocIndex:8},{value:" \u8F93\u51FA\u54EA\u4E9B\u6570\u636E\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"appends",paraId:26,tocIndex:8},{value:" \u9644\u52A0\u5173\u7CFB\u5B57\u6BB5\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"except",paraId:26,tocIndex:8},{value:" \u6392\u9664\u54EA\u4E9B\u5B57\u6BB5\uFF08\u4E0D\u8F93\u51FA\uFF09\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"whitelist",paraId:26,tocIndex:8},{value:" \u5B57\u6BB5\u767D\u540D\u5355\uFF0C\u7528\u4E8E\u6570\u636E\u7684\u521B\u5EFA\u548C\u66F4\u65B0\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"blacklist",paraId:26,tocIndex:8},{value:" \u5B57\u6BB5\u9ED1\u540D\u5355\uFF0C\u7528\u4E8E\u6570\u636E\u7684\u521B\u5EFA\u548C\u66F4\u65B0\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:26,tocIndex:8},{value:"\u6570\u636E\u8FC7\u6EE4",paraId:27,tocIndex:9},{value:`# simple
GET /api/posts?filter[status]=publish
# \u63A8\u8350\u4F7F\u7528 json string \u7684\u683C\u5F0F\uFF0C\u9700\u8981 encodeURIComponent \u7F16\u7801
GET /api/posts?filter={"status":"published"}

# filter operators
GET /api/posts?filter[status.$eq]=publish
GET /api/posts?filter={"status.$eq":"published"}

# $and
GET /api/posts?filter={"$and": [{"status.$eq":"published"}, {"title.$includes":"a"}]}
# $or
GET /api/posts?filter={"$or": [{"status.$eq":"pending"}, {"status.$eq":"draft"}]}

# association field
GET /api/posts?filter[user.email.$includes]=gmail
GET /api/posts?filter={"user.email.$includes":"gmail"}
`,paraId:28,tocIndex:9},{value:"\u70B9\u6B64\u67E5\u770B\u66F4\u591A\u5173\u4E8E filter operators \u7684\u5185\u5BB9",paraId:29},{value:"\u6839\u636E tk \u5B57\u6BB5\u8FC7\u6EE4\uFF0C\u9ED8\u8BA4\u60C5\u51B5\uFF1A",paraId:30,tocIndex:10},{value:"collection \u8D44\u6E90\uFF0Ctk \u4E3A\u6570\u636E\u8868\u7684\u4E3B\u952E\uFF1B",paraId:31,tocIndex:10},{value:"association \u8D44\u6E90\uFF0Ctk \u4E3A association \u7684 targetKey \u5B57\u6BB5\u3002",paraId:31,tocIndex:10},{value:`GET   /api/posts:get?filterByTk=1&fields=name,title&appends=tags
`,paraId:32,tocIndex:10},{value:"\u6392\u5E8F\u3002\u964D\u5E8F\u65F6\uFF0C\u5B57\u6BB5\u524D\u9762\u52A0\u4E0A\u51CF\u53F7 ",paraId:33,tocIndex:11},{value:"-",paraId:33,tocIndex:11},{value:"\u3002",paraId:33,tocIndex:11},{value:`# createAt \u5B57\u6BB5\u5347\u5E8F
GET   /api/posts:get?sort=createdAt
# createAt \u5B57\u6BB5\u964D\u5E8F
GET   /api/posts:get?sort=-createdAt
# \u591A\u4E2A\u5B57\u6BB5\u8054\u5408\u6392\u5E8F\uFF0CcreateAt \u5B57\u6BB5\u964D\u5E8F\u3001title A-Z \u5347\u5E8F
GET   /api/posts:get?sort=-createdAt,title
`,paraId:34,tocIndex:11},{value:"\u8F93\u51FA\u54EA\u4E9B\u6570\u636E",paraId:35,tocIndex:12},{value:`GET   /api/posts:list?fields=name,title

Response 200 (application/json)
{
  "data": [
    {
      "name": "",
      "title": ""
    }
  ],
  "meta": {}
}
`,paraId:36,tocIndex:12},{value:"\u9644\u52A0\u5173\u7CFB\u5B57\u6BB5",paraId:37,tocIndex:13},{value:"\u6392\u9664\u54EA\u4E9B\u5B57\u6BB5\uFF08\u4E0D\u8F93\u51FA\uFF09\uFF0C\u7528\u4E8E\u67E5\u8BE2\u76F8\u5173\u64CD\u4F5C\u91CC\uFF1B",paraId:38,tocIndex:14},{value:"\u767D\u540D\u5355",paraId:39,tocIndex:15},{value:`POST  /api/posts:create?whitelist=title

{
  "title": "My first post",
  "date": "2022-05-19"      # date \u5B57\u6BB5\u4F1A\u88AB\u8FC7\u6EE4\u6389\uFF0C\u4E0D\u4F1A\u5199\u5165\u6570\u636E\u5E93
}
`,paraId:40,tocIndex:15},{value:"\u9ED1\u540D\u5355",paraId:41,tocIndex:16},{value:`POST  /api/posts:create?blacklist=date

{
  "title": "My first post",
  "date": "2022-05-19"      # date \u5B57\u6BB5\u4F1A\u88AB\u8FC7\u6EE4\u6389\uFF0C\u4E0D\u4F1A\u5199\u5165\u6570\u636E\u5E93
}
`,paraId:42,tocIndex:16},{value:"\u54CD\u5E94\u7684\u683C\u5F0F",paraId:43,tocIndex:17},{value:`type ResponseResult = {
  data?: any; // \u4E3B\u4F53\u6570\u636E
  meta?: any; // \u9644\u52A0\u6570\u636E
  errors?: ResponseError[]; // \u62A5\u9519
};

type ResponseError = {
  code?: string;
  message: string;
};
`,paraId:44,tocIndex:17},{value:"\u67E5\u770B\u5217\u8868",paraId:45,tocIndex:18},{value:`GET /api/posts:list

Response 200 (application/json)

{
  data: [
    {
      id: 1
    }
  ],
  meta: {
    count: 1
    page: 1,
    pageSize: 1,
    totalPage: 1
  },
}
`,paraId:46,tocIndex:18},{value:"\u67E5\u770B\u8BE6\u60C5",paraId:47,tocIndex:18},{value:`GET /api/posts:get/1

Response 200 (application/json)

{
  data: {
    id: 1
  },
}
`,paraId:48,tocIndex:18},{value:"\u62A5\u9519",paraId:49,tocIndex:18},{value:`POST /api/posts:create

Response 400 (application/json)

{
  errors: [
    {
      message: 'name must be required',
    },
  ],
}
`,paraId:50,tocIndex:18}]},542054:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684 HTTP API \u662F REST API \u7684\u8D85\u96C6\uFF0C\u6807\u51C6\u7684 CRUD API \u4E5F\u652F\u6301 RESTful \u98CE\u683C\u3002",paraId:0,tocIndex:0},{value:"HTTP API",paraId:1,tocIndex:2},{value:`POST  /api/<collection>:create

{} # JSON body
`,paraId:2,tocIndex:2},{value:"REST API",paraId:3,tocIndex:2},{value:`POST  /api/<collection>

{} # JSON body
`,paraId:4,tocIndex:2},{value:"HTTP API",paraId:5,tocIndex:3},{value:`GET   /api/<collection>:list
`,paraId:6,tocIndex:3},{value:"REST API",paraId:7,tocIndex:3},{value:`GET   /api/<collection>
`,paraId:8,tocIndex:3},{value:"HTTP API",paraId:9,tocIndex:4},{value:`GET   /api/<collection>:get?filterByTk=<collectionIndex>
GET   /api/<collection>:get/<collectionIndex>
`,paraId:10,tocIndex:4},{value:"REST API",paraId:11,tocIndex:4},{value:`GET   /api/<collection>/<collectionIndex>
`,paraId:12,tocIndex:4},{value:"HTTP API",paraId:13,tocIndex:5},{value:`POST   /api/<collection>:update?filterByTk=<collectionIndex>

{} # JSON body

# \u6216\u8005
POST   /api/<collection>:update/<collectionIndex>

{} # JSON body
`,paraId:14,tocIndex:5},{value:"REST API",paraId:15,tocIndex:5},{value:`PUT    /api/<collection>/<collectionIndex>

{} # JSON body
`,paraId:16,tocIndex:5},{value:"HTTP API",paraId:17,tocIndex:6},{value:`POST      /api/<collection>:destroy?filterByTk=<collectionIndex>
# \u6216\u8005
POST      /api/<collection>:destroy/<collectionIndex>
`,paraId:18,tocIndex:6},{value:"REST API",paraId:19,tocIndex:6},{value:`DELETE    /api/<collection>/<collectionIndex>
`,paraId:20,tocIndex:6},{value:"HTTP API",paraId:21,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>:create

{} # JSON body
`,paraId:22,tocIndex:8},{value:"REST API",paraId:23,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>

{} # JSON body
`,paraId:24,tocIndex:8},{value:"HTTP API",paraId:25,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>:list
`,paraId:26,tocIndex:9},{value:"REST API",paraId:27,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>
`,paraId:28,tocIndex:9},{value:"HTTP API",paraId:29,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get?filterByTk=<associationIndex>
# \u6216\u8005
GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:30,tocIndex:10},{value:"REST API",paraId:31,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:32,tocIndex:10},{value:"HTTP API",paraId:33,tocIndex:11},{value:`POST   /api/<collection>/<collectionIndex>/<association>:update?filterByTk=<associationIndex>

{} # JSON body

# \u6216\u8005
POST   /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON body
`,paraId:34,tocIndex:11},{value:"REST API",paraId:35,tocIndex:11},{value:`PUT    /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON \u6570\u636E
`,paraId:36,tocIndex:11},{value:"HTTP API",paraId:37,tocIndex:12},{value:`POST    /api/<collection>/<collectionIndex>/<association>:destroy?filterByTk=<associationIndex>
# \u6216\u8005
POST    /api/<collection>/<collectionIndex>/<association>:destroy/<associationIndex>
`,paraId:38,tocIndex:12},{value:"REST API",paraId:39,tocIndex:12},{value:`DELETE  /api/<collection>/<collectionIndex>/<association>/<associationIndex>
`,paraId:40,tocIndex:12}]},410299:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase adopts a microkernel architecture, where various functionalities are extended in the form of plugins. The plugin-based design reduces the coupling between modules, increasing reusability. With the continuous expansion of the plugin library, common scenarios can be easily built by combining plugins. NocoBase's no-code platform is composed of various plugins.",paraId:0,tocIndex:0},{value:"NocoBase provides a powerful plugin manager to handle plugin management. No-code users can manage the addition, activation, deactivation, and deletion of plugins through the interface.",paraId:1,tocIndex:1},{value:"Developers can also manage plugins through the CLI.",paraId:2,tocIndex:1},{value:"For more plugin examples, see ",paraId:3,tocIndex:1},{value:"packages/samples",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"Whether it's generic functionalities or personalized customization, they can be written in the form of plugins. NocoBase's extensibility is reflected in various aspects:",paraId:4,tocIndex:2},{value:"It can be visible user interface-related page modules, block types, operation types, field types, etc.",paraId:5,tocIndex:2},{value:"It can also be used for enhancing or restricting HTTP API filters, validators, access restrictions, etc.",paraId:5,tocIndex:2},{value:"It can also be more fundamental enhancements of features such as data tables, migrations, events, command-line, etc.",paraId:5,tocIndex:2},{value:"Modules are distributed as follows:",paraId:6,tocIndex:2},{value:`Server-side
`,paraId:7,tocIndex:2},{value:"Data tables and fields",paraId:8,tocIndex:2},{value:"Resources and operations",paraId:8,tocIndex:2},{value:"Middleware",paraId:8,tocIndex:2},{value:"Events",paraId:8,tocIndex:2},{value:"Custom command-line",paraId:8,tocIndex:2},{value:"Internationalization",paraId:8,tocIndex:2},{value:`Client-side
`,paraId:7,tocIndex:2},{value:"Route management and plugin configuration pages",paraId:9,tocIndex:2},{value:"Styles and themes",paraId:9,tocIndex:2},{value:"Providers and contexts",paraId:9,tocIndex:2},{value:"UI Schema",paraId:9,tocIndex:2},{value:"Internationalization",paraId:9,tocIndex:2}]},907124:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u76F8\u5173\u6587\u6863\uFF1A",paraId:0,tocIndex:1},{value:"\u5FEB\u901F\u5F00\u59CB",paraId:0,tocIndex:1},{value:"\u4E3B\u8981\u547D\u4EE4\u5305\u62EC\uFF1A",paraId:1,tocIndex:1},{value:"\u4E0B\u8F7D",paraId:2,tocIndex:1},{value:`yarn create/git clone
yarn install
`,paraId:3,tocIndex:1},{value:"\u5B89\u88C5",paraId:4,tocIndex:1},{value:`yarn nocobase install
`,paraId:5,tocIndex:1},{value:"\u8FD0\u884C",paraId:6,tocIndex:1},{value:`# for development
yarn dev

# for production
yarn build
yarn start
`,paraId:7,tocIndex:1},{value:"\u76F8\u5173\u6587\u6863\uFF1A",paraId:8,tocIndex:2},{value:"\u4F7F\u7528\u624B\u518C",paraId:8,tocIndex:2},{value:"\u4E3B\u8981\u7684\u4E09\u90E8\u5206\u5305\u62EC\uFF1A",paraId:9,tocIndex:2},{value:"UI \u8BBE\u8BA1\u5668\uFF1A\u4E3B\u8981\u5305\u62EC\u533A\u5757\u3001\u5B57\u6BB5\u548C\u64CD\u4F5C",paraId:10,tocIndex:2},{value:"\u63D2\u4EF6\u7BA1\u7406\u5668\uFF1A\u529F\u80FD\u9700\u6C42\u6269\u5C55",paraId:10,tocIndex:2},{value:"\u914D\u7F6E\u4E2D\u5FC3\uFF1A\u5DF2\u6FC0\u6D3B\u63D2\u4EF6\u63D0\u4F9B\u7684\u914D\u7F6E\u529F\u80FD",paraId:10,tocIndex:2},{value:"\u76F8\u5173\u6587\u6863\uFF1A",paraId:11,tocIndex:3},{value:"\u63D2\u4EF6\u5F00\u53D1",paraId:11,tocIndex:3},{value:"NocoBase \u63D0\u4F9B\u4E86\u7B80\u6613\u7684\u63D2\u4EF6\u7BA1\u7406\u5668\u754C\u9762\uFF0C\u4F46\u662F\u5728\u754C\u9762\u4E0A\u53EA\u80FD\u5904\u7406\u672C\u5730\u63D2\u4EF6\u7684 enable\u3001disable \u548C remove\uFF0C\u5B8C\u6574\u7684\u64CD\u4F5C\u9700\u8981\u901A\u8FC7 CLI",paraId:12,tocIndex:3},{value:`# \u521B\u5EFA\u63D2\u4EF6
yarn pm create hello
# \u6CE8\u518C\u63D2\u4EF6
yarn pm add hello
# \u6FC0\u6D3B\u63D2\u4EF6
yarn pm enable hello
# \u7981\u7528\u63D2\u4EF6
yarn pm disable hello
# \u5220\u9664\u63D2\u4EF6
yarn pm remove hello
`,paraId:13,tocIndex:3},{value:"\u66F4\u591A\u63D2\u4EF6\u793A\u4F8B\uFF0C\u67E5\u770B packages/samples\uFF0C\u901A\u8FC7 samples \u63D2\u4EF6\u80FD\u591F\u4E86\u89E3\u63D2\u4EF6\u7684\u57FA\u672C\u7528\u6CD5\uFF0C\u5C31\u53EF\u4EE5\u8FDB\u4E00\u6B65\u5F00\u53D1\u63D2\u4EF6\u4E86\u3002",paraId:14,tocIndex:3},{value:"\u76F8\u5173\u6587\u6863\uFF1A",paraId:15,tocIndex:4},{value:"\u6269\u5C55\u6307\u5357",paraId:15,tocIndex:4},{value:"\u7F16\u5199\u7B2C\u4E00\u4E2A\u63D2\u4EF6",paraId:16,tocIndex:4},{value:" \u7AE0\u8282\uFF0C\u867D\u7136\u7B80\u5355\u7684\u8BB2\u8FF0\u4E86\u63D2\u4EF6\u7684\u4E3B\u8981\u5F00\u53D1\u6D41\u7A0B\uFF0C\u4F46\u662F\u4E3A\u4E86\u66F4\u5FEB\u901F\u7684\u4ECB\u5165\u63D2\u4EF6\u7EC6\u8282\uFF0C\u4F60\u53EF\u80FD\u9700\u8981\u8FDB\u4E00\u6B65\u4E86\u89E3 NocoBase \u6846\u67B6\u7684\u6A21\u5757\u5206\u5E03\uFF1A",paraId:17,tocIndex:4},{value:`Server
`,paraId:18,tocIndex:4},{value:"Collections & Fields\uFF1A\u4E3B\u8981\u7528\u4E8E\u7CFB\u7EDF\u8868\u914D\u7F6E\uFF0C\u4E1A\u52A1\u8868\u5EFA\u8BAE\u5728\u300C\u914D\u7F6E\u4E2D\u5FC3 - \u6570\u636E\u8868\u914D\u7F6E\u300D\u91CC\u914D\u7F6E",paraId:19,tocIndex:4},{value:"Resources & Actions\uFF1A\u4E3B\u8981\u7528\u4E8E\u6269\u5C55 Action API",paraId:19,tocIndex:4},{value:"Middleware\uFF1A\u4E2D\u95F4\u4EF6",paraId:19,tocIndex:4},{value:"Events\uFF1A\u4E8B\u4EF6",paraId:19,tocIndex:4},{value:"I18n\uFF1A\u670D\u52A1\u7AEF\u56FD\u9645\u5316",paraId:19,tocIndex:4},{value:`Client
`,paraId:18,tocIndex:4},{value:"UI Schema Designer\uFF1A\u9875\u9762\u8BBE\u8BA1\u5668",paraId:20,tocIndex:4},{value:"UI Router\uFF1A\u6709\u81EA\u5B9A\u4E49\u9875\u9762\u9700\u6C42\u65F6",paraId:20,tocIndex:4},{value:"Plugin Settings Manager\uFF1A\u4E3A\u63D2\u4EF6\u63D0\u4F9B\u914D\u7F6E\u9875\u9762",paraId:20,tocIndex:4},{value:"I18n\uFF1A\u5BA2\u6237\u7AEF\u56FD\u9645\u5316",paraId:20,tocIndex:4},{value:`Devtools
`,paraId:18,tocIndex:4},{value:"Commands\uFF1A\u81EA\u5B9A\u4E49\u547D\u4EE4\u884C",paraId:21,tocIndex:4},{value:"Migrations\uFF1A\u8FC1\u79FB\u811A\u672C",paraId:21,tocIndex:4},{value:"\u76F8\u5173\u6587\u6863\uFF1A",paraId:22,tocIndex:5},{value:"API \u53C2\u8003",paraId:22,tocIndex:5},{value:"\u67E5\u770B\u5404\u6A21\u5757\u7684 packages/samples\uFF0C\u8FDB\u4E00\u6B65\u4E86\u89E3\u6A21\u5757\u4E3B\u8981 API \u7684\u7528\u6CD5",paraId:23,tocIndex:5},{value:`Server
`,paraId:24,tocIndex:5},{value:`Collections & Fields
`,paraId:25,tocIndex:5},{value:"db.collection",paraId:26,tocIndex:5},{value:"db.import",paraId:26,tocIndex:5},{value:`Resources & Actions
`,paraId:25,tocIndex:5},{value:"app.resourcer.define",paraId:27,tocIndex:5},{value:"app.resourcer.registerActions",paraId:27,tocIndex:5},{value:`Middleware
`,paraId:25,tocIndex:5},{value:"app.use",paraId:28,tocIndex:5},{value:"app.acl.use",paraId:28,tocIndex:5},{value:"app.resourcer.use",paraId:28,tocIndex:5},{value:`Events
`,paraId:25,tocIndex:5},{value:"app.on",paraId:29,tocIndex:5},{value:"app.db.on",paraId:29,tocIndex:5},{value:`I18n
`,paraId:25,tocIndex:5},{value:"app.i18n",paraId:30,tocIndex:5},{value:"ctx.i18n",paraId:30,tocIndex:5},{value:`Client
`,paraId:24,tocIndex:5},{value:`UI Schema Designer
`,paraId:31,tocIndex:5},{value:"SchemaComponent",paraId:32,tocIndex:5},{value:"SchemaInitializer",paraId:32,tocIndex:5},{value:"SchemaSettings",paraId:32,tocIndex:5},{value:`UI Router
`,paraId:31,tocIndex:5},{value:"RouteSwitchProvider",paraId:33,tocIndex:5},{value:"RouteSwitch",paraId:33,tocIndex:5},{value:`I18n
`,paraId:31,tocIndex:5},{value:"app.i18n",paraId:34,tocIndex:5},{value:"useTranslation",paraId:34,tocIndex:5},{value:`Devtools
`,paraId:24,tocIndex:5},{value:`Commands
`,paraId:35,tocIndex:5},{value:"app.command",paraId:36,tocIndex:5},{value:"app.findCommand",paraId:36,tocIndex:5},{value:`Migrations
`,paraId:35,tocIndex:5},{value:"app.db.addMigration",paraId:37,tocIndex:5},{value:"app.db.addMigrations",paraId:37,tocIndex:5}]},890454:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Triggered by ",paraId:0,tocIndex:1},{value:"app.on()",paraId:0,tocIndex:1},{value:", see ",paraId:0,tocIndex:1},{value:"Server-side - Events",paraId:1,tocIndex:1},{value:" for details.",paraId:0,tocIndex:1},{value:`class PluginSampleHelloServer extends Plugin {
  async beforeLoad() {
    this.app.on('beforeInstall', async () => {
      // coding...
    });
  }
}
`,paraId:2,tocIndex:1},{value:"Written in the plugin class, see ",paraId:3,tocIndex:2},{value:"Server - Overview",paraId:4,tocIndex:2},{value:" for usage details.",paraId:3,tocIndex:2},{value:`class PluginSampleHelloServer extends Plugin {
  async beforeLoad() {}
}
`,paraId:5,tocIndex:2},{value:"Written in the plugin class, see ",paraId:6,tocIndex:3},{value:"Client - Overview",paraId:7,tocIndex:3},{value:" for usage details.",paraId:6,tocIndex:3}]},336286:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"If you want to customize the build configuration, you can create a ",paraId:0,tocIndex:1},{value:"build.config.ts",paraId:0,tocIndex:1},{value:" file in the root directory of the plugin with the following content:",paraId:0,tocIndex:1},{value:`import { defineConfig } from '@nocobase/build';

export default defineConfig({
  modifyViteConfig: (config) => {
    // Vite is used for packaging the \`src/client\` side code

    // Modify the Vite configuration. For details, refer to: https://vitejs.dev/guide/
    return config;
  },
  modifyTsupConfig: (config) => {
    // Tsup is used for packaging the \`src/server\` side code

    // Modify the Tsup configuration. For details, refer to: https://tsup.egoist.dev/#using-custom-configuration
    return config;
  },
  beforeBuild: (log) => {
    // Callback function before the build starts. You can perform some actions before the build.
  },
  afterBuild: (log: PkgLog) => {
    // Callback function after the build is completed. You can perform some actions after the build.
  };
});
`,paraId:1,tocIndex:1},{value:"@nocobase/plugin-sample-custom-build",paraId:2,tocIndex:2}]},633355:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The plugin's dependencies are categorized into local dependencies and global dependencies. Global dependencies are provided by ",paraId:0,tocIndex:0},{value:"@nocobase/server",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"@nocobase/client",paraId:0,tocIndex:0},{value:", and they are not included in the plugin's final bundle. However, local dependencies will be bundled with the plugin.",paraId:0,tocIndex:0},{value:"Since the local dependencies will be bundled (including npm packages required by the server, which will also be included in ",paraId:1,tocIndex:0},{value:"dist/node_modules",paraId:1,tocIndex:0},{value:"), when developing a plugin, all dependencies should be added to ",paraId:1,tocIndex:0},{value:"devDependencies",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"\nWhen installing the following dependencies for the plugin, ensure that their **versions** are consistent with those of `@nocobase/server` and `@nocobase/client`.\n",paraId:2},{value:`// nocobase
'@nocobase/acl',
  '@nocobase/actions',
  '@nocobase/auth',
  '@nocobase/cache',
  '@nocobase/client',
  '@nocobase/database',
  '@nocobase/evaluators',
  '@nocobase/logger',
  '@nocobase/resourcer',
  '@nocobase/sdk',
  '@nocobase/server',
  '@nocobase/test',
  '@nocobase/utils',
  // @nocobase/auth
  'jsonwebtoken',
  // @nocobase/cache
  'cache-manager',
  'cache-manager-fs-hash',
  // @nocobase/database
  'sequelize',
  'umzug',
  'async-mutex',
  // @nocobase/evaluators
  '@formulajs/formulajs',
  'mathjs',
  // @nocobase/logger
  'winston',
  'winston-daily-rotate-file',
  // koa
  'koa',
  '@koa/cors',
  '@koa/router',
  'multer',
  '@koa/multer',
  'koa-bodyparser',
  'koa-static',
  'koa-send',
  // react
  'react',
  'react-dom',
  'react/jsx-runtime',
  // react-router
  'react-router',
  'react-router-dom',
  // antd
  'antd',
  'antd-style',
  '@ant-design/icons',
  '@ant-design/cssinjs',
  // i18next
  'i18next',
  'react-i18next',
  // dnd-kit
  '@dnd-kit/accessibility',
  '@dnd-kit/core',
  '@dnd-kit/modifiers',
  '@dnd-kit/sortable',
  '@dnd-kit/utilities',
  // formily
  '@formily/antd-v5',
  '@formily/core',
  '@formily/react',
  '@formily/json-schema',
  '@formily/path',
  '@formily/validator',
  '@formily/shared',
  '@formily/reactive',
  '@formily/reactive-react',
  // utils
  'dayjs',
  'mysql2',
  'pg',
  'pg-hstore',
  'supertest',
  'axios',
  '@emotion/css',
  'ahooks',
  'lodash';
`,paraId:3,tocIndex:1}]},233871:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`{
  'ar-EG': { label: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629' },
  'az-AZ': { label: 'Az\u0259rbaycan dili' },
  'bg-BG': { label: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438' },
  'bn-BD': { label: 'Bengali' },
  'by-BY': { label: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0456' },
  'ca-ES': { label: '\u0421atal\xE0/Espanya' },
  'cs-CZ': { label: '\u010Cesky' },
  'da-DK': { label: 'Dansk' },
  'de-DE': { label: 'Deutsch' },
  'el-GR': { label: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC' },
  'en-GB': { label: 'English(GB)' },
  'en-US': { label: 'English' },
  'es-ES': { label: 'Espa\xF1ol' },
  'et-EE': { label: 'Estonian (Eesti)' },
  'fa-IR': { label: '\u0641\u0627\u0631\u0633\u06CC' },
  'fi-FI': { label: 'Suomi' },
  'fr-BE': { label: 'Fran\xE7ais(BE)' },
  'fr-CA': { label: 'Fran\xE7ais(CA)' },
  'fr-FR': { label: 'Fran\xE7ais' },
  'ga-IE': { label: 'Gaeilge' },
  'gl-ES': { label: 'Galego' },
  'he-IL': { label: '\u05E2\u05D1\u05E8\u05D9\u05EA' },
  'hi-IN': { label: '\u0939\u093F\u0928\u094D\u0926\u0940' },
  'hr-HR': { label: 'Hrvatski jezik' },
  'hu-HU': { label: 'Magyar' },
  'hy-AM': { label: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576' },
  'id-ID': { label: 'Bahasa Indonesia' },
  'is-IS': { label: '\xCDslenska' },
  'it-IT': { label: 'Italiano' },
  'ja-JP': { label: '\u65E5\u672C\u8A9E' },
  'ka-GE': { label: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8' },
  'kk-KZ': { label: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456' },
  'km-KH': { label: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A' },
  // 'kmr-IQ': { label: 'kmr_IQ' },
  'kn-IN': { label: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1' },
  'ko-KR': { label: '\uD55C\uAD6D\uC5B4' },
  'ku-IQ': { label: '\u06A9\u0648\u0631\u062F\u06CC' },
  'lt-LT': { label: 'lietuvi\u0173' },
  'lv-LV': { label: 'Latvie\u0161u valoda' },
  'mk-MK': { label: '\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 \u0458\u0430\u0437\u0438\u043A' },
  'ml-IN': { label: '\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02' },
  'mn-MN': { label: '\u041C\u043E\u043D\u0433\u043E\u043B \u0445\u044D\u043B' },
  'ms-MY': { label: '\u0628\u0647\u0627\u0633 \u0645\u0644\u0627\u064A\u0648' },
  'nb-NO': { label: 'Norsk bokm\xE5l' },
  'ne-NP': { label: '\u0928\u0947\u092A\u093E\u0932\u0940' },
  'nl-BE': { label: 'Vlaams' },
  'nl-NL': { label: 'Nederlands' },
  'pl-PL': { label: 'Polski' },
  'pt-BR': { label: 'Portugu\xEAs brasileiro' },
  'pt-PT': { label: 'Portugu\xEAs' },
  'ro-RO': { label: 'Rom\xE2nia' },
  'ru-RU': { label: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439' },
  'si-LK': { label: '\u0DC3\u0DD2\u0D82\u0DC4\u0DBD' },
  'sk-SK': { label: 'Sloven\u010Dina' },
  'sl-SI': { label: 'Sloven\u0161\u010Dina' },
  'sr-RS': { label: '\u0441\u0440\u043F\u0441\u043A\u0438 \u0458\u0435\u0437\u0438\u043A' },
  'sv-SE': { label: 'Svenska' },
  'ta-IN': { label: 'Tamil' },
  'th-TH': { label: '\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22' },
  'tk-TK': { label: 'Turkmen' },
  'tr-TR': { label: 'T\xFCrk\xE7e' },
  'uk-UA': { label: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430' },
  'ur-PK': { label: 'O\u02BBzbekcha' },
  'vi-VN': { label: 'Ti\u1EBFng Vi\u1EC7t' },
  'zh-CN': { label: '\u7B80\u4F53\u4E2D\u6587' },
  'zh-HK': { label: '\u7E41\u9AD4\u4E2D\u6587\uFF08\u9999\u6E2F\uFF09' },
  'zh-TW': { label: '\u7E41\u9AD4\u4E2D\u6587\uFF08\u53F0\u6E7E\uFF09' },
}
`,paraId:0,tocIndex:0}]},72209:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NPM \u5305\u548C\u7248\u672C",paraId:0,tocIndex:0},{value:"\u4F5C\u7528",paraId:0,tocIndex:0},{value:"react\u3001react-dom\uFF0818.x\uFF09",paraId:0,tocIndex:0},{value:"\u6846\u67B6",paraId:0,tocIndex:0},{value:"react-router\uFF086.x\uFF09",paraId:0,tocIndex:0},{value:"\u8DEF\u7531",paraId:0,tocIndex:0},{value:"i18next\uFF0822.x\uFF09\u3001react-i18next\uFF0811.x\uFF09",paraId:0,tocIndex:0},{value:"\u56FD\u9645\u5316",paraId:0,tocIndex:0},{value:"ant-design\uFF085.x\uFF09",paraId:0,tocIndex:0},{value:"UI \u7EC4\u4EF6\u5E93",paraId:0,tocIndex:0},{value:"antd-style\uFF083.x\uFF09",paraId:0,tocIndex:0},{value:"\u52A8\u6001\u4E3B\u9898",paraId:0,tocIndex:0},{value:"axios\uFF080.26.x\uFF09\u3001useRequest\uFF083.x\uFF09",paraId:0,tocIndex:0},{value:"API \u8BF7\u6C42",paraId:0,tocIndex:0},{value:"Formily\uFF082.x\uFF09",paraId:0,tocIndex:0},{value:"UI Schema",paraId:0,tocIndex:0},{value:"dayjs\uFF081.11.x\uFF09",paraId:0,tocIndex:0},{value:"\u65E5\u671F\u683C\u5F0F\u5316",paraId:0,tocIndex:0},{value:"dnd-kit\uFF085.x\uFF09",paraId:0,tocIndex:0},{value:"\u62D6\u62FD",paraId:0,tocIndex:0},{value:"umi\uFF084.x\uFF09",paraId:0,tocIndex:0},{value:"\u5E94\u7528\u5F00\u53D1\u6846\u67B6",paraId:0,tocIndex:0},{value:"dumi\uFF082.x\uFF09",paraId:0,tocIndex:0},{value:"\u6587\u6863\u5DE5\u5177",paraId:0,tocIndex:0},{value:"vite\uFF084.x\uFF09\u3001tsup\uFF087.x\uFF09",paraId:0,tocIndex:0},{value:"\u6784\u5EFA\u5DE5\u5177",paraId:0,tocIndex:0},{value:"vitest\uFF080.34.x\uFF09",paraId:0,tocIndex:0},{value:"\u5355\u6D4B\u5DE5\u5177",paraId:0,tocIndex:0},{value:"playwright\uFF081.x\uFF09",paraId:0,tocIndex:0},{value:"E2E \u6D4B\u8BD5\u5DE5\u5177",paraId:0,tocIndex:0}]},773234:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684\u6D4B\u8BD5\u57FA\u4E8E ",paraId:0,tocIndex:1},{value:"Jest",paraId:0,tocIndex:1},{value:" \u6D4B\u8BD5\u6846\u67B6\u3002\u540C\u65F6\uFF0C\u4E3A\u4E86\u65B9\u4FBF\u7684\u7F16\u5199\u6D4B\u8BD5\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E86\u4E24\u4E2A\u5DE5\u5177\u7C7B\uFF0C\u5728\u6D4B\u8BD5\u73AF\u5883\u6A21\u62DF\u6B63\u5E38\u7684\u6570\u636E\u5E93\u548C\u5E94\u7528\u7684\u670D\u52A1\u7AEF\u3002",paraId:0,tocIndex:1},{value:"\u6A21\u62DF\u6570\u636E\u5E93\u7C7B\u7EE7\u627F\u81EA ",paraId:1,tocIndex:2},{value:"Database",paraId:2,tocIndex:2},{value:" \u7C7B\uFF0C\u5927\u90E8\u5206\u5185\u5BB9\u6CA1\u6709\u533A\u522B\uFF0C\u4E3B\u8981\u5728\u6784\u9020\u51FD\u6570\u9ED8\u8BA4\u5185\u7F6E\u4E86\u968F\u673A\u8868\u524D\u7F00\uFF0C\u5728\u6BCF\u4E2A\u6D4B\u8BD5\u7528\u4F8B\u521D\u59CB\u5316\u6570\u636E\u5E93\u65F6\u76F8\u5173\u6570\u636E\u8868\u90FD\u901A\u8FC7\u524D\u7F00\u540D\u79F0\u4E0E\u5176\u4ED6\u7528\u4F8B\u8FDB\u884C\u9694\u79BB\uFF0C\u5728\u8FD0\u884C\u6D4B\u8BD5\u7528\u4F8B\u65F6\u4E92\u4E0D\u5F71\u54CD\u3002",paraId:1,tocIndex:2},{value:`import { MockDatabase } from '@nocobase/test';

describe('my suite', () => {
  let db;

  beforeEach(async () => {
    db = new MockDatabase();

    db.collection({
      name: 'posts',
      fields: [
        {
          type: 'string',
          name: 'title',
        },
      ],
    });

    await db.sync();
  });

  test('my case', async () => {
    const postRepository = db.getRepository('posts');
    const p1 = await postRepository.create({
      values: {
        title: 'hello',
      },
    });

    expect(p1.get('title')).toEqual('hello');
  });
});
`,paraId:3,tocIndex:2},{value:"\u6A21\u62DF\u670D\u52A1\u5668\u4E5F\u7EE7\u627F\u81EA ",paraId:4,tocIndex:3},{value:"Application",paraId:5,tocIndex:3},{value:" \u7C7B\uFF0C\u9664\u4E86\u5185\u7F6E\u7684\u6570\u636E\u5E93\u5B9E\u4F8B\u662F\u901A\u8FC7\u6A21\u62DF\u6570\u636E\u5E93\u7C7B\u751F\u6210\u7684\u4EE5\u5916\uFF0C\u8FD8\u63D0\u4F9B\u4E86\u6BD4\u8F83\u65B9\u4FBF\u7684\u751F\u6210\u57FA\u4E8E ",paraId:4,tocIndex:3},{value:"superagent",paraId:4,tocIndex:3},{value:" \u8BF7\u6C42\u4EE3\u7406\u529F\u80FD\uFF0C\u9488\u5BF9\u4ECE\u53D1\u9001\u8BF7\u6C42\u5230\u83B7\u53D6\u54CD\u5E94\u7684\u5199\u6CD5\u4E5F\u96C6\u6210\u4E86 ",paraId:4,tocIndex:3},{value:".resource('posts').create()",paraId:4,tocIndex:3},{value:"\uFF0C\u6BD4\u8F83\u7B80\u5316\u3002",paraId:4,tocIndex:3},{value:`import { mockServer } from '@nocobase/test';

describe('my suite', () => {
  let app;
  let agent;
  let db;

  beforeEach(async () => {
    app = mockServer();
    agent = app.agent();

    db.collection({
      name: 'posts',
      fields: [
        {
          type: 'string',
          name: 'title',
        },
      ],
    });

    await db.sync();
    await app.load();
  });

  test('my case', async () => {
    const { body } = await agent.resource('posts').create({
      values: {
        title: 'hello',
      },
    });

    expect(body.data.title).toEqual('hello');
  });
});
`,paraId:6,tocIndex:3},{value:"\u6211\u4EEC\u4EE5\u4E4B\u524D\u5728 ",paraId:7,tocIndex:4},{value:"\u8D44\u6E90\u4E0E\u64CD\u4F5C",paraId:8,tocIndex:4},{value:" \u7AE0\u8282\u7684\u529F\u80FD\u4E3A\u4F8B\uFF0C\u6765\u5199\u4E00\u4E2A\u63D2\u4EF6\u7684\u6D4B\u8BD5\uFF1A",paraId:7,tocIndex:4},{value:`import { mockServer } from '@nocobase/test';
import Plugin from '../../src/server';

describe('shop actions', () => {
  let app;
  let agent;
  let db;

  beforeEach(async () => {
    app = mockServer();
    app.plugin(Plugin);
    agent = app.agent();
    db = app.db;

    await app.load();
    await db.sync();
  });

  afterEach(async () => {
    await app.destroy();
  });

  test('product order case', async () => {
    const { body: product } = await agent.resource('products').create({
      values: {
        title: 'iPhone 14 Pro',
        price: 7999,
        enabled: true,
        inventory: 1,
      },
    });
    expect(product.data.price).toEqual(7999);

    const { body: order } = await agent.resource('orders').create({
      values: {
        productId: product.data.id,
      },
    });
    expect(order.data.totalPrice).toEqual(7999);
    expect(order.data.status).toEqual(0);

    const { body: deliveredOrder } = await agent.resource('orders').deliver({
      filterByTk: order.data.id,
      values: {
        provider: 'SF',
        trackingNumber: '123456789',
      },
    });
    expect(deliveredOrder.data.status).toBe(2);
    expect(deliveredOrder.data.delivery.trackingNumber).toBe('123456789');
  });
});
`,paraId:9,tocIndex:4},{value:"\u7F16\u5199\u5B8C\u6210\u540E\uFF0C\u5728\u547D\u4EE4\u884C\u4E2D\u5141\u8BB8\u6D4B\u8BD5\u547D\u4EE4\uFF1A",paraId:10,tocIndex:4},{value:`yarn test packages/samples/shop-actions
`,paraId:11,tocIndex:4},{value:"\u8BE5\u6D4B\u8BD5\u5C06\u9A8C\u8BC1\uFF1A",paraId:12,tocIndex:4},{value:"\u5546\u54C1\u53EF\u4EE5\u521B\u5EFA\u6210\u529F\uFF1B",paraId:13,tocIndex:4},{value:"\u8BA2\u5355\u53EF\u4EE5\u521B\u5EFA\u6210\u529F\uFF1B",paraId:13,tocIndex:4},{value:"\u8BA2\u5355\u53EF\u4EE5\u53D1\u8D27\u6210\u529F\uFF1B",paraId:13,tocIndex:4},{value:"\u5F53\u7136\u8FD9\u53EA\u662F\u4E2A\u6700\u57FA\u672C\u7684\u4F8B\u5B50\uFF0C\u4ECE\u4E1A\u52A1\u4E0A\u6765\u8BF4\u5E76\u4E0D\u5B8C\u5584\uFF0C\u4F46\u4F5C\u4E3A\u793A\u4F8B\u5DF2\u7ECF\u53EF\u4EE5\u8BF4\u660E\u6574\u4E2A\u6D4B\u8BD5\u7684\u6D41\u7A0B\u3002",paraId:14,tocIndex:4},{value:"\u672C\u7AE0\u6D89\u53CA\u7684\u793A\u4F8B\u4EE3\u7801\u6574\u5408\u5728\u5BF9\u5E94\u7684\u5305 ",paraId:15,tocIndex:5},{value:"packages/samples/shop-actions",paraId:15,tocIndex:5},{value:" \u4E2D\uFF0C\u53EF\u4EE5\u76F4\u63A5\u5728\u672C\u5730\u8FD0\u884C\uFF0C\u67E5\u770B\u6548\u679C\u3002",paraId:15,tocIndex:5}]},513600:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u53EF\u4EE5\u901A\u8FC7 ",paraId:0,tocIndex:0},{value:"yarn pm create my-plugin",paraId:0,tocIndex:0},{value:" \u5FEB\u901F\u521B\u5EFA\u4E00\u4E2A\u7A7A\u63D2\u4EF6\uFF0C\u76EE\u5F55\u7ED3\u6784\u5982\u4E0B\uFF1A",paraId:0,tocIndex:0},{value:`|- /my-plugin
  |- /src
    |- /client      # \u63D2\u4EF6\u5BA2\u6237\u7AEF\u4EE3\u7801
    |- /server      # \u63D2\u4EF6\u670D\u52A1\u7AEF\u4EE3\u7801
  |- client.d.ts
  |- client.js
  |- package.json   # \u63D2\u4EF6\u5305\u4FE1\u606F
  |- server.d.ts
  |- server.js
  |- build.config.ts # \u6216\u8005 \`build.config.js\` \uFF0C\u7528\u4E8E\u4FEE\u6539\u6253\u5305\u914D\u7F6E\uFF0C\u5B9E\u73B0\u81EA\u5B9A\u4E49\u903B\u8F91
`,paraId:1,tocIndex:0},{value:"/src/server",paraId:2,tocIndex:0},{value:" \u7684\u6559\u7A0B\u53C2\u8003 ",paraId:2,tocIndex:0},{value:"\u670D\u52A1\u7AEF",paraId:3,tocIndex:0},{value:" \u7AE0\u8282\uFF0C",paraId:2,tocIndex:0},{value:"/src/client",paraId:2,tocIndex:0},{value:" \u7684\u6559\u7A0B\u53C2\u8003 ",paraId:2,tocIndex:0},{value:"\u5BA2\u6237\u7AEF",paraId:4,tocIndex:0},{value:" \u7AE0\u8282\u3002",paraId:2,tocIndex:0},{value:"\u5982\u679C\u4F60\u60F3\u8981\u81EA\u5B9A\u4E49\u6253\u5305\u914D\u7F6E\uFF0C\u53EF\u4EE5\u5728\u6839\u76EE\u5F55\u4E0B\u521B\u5EFA ",paraId:5,tocIndex:0},{value:"config.js",paraId:5,tocIndex:0},{value:" \u6587\u4EF6\uFF0C\u5185\u5BB9\u5982\u4E0B\uFF1A",paraId:5,tocIndex:0},{value:`import { defineConfig } from '@nocobase/build';

export default defineConfig({
  modifyViteConfig: (config) => {
    // vite \u662F\u7528\u6765\u6253\u5305 \`src/client\` \u7AEF\u4EE3\u7801\u7684

    // \u4FEE\u6539 Vite \u914D\u7F6E\uFF0C\u5177\u4F53\u53EF\u53C2\u8003\uFF1Ahttps://vitejs.dev/guide/
    return config
  },
  modifyTsupConfig: (config) => {
    // tsup \u662F\u7528\u6765\u6253\u5305 \`src/server\` \u7AEF\u4EE3\u7801\u7684

    // \u4FEE\u6539 tsup \u914D\u7F6E\uFF0C\u5177\u4F53\u53EF\u53C2\u8003\uFF1Ahttps://tsup.egoist.dev/#using-custom-configuration
    return config
  },
  beforeBuild: (log) => {
    // \u6784\u5EFA\u5F00\u59CB\u524D\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u53EF\u4EE5\u5728\u6784\u5EFA\u5F00\u59CB\u524D\u505A\u4E00\u4E9B\u64CD\u4F5C
  },
  afterBuild: (log: PkgLog) => {
    // \u6784\u5EFA\u5B8C\u6210\u540E\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u53EF\u4EE5\u5728\u6784\u5EFA\u5B8C\u6210\u540E\u505A\u4E00\u4E9B\u64CD\u4F5C
  };
});
`,paraId:6,tocIndex:0}]},472227:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase offers three distinct methods for organizing plugins, ensuring that all plugin packages are ultimately consolidated within the ",paraId:0,tocIndex:0},{value:"node_modules",paraId:0,tocIndex:0},{value:" directory at the project's root:",paraId:0,tocIndex:0},{value:"This directory is reserved for storing pre-compiled plugins that require no additional dependencies. These plugins are designed for immediate use\u2014simply plug and play. Plugins added via the interface are placed in this directory, and you can also add plugins using the ",paraId:1,tocIndex:1},{value:"pm add",paraId:1,tocIndex:1},{value:" command.",paraId:1,tocIndex:1},{value:`tar -xvzf /downloads/plugin-data-source-external-mysql-0.21.0-alpha.10.tgz -C /my-nocobase-app/storage/plugins/@nocobase/plugin-data-source-external-mysql --strip-components=1
`,paraId:2,tocIndex:1},{value:"The directory structure is organized as follows:",paraId:3,tocIndex:1},{value:`|- /storage/
  |- /plugins/
    |- /@nocobase/
      |- /plugin-data-source-external-mysql/
`,paraId:4,tocIndex:1},{value:"For plugins that are still in development, maintenance is handled through Yarn workspaces. Running ",paraId:5,tocIndex:2},{value:"yarn install",paraId:5,tocIndex:2},{value:" will ensure that all dependencies for these plugins are downloaded. The source code is accessible, but these plugins require compilation before they can be deployed in a production environment. The structure of these plugin packages mirrors that of npm packages, as illustrated below:",paraId:5,tocIndex:2},{value:`|- /packages/
  |- /plugins/
    |- /@nocobase/
      |- /plugin-hello1/
      |- /plugin-hello2/
    |- /my-nocobase-plugin-hello1/
    |- /my-nocobase-plugin-hello2/
`,paraId:6,tocIndex:2},{value:"An example of this method is the NocoBase preset plugin, which lists its plugins under the ",paraId:7,tocIndex:3},{value:"dependencies",paraId:7,tocIndex:3},{value:" section in ",paraId:7,tocIndex:3},{value:"package.json",paraId:7,tocIndex:3},{value:". When you run ",paraId:7,tocIndex:3},{value:"yarn install",paraId:7,tocIndex:3},{value:", all specified plugins are automatically downloaded and ready for use.",paraId:7,tocIndex:3},{value:`{
  "name": "@nocobase/preset-nocobase",
  "version": "0.21.0-alpha.15",
  "license": "AGPL-3.0",
  "main": "./lib/server/index.js",
  "dependencies": {
    "@nocobase/plugin-acl": "0.21.0-alpha.15",
    "@nocobase/plugin-action-bulk-edit": "0.21.0-alpha.15",
    "@nocobase/plugin-action-bulk-update": "0.21.0-alpha.15",
    "@nocobase/plugin-action-duplicate": "0.21.0-alpha.15",
    "@nocobase/plugin-action-print": "0.21.0-alpha.15",
    "@nocobase/plugin-api-doc": "0.21.0-alpha.15",
    "@nocobase/plugin-api-keys": "0.21.0-alpha.15",
    "@nocobase/plugin-audit-logs": "0.21.0-alpha.15",
    "@nocobase/plugin-auth": "0.21.0-alpha.15",
    "@nocobase/plugin-backup-restore": "0.21.0-alpha.15",
    "@nocobase/plugin-calendar": "0.21.0-alpha.15",
    "@nocobase/plugin-cas": "0.21.0-alpha.15",
    "@nocobase/plugin-charts": "0.21.0-alpha.15",
    "@nocobase/plugin-china-region": "0.21.0-alpha.15",
    "@nocobase/plugin-client": "0.21.0-alpha.15",
    "@nocobase/plugin-collection-manager": "0.21.0-alpha.15",
    "@nocobase/plugin-custom-request": "0.21.0-alpha.15",
    "@nocobase/plugin-data-source-manager": "0.21.0-alpha.15",
    "@nocobase/plugin-data-visualization": "0.21.0-alpha.15",
    "@nocobase/plugin-error-handler": "0.21.0-alpha.15",
    "@nocobase/plugin-export": "0.21.0-alpha.15",
    "@nocobase/plugin-file-manager": "0.21.0-alpha.15",
    "@nocobase/plugin-formula-field": "0.21.0-alpha.15",
    "@nocobase/plugin-gantt": "0.21.0-alpha.15",
    "@nocobase/plugin-graph-collection-manager": "0.21.0-alpha.15",
    "@nocobase/plugin-iframe-block": "0.21.0-alpha.15",
    "@nocobase/plugin-import": "0.21.0-alpha.15",
    "@nocobase/plugin-kanban": "0.21.0-alpha.15",
    "@nocobase/plugin-localization-management": "0.21.0-alpha.15",
    "@nocobase/plugin-logger": "0.21.0-alpha.15",
    "@nocobase/plugin-map": "0.21.0-alpha.15",
    "@nocobase/plugin-mobile-client": "0.21.0-alpha.15",
    "@nocobase/plugin-mock-collections": "0.21.0-alpha.15",
    "@nocobase/plugin-multi-app-manager": "0.21.0-alpha.15",
    "@nocobase/plugin-multi-app-share-collection": "0.21.0-alpha.15",
    "@nocobase/plugin-oidc": "0.21.0-alpha.15",
    "@nocobase/plugin-saml": "0.21.0-alpha.15",
    "@nocobase/plugin-sequence-field": "0.21.0-alpha.15",
    "@nocobase/plugin-sms-auth": "0.21.0-alpha.15",
    "@nocobase/plugin-snapshot-field": "0.21.0-alpha.15",
    "@nocobase/plugin-system-settings": "0.21.0-alpha.15",
    "@nocobase/plugin-theme-editor": "0.21.0-alpha.15",
    "@nocobase/plugin-ui-schema-storage": "0.21.0-alpha.15",
    "@nocobase/plugin-users": "0.21.0-alpha.15",
    "@nocobase/plugin-verification": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-action-trigger": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-aggregate": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-delay": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-dynamic-calculation": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-loop": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-manual": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-parallel": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-request": "0.21.0-alpha.15",
    "@nocobase/plugin-workflow-sql": "0.21.0-alpha.15"
  }
}
`,paraId:8,tocIndex:3}]},756647:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data modeling is the lowest level foundation of an application. In NocoBase applications we model data through data tables (Collection) and fields (Field), and the modeling is also mapped to database tables for persistence.",paraId:0,tocIndex:1},{value:"Collection is a collection of all similar data, which corresponds to the concept of database tables in NocoBase. Such as orders, products, users, comments, etc. can form a collection definition. Different collections are distinguished by name and contain fields defined by ",paraId:1,tocIndex:2},{value:"fields",paraId:1,tocIndex:2},{value:", such as",paraId:1,tocIndex:2},{value:`db.collection({
  name: 'posts',
  fields: [
    { name: 'title', type: 'string' }
    { name: 'content', type: 'text' },
    // ...
  ]
});
`,paraId:2,tocIndex:2},{value:"The collection is only in memory after the definition, you need to call the [``db.sync()`'' (/api/database#sync) method to synchronize it to the database.",paraId:3,tocIndex:2},{value:'Corresponding to the concept of database table "fields", each data table (Collection) can have a number of Fields, for example.',paraId:4,tocIndex:3},{value:`db.collection({
  name: 'users',
  fields: [
    { type: 'string', name: 'name' }
    { type: 'integer', name: 'age' }
    // Other fields
  ],
});
`,paraId:5,tocIndex:3},{value:"The field name (",paraId:6,tocIndex:3},{value:"name",paraId:6,tocIndex:3},{value:") and field type (",paraId:6,tocIndex:3},{value:"type",paraId:6,tocIndex:3},{value:") are required, and different fields are distinguished by the field name (",paraId:6,tocIndex:3},{value:"name",paraId:6,tocIndex:3},{value:"). All field types and their configurations are described in the [List of built-in field types](/api/database/field#List of built-in field types) section of the API reference.",paraId:6,tocIndex:3},{value:"For developers, we usually build functional collections that are different from normal collections and solidify these collections as part of the plugin and combine them with other data processing processes to form a complete functionality.",paraId:7,tocIndex:4},{value:"Let's take a simple online store plugin as an example to show how to model and manage the collections of the plugin. Assuming you have already learned about ",paraId:8,tocIndex:4},{value:"Develop your first plugin",paraId:9,tocIndex:4},{value:", we continue to build on the previous plugin code, except that the name of the plugin is changed from ",paraId:8,tocIndex:4},{value:"hello",paraId:8,tocIndex:4},{value:" to ",paraId:8,tocIndex:4},{value:"shop-modeling",paraId:8,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"For a store, you first need to create a collection of products, named ",paraId:10,tocIndex:5},{value:"products",paraId:10,tocIndex:5},{value:". Instead of calling ",paraId:10,tocIndex:5},{value:"db.collection()",paraId:11,tocIndex:5},{value:" directly, in the plugin we will use a more convenient method to import multiple files of defined data tables at once. So let's start by creating a file for the product collection definition named ",paraId:10,tocIndex:5},{value:"collections/products.ts",paraId:10,tocIndex:5},{value:" and fill it with the following content.",paraId:10,tocIndex:5},{value:`export default {
  name: 'products',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
    {
      type: 'integer',
      name: 'price',
    },
    {
      type: 'boolean',
      name: 'enabled',
    },
    {
      type: 'integer',
      name: 'inventory',
    },
  ],
};
`,paraId:12,tocIndex:5},{value:"As you can see, the collections structure definition can be used directly in standard JSON format, where ",paraId:13,tocIndex:5},{value:"name",paraId:13,tocIndex:5},{value:" and ",paraId:13,tocIndex:5},{value:"fields",paraId:13,tocIndex:5},{value:" are required representing the collection's name and the field definitions in the collection. Field definitions similar to Sequelize create system fields such as primary key (",paraId:13,tocIndex:5},{value:"id",paraId:13,tocIndex:5},{value:"), data creation time (",paraId:13,tocIndex:5},{value:"createdAt",paraId:13,tocIndex:5},{value:") and data update time (",paraId:13,tocIndex:5},{value:"updatedAt",paraId:13,tocIndex:5},{value:") by default, which can be overridden by a configuration with the same name if there is a special need.",paraId:13,tocIndex:5},{value:"The data table defined in this file we can introduce and complete the definition in the ",paraId:14,tocIndex:5},{value:"load()",paraId:14,tocIndex:5},{value:" cycle of the main plugin class using ",paraId:14,tocIndex:5},{value:"db.import()",paraId:14,tocIndex:5},{value:". This is shown below.",paraId:14,tocIndex:5},{value:`import path from 'path';
import { Plugin } from '@nocobase/server';

export default class ShopPlugin extends Plugin {
  async load() {
    await this.db.import({
      directory: path.resolve(__dirname, 'collections'),
    });

    this.app.acl.allow('products', '*');
    this.app.acl.allow('categories', '*');
    this.app.acl.allow('orders', '*');
  }
}
`,paraId:15,tocIndex:5},{value:"In the meantime, for testing purposes, we will temporarily allow all access permissions for the data in these collections, and later we will detail how to manage data permissions in ",paraId:16,tocIndex:5},{value:"Permissions Management",paraId:17,tocIndex:5},{value:".",paraId:16,tocIndex:5},{value:"This way, when the plugin is loaded by the main application, the ",paraId:18,tocIndex:5},{value:"products",paraId:18,tocIndex:5},{value:" collection we defined is also loaded into the memory of the database management instance. At the same time, the NocoBase constraint-based resource mapping of the collections automatically generates the corresponding CRUD HTTP API after the application's service is started.",paraId:18,tocIndex:5},{value:"When the following URLs are requested from the client, the corresponding responses are obtained.",paraId:19,tocIndex:5},{value:"GET /api/products:list",paraId:20,tocIndex:5},{value:": Get a list of all product data",paraId:20,tocIndex:5},{value:"GET /api/products:get?filterByTk=<id>",paraId:20,tocIndex:5},{value:": Get the product data for the specified ID",paraId:20,tocIndex:5},{value:"POST /api/products",paraId:20,tocIndex:5},{value:": Create a new product data",paraId:20,tocIndex:5},{value:"PUT /api/products:update?filterByTk=<id>",paraId:20,tocIndex:5},{value:": Update a product data",paraId:20,tocIndex:5},{value:"DELETE /api/products:destroy?filterByTk=<id>",paraId:20,tocIndex:5},{value:": Delete a product data",paraId:20,tocIndex:5},{value:"In the above example, we only defined a product collection, but in reality a product also needs to be associated to a category, a brand, a supplier, etc. For example, we can define a ",paraId:21,tocIndex:6},{value:"categories",paraId:21,tocIndex:6},{value:" collection to store the categories, and then add a ",paraId:21,tocIndex:6},{value:"category",paraId:21,tocIndex:6},{value:" field to the product collection to associate it with the category collection.",paraId:21,tocIndex:6},{value:"Add a new file ",paraId:22,tocIndex:6},{value:"collections/categories.ts",paraId:22,tocIndex:6},{value:" and fill in the content.",paraId:22,tocIndex:6},{value:`export default {
  name: 'categories',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
    {
      type: 'hasMany',
      name: 'products',
    },
  ],
};
`,paraId:23,tocIndex:6},{value:"We have defined two fields for the ",paraId:24,tocIndex:6},{value:"categories",paraId:24,tocIndex:6},{value:" collection, one for the title and another one-to-many field for all the products associated under that category, which will be described later. Since we have already used the ",paraId:24,tocIndex:6},{value:"db.import()",paraId:24,tocIndex:6},{value:" method in the plugin's main class to import all the data table definitions under the ",paraId:24,tocIndex:6},{value:"collections",paraId:24,tocIndex:6},{value:" directory, the new ",paraId:24,tocIndex:6},{value:"categories",paraId:24,tocIndex:6},{value:" collection added here will also be automatically imported into the database management instance.",paraId:24,tocIndex:6},{value:"Modify the file ",paraId:25,tocIndex:6},{value:"collections/products.ts`` to add a ",paraId:25,tocIndex:6},{value:"category",paraId:25,tocIndex:6},{value:"field to the",paraId:25,tocIndex:6},{value:"fields`.",paraId:25,tocIndex:6},{value:`{
  name: 'products',
  fields: [
    // ...
    {
      type: 'belongsTo',
      name: 'category',
      target: 'categories',
    }
  ]
}
`,paraId:26,tocIndex:6},{value:"As you can see, the ",paraId:27,tocIndex:6},{value:"category",paraId:27,tocIndex:6},{value:" field we added to the ",paraId:27,tocIndex:6},{value:"products",paraId:27,tocIndex:6},{value:" collection is a ",paraId:27,tocIndex:6},{value:"belongsTo",paraId:27,tocIndex:6},{value:" type field, and its ",paraId:27,tocIndex:6},{value:"target",paraId:27,tocIndex:6},{value:" property points to the ",paraId:27,tocIndex:6},{value:"categories",paraId:27,tocIndex:6},{value:" collection, thus defining a many-to-one relationship between the ",paraId:27,tocIndex:6},{value:"products",paraId:27,tocIndex:6},{value:" collection and the ",paraId:27,tocIndex:6},{value:"categories",paraId:27,tocIndex:6},{value:" collection. Combined with the ",paraId:27,tocIndex:6},{value:"hasMany",paraId:27,tocIndex:6},{value:" field defined in the ",paraId:27,tocIndex:6},{value:"categories",paraId:27,tocIndex:6},{value:" collection, we can achieve a relationship where one product can be associated to multiple categories and multiple products under one category. Usually ",paraId:27,tocIndex:6},{value:"belongsTo",paraId:27,tocIndex:6},{value:" and ",paraId:27,tocIndex:6},{value:"hasMany",paraId:27,tocIndex:6},{value:" can appear in pairs, defined in two separate collections.",paraId:27,tocIndex:6},{value:"Once the relationship between the two collections is defined, we can also request the associated data directly through the HTTP API",paraId:28,tocIndex:6},{value:"GET /api/products:list?appends=category",paraId:29,tocIndex:6},{value:": Get all products data, including the associated categories data",paraId:29,tocIndex:6},{value:"GET /api/products:get?filterByTk=<id>&appends=category",paraId:29,tocIndex:6},{value:": Get the product data for the specified ID, including the associated category data.",paraId:29,tocIndex:6},{value:"GET /api/categories/<categoryId>/products:list",paraId:29,tocIndex:6},{value:": Get all the products under the specified category",paraId:29,tocIndex:6},{value:"POST /api/categories/<categoryId>/products",paraId:29,tocIndex:6},{value:": Create a new product under the specified category",paraId:29,tocIndex:6},{value:"Similar to the general ORM framework, NocoBase has four built-in relational field types, for more information you can refer to the section about API field types.",paraId:30,tocIndex:6},{value:"belongsTo",paraId:31,tocIndex:6},{value:" type",paraId:31,tocIndex:6},{value:"belongsToMany",paraId:32,tocIndex:6},{value:" type",paraId:32,tocIndex:6},{value:"hasMany",paraId:33,tocIndex:6},{value:" type",paraId:33,tocIndex:6},{value:"hasOne",paraId:34,tocIndex:6},{value:" type",paraId:34,tocIndex:6},{value:"In the above example, we already have a product collection and a category collection, in order to provide the sales process we also need an order collection. We can add a new ",paraId:35,tocIndex:7},{value:"orders.ts",paraId:35,tocIndex:7},{value:" file to the ",paraId:35,tocIndex:7},{value:"collections",paraId:35,tocIndex:7},{value:" directory and define an ",paraId:35,tocIndex:7},{value:"orders",paraId:35,tocIndex:7},{value:" collection as follows",paraId:35,tocIndex:7},{value:`export default {
  name: 'orders',
  fields: [
    {
      type: 'uuid',
      name: 'id',
      primaryKey: true,
    },
    {
      type: 'belongsTo',
      name: 'product',
    },
    {
      type: 'integer',
      name: 'quantity',
    },
    {
      type: 'integer',
      name: 'totalPrice',
    },
    {
      type: 'integer',
      name: 'status',
    },
    {
      type: 'string',
      name: 'address',
    },
    {
      type: 'belongsTo',
      name: 'user',
    },
  ],
};
`,paraId:36,tocIndex:7},{value:"For the sake of simplicity, the association between the order collection and the product collection we simply define as a many-to-one relationship, while in the actual business may be used in a complex modeling approach such as many-to-many or snapshot. As you can see, an order in addition to corresponding to a commodity, we also added a relationship definition corresponding to the users, which is a collection managed by the NocoBase built-in plugins (refer to ",paraId:37,tocIndex:7},{value:"code for users plugin",paraId:37,tocIndex:7},{value:' for details plugins/users)). If we want to extend the definition of the "multiple orders owned by a user" relationship for the existing users collection, we can continue to add a new collection file ',paraId:37,tocIndex:7},{value:"collections/users.ts",paraId:37,tocIndex:7},{value:" inside the current shop-modeling plugin, which is different from exporting the JSON collection directly. Unlike the direct export of a JSON, the ",paraId:37,tocIndex:7},{value:"@nocobase/database",paraId:37,tocIndex:7},{value:" package's ",paraId:37,tocIndex:7},{value:"extend()",paraId:37,tocIndex:7},{value:" method is used here to extend the definition of an existing collection: ``ts",paraId:37,tocIndex:7},{value:`import { extend } from '@nocobase/database';

export extend({
  name: 'users',
  fields: [
    {
      type: 'hasMany',
      name: 'orders'
    }
  ]
});
`,paraId:38,tocIndex:7},{value:"This way, the existing users table also has an ",paraId:39,tocIndex:7},{value:"orders",paraId:39,tocIndex:7},{value:" associated field, and we can retrieve all the order data for a given user via ",paraId:39,tocIndex:7},{value:"GET /api/users/<userId>/orders:list",paraId:39,tocIndex:7},{value:".",paraId:39,tocIndex:7},{value:"This method is very useful when extending collections already defined by other plugins, so that other existing plugins do not depend on the new plugin in reverse, but only form one-way dependencies, facilitating a certain degree of decoupling at the extension level.",paraId:40,tocIndex:7},{value:"We use ",paraId:41,tocIndex:8},{value:"uuid",paraId:41,tocIndex:8},{value:" type for ",paraId:41,tocIndex:8},{value:"id",paraId:41,tocIndex:8},{value:" field when we define order table, which is a built-in field type. Sometimes we may feel that UUID looks too long and waste space, and the query performance is not good, we want to use a more suitable field type, such as a complex numbering logic with date information, or Snowflake algorithm, we need to extend a custom field type.",paraId:41,tocIndex:8},{value:"Suppose we need to apply the Snowflake ID generation algorithm directly to extend a ",paraId:42,tocIndex:8},{value:"snowflake",paraId:42,tocIndex:8},{value:" field type, we can create a ",paraId:42,tocIndex:8},{value:"fields/snowflake.ts",paraId:42,tocIndex:8},{value:" file.",paraId:42,tocIndex:8},{value:`// Import the algorithm toolkit
import { Snowflake } from 'nodejs-snowflake';
// Import field type base class
import { DataTypes, Field, BaseColumnFieldOptions } from '@nocobase/database';

export interface SnowflakeFieldOptions extends BaseColumnFieldOptions {
  type: 'snowflake';
  epoch: number;
  instanceId: number;
}

export class SnowflakeField extends Field {
  get dataType() {
    return DataTypes.BIGINT;
  }

  constructor(options: SnowflakeFieldOptions, context) {
    super(options, context);

    const {
      epoch: custom_epoch,
      instanceId: instance_id = process.env.INSTANCE_ID
        ? Number.parseInt(process.env.INSTANCE_ID)
        : 0,
    } = options;
    this.generator = new Snowflake({ custom_epoch, instance_id });
  }

  setValue = (instance) => {
    const { name } = this.options;
    instance.set(name, this.generator.getUniqueID());
  };

  bind() {
    super.bind();
    this.on('beforeCreate', this.setValue);
  }

  unbind() {
    super.unbind();
    this.off('beforeCreate', this.setValue);
  }
}

export default SnowflakeField;
`,paraId:43,tocIndex:8},{value:"Afterwards, register the new field type into the collection in the main plugin file.",paraId:44,tocIndex:8},{value:`import SnowflakeField from '. /fields/snowflake';

export default class ShopPlugin extends Plugin {
  initialize() {
    // ...
    this.db.registerFieldTypes({
      snowflake: SnowflakeField,
    });
    // ...
  }
}
`,paraId:45,tocIndex:8},{value:"This allows us to use the ",paraId:46,tocIndex:8},{value:"snowflake",paraId:46,tocIndex:8},{value:" field type in the order table:",paraId:46,tocIndex:8},{value:`export default {
  name: 'orders',
  fields: [
    {
      type: 'snowflake'
      name: 'id',
      primaryKey: true
    },
    // ... . other fields
  ]
}
`,paraId:47,tocIndex:8},{value:"With the above example, we basically understand how to model data in a plugin, including.",paraId:48,tocIndex:9},{value:"Defining collections and common fields",paraId:49,tocIndex:9},{value:"Defining association collections and fields relationships",paraId:49,tocIndex:9},{value:"Extending fields of an existing collections",paraId:49,tocIndex:9},{value:"Extending new field types",paraId:49,tocIndex:9},{value:"We have put the code covered in this chapter into a complete sample package ",paraId:50,tocIndex:9},{value:"packages/samples/shop-modeling",paraId:50,tocIndex:9},{value:", which can be run directly locally to see the results.",paraId:50,tocIndex:9}]},678255:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a relational database, the standard way to build a table relationship is to add a foreign key field followed by a foreign key constraint. For example, Knex builds a table with the following example.",paraId:0,tocIndex:0},{value:`knex.schema.table('posts', function (table) {
  table.integer('userId').unsigned();
  table.foreign('userId').references('users.id');
});
`,paraId:1,tocIndex:0},{value:"This procedure creates a userId field in the posts table and sets the foreign key constraint posts.userId to refer to users.id. In NocoBase's Collection, such a relational constraint is created by configuring the relational field, e.g.",paraId:2,tocIndex:0},{value:`{
  name: 'posts',
  fields: [
    {
      type: 'belongsTo',
      name: 'user',
      target: 'users',
      foreignKey: 'userId',
    },
  ],
}
`,paraId:3,tocIndex:0},{value:`interface BelongsTo {
  type: 'belongsTo';
  name: string;
  // defaults to name's plural
  target?: string;
  // The default value is the primary key of the target model, usually 'id'
  targetKey?: any;
  // defaults to target + 'Id'
  foreignKey?: any;
}

// The authors table's primary key id is concatenated with the books table's foreign key authorId
{
  name: 'books',
  fields: [
    {
      type: 'belongsTo',
      name: 'author',
      target: 'authors',
      targetKey: 'id', // authors table's primary key
      foreignKey: 'authorId', // foreign key in books table
    }
  ],
}
`,paraId:4,tocIndex:2},{value:`interface HasOne {
  type: 'hasOne';
  name: string;
  // defaults to name's plural
  target?: string;
  // The default value is the primary key of the source model, usually 'id'
  sourceKey?: string;
  // default value is the singular form of source collection name + 'Id'
  foreignKey?: string;
foreignKey?}

// The users table's primary key id is concatenated with the profiles' foreign key userId
{
  name: 'users',
  fields: [
    {
      type: 'hasOne',
      name: 'profile',
      target: 'profiles',
      sourceKey: 'id', // users table's primary key
      foreignKey: 'userId', // foreign key in profiles table
    }
  ],
}
`,paraId:5,tocIndex:3},{value:`interface HasMany {
  type: 'hasMany';
  name: string;
  // defaults to name
  target?: string;
  // The default value is the primary key of the source model, usually 'id'
  sourceKey?: string;
  // the default value is the singular form of the source collection name + 'Id'
  foreignKey?: string;
}

// The posts table's primary key id is concatenated with the comments table's postId
{
  name: 'posts',
  fields: [
    {
      type: 'hasMany',
      name: 'comments',
      target: 'comments',
      sourceKey: 'id', // posts table's primary key
      foreignKey: 'postId', // foreign key in the comments table
    }
  ],
}
`,paraId:6,tocIndex:4},{value:`interface BelongsToMany {
  type: 'belongsToMany';
  name: string;
  // default value is name
  target?: string;
  // defaults to the source collection name and target in the natural order of the first letter of the string
  through?: string;
  // defaults to the singular form of source collection name + 'Id'
  foreignKey?: string;
  // The default value is the primary key of the source model, usually id
  sourceKey?: string;
  // the default value is the singular form of target + 'Id'
  otherKey?: string;
  // the default value is the primary key of the target model, usually id
  targetKey?: string;
}

// tags table's primary key, posts table's primary key and posts_tags two foreign keys are linked
{
  name: 'posts',
  fields: [
    {
      type: 'believesToMany',
      name: 'tags',
      target: 'tags',
      through: 'posts_tags', // intermediate table
      foreignKey: 'tagId', // foreign key 1, in posts_tags table
      otherKey: 'postId', // foreignKey2, in posts_tags table
      targetKey: 'id', // tags table's primary key
      sourceKey: 'id', // posts table's primary key
    }
  ],
}
`,paraId:7,tocIndex:5}]},531404:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In real business scenarios, different collections may have their own initialization rules and business logic, and NocoBase addresses such issues by providing collection templates.",paraId:0,tocIndex:0},{value:`db.collection({
  name: 'posts',
  fields: [
    {
      type: 'string',
      name: 'title',
    },
  ],
});
`,paraId:1,tocIndex:1},{value:`db.collection({
  name: 'categories',
  tree: 'adjacency-list',
  fields: [
    {
      type: 'string',
      name: 'name',
    },
    {
      type: 'string',
      name: 'description',
    },
    {
      type: 'belongsTo',
      name: 'parent',
      target: 'categories',
      foreignKey: 'parentId',
    },
    {
      type: 'hasMany',
      name: 'children',
      target: 'categories',
      foreignKey: 'parentId',
    },
  ],
});
`,paraId:2,tocIndex:2},{value:`db.collection({
  name: 'a',
  fields: [],
});

db.collection({
  name: 'b',
  inherits: 'a',
  fields: [],
});
`,paraId:3,tocIndex:3},{value:"As in the case of calendar collections, each initialized collection needs to be initialized with special cron and exclude fields, and the definition of such fields is done by the template",paraId:4,tocIndex:4},{value:`db.collection({
  name: 'events',
  template: 'calendar',
});
`,paraId:5,tocIndex:4}]},866285:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase has three ways to configure collections.",paraId:0,tocIndex:0},{value:"Business data is generally recommended to be configured using the interface, and the NocoBase platform provides two interfaces to configure collections.",paraId:1,tocIndex:1},{value:"In the plugin, custom collection must be placed in the ",paraId:2,tocIndex:4},{value:"src/server/collections/*.ts",paraId:2,tocIndex:4},{value:" directory of the plugin, with the following content:",paraId:2,tocIndex:4},{value:`import { defineCollection } from '@nocobase/database';

export default defineCollection({
  name: 'examples',
});
`,paraId:3,tocIndex:4},{value:"Extend the options of an existing collection using ",paraId:4,tocIndex:4},{value:"extendCollection()",paraId:4,tocIndex:4},{value:".",paraId:4,tocIndex:4},{value:`import { extendCollection } from '@nocobase/database';

export default extendCollection({
  name: 'examples',
});
`,paraId:5,tocIndex:4},{value:"Related API Reference",paraId:6,tocIndex:4},{value:"defineCollection()",paraId:7,tocIndex:4},{value:"extendCollection()",paraId:8,tocIndex:4},{value:"The collection configured in the plugin is automatically synchronized with the database when the plugin is activated, giving birth to the corresponding data tables and fields.",paraId:9,tocIndex:4},{value:"The collection configured in the plugin is automatically synchronized with the database when the plugin is activated, generating the corresponding data tables and fields. If the plugin is already active, you need to handle the synchronization of the data tables with the upgrade command ",paraId:10},{value:"yarn nocobase upgrade",paraId:10},{value:".",paraId:10},{value:"Third parties can also manage data tables via the HTTP interface (permissions required)",paraId:11,tocIndex:5},{value:`GET /api/collections
POST /api/collections
GET /api/collections/<collectionName>
PUT /api/collections/<collectionName>
DELETE /api/collections/<collectionName>
`,paraId:12,tocIndex:6},{value:`GET /api/collections/<collectionName>/fields
POST /api/collections/<collectionName>/fields
GET /api/collections/<collectionName>/fields/<fieldName>
PUT /api/collections/<collectionName>/fields/<fieldName>
DELETE /api/collections/<collectionName>/fields/<fieldName>
`,paraId:13,tocIndex:7}]},977970:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The composition of a Collection Field in NocoBase consists of",paraId:0,tocIndex:0},{value:"For example, to extend the password type field ``type: 'password'`",paraId:1,tocIndex:1},{value:`export class MyPlugin extends Plugin {
  beforeLoad() {
    this.db.registerFieldTypes({
      password: PasswordField,
    });
  }
}

export class PasswordField extends Field {
  get dataType() {
    return DataTypes.STRING;
  }
}
`,paraId:2,tocIndex:1},{value:"More implementations of the built-in field types can be found here",paraId:3,tocIndex:1},{value:"Also see the full samples plugin ",paraId:3,tocIndex:1},{value:"packages/samples/shop-modeling",paraId:3,tocIndex:1},{value:"Related extension documentation can be found at",paraId:4,tocIndex:2},{value:"Extending Schema Components",paraId:5,tocIndex:2},{value:"Schema component library",paraId:6,tocIndex:2},{value:"Built-in field interfaces view here",paraId:7,tocIndex:3}]},601553:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Collection is a collection of all kinds of data, such as orders, products, users, comments, etc. Different collections are distinguished by name, e.g.",paraId:0,tocIndex:1},{value:`// Orders
{
  name: 'orders',
}
// Products
{
  name: 'products',
}
// Users
{
  name: 'users',
}
// Comments
{
  name: 'comments',
}
`,paraId:1,tocIndex:1},{value:"Each Collection has a number of Fields.",paraId:2,tocIndex:2},{value:`// Collection configuration
{
  name: 'users',
  fields: [
    { type: 'string', name: 'name' },
    { type: 'integer', name: 'age' },
    // Other fields
  ],
}
// sample data
[
  {
    name: 'Jason',
    age: 20,
  },
  { {
    name: 'Li Si',
    age: 18,
  }
];
`,paraId:3,tocIndex:2},{value:"The composition of a Collection Field in NocoBase consists of",paraId:4,tocIndex:2},{value:"Different fields are distinguished by name, and type indicates the data type of the field, which is divided into Attribute Type and Association Type, e.g.",paraId:5,tocIndex:3},{value:"Attribute - Attribute Type",paraId:6,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:"text",paraId:7,tocIndex:3},{value:"date",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"time",paraId:7,tocIndex:3},{value:"float",paraId:7,tocIndex:3},{value:"json",paraId:7,tocIndex:3},{value:"location",paraId:7,tocIndex:3},{value:"password",paraId:7,tocIndex:3},{value:"virtual",paraId:7,tocIndex:3},{value:"...",paraId:7,tocIndex:3},{value:"Relationship - Association Type",paraId:8,tocIndex:3},{value:"hasOne",paraId:9,tocIndex:3},{value:"hasMany",paraId:9,tocIndex:3},{value:"belongsTo",paraId:9,tocIndex:3},{value:"belongsToMany",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"The field has a data type, the IO of the field value is fine, but it is not enough, if you need to display the field on the interface, you need another dimension of configuration -- ",paraId:10,tocIndex:4},{value:"uiSchema",paraId:10,tocIndex:4},{value:", e.g.",paraId:10,tocIndex:4},{value:`// Email field, displayed with Input component, using email validation rules
{
  type: 'string',
  name: 'email',
  uiSchema: {
    'x-component': 'Input',
    'x-component-props': { size: 'large' },
    'x-validator': 'email',
    'x-pattern': 'editable', // editable state, and readonly state, read-pretty state
  },
}

// Example data
{
  email: 'admin@nocobase.com',
}

// Component example
<Input name={'email'} size={'large'} value={'admin@nocobase.com'} />
`,paraId:11,tocIndex:4},{value:"The uiSchema is used to configure the components of the field to be displayed on the interface, each field component will correspond to a value and includes several maintained configurations:",paraId:12,tocIndex:4},{value:"The component of the field",paraId:13,tocIndex:4},{value:"The parameters of the component",paraId:13,tocIndex:4},{value:"The field's validation rules",paraId:13,tocIndex:4},{value:"The mode of the field (editable, readonly, read-pretty)",paraId:13,tocIndex:4},{value:"The default value of the field",paraId:13,tocIndex:4},{value:"Other",paraId:13,tocIndex:4},{value:"see the UI Schema chapter for more information",paraId:14,tocIndex:4},{value:".",paraId:15,tocIndex:4},{value:"The built-in field components of NocoBase are",paraId:16,tocIndex:4},{value:"Input",paraId:17,tocIndex:4},{value:"InputNumber",paraId:17,tocIndex:4},{value:"Select",paraId:17,tocIndex:4},{value:"Radio",paraId:17,tocIndex:4},{value:"Checkbox",paraId:17,tocIndex:4},{value:"...",paraId:17,tocIndex:4},{value:"With Field Type and Field Component you can freely combine several fields, we call this combined template Field Interface, e.g.",paraId:18,tocIndex:5},{value:`// email field, string + input, email validation rules
{
  type: 'string',
  name: 'email',
  uiSchema: {
    'x-component': 'Input',
    'x-component-props': {},
    'x-validator': 'email',
  },
}

// phone field, string + input, phone validation rules
{
  type: 'string',
  name: 'phone',
  uiSchema: {
    'x-component': 'Input',
    'x-component-props': {},
    'x-validator': 'phone',
  },
}
`,paraId:19,tocIndex:5},{value:"The above email and phone require a full uiSchema to be configured each time which is very tedious. To simplify the configuration, another concept Field interface is introduced, which can template some parameters, e.g.",paraId:20,tocIndex:5},{value:`// Template for the email field
interface email {
  type: 'string';
  uiSchema: {
    'x-component': 'Input',
    'x-component-props': {},
    'x-validator': 'email',
  };
}

// Template for the phone field
interface phone {
  type: 'string';
  uiSchema: {
    'x-component': 'Input',
    'x-component-props': {},
    'x-validator': 'phone',
  };
}

// Simplified field configuration
// email
{
  interface: 'email',
  name: 'email',
}

// phone
{
  interface: 'phone',
  name: 'phone',
}
`,paraId:21,tocIndex:5},{value:"More Field Interface here",paraId:22,tocIndex:5}]},312709:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Collection is the backbone of NocoBase, a protocol for describing data structures (collections and fields), very close to the concept of a relational database, but not limited to relational databases, but can also be a data source for NoSQL databases, HTTP APIs, etc.",paraId:0,tocIndex:0},{value:"At this stage, the Collection protocol is based on the relational database interface (db.collections), and data sources such as NoSQL databases and HTTP APIs will be implemented gradually in the future.",paraId:1,tocIndex:0},{value:"Collection protocol mainly includes two parts: CollectionOptions and FieldOptions. Because Field is extensible, the parameters of FieldOptions are very flexible.",paraId:2,tocIndex:0},{value:`interface CollectionOptions {
  name: string;
  title?: string;
  // Tree structure table, TreeRepository
  tree?:
    | 'adjacency-list'
    | 'closure-table'
    | 'materialized-path'
    | 'nested-set';
  // parent-child inheritance
  inherits?: string | string[];
  fields?: FieldOptions[];
  timestamps?: boolean;
  paranoid?: boolean;
  sortable?: CollectionSortable;
  model?: string;
  repository?: string;
  /* This parameter is intended for plugin developers and indicates whether the table can be managed via the system UI. Default is false.
   * When set to true:
   * 1. The table will appear in the primary data source, and deletion of the table or any of its fields will be prohibited.
   * 2. The table can be used in system-level features such as blocks, workflows, etc.
   */
  uiManageable?: boolean;
  [key: string]: any;
}

type CollectionSortable =
  | string
  | boolean
  | { name?: string; scopeKey?: string };
`,paraId:3,tocIndex:1},{value:"Generic field parameters",paraId:4,tocIndex:2},{value:`interface FieldOptions {
  name: string;
  type: string;
  hidden?: boolean;
  index?: boolean;
  interface?: string;
  uiSchema?: ISchema;
}
`,paraId:5,tocIndex:2},{value:"Introduction to UI Schema here",paraId:6},{value:"Field Type includes Attribute Type and Association Type.",paraId:7,tocIndex:3},{value:"Attribute Type",paraId:8,tocIndex:3},{value:"'boolean'",paraId:9,tocIndex:3},{value:"'integer'",paraId:9,tocIndex:3},{value:"'bigInt'",paraId:9,tocIndex:3},{value:"'double'",paraId:9,tocIndex:3},{value:"'real'",paraId:9,tocIndex:3},{value:"'decimal'",paraId:9,tocIndex:3},{value:"'string'",paraId:9,tocIndex:3},{value:"'text'",paraId:9,tocIndex:3},{value:"'password'",paraId:9,tocIndex:3},{value:"'date'",paraId:9,tocIndex:3},{value:"'time'",paraId:9,tocIndex:3},{value:"'array'",paraId:9,tocIndex:3},{value:"'json'",paraId:9,tocIndex:3},{value:"'jsonb'",paraId:9,tocIndex:3},{value:"'uuid'",paraId:9,tocIndex:3},{value:"'uid'",paraId:9,tocIndex:3},{value:"'formula'",paraId:9,tocIndex:3},{value:"'radio'",paraId:9,tocIndex:3},{value:"'sort'",paraId:9,tocIndex:3},{value:"'virtual'",paraId:9,tocIndex:3},{value:"Association Type",paraId:10,tocIndex:3},{value:"'belongsTo'",paraId:11,tocIndex:3},{value:"'hasOne'",paraId:11,tocIndex:3},{value:"'hasMany'",paraId:11,tocIndex:3},{value:"'belongsToMany'",paraId:11,tocIndex:3},{value:"Basic",paraId:12,tocIndex:4},{value:"input",paraId:13,tocIndex:4},{value:"textarea",paraId:13,tocIndex:4},{value:"phone",paraId:13,tocIndex:4},{value:"email",paraId:13,tocIndex:4},{value:"integer",paraId:13,tocIndex:4},{value:"number",paraId:13,tocIndex:4},{value:"percent",paraId:13,tocIndex:4},{value:"password",paraId:13,tocIndex:4},{value:"icon",paraId:13,tocIndex:4},{value:"Choices",paraId:14,tocIndex:4},{value:"checkbox",paraId:15,tocIndex:4},{value:"select",paraId:15,tocIndex:4},{value:"multipleSelect",paraId:15,tocIndex:4},{value:"radioGroup",paraId:15,tocIndex:4},{value:"checkboxGroup",paraId:15,tocIndex:4},{value:"chinaRegion",paraId:15,tocIndex:4},{value:"Media",paraId:16,tocIndex:4},{value:"attachment",paraId:17,tocIndex:4},{value:"markdown",paraId:17,tocIndex:4},{value:"richText",paraId:17,tocIndex:4},{value:"Date & Time",paraId:18,tocIndex:4},{value:"datetime",paraId:19,tocIndex:4},{value:"time",paraId:19,tocIndex:4},{value:"Relation",paraId:20,tocIndex:4},{value:"linkTo - ",paraId:21,tocIndex:4},{value:"type: 'believesToMany'",paraId:21,tocIndex:4},{value:"oho - ",paraId:21,tocIndex:4},{value:"type: 'hasOne'",paraId:21,tocIndex:4},{value:"obo - ",paraId:21,tocIndex:4},{value:"type: 'believesTo'",paraId:21,tocIndex:4},{value:"o2m - ",paraId:21,tocIndex:4},{value:"type: 'hasMany'",paraId:21,tocIndex:4},{value:"m2o - ",paraId:21,tocIndex:4},{value:"type: 'believesTo'",paraId:21,tocIndex:4},{value:"m2m - ",paraId:21,tocIndex:4},{value:"type: 'believesToMany'",paraId:21,tocIndex:4},{value:"Advanced",paraId:22,tocIndex:4},{value:"formula",paraId:23,tocIndex:4},{value:"sequence",paraId:23,tocIndex:4},{value:"System info",paraId:24,tocIndex:4},{value:"id",paraId:25,tocIndex:4},{value:"createdAt",paraId:25,tocIndex:4},{value:"createdBy",paraId:25,tocIndex:4},{value:"updatedAt",paraId:25,tocIndex:4},{value:"updatedBy",paraId:25,tocIndex:4}]},409061:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a plugin, custom commands must be located in the ",paraId:0,tocIndex:0},{value:"src/server/commands/*.ts",paraId:0,tocIndex:0},{value:" directory of the plugin. The content should look like this:",paraId:0,tocIndex:0},{value:`import { Application } from '@nocobase/server';

export default function(app: Application) {
  app
    .command('echo')
    .option('-v, --version')
    .action(async ([options]) => {
      console.log('Hello World!');
      if (options.version) {
        console.log('Current version:', await app.version.get());
      }
    });
}
`,paraId:1,tocIndex:0},{value:"Custom commands in the plugin are only effective after the plugin is installed and activated.",paraId:2},{value:"Special Configurations for Commands:",paraId:3},{value:"ipc()",paraId:4},{value:" When the app is running, the command-line sends instructions through ipc to operate on the running app instance. Without the ",paraId:4},{value:"ipc()",paraId:4},{value:" configuration, a new application instance will be created to execute the command (this will not interfere with the running app instance).",paraId:4},{value:"auth()",paraId:4},{value:" Performs database verification. If the database configuration is incorrect, the command will not be executed.",paraId:4},{value:"preload()",paraId:4},{value:" Determines whether to pre-load the application configuration, i.e., execute ",paraId:4},{value:"app.load()",paraId:4},{value:".",paraId:4},{value:"These configurations can be adjusted according to the actual use of the command, as shown in the examples below:",paraId:5},{value:`app.command('a').ipc().action()
app.command('a').auth().action()
app.command('a').preload().action()
`,paraId:6}]},936129:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides a very large number of event listeners in the lifecycle of applications, plugins, and database, and these methods will only be executed when an event is triggered.",paraId:0,tocIndex:0},{value:"The registration of events is usually placed in afterAdd or beforeLoad",paraId:1,tocIndex:1},{value:`export class MyPlugin extends Plugin {
  // After the plugin is added, afterAdd() is executed with or without activation
  afterAdd() {
    this.app.on();
    this.db.on();
  }

  // beforeLoad() will only be executed after the plugin is activated
  beforeLoad() {
    this.app.on();
    this.db.on();
  }
}
`,paraId:2,tocIndex:1},{value:"db.on",paraId:3},{value:"Database related events are related to Collection configuration, CRUD of Repository, including:",paraId:4,tocIndex:2},{value:"'beforeSync' / 'afterSync'",paraId:5,tocIndex:2},{value:"'beforeValidate' / 'afterValidate'",paraId:5,tocIndex:2},{value:"'beforeCreate' / 'afterCreate'",paraId:5,tocIndex:2},{value:"'beforeUpdate' / 'afterUpdate'",paraId:5,tocIndex:2},{value:"'beforeSave' / 'afterSave'",paraId:5,tocIndex:2},{value:"'beforeDestroy' / 'afterDestroy'",paraId:5,tocIndex:2},{value:"'afterCreateWithAssociations'",paraId:5,tocIndex:2},{value:"'afterUpdateWithAssociations'",paraId:5,tocIndex:2},{value:"'afterSaveWithAssociations'",paraId:5,tocIndex:2},{value:"'beforeDefineCollection'",paraId:5,tocIndex:2},{value:"'afterDefineCollection'",paraId:5,tocIndex:2},{value:"'beforeRemoveCollection' / 'afterRemoveCollection'",paraId:5,tocIndex:2},{value:"See ",paraId:6,tocIndex:2},{value:"Database API",paraId:7,tocIndex:2},{value:" for more details.",paraId:6,tocIndex:2},{value:"app.on()",paraId:3},{value:"The app's events are related to the application's lifecycle, and the relevant events are:",paraId:8,tocIndex:3},{value:"'beforeLoad' / 'afterLoad'",paraId:9,tocIndex:3},{value:"'beforeInstall' / 'afterInstall'",paraId:9,tocIndex:3},{value:"'beforeUpgrade' / 'afterUpgrade'",paraId:9,tocIndex:3},{value:"'beforeStart' / 'afterStart'",paraId:9,tocIndex:3},{value:"'beforeStop' / 'afterStop'",paraId:9,tocIndex:3},{value:"'beforeDestroy' / 'afterDestroy'",paraId:9,tocIndex:3},{value:"Refer to ",paraId:10,tocIndex:3},{value:"Application API",paraId:11,tocIndex:3},{value:" for more details.",paraId:10,tocIndex:3},{value:"Let's continue with a simple online store as an example, the related collections modeling can be reviewed in the ",paraId:12,tocIndex:4},{value:"Collections and Fields",paraId:13,tocIndex:4},{value:" section for examples.",paraId:12,tocIndex:4},{value:"Usually we have different collections for products and orders. The problem of overselling can be solved by subtracting the inventory of the item after the customer has placed the order. At this point we can define the corresponding event for the action of Creating Order and solve the inventory modification problem at this time together with:",paraId:14,tocIndex:5},{value:`class ShopPlugin extends Plugin {
  beforeLoad() {
    this.db.on('orders.afterCreate', async (order, options) => {
      const product = await order.getProduct({
        transaction: options.transaction,
      });

      await product.update(
        {
          inventory: product.inventory - order.quantity,
        },
        {
          transaction: options.transaction,
        },
      );
    });
  }
}
`,paraId:15,tocIndex:5},{value:"Since the default Sequelize event carries information about the transaction, we can use transaction directly to ensure that both data actions are performed in the same transaction.",paraId:16,tocIndex:5},{value:"Similarly, you can change the order status to shipped after creating the shipping record: ```ts",paraId:17,tocIndex:5},{value:`class ShopPlugin extends Plugin {
  load() {
    this.db.on('deliveries.afterCreate', async (delivery, options) => {
      const orderRepo = this.db.getRepository('orders');
      await orderRepo.update({
        filterByTk: delivery.orderId,
        value: {
          status: 2
        }
        transaction: options.transaction
      });
    });
  }
}
`,paraId:18,tocIndex:5},{value:"Without considering complex cases such as using workflow plugins, we can also implement a simple timed task mechanism via application-level events, and it can be bound to the application's process and stop when it exits. For example, if we want to scan all orders at regular intervals and automatically sign them after the sign-off time.",paraId:19,tocIndex:6},{value:`class ShopPlugin extends Plugin {
  timer = null;
  orderReceiveExpires = 86400 * 7;

  checkOrder = async () => {
    const expiredDate = new Date(Date.now() - this.orderReceiveExpires);
    const deliveryRepo = this.db.getRepository('deliveries');
    const expiredDeliveries = await deliveryRepo.find({
      fields: ['id', 'orderId'],
      filter: {
        status: 0,
        createdAt: {
          $lt: expiredDate,
        },
      },
    });
    await deliveryRepo.update({
      filter: {
        id: expiredDeliveries.map((item) => item.get('id')),
      },
      values: {
        status: 1,
      },
    });
    const orderRepo = this.db.getRepository('orders');
    const [updated] = await orderRepo.update({
      filter: {
        status: 2,
        id: expiredDeliveries.map((item) => item.get('orderId')),
      },
      values: {
        status: 3,
      },
    });

    console.log('%d orders expired', updated);
  };

  load() {
    this.app.on('beforeStart', () => {
      // execute every minute
      this.timer = setInterval(this.checkOrder, 1000 * 60);
    });

    this.app.on('beforeStop', () => {
      clearInterval(this.timer);
      this.timer = null;
    });
  }
}
`,paraId:20,tocIndex:6},{value:"The above example gives us a basic understanding of what events do and the ways they can be used to extend.",paraId:21,tocIndex:7},{value:"Database related events",paraId:22,tocIndex:7},{value:"Application related events",paraId:22,tocIndex:7},{value:"The sample code covered in this chapter is integrated in the corresponding package ",paraId:23,tocIndex:7},{value:"packages/samples/shop-events",paraId:23,tocIndex:7},{value:", which can be run directly in run locally to see the results.",paraId:23,tocIndex:7}]},438512:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a plugin, both frontend and backend multilingual files are stored in the ",paraId:0,tocIndex:1},{value:"src/locale",paraId:0,tocIndex:1},{value:" folder. Click here to see ",paraId:0,tocIndex:1},{value:"all languages",paraId:1,tocIndex:1},{value:" supported by NocoBase.",paraId:0,tocIndex:1},{value:`|- /plugin-sample-i18n
  |- /src
    |- /locale      # Multilingual folder
      |- en_US.ts   # English language file
      |- zh_CN.ts   # Chinese language file
`,paraId:2,tocIndex:1},{value:"Just add translation entries in the corresponding multilingual files (",paraId:3,tocIndex:1},{value:"/src/locale/${lang}.ts",paraId:3,tocIndex:1},{value:"). If it's the first time adding a multilingual file, the application needs to be restarted to take effect. You can check the ",paraId:3,tocIndex:1},{value:"app:getLang",paraId:3,tocIndex:1},{value:" API to verify whether the translation entries have been added successfully.",paraId:3,tocIndex:1},{value:"http://localhost:13000/api/app:getLang?locale=zh-CN",paraId:4,tocIndex:1},{value:"The server has two i18n instances: app.i18n and ctx.i18n.",paraId:5,tocIndex:2},{value:"app.i18n is a global i18n instance, generally used in CLI. For example, it can be combined with inquirer to implement command-line interactions.",paraId:6,tocIndex:3},{value:`import { select } from '@inquirer/select';
import { input } from '@inquirer/input';

export class PluginSampleI18nServer extends Plugin {
  load() {
    this.app.command('test-i18n').action(async () => {
      const answer1 = await select({
        message: 'Select a language',
        choices: [
          {
            name: '\u4E2D\u6587',
            value: 'zh-CN',
          },
          {
            name: 'English',
            value: 'en-US',
          },
        ],
      });
      await this.app.changeLanguage(answer1);
      const answer2 = await input({
        message: this.app.i18n.t('Enter your name'),
      });
      console.log(this.app.i18n.t(\`Your name is {{name}}\`, { name: answer2 }));
    });
  }
}
`,paraId:7,tocIndex:3},{value:"It's a cloneInstance of the global app.i18n. Each request's ctx is completely independent, responding to multilingual information according to the client's language.",paraId:8,tocIndex:4},{value:"Client request parameters can be placed in the query string",paraId:9,tocIndex:4},{value:`GET /?locale=en-US HTTP/1.1
Host: localhost:13000
`,paraId:10,tocIndex:4},{value:"Or in the request headers (recommended)",paraId:11,tocIndex:4},{value:`GET / HTTP/1.1
Host: localhost:13000
X-Locale: en-US
`,paraId:12,tocIndex:4},{value:"Example",paraId:13,tocIndex:4},{value:`export class PluginSampleI18nServer extends Plugin {
  load() {
    this.app.use(async (ctx, next) => {
      if (ctx.path === '/api/test-i18n') {
        ctx.body = \`\${ctx.i18n.t('Hello')} \${ctx.i18n.t('World')}\`;
      }
      await next();
    });
  }
}
`,paraId:14,tocIndex:4},{value:"Visit ",paraId:15,tocIndex:4},{value:"http://localhost:13000/api/test-i18n?locale=zh-CN",paraId:15,tocIndex:4},{value:"NocoBase's i18n is implemented based on i18next. For detailed usage instructions, refer to the ",paraId:16,tocIndex:5},{value:"I18next API documentation",paraId:16,tocIndex:5},{value:". Below are some important examples listed.",paraId:16,tocIndex:5},{value:"Each plugin's locale is distinguished by the namespace (ns), which is the plugin name, such as:",paraId:17,tocIndex:6},{value:`t('Hello', { ns: '@nocobase/plugin-sample-i18n' });
`,paraId:18,tocIndex:6},{value:"To change the current language",paraId:19,tocIndex:7},{value:`await i18n.changeLanguage('en-US');
`,paraId:20,tocIndex:7},{value:"@nocobase/plugin-sample-i18n",paraId:21,tocIndex:8}]},619211:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The directory structure related to the server side of an initialized empty plugin is as follows:",paraId:0,tocIndex:0},{value:`|- /plugin-sample-hello
  |- /src
    |- /server      # Plugin server-side code
      |- plugin.ts  # Plugin class
      |- index.ts   # Server-side entry point
  |- server.d.ts
  |- server.js
`,paraId:1,tocIndex:0},{value:"plugin.ts",paraId:2,tocIndex:1},{value:" facilitates the invocation of various methods across the plugin lifecycle.",paraId:2,tocIndex:1},{value:`import { InstallOptions, Plugin } from '@nocobase/server';

export class PluginSampleHelloServer extends Plugin {
  afterAdd() {
    // After the plugin is registered with pm.add. Mainly used for placing listeners for the app beforeLoad event
    this.app.on('beforeLoad');
  }
  beforeLoad() {
    // Customize classes or methods
    this.db.registerFieldTypes();
    this.db.registerModels();
    this.db.registerRepositories();
    this.db.registerOperators();
    // Event listeners
    this.app.on();
    this.db.on();
  }
  async load() {
    // Define collection
    this.db.collection();
    // Import collection configurations
    this.db.import();
    this.db.addMigrations();

    // Define resource
    this.resourcer.define();
    // Register resource actions
    this.resourcer.registerActions();

    // Register middleware
    this.resourcer.use();
    this.acl.use();
    this.app.use();

    this.app.i18n;
    // Custom commands
    this.app.command();
  }
  async install(options?: InstallOptions) {
    // Installation logic
  }
  async afterEnable() {
    // After activation
  }
  async afterDisable() {
    // After deactivation
  }
  async remove() {
    // Deletion logic
  }
}

export default MyPlugin;
`,paraId:3,tocIndex:1},{value:"After the plugin is initialized, ",paraId:4,tocIndex:2},{value:"afterAdd",paraId:4,tocIndex:2},{value:" is triggered. In ",paraId:4,tocIndex:2},{value:"afterAdd",paraId:4,tocIndex:2},{value:", not all other plugins might have been instantiated.",paraId:4,tocIndex:2},{value:"In ",paraId:4,tocIndex:2},{value:"beforeLoad",paraId:4,tocIndex:2},{value:", all activated plugins have been instantiated, and their instances can be retrieved via ",paraId:4,tocIndex:2},{value:"app.pluginManager.get()",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:"In ",paraId:4,tocIndex:2},{value:"load",paraId:4,tocIndex:2},{value:", the ",paraId:4,tocIndex:2},{value:"beforeLoad",paraId:4,tocIndex:2},{value:" method of all plugins has been executed.",paraId:4,tocIndex:2},{value:"API",paraId:5,tocIndex:3},{value:"Tutorial",paraId:5,tocIndex:3},{value:"this.name",paraId:5,tocIndex:3},{value:"Plugin name",paraId:5,tocIndex:3},{value:"this.enabled",paraId:5,tocIndex:3},{value:"Activated",paraId:5,tocIndex:3},{value:"this.installed",paraId:5,tocIndex:3},{value:"Installed",paraId:5,tocIndex:3},{value:"this.app",paraId:5,tocIndex:3},{value:"Application instance",paraId:5,tocIndex:3},{value:"this.pm",paraId:5,tocIndex:3},{value:"Plugin manager instance",paraId:5,tocIndex:3},{value:"this.db",paraId:5,tocIndex:3},{value:"Database instance",paraId:5,tocIndex:3},{value:"this.resourcer",paraId:5,tocIndex:3},{value:"Resource manager",paraId:5,tocIndex:3},{value:"this.acl",paraId:5,tocIndex:3},{value:"Access control",paraId:5,tocIndex:3},{value:"this.log",paraId:5,tocIndex:3},{value:"Logging",paraId:5,tocIndex:3},{value:"this.app.i18n",paraId:5,tocIndex:3},{value:"Internationalization",paraId:5,tocIndex:3},{value:"this.db.registerFieldTypes()",paraId:5,tocIndex:3},{value:"Register field types",paraId:5,tocIndex:3},{value:"this.db.registerModels()",paraId:5,tocIndex:3},{value:"Register Models",paraId:5,tocIndex:3},{value:"this.db.registerRepositories()",paraId:5,tocIndex:3},{value:"Register Repositories",paraId:5,tocIndex:3},{value:"this.db.registerOperators()",paraId:5,tocIndex:3},{value:"Register custom operators",paraId:5,tocIndex:3},{value:"this.app.on()",paraId:5,tocIndex:3},{value:"Application events",paraId:5,tocIndex:3},{value:"this.db.on()",paraId:5,tocIndex:3},{value:"Database events",paraId:5,tocIndex:3},{value:"this.db.collection()",paraId:5,tocIndex:3},{value:"Configure data tables",paraId:5,tocIndex:3},{value:"this.db.import()",paraId:5,tocIndex:3},{value:"Import data table configurations",paraId:5,tocIndex:3},{value:"this.db.addMigrations()",paraId:5,tocIndex:3},{value:"Migrations",paraId:5,tocIndex:3},{value:"this.resourcer.registerActions()",paraId:5,tocIndex:3},{value:"Register resource actions",paraId:5,tocIndex:3},{value:"this.resourcer.use()",paraId:5,tocIndex:3},{value:"Middleware",paraId:5,tocIndex:3},{value:"this.acl.use()",paraId:5,tocIndex:3},{value:"Middleware",paraId:5,tocIndex:3},{value:"this.app.use()",paraId:5,tocIndex:3},{value:"Middleware",paraId:5,tocIndex:3},{value:"this.app.command()",paraId:5,tocIndex:3},{value:"Command line",paraId:5,tocIndex:3}]},802904:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's logging is based on ",paraId:0,tocIndex:0},{value:"Winston",paraId:0,tocIndex:0},{value:". By default, NocoBase divides logs into API request logs, system operation logs, and SQL execution logs, where API request logs and SQL execution logs are printed internally by the application, and plugin developers typically only need to print plugin-related system operation logs.",paraId:0,tocIndex:0},{value:"This document mainly introduces how to create and print logs when developing plugins. For more information about logs, refer to: ",paraId:1,tocIndex:0},{value:"Logger Plugin",paraId:2,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"NocoBase provides a printing method for system operation logs, which are printed according to specified fields and output to a designated file. Refer to: ",paraId:3,tocIndex:1},{value:"Logger Plugin - System Logs",paraId:4,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:`// Default print method
app.log.info("message");

// Use in middleware
async function (ctx, next) {
  ctx.log.info("message");
}

// Use in a plugin
class CustomPlugin extends Plugin {
  async load() {
    this.log.info("message");
  }
}
`,paraId:5,tocIndex:1},{value:"All the above methods follow the usage below:",paraId:6,tocIndex:1},{value:"The first parameter is the log message, the second parameter is an optional metadata object, which can be any key-value pair, where ",paraId:7,tocIndex:1},{value:"module",paraId:7,tocIndex:1},{value:", ",paraId:7,tocIndex:1},{value:"submodule",paraId:7,tocIndex:1},{value:", ",paraId:7,tocIndex:1},{value:"method",paraId:7,tocIndex:1},{value:" will be extracted as separate fields, and other fields will be placed in the ",paraId:7,tocIndex:1},{value:"meta",paraId:7,tocIndex:1},{value:" field.",paraId:7,tocIndex:1},{value:`app.log.info('message', {
  module: 'module',
  submodule: 'submodule',
  method: 'method',
  key1: 'value1',
  key2: 'value2',
});
// => level=info timestamp=2023-12-27 10:30:23 message=message module=module submodule=submodule method=method meta={"key1": "value1", "key2": "value2"}

app.log.debug();
app.log.warn();
app.log.error();
`,paraId:8,tocIndex:1},{value:"If you want to use the system's default printing method but do not want to output to the default file, you can use ",paraId:9,tocIndex:2},{value:"createSystemLogger",paraId:9,tocIndex:2},{value:" to create a custom system log instance.",paraId:9,tocIndex:2},{value:`import { createSystemLogger } from '@nocobase/logger';

const logger = createSystemLogger({
  dirname: '/pathto/',
  filename: 'xxx',
  separateError: true, // Whether to output error-level logs separately to 'xxx_error.log'
});
`,paraId:10,tocIndex:2},{value:"If you do not want to use the system-provided printing method and want to use Winston's native methods, you can create logs through the following method.",paraId:11,tocIndex:3},{value:"createLogger",paraId:12},{value:`import { createLogger } from '@nocobase/logger';

const logger = createLogger({
  // options
});
`,paraId:13,tocIndex:4},{value:"options",paraId:14,tocIndex:4},{value:" has been extended based on the original ",paraId:14,tocIndex:4},{value:"winston.LoggerOptions",paraId:14,tocIndex:4},{value:".",paraId:14,tocIndex:4},{value:"transports",paraId:15,tocIndex:4},{value:" - You can use ",paraId:15,tocIndex:4},{value:"'console' | 'file' | 'dailyRotateFile'",paraId:15,tocIndex:4},{value:" to apply preset output methods.",paraId:15,tocIndex:4},{value:"format",paraId:15,tocIndex:4},{value:" - You can use ",paraId:15,tocIndex:4},{value:"'logfmt' | 'json' | 'delimiter'",paraId:15,tocIndex:4},{value:" to apply preset printing formats.",paraId:15,tocIndex:4},{value:"app.createLogger",paraId:12},{value:"In scenarios with multiple applications, sometimes we hope to customize the output directory and file, which can be output to the directory under the current application name. Refer to: ",paraId:16,tocIndex:5},{value:"Logger Plugin - Log Directory",paraId:17,tocIndex:5},{value:".",paraId:16,tocIndex:5},{value:`app.createLogger({
  dirname: '',
  filename: 'custom', // Output to /storage/logs/main/custom.log
});
`,paraId:18,tocIndex:5},{value:"plugin.createLogger",paraId:12},{value:"The usage scenario and method are the same as ",paraId:19,tocIndex:6},{value:"app.createLogger",paraId:19,tocIndex:6},{value:".",paraId:19,tocIndex:6},{value:`class CustomPlugin extends Plugin {
  async load() {
    const logger = this.createLogger({
      // Output to /storage/logs/main/custom-plugin/YYYY-MM-DD.log
      dirname: 'custom-plugin',
      filename: '%DATE%.log',
      transports: ['dailyRotateFile'],
    });
  }
}
`,paraId:20,tocIndex:6},{value:"Logger Plugin",paraId:21,tocIndex:7},{value:"API Reference",paraId:22,tocIndex:7}]},670914:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The registration method for middleware is usually written in the load method",paraId:0,tocIndex:1},{value:`export class MyPlugin extends Plugin {
  load() {
    this.app.acl.use();
    this.app.resourcer.use();
    this.app.use();
  }
}
`,paraId:1,tocIndex:1},{value:"Notes.",paraId:2,tocIndex:1},{value:"app.acl.use()",paraId:3,tocIndex:1},{value:" Add a resource-permission-level middleware to be executed before permission determination",paraId:3,tocIndex:1},{value:"app.resourcer.use()",paraId:3,tocIndex:1},{value:" Adds a resource-level middleware that is executed only when a defined resource is requested",paraId:3,tocIndex:1},{value:"app.use()",paraId:3,tocIndex:1},{value:" Add an application-level middleware to be executed on every request",paraId:3,tocIndex:1},{value:`app.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(1);
  await next();
  ctx.body.push(2);
});

app.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(3);
  await next();
  ctx.body.push(4);
});
`,paraId:4,tocIndex:2},{value:"Visit ",paraId:5,tocIndex:2},{value:"http://localhost:13000/api/hello",paraId:5,tocIndex:2},{value:" to see that the browser responds with the following data",paraId:5,tocIndex:2},{value:`{"data": [1,3,4,2]}
`,paraId:6,tocIndex:2},{value:"cors",paraId:7,tocIndex:3},{value:"bodyParser",paraId:7,tocIndex:3},{value:"i18n",paraId:7,tocIndex:3},{value:"dataWrapping",paraId:7,tocIndex:3},{value:"db2resource",paraId:7,tocIndex:3},{value:" 6.",paraId:7,tocIndex:3},{value:"restApi",paraId:7,tocIndex:3},{value:` 1.
`,paraId:7,tocIndex:3},{value:"parseToken",paraId:8,tocIndex:3},{value:" 2.",paraId:8,tocIndex:3},{value:"checkRole",paraId:8,tocIndex:3},{value:"acl",paraId:8,tocIndex:3},{value:` 1.
`,paraId:8,tocIndex:3},{value:"acl.use()",paraId:9,tocIndex:3},{value:" Additional middleware added",paraId:9,tocIndex:3},{value:"resourcer.use()",paraId:8,tocIndex:3},{value:" Additional middleware added",paraId:8,tocIndex:3},{value:"action handler",paraId:8,tocIndex:3},{value:"app.use()",paraId:7,tocIndex:3},{value:" Additional middleware added",paraId:7,tocIndex:3},{value:"You can also use ",paraId:10,tocIndex:3},{value:"before",paraId:10,tocIndex:3},{value:" or ",paraId:10,tocIndex:3},{value:"after",paraId:10,tocIndex:3},{value:" to insert the middleware into the location of one of the preceding ",paraId:10,tocIndex:3},{value:"tag",paraId:10,tocIndex:3},{value:", e.g.",paraId:10,tocIndex:3},{value:`app.use(m1, { tag: 'restApi' });
app.resourcer.use(m2, { tag: 'parseToken' });
app.resourcer.use(m3, { tag: 'checkRole' });
// m4 will come before m1
app.use(m4, { before: 'restApi' });
// m5 will be inserted between m2 and m3
app.resourcer.use(m5, { after: 'parseToken', before: 'checkRole' });
`,paraId:11,tocIndex:3},{value:"If no location is specifically specified, the order of execution of the added middlewares is",paraId:12,tocIndex:3},{value:"middlewares added by ",paraId:13,tocIndex:3},{value:"acl.use",paraId:13,tocIndex:3},{value:" will be executed first",paraId:13,tocIndex:3},{value:"then the ones added by ",paraId:13,tocIndex:3},{value:"resourcer.use",paraId:13,tocIndex:3},{value:", including the middleware handler and action handler",paraId:13,tocIndex:3},{value:"and finally the ones added by ",paraId:13,tocIndex:3},{value:"app.use",paraId:13,tocIndex:3},{value:`app.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(1);
  await next();
  ctx.body.push(2);
});

app.resourcer.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(3);
  await next();
  ctx.body.push(4);
});

app.acl.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(5);
  await next();
  ctx.body.push(6);
});

app.resourcer.define({
  name: 'test',
  actions: {
    async list(ctx, next) {
      ctx.body = ctx.body || [];
      ctx.body.push(7);
      await next();
      ctx.body.push(8);
    },
  },
});
`,paraId:14,tocIndex:3},{value:"Visit ",paraId:15,tocIndex:3},{value:"http://localhost:13000/api/hello",paraId:15,tocIndex:3},{value:" to see that the browser responds with the data",paraId:15,tocIndex:3},{value:`{"data": [1,2]}
`,paraId:16,tocIndex:3},{value:"Visiting ",paraId:17,tocIndex:3},{value:"http://localhost:13000/api/test:list",paraId:17,tocIndex:3},{value:" to see, the browser responds with the following data",paraId:17,tocIndex:3},{value:`{"data": [5,3,7,1,2,8,4,6]}
`,paraId:18,tocIndex:3},{value:`app.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(1);
  await next();
  ctx.body.push(2);
});

app.resourcer.use(async (ctx, next) => {
  ctx.body = ctx.body || [];
  ctx.body.push(3);
  await next();
  ctx.body.push(4);
});
`,paraId:19,tocIndex:4},{value:"Visit ",paraId:20,tocIndex:4},{value:"http://localhost:13000/api/hello",paraId:20,tocIndex:4},{value:" to see that the browser responds with the following data",paraId:20,tocIndex:4},{value:`{"data": [1,2]}
`,paraId:21,tocIndex:4},{value:"In the above example, the hello resource is not defined and will not enter the resourcer, so the middleware in the resourcer will not be executed",paraId:22,tocIndex:4},{value:"TODO",paraId:23,tocIndex:5},{value:"samples/ratelimit",paraId:24,tocIndex:6},{value:" IP rate-limiting",paraId:24,tocIndex:6}]},455992:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"During the update and iteration process of plugins, there might be some incompatible changes. These incompatible upgrades can be handled by writing migration files, which are triggered by the ",paraId:0,tocIndex:0},{value:"nocobase upgrade",paraId:0,tocIndex:0},{value:" command. The relevant process is as follows:",paraId:0,tocIndex:0},{value:"The migrations for upgrades are divided into beforeLoad, afterSync, and afterLoad:",paraId:1,tocIndex:0},{value:`beforeLoad: Executed before the loading of each module, divided into three phases:
`,paraId:2,tocIndex:0},{value:"Before the loading of the core module",paraId:3,tocIndex:0},{value:"Before the loading of preset plugins",paraId:3,tocIndex:0},{value:"Before the loading of other plugins",paraId:3,tocIndex:0},{value:`afterSync: After the synchronization of table configurations with the database, divided into three phases:
`,paraId:2,tocIndex:0},{value:"After the synchronization of the core tables with the database",paraId:4,tocIndex:0},{value:"After the synchronization of the preset plugins' tables with the database",paraId:4,tocIndex:0},{value:"After the synchronization of other plugins' tables with the database",paraId:4,tocIndex:0},{value:"afterLoad: Executed after all applications have been loaded",paraId:2,tocIndex:0},{value:"Create migration files through the create-migration command",paraId:5,tocIndex:1},{value:`yarn nocobase create-migration -h

Usage: nocobase create-migration [options] <name>

Options:
  --pkg <pkg>  package name
  --on [on]    Options include beforeLoad, afterSync, and afterLoad
  -h, --help   display help for command
`,paraId:6,tocIndex:1},{value:"Example",paraId:7,tocIndex:1},{value:`$ yarn nocobase create-migration update-ui --pkg=@nocobase/plugin-client

2024-01-07 17:33:13 [info ] add app main into supervisor     
2024-01-07 17:33:13 [info ] migration file in /nocobase/packages/plugins/@nocobase/plugin-client/src/server/migrations/20240107173313-update-ui.ts
\u2728  Done in 5.02s.
`,paraId:8,tocIndex:1},{value:"A migration file named 20240107173313-update-ui.ts will be generated in the src/server/migrations of the plugin package @nocobase/plugin-client, with the initial content as follows:",paraId:9,tocIndex:1},{value:`import { Migration } from '@nocobase/server';

export default class extends Migration {
  on = 'afterLoad'; // 'beforeLoad' | 'afterSync' | 'afterLoad'
  appVersion = '<0.19.0-alpha.3';

  async up() {
    // coding
  }
}
`,paraId:10,tocIndex:1},{value:"Triggered by the ",paraId:11,tocIndex:2},{value:"nocobase upgrade",paraId:11,tocIndex:2},{value:" command",paraId:11,tocIndex:2},{value:`$ yarn nocobase upgrade
`,paraId:12,tocIndex:2},{value:`import { createMockServer, MockServer } from '@nocobase/test';

describe('test example', () => {
  let app: MockServer;

  beforeEach(async () => {
    app = await createMockServer({
      plugins: ['my-plugin'], // Plugins
      version: '0.18.0-alpha.5', // Version before upgrade
    });
  });

  afterEach(async () => {
    await app.destroy();
  });

  test('case1', async () => {
    await app.runCommand('upgrade');
    // coding...
  });
});
`,paraId:13,tocIndex:3}]},759128:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`\u6700\u7B80\u5355\u7684 resource actions
\u5E26\u9ED8\u8BA4\u53C2\u6570\u7684 Action
\u4F7F\u7528\u5168\u5C40 Action
Action \u53C2\u6570\u7684\u591A\u6765\u6E90\u5408\u5E76
\u5185\u7F6E Actions \u7684\u7528\u6CD5`,paraId:0,tocIndex:0},{value:"\u5728 NocoBase \u4E2D\uFF0Cresource \u662F\u4E3A collection \u670D\u52A1\u7684\uFF0C\u5DF2\u914D\u7F6E\u7684 collections\uFF08\u5305\u62EC associations\uFF09 \u4F1A\u81EA\u52A8\u8F6C\u4E3A\u76F8\u5E94\u7684 resources\u3002",paraId:1,tocIndex:0},{value:`export class PluginSampleToResourcesServer extends Plugin {
  async load() {
    this.db.collection({
      name: 'posts',
      fields: [
        {
          type: 'hasMany',
          name: 'comments',
          target: 'comments',
        },
      ],
    });
    this.db.collection({
      name: 'comments',
    });
  }
}
`,paraId:2,tocIndex:1},{value:"\u4EE5\u4E0A\u793A\u4F8B\u7684 ",paraId:3,tocIndex:1},{value:"posts",paraId:3,tocIndex:1},{value:" \u548C ",paraId:3,tocIndex:1},{value:"posts.comments",paraId:3,tocIndex:1},{value:" \u7684\u63A5\u53E3\u5982\u4E0B\uFF1A",paraId:3,tocIndex:1},{value:"posts \u8D44\u6E90",paraId:4,tocIndex:1},{value:`POST  /api/posts:create
GET   /api/posts:list
GET   /api/posts:get/1
POST  /api/posts:update/1
POST  /api/posts:destroy/1
`,paraId:5,tocIndex:1},{value:"posts.comments \u8D44\u6E90",paraId:6,tocIndex:1},{value:`POST  /api/posts/1/comments:create
GET   /api/posts/1/comments:list
GET   /api/posts/1/comments:get/1
POST  /api/posts/1/comments:update/1
POST  /api/posts/1/comments:destroy/1
`,paraId:7,tocIndex:1},{value:"NocoBase \u7684 HTTP API \u662F REST API \u7684\u8D85\u96C6\uFF0C\u6807\u51C6\u7684 CRUD API \u4E5F\u652F\u6301 RESTful \u98CE\u683C\u3002",paraId:8,tocIndex:1},{value:"\u4E0A\u9762 collection \u8F6C\u4E3A resource \u4E4B\u540E\uFF0C\u4E4B\u6240\u4EE5\u53EF\u4EE5\u76F4\u63A5\u8FDB\u884C CRUD \u64CD\u4F5C\u4E86\uFF0C\u662F\u56E0\u4E3A\u5185\u7F6E\u4E86\u4E00\u4E9B\u5E38\u7528\u7684\u64CD\u4F5C",paraId:9,tocIndex:2},{value:"\u5185\u7F6E\u7684\u5168\u5C40\u64CD\u4F5C\uFF0C\u53EF\u7528\u4E8E collection \u6216 association",paraId:10,tocIndex:2},{value:"create",paraId:11,tocIndex:2},{value:"get",paraId:11,tocIndex:2},{value:"list",paraId:11,tocIndex:2},{value:"update",paraId:11,tocIndex:2},{value:"destroy",paraId:11,tocIndex:2},{value:"move",paraId:11,tocIndex:2},{value:"\u5185\u7F6E\u7684\u5173\u8054\u64CD\u4F5C\uFF0C\u4EC5\u7528\u4E8E association",paraId:12,tocIndex:2},{value:"set",paraId:13,tocIndex:2},{value:"add",paraId:13,tocIndex:2},{value:"remove",paraId:13,tocIndex:2},{value:"toggle",paraId:13,tocIndex:2},{value:"\u5185\u7F6E Actions \u7684\u7528\u6CD5\u53C2\u8003 API \u6587\u6863",paraId:14,tocIndex:2},{value:`export class PluginSampleResourcerServer extends Plugin {
  async load() {
    this.resourcer.registerActions({
      import: async (ctx, next) => {},
      export: async (ctx, next) => {},
    });
  }
}
`,paraId:15,tocIndex:4},{value:`export class PluginSampleResourcerServer extends Plugin {
  async load() {
    this.resourcer.registerActions({
      'posts:listPublished': async (ctx, next) => {},
    });
  }
}
`,paraId:16,tocIndex:5},{value:"\u5982\u679C\u6709\u7279\u6B8A\u9700\u6C42\uFF0C\u4E5F\u53EF\u4EE5\u663E\u5F0F\u7684\u5B9A\u4E49\u8D44\u6E90\u53CA\u76F8\u5173\u64CD\u4F5C",paraId:17,tocIndex:6},{value:`app.resourcer.define({
  name: 'posts',
  actions: {
    create: {},
    get: {},
    list: {},
    update: {},
    destroy: {},
  },
});
`,paraId:18,tocIndex:6}]},216163:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728 NocoBase \u91CC\uFF0C\u8D44\u6E90\uFF08resource\uFF09\u6709\u4E24\u79CD\u8868\u8FBE\u65B9\u5F0F\uFF1A",paraId:0,tocIndex:1},{value:"<collection>",paraId:1,tocIndex:1},{value:"<collection>.<association>",paraId:1,tocIndex:1},{value:"collection \u662F\u6240\u6709\u62BD\u8C61\u6570\u636E\u7684\u96C6\u5408",paraId:2},{value:"association \u4E3A collection \u7684\u5173\u8054\u6570\u636E",paraId:2},{value:"\u793A\u4F8B",paraId:3},{value:"posts",paraId:4},{value:" \u6587\u7AE0",paraId:4},{value:"posts.user",paraId:4},{value:" \u6587\u7AE0\u7528\u6237",paraId:4},{value:"posts.tags",paraId:4},{value:" \u6587\u7AE0\u6807\u7B7E",paraId:4},{value:"\u914D\u7F6E",paraId:5},{value:`// \u6587\u7AE0
{
  name: 'posts',
}
// \u6587\u7AE0\u7528\u6237
{
  name: 'posts.user',
}
// \u6587\u7AE0\u6807\u7B7E
{
  name: 'posts.tags',
}
`,paraId:6},{value:"\u4EE5 ",paraId:7,tocIndex:2},{value:":<action>",paraId:7,tocIndex:2},{value:" \u7684\u65B9\u5F0F\u8868\u793A\u8D44\u6E90\u64CD\u4F5C",paraId:7,tocIndex:2},{value:"<collection>:<action>",paraId:8,tocIndex:2},{value:"<collection>.<association>:<action>",paraId:8,tocIndex:2},{value:"\u793A\u4F8B",paraId:9,tocIndex:2},{value:"posts:create",paraId:10,tocIndex:2},{value:" \u521B\u5EFA\u6587\u7AE0",paraId:10,tocIndex:2},{value:"posts.user:get",paraId:10,tocIndex:2},{value:" \u67E5\u770B\u6587\u7AE0\u7528\u6237",paraId:10,tocIndex:2},{value:"posts.tags:add",paraId:10,tocIndex:2},{value:" \u9644\u52A0\u6587\u7AE0\u6807\u7B7E\uFF08\u5C06\u73B0\u6709\u7684\u6807\u7B7E\u4E0E\u6587\u7AE0\u5173\u8054\uFF09",paraId:10,tocIndex:2},{value:"\u914D\u7F6E",paraId:11,tocIndex:2},{value:`// \u6587\u7AE0\u8D44\u6E90\u7684\u589E\u5220\u6539\u67E5\u914D\u7F6E
{
  name: 'posts',
  actions: {
    create: async (ctx, next) => {},
    get: async (ctx, next) => {},
    list: async (ctx, next) => {},
    update: async (ctx, next) => {},
    destroy: async (ctx, next) => {},
  },
}

// \u6587\u7AE0\u7528\u6237
{
  name: 'posts.tags',
  actions: {
    create: async (ctx, next) => {},
    get: async (ctx, next) => {},
    list: async (ctx, next) => {},
    update: async (ctx, next) => {},
    destroy: async (ctx, next) => {},
    add: async (ctx, next) => {},
    remove: async (ctx, next) => {},
  },
}
`,paraId:12,tocIndex:2},{value:`<GET|POST>   /api/<collection>:<action>
<GET|POST>   /api/<collection>:<action>/<filterByTk>
<GET|POST>   /api/<collection>/<sourceId>/<association>:<action>
<GET|POST>   /api/<collection>/<sourceId>/<association>:<action>/<filterByTk>
`,paraId:13,tocIndex:3},{value:"\u793A\u4F8B",paraId:14,tocIndex:3},{value:"posts \u8D44\u6E90",paraId:15,tocIndex:3},{value:`POST  /api/posts:create
GET   /api/posts:list
GET   /api/posts:get/1
POST  /api/posts:update/1
POST  /api/posts:destroy/1
`,paraId:16,tocIndex:3},{value:"posts.comments \u8D44\u6E90",paraId:17,tocIndex:3},{value:`POST  /api/posts/1/comments:create
GET   /api/posts/1/comments:list
GET   /api/posts/1/comments:get/1
POST  /api/posts/1/comments:update/1
POST  /api/posts/1/comments:destroy/1
`,paraId:18,tocIndex:3},{value:"posts.tags \u8D44\u6E90",paraId:19,tocIndex:3},{value:`POST  /api/posts/1/tags:create
GET   /api/posts/1/tags:get
GET   /api/posts/1/tags:list
POST  /api/posts/1/tags:update
POST  /api/posts/1/tags:destroy
POST  /api/posts/1/tags:add
GET   /api/posts/1/tags:remove
`,paraId:20,tocIndex:3},{value:"\u6240\u6709\u8D44\u6E90\u90FD\u901A\u8FC7 ",paraId:21,tocIndex:4},{value:"filterByTk",paraId:21,tocIndex:4},{value:" \u5B9A\u4F4D",paraId:21,tocIndex:4},{value:"collection \u8D44\u6E90\uFF0C",paraId:22,tocIndex:4},{value:"filterByTk",paraId:22,tocIndex:4},{value:" \u5FC5\u987B\u662F\u552F\u4E00\u7684",paraId:22,tocIndex:4},{value:"association \u8D44\u6E90\uFF0C",paraId:22,tocIndex:4},{value:"filterByTk",paraId:22,tocIndex:4},{value:" \u53EF\u80FD\u5E76\u4E0D\u662F\u552F\u4E00\u7684\uFF0C\u9700\u8981\u540C\u65F6\u63D0\u4F9B ",paraId:22,tocIndex:4},{value:"sourceId",paraId:22,tocIndex:4},{value:" \u6765\u5B9A\u4F4D\u3002",paraId:22,tocIndex:4},{value:"\u4F8B\u5982 ",paraId:23,tocIndex:4},{value:"tables.fields",paraId:23,tocIndex:4},{value:" \u8868\u793A\u6570\u636E\u8868\u7684\u5B57\u6BB5",paraId:23,tocIndex:4},{value:`GET   /api/tables/table1/fields/title
GET   /api/tables/table2/fields/title
`,paraId:24,tocIndex:4},{value:"table1 \u548C table2 \u90FD\u6709 title \u5B57\u6BB5\uFF0Ctitle \u5728 table1 \u91CC\u662F\u552F\u4E00\u7684\uFF0C\u4F46\u662F\u5176\u4ED6\u8868\u4E5F\u53EF\u80FD\u6709 title \u5B57\u6BB5",paraId:25,tocIndex:4}]},369398:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684 HTTP API \u662F REST API \u7684\u8D85\u96C6\uFF0C\u6807\u51C6\u7684 CRUD API \u4E5F\u652F\u6301 RESTful \u98CE\u683C\u3002",paraId:0,tocIndex:0},{value:"HTTP API",paraId:1,tocIndex:2},{value:`POST  /api/<collection>:create

{} # JSON body
`,paraId:2,tocIndex:2},{value:"REST API",paraId:3,tocIndex:2},{value:`POST  /api/<collection>

{} # JSON body
`,paraId:4,tocIndex:2},{value:"HTTP API",paraId:5,tocIndex:3},{value:`GET   /api/<collection>:list
`,paraId:6,tocIndex:3},{value:"REST API",paraId:7,tocIndex:3},{value:`GET   /api/<collection>
`,paraId:8,tocIndex:3},{value:"HTTP API",paraId:9,tocIndex:4},{value:`GET   /api/<collection>:get?filterByTk=<collectionIndex>
GET   /api/<collection>:get/<collectionIndex>
`,paraId:10,tocIndex:4},{value:"REST API",paraId:11,tocIndex:4},{value:`GET   /api/<collection>/<collectionIndex>
`,paraId:12,tocIndex:4},{value:"HTTP API",paraId:13,tocIndex:5},{value:`POST   /api/<collection>:update?filterByTk=<collectionIndex>

{} # JSON body

# \u6216\u8005
POST   /api/<collection>:update/<collectionIndex>

{} # JSON body
`,paraId:14,tocIndex:5},{value:"REST API",paraId:15,tocIndex:5},{value:`PUT    /api/<collection>/<collectionIndex>

{} # JSON body
`,paraId:16,tocIndex:5},{value:"HTTP API",paraId:17,tocIndex:6},{value:`POST      /api/<collection>:destroy?filterByTk=<collectionIndex>
# \u6216\u8005
POST      /api/<collection>:destroy/<collectionIndex>
`,paraId:18,tocIndex:6},{value:"REST API",paraId:19,tocIndex:6},{value:`DELETE    /api/<collection>/<collectionIndex>
`,paraId:20,tocIndex:6},{value:"HTTP API",paraId:21,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>:create

{} # JSON body
`,paraId:22,tocIndex:8},{value:"REST API",paraId:23,tocIndex:8},{value:`POST    /api/<collection>/<collectionIndex>/<association>

{} # JSON body
`,paraId:24,tocIndex:8},{value:"HTTP API",paraId:25,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>:list
`,paraId:26,tocIndex:9},{value:"REST API",paraId:27,tocIndex:9},{value:`GET   /api/<collection>/<collectionIndex>/<association>
`,paraId:28,tocIndex:9},{value:"HTTP API",paraId:29,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get?filterByTk=<associationIndex>
# \u6216\u8005
GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:30,tocIndex:10},{value:"REST API",paraId:31,tocIndex:10},{value:`GET   /api/<collection>/<collectionIndex>/<association>:get/<associationIndex>
`,paraId:32,tocIndex:10},{value:"HTTP API",paraId:33,tocIndex:11},{value:`POST   /api/<collection>/<collectionIndex>/<association>:update?filterByTk=<associationIndex>

{} # JSON body

# \u6216\u8005
POST   /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON body
`,paraId:34,tocIndex:11},{value:"REST API",paraId:35,tocIndex:11},{value:`PUT    /api/<collection>/<collectionIndex>/<association>:update/<associationIndex>

{} # JSON \u6570\u636E
`,paraId:36,tocIndex:11},{value:"HTTP API",paraId:37,tocIndex:12},{value:`POST    /api/<collection>/<collectionIndex>/<association>:destroy?filterByTk=<associationIndex>
# \u6216\u8005
POST    /api/<collection>/<collectionIndex>/<association>:destroy/<associationIndex>
`,paraId:38,tocIndex:12},{value:"REST API",paraId:39,tocIndex:12},{value:`DELETE  /api/<collection>/<collectionIndex>/<association>/<associationIndex>
`,paraId:40,tocIndex:12}]},637945:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},26637:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},609245:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the web development world, you may have heard of the concept of RESTful, and NocoBase borrows this concept of resources to map various entities in the system, such as data in a database, a file in a file system or a service. However, NocoBase does not fully follow the RESTful conventions based on practical considerations, but rather extends the specifications from the ",paraId:0,tocIndex:0},{value:"Google Cloud API Design Guide",paraId:0,tocIndex:0},{value:" to fit more scenarios.",paraId:0,tocIndex:0},{value:"The same concept as resources in RESTful, which are externally available objects in the system that can be manipulated, such as data tables, files, and other custom objects.",paraId:1,tocIndex:1},{value:"Actions refer to reading and writing to resources, usually for accessing data, creating data, updating data, deleting data, etc. NocoBase implements access to resources by defining actions, the core of which is actually a Koa-compatible middleware function for handling requests.",paraId:2,tocIndex:1},{value:"NocoBase automatically maps collections to resources by default, and also provides a server-side data interface. So by default, as long as a collection is defined using ",paraId:3,tocIndex:2},{value:"db.collection()",paraId:3,tocIndex:2},{value:", you can access the data resources of this collection via NocoBase HTTP API. The name of the automatically generated resource is the same as the collection name, for example, the collection defined by ",paraId:3,tocIndex:2},{value:"db.collection({ name: 'users' })",paraId:3,tocIndex:2},{value:" has the corresponding resource name ",paraId:3,tocIndex:2},{value:"users",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Also, there are built-in common CRUD actions for these data resources, and built-in actions methods for associative data for relational data resources.",paraId:4,tocIndex:2},{value:"The default actions for a simple data resource:",paraId:5,tocIndex:2},{value:"list",paraId:6,tocIndex:2},{value:": Query the list of data in the collection",paraId:7,tocIndex:2},{value:"get",paraId:8,tocIndex:2},{value:": Query a single record in the collection",paraId:7,tocIndex:2},{value:"create",paraId:9,tocIndex:2},{value:": Create a single record to the collection",paraId:7,tocIndex:2},{value:"update",paraId:10,tocIndex:2},{value:": Update a single record on the collection",paraId:7,tocIndex:2},{value:"destroy",paraId:11,tocIndex:2},{value:": Delete a single record from the collection",paraId:7,tocIndex:2},{value:"In addition to simple CRUD actions, relational resources have default relational actions:",paraId:12,tocIndex:2},{value:"add",paraId:13,tocIndex:2},{value:": Add a association to the data",paraId:14,tocIndex:2},{value:"remove",paraId:15,tocIndex:2},{value:": Removes an association from the data",paraId:14,tocIndex:2},{value:"set",paraId:16,tocIndex:2},{value:": Set the association to the data",paraId:14,tocIndex:2},{value:"toggle",paraId:17,tocIndex:2},{value:": Add or remove associations to data",paraId:14,tocIndex:2},{value:"For example, to define an article collection and synchronize it to the database.",paraId:18,tocIndex:2},{value:`app.db.collection({
  name: 'posts',
  fields: [{ type: 'string', name: 'title' }],
});

await app.db.sync();
`,paraId:19,tocIndex:2},{value:"All CRUD methods for the ",paraId:20,tocIndex:2},{value:"posts",paraId:20,tocIndex:2},{value:" data resource can then be called directly via the HTTP API: ```bash",paraId:20,tocIndex:2},{value:`# create
curl -X POST -H "Content-Type: application/json" -d '{"title": "first"}' http://localhost:13000/api/posts:create
# list
curl http://localhost:13000/api/posts:list
# update
curl -X PUT -H "Content-Type: application/json" -d '{"title": "second"}' http://localhost:13000/api/posts:update
# destroy
curl -X DELETE http://localhost:13000/api/posts:destroy?filterByTk=1
`,paraId:21,tocIndex:2},{value:"It is also possible to extend specific resources with more actions when the default provided actions such as CRUD do not satisfy the business scenario. For example, additional processing of built-in actions, or the need to set default parameters.",paraId:22,tocIndex:3},{value:"Custom actions for specific resources, such as overriding the ",paraId:23,tocIndex:3},{value:"create",paraId:23,tocIndex:3},{value:" action in the article collection.",paraId:23,tocIndex:3},{value:`// Equivalent to app.resourcer.registerActions()
// Register the create action method for article resources
app.actions({
  async ['posts:create'](ctx, next) {
    const postRepo = ctx.db.getRepository('posts');
    await postRepo.create({
      values: {
        ... . ctx.action.params.values,
        // restrict the current user to be the creator of the post
        userId: ctx.state.currentUserId
      }
    });

    await next();
  }
});
`,paraId:24,tocIndex:3},{value:"This adds a reasonable restriction in the business that users cannot create articles as other users.",paraId:25,tocIndex:3},{value:"Custom operations for all global resources, such as adding ",paraId:26,tocIndex:3},{value:"export",paraId:26,tocIndex:3},{value:" action to all collections.",paraId:26,tocIndex:3},{value:`app.actions({
  // Add export method to all resources for exporting data
  async export(ctx, next) {
    const repo = ctx.db.getRepository(ctx.action.resource);
    const results = await repo.find({
      filter: ctx.action.params.filter
    });
    ctx.type = 'text/csv';
    // Splice to CSV format
    ctx.body = results
      .map(row => Object.keys(row)
        .reduce((arr, col) => [... . arr, row[col]], []).join(',')
      ).join('\\n');

    next();
  }
});
`,paraId:27,tocIndex:3},{value:"The data in CSV format can then be exported as follows from the HTTP API.",paraId:28,tocIndex:3},{value:`curl http://localhost:13000/api/<any_table>:export
`,paraId:29,tocIndex:3},{value:"Once the client's request reaches the server, the relevant request parameters are parsed by rule and placed on the request's ",paraId:30,tocIndex:4},{value:"ctx.action.params",paraId:30,tocIndex:4},{value:" object. there are three main sources for Action parameters.",paraId:30,tocIndex:4},{value:"default parameters at the time of Action definition",paraId:31,tocIndex:4},{value:"carried by the client request",paraId:31,tocIndex:4},{value:"other middleware preprocessing",paraId:31,tocIndex:4},{value:"The parameters from these three parts are combined in this order and eventually passed into the action's execution function before being processed by the real action handler. This is also true in multiple middleware, where the parameters from the previous middleware are continued to be passed to the next middleware with ",paraId:32,tocIndex:4},{value:"ctx",paraId:32,tocIndex:4},{value:".",paraId:32,tocIndex:4},{value:"The parameters available for built-in actions can be found in the ",paraId:33,tocIndex:4},{value:"@nocobase/actions",paraId:34,tocIndex:4},{value:" package. Except for custom actions, client requests mainly use these parameters, and custom actions can be extended with the required parameters according to business requirements.",paraId:33,tocIndex:4},{value:"Middleware preprocessing mainly uses the ",paraId:35,tocIndex:4},{value:"ctx.action.mergeParams()",paraId:35,tocIndex:4},{value:" method and has different merge strategies depending on the parameter types, see also the ",paraId:35,tocIndex:4},{value:"mergeParams()",paraId:36,tocIndex:4},{value:" method for details.",paraId:35,tocIndex:4},{value:"The default parameters of the built-in Action can only be executed with the ",paraId:37,tocIndex:4},{value:"mergeParams()",paraId:37,tocIndex:4},{value:" method for each parameter's default policy when merging, in order to achieve the purpose of limiting certain operations on the server side. For example",paraId:37,tocIndex:4},{value:`app.resource({
  name: 'posts',
  actions: {
    create: {
      whitelist: ['title', 'content'],
      blacklist: ['createdAt', 'createdById'],
    },
  },
});
`,paraId:38,tocIndex:4},{value:"The above defines the ",paraId:39,tocIndex:4},{value:"create",paraId:39,tocIndex:4},{value:" action for the ",paraId:39,tocIndex:4},{value:"posts",paraId:39,tocIndex:4},{value:" resource, where ",paraId:39,tocIndex:4},{value:"whitelist",paraId:39,tocIndex:4},{value:" and ",paraId:39,tocIndex:4},{value:"blacklist",paraId:39,tocIndex:4},{value:" are whitelisted and blacklisted respectively for the ",paraId:39,tocIndex:4},{value:"values",paraId:39,tocIndex:4},{value:" parameter, i.e. only the ",paraId:39,tocIndex:4},{value:"title",paraId:39,tocIndex:4},{value:" and ",paraId:39,tocIndex:4},{value:"content",paraId:39,tocIndex:4},{value:" fields in the ",paraId:39,tocIndex:4},{value:"values",paraId:39,tocIndex:4},{value:" parameter are allowed, and the ",paraId:39,tocIndex:4},{value:" createdAt",paraId:39,tocIndex:4},{value:" and ",paraId:39,tocIndex:4},{value:"createdById",paraId:39,tocIndex:4},{value:" fields in the ",paraId:39,tocIndex:4},{value:"values",paraId:39,tocIndex:4},{value:" parameter are disabled.",paraId:39,tocIndex:4},{value:"Data-based resources are also divided into standalone resources and association resources.",paraId:40,tocIndex:5},{value:"Standalone resources: ",paraId:41,tocIndex:5},{value:"<collection>",paraId:41,tocIndex:5},{value:"Association resources: ",paraId:41,tocIndex:5},{value:"<collection>. <association>",paraId:41,tocIndex:5},{value:`// Equivalent to app.resourcer.define()

// Define article resources
app.resource({
  name: 'posts',
});

// Define the article's author resource
app.resource({
  name: 'posts.user',
});

// Define the article's comment resource
app.resource({
  name: 'posts.coments',
});
`,paraId:42,tocIndex:5},{value:"The cases where customization is needed are mainly for non-database table-like resources, such as in-memory data, proxy interfaces for other services, etc., and for cases where specific actions need to be defined for existing table-like resources.",paraId:43,tocIndex:5},{value:"For example, to define a database-independent resource that sends a notification action.",paraId:44,tocIndex:5},{value:`app.resource({
  name: 'notifications',
  actions: {
    async send(ctx, next) {
      await someProvider.send(ctx.request.body);
      next();
    },
  },
});
`,paraId:45,tocIndex:5},{value:"Then it can be accessed in the HTTP API as follows",paraId:46,tocIndex:5},{value:`curl -X POST -d '{"title": "Hello", "to": "hello@nocobase.com"}' 'http://localhost:13000/api/notifications:send'
`,paraId:47,tocIndex:5},{value:"Let's continue the simple store scenario from the previous ",paraId:48,tocIndex:6},{value:"Collections and fields example",paraId:49,tocIndex:6},{value:" to further understand the concepts related to resources and actions. It is assumed here that we base further resource and action definitions on the previous collection's example, so the definition of collection is not repeated here.",paraId:48,tocIndex:6},{value:"As long as the corresponding collections are defined, we can use default actions directly for data resources such as products, orders, etc. in order to complete the most basic CRUD scenarios.",paraId:50,tocIndex:6},{value:"Sometimes, there are operations that are not simply for a single record, or the parameters of the default actions need to have some control, we can override the default actions. For example, when we create an order, instead of the client submitting ",paraId:51,tocIndex:7},{value:"userId",paraId:51,tocIndex:7},{value:" to represent the ownership of the order, the server should determine the ownership of the order based on the currently logged-in user, so we can override the default ",paraId:51,tocIndex:7},{value:"create",paraId:51,tocIndex:7},{value:" action. For simple extensions, we write directly in the main class of the plugin.",paraId:51,tocIndex:7},{value:`import { Plugin } from '@nocobase/server';
import actions from '@nocobase/actions';

export default class ShopPlugin extends Plugin {
  async load() {
    // ...
    this.app.resource({
      name: 'orders',
      actions: {
        async create(ctx, next) {
          ctx.action.mergeParams({
            values: {
              userId: ctx.state.user.id,
            },
          });

          return actions.create(ctx, next);
        },
      },
    });
  }
}
`,paraId:52,tocIndex:7},{value:"In this way, we override the default ",paraId:53,tocIndex:7},{value:"create",paraId:53,tocIndex:7},{value:" action for order data resources during plugin loading, but the default logic is still called after modifying the action parameters, so there is no need to write it yourself. The ",paraId:53,tocIndex:7},{value:"mergeParams()",paraId:53,tocIndex:7},{value:" method that modifies the submit parameters is useful for the built-in default actions, which we will describe later.",paraId:53,tocIndex:7},{value:"When the built-in actions do not meet the business needs, we can extend the functionality of the resource by customizing the actions. For example, usually an order will have many statuses, if we design the values of the ",paraId:54,tocIndex:8},{value:"status",paraId:54,tocIndex:8},{value:" field as a series of enumerated values.",paraId:54,tocIndex:8},{value:"-1",paraId:55,tocIndex:8},{value:": cancelled",paraId:55,tocIndex:8},{value:"0",paraId:55,tocIndex:8},{value:": order placed, not paid",paraId:55,tocIndex:8},{value:"1",paraId:55,tocIndex:8},{value:": Paid, not shipped",paraId:55,tocIndex:8},{value:"2",paraId:55,tocIndex:8},{value:": shipped, not signed",paraId:55,tocIndex:8},{value:"3",paraId:55,tocIndex:8},{value:": signed, order completed",paraId:55,tocIndex:8},{value:"Then we can realize the change of order status through custom actions, such as a shipping action on the order. Although the simple case can be realized through the ",paraId:56,tocIndex:8},{value:"update",paraId:56,tocIndex:8},{value:" action, if there are more complicated cases such as payment and signing, using only ",paraId:56,tocIndex:8},{value:"update",paraId:56,tocIndex:8},{value:" will cause the problem of unclear semantics and confusing parameters, so we can realize it through custom actions.",paraId:56,tocIndex:8},{value:"First we add a definition of a shipping information collection, saved to ",paraId:57,tocIndex:8},{value:"collections/deliveries.ts",paraId:57,tocIndex:8},{value:".",paraId:57,tocIndex:8},{value:`export default {
  name: 'deliveries',
  fields: [
    {
      type: 'belongsTo',
      name: 'order',
    },
    {
      type: 'string',
      name: 'provider',
    },
    {
      type: 'string',
      name: 'trackingNumber',
    },
    {
      type: 'integer',
      name: 'status',
    },
  ],
};
`,paraId:58,tocIndex:8},{value:"Also extend the orders collection with an associated field for shipping information (",paraId:59,tocIndex:8},{value:"collections/orders.ts",paraId:59,tocIndex:8},{value:").",paraId:59,tocIndex:8},{value:`export default {
  name: 'orders',
  fields: [
    // ... . other fields
    {
      type: 'hasOne',
      name: 'delivery',
    },
  ],
};
`,paraId:60,tocIndex:8},{value:"Then we add the corresponding action definition in the main class of the plugin:",paraId:61,tocIndex:8},{value:`import { Plugin } from '@nocobase/server';

export default class ShopPlugin extends Plugin {
  async load() {
    // ...
    this.app.resource({
      name: 'orders',
      actions: {
        async deliver(ctx, next) {
          const { filterByTk } = ctx.action.params;
          const orderRepo = ctx.db.getRepository('orders');

          const [order] = await orderRepo.update({
            filterByTk,
            values: {
              status: 2,
              delivery: {
                ... . ctx.action.params.values,
                status: 0
              status: 0 }
            }
          });

          ctx.body = order;

          next();
        }
      }
    });
  }
}
`,paraId:62,tocIndex:8},{value:"The Repository uses the data repository class of collection, from which most of the data reading and writing actions are done, see the ",paraId:63,tocIndex:8},{value:"Repository API",paraId:64,tocIndex:8},{value:" section for details.",paraId:63,tocIndex:8},{value:'Once defined, we can call the "ship" action from the client via the HTTP API:',paraId:65,tocIndex:8},{value:`curl \\
  -X POST \\
  -H 'Content-Type: application/json' \\
  -d '{"provider": "SF", "trackingNumber": "SF1234567890"}' \\
  '/api/orders:deliver/<id>'
`,paraId:66,tocIndex:8},{value:"Similarly, we can define more similar actions, such as payment, signup, etc.",paraId:67,tocIndex:8},{value:"Suppose we want to allow users to query their own and only their own orders, and we need to restrict them from querying cancelled orders, then we can define with the default parameters of the action.",paraId:68,tocIndex:9},{value:`import { Plugin } from '@nocobase/server';

export default class ShopPlugin extends Plugin {
  async load() {
    // ...
    this.app.resource({
      name: 'orders',
      actions: {
        // default parameters for list actions
        list: {
          filter: {
            // Filter operator extended by the users plugin
            $isCurrentUser: true,
            status: {
              $ne: -1,
            },
          },
          fields: ['id', 'status', 'createdAt', 'updatedAt'],
        },
      },
    });
  }
}
`,paraId:69,tocIndex:9},{value:"When the user queries from the client, additional parameters can also be added to the requested URL, such as",paraId:70,tocIndex:9},{value:`curl 'http://localhost:13000/api/orders:list?productId=1&fields=id,status,quantity,totalPrice&appends=product'
`,paraId:71,tocIndex:9},{value:"The actual query criteria will be combined as",paraId:72,tocIndex:9},{value:`{
  "filter": {
    "$and": {
      "$isCurrentUser": true,
      "status": {
        "$ne": -1
      },
      "productId": 1
    }
  },
  "fields": [
    "id",
    "status",
    "quantity",
    "totalPrice",
    "createdAt",
    "updatedAt"
  ],
  "appends": ["product"]
}
`,paraId:73,tocIndex:9},{value:"and get the expected query results.",paraId:74,tocIndex:9},{value:"Alternatively, if we need to restrict the interface for creating orders to fields such as order number (",paraId:75,tocIndex:9},{value:"id",paraId:75,tocIndex:9},{value:"), total price (",paraId:75,tocIndex:9},{value:"totalPrice",paraId:75,tocIndex:9},{value:"), etc. that cannot be submitted by the client, this can be controlled by defining default parameters for the ",paraId:75,tocIndex:9},{value:"create",paraId:75,tocIndex:9},{value:" action as follows",paraId:75,tocIndex:9},{value:`import { Plugin } from '@nocobase/server';

export default class ShopPlugin extends Plugin {
  async load() {
    // ...
    this.app.resource({
      name: 'orders',
      actions: {
        create: {
          blacklist: ['id', 'totalPrice', 'status', 'createdAt', 'updatedAt'],
          values: {
            status: 0,
          },
        },
      },
    });
  }
}
`,paraId:76,tocIndex:9},{value:"This way, even if the client intentionally submits these fields, they will be filtered out and will not exist in the ",paraId:77,tocIndex:9},{value:"ctx.action.params",paraId:77,tocIndex:9},{value:" parameter set.",paraId:77,tocIndex:9},{value:"If there are more complex restrictions, such as only being able to place an order if the item is on the shelf and in stock, this can be achieved by configuring the middleware to",paraId:78,tocIndex:9},{value:`import { Plugin } from '@nocobase/server';

export default class ShopPlugin extends Plugin {
  async load() {
    // ...
    this.app.resource({
      name: 'orders',
      actions: {
        create: {
          middlewares: [
            async (ctx, next) => {
              const { productId } = ctx.action.params.values;

              const product = await ctx.db.getRepository('products').findOne({
                filterByTk: productId,
                filter: {
                  enabled: true,
                  inventory: {
                    $gt: 0,
                  },
                },
              });

              if (!product) {
                return ctx.throw(404);
              }

              await next();
            },
          ],
        },
      },
    });
  }
}
`,paraId:79,tocIndex:9},{value:"Putting some of the business logic (especially the preprocessing) into middleware makes our code clearer and easier to maintain.",paraId:80,tocIndex:9},{value:"With the above example we have described how to define resources and related actions. To review this chapter.",paraId:81,tocIndex:10},{value:"Automatic mapping of collections to resources",paraId:82,tocIndex:10},{value:"Built-in default resource actions",paraId:82,tocIndex:10},{value:"Custom actions on resources",paraId:82,tocIndex:10},{value:"Parameter merging order and strategy for operations",paraId:82,tocIndex:10},{value:"The code covered in this chapter is included in a complete sample package ",paraId:83,tocIndex:10},{value:"packages/samples/shop-actions",paraId:83,tocIndex:10},{value:", which can be run directly locally to see the results.",paraId:83,tocIndex:10}]},653955:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},851843:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The telemetry module of NocoBase is encapsulated based on ",paraId:0},{value:"OpenTelemetry",paraId:0},{value:". This article introduces how to use the telemetry module to collect Trace and Metric data to enhance the observability of the NocoBase system.",paraId:0},{value:"NocoBase needs to be configured with the environment variable ",paraId:1},{value:"TELEMETRY_ENABLED=true",paraId:1},{value:" before starting to enable telemetry data collection. See other configurations: ",paraId:1},{value:"Environment Variables - Telemetry",paraId:2},{value:".",paraId:1},{value:`const meter = app.telemetry.metric.getMeter();
const counter = meter.createCounter('event_counter', {});
counter.add(1);
`,paraId:3,tocIndex:2},{value:"References:",paraId:4,tocIndex:2},{value:"https://opentelemetry.io/docs/instrumentation/js/manual/#acquiring-a-meter",paraId:5,tocIndex:2},{value:`const tracer = app.telemetry.trace.getTracer();
tracer.startActiveSpan();
tracer.startSpan();
`,paraId:6,tocIndex:3},{value:"References:",paraId:7,tocIndex:3},{value:"https://opentelemetry.io/docs/instrumentation/js/manual/#acquiring-a-tracer",paraId:8,tocIndex:3},{value:`import { Plugin } from '@nocobase/server';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';

class InstrumentationPlugin extends Plugin {
  afterAdd() {
    this.app.on('beforeLoad', (app) => {
      app.telemetry.addInstrumentation(getNodeAutoInstrumentations());
    });
  }
}
`,paraId:9,tocIndex:4},{value:"In NocoBase, the initialization location of the telemetry module is ",paraId:10},{value:"app.beforeLoad",paraId:10},{value:", refer to: ",paraId:10},{value:"Lifecycle",paraId:11},{value:". Therefore, not all instrumentation libraries are suitable for NocoBase.",paraId:10},{value:`
For example, `,paraId:10},{value:"instrumentation-koa",paraId:10},{value:" needs to be introduced before ",paraId:10},{value:"Koa",paraId:10},{value:" is instantiated, but although NocoBase's ",paraId:10},{value:"Application",paraId:10},{value:" is based on ",paraId:10},{value:"Koa",paraId:10},{value:", the telemetry module is initialized after the ",paraId:10},{value:"Application",paraId:10},{value:" is instantiated, so it cannot be applied.",paraId:10},{value:"References:",paraId:12},{value:"https://opentelemetry.io/docs/instrumentation/js/libraries/",paraId:13},{value:`import { Plugin } from '@nocobase/server';
import {
  PeriodicExportingMetricReader,
  ConsoleMetricExporter,
} from '@opentelemetry/sdk-metrics';

class MetricReaderPlugin extends Plugin {
  afterAdd() {
    this.app.on('beforeLoad', (app) => {
      app.telemetry.metric.registerReader(
        'console',
        () =>
          new PeriodicExportingMetricReader({
            exporter: new ConsoleMetricExporter(),
          }),
      );
    });
  }
}
`,paraId:14,tocIndex:6},{value:`import { Plugin } from '@nocobase/server';
import {
  BatchSpanProcessor,
  ConsoleSpanExporter,
} from '@opentelemetry/sdk-trace-base';

class TraceSpanProcessorPlugin extends Plugin {
  afterAdd() {
    this.app.on('beforeLoad', (app) => {
      app.telemetry.trace.registerProcessor(
        'console',
        () => new BatchSpanProcessor(new ConsoleSpanExporter()),
      );
    });
  }
}
`,paraId:15,tocIndex:7},{value:"References:",paraId:16,tocIndex:7},{value:"https://opentelemetry.io/docs/instrumentation/js/exporters",paraId:17,tocIndex:7}]},65156:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Testing is based on the ",paraId:0,tocIndex:0},{value:"Jest",paraId:0,tocIndex:0},{value:" testing framework. To facilitate writing tests, ",paraId:0,tocIndex:0},{value:"mockDatabase()",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"mockServer()",paraId:0,tocIndex:0},{value:" are provided for testing database and server-side applications.",paraId:0,tocIndex:0},{value:"The test environment variables are configured in the ",paraId:1},{value:".env.test",paraId:1},{value:" file. It's recommended to use a separate test database for testing.",paraId:1},{value:"mockDatabase()",paraId:2},{value:"A fully isolated db testing environment is provided by default.",paraId:3,tocIndex:1},{value:`import { mockDatabase } from '@nocobase/test';

describe('my db suite', () => {
  let db;

  beforeEach(async () => {
    db = mockDatabase();
    db.collection({
      name: 'posts',
      fields: [
        {
          type: 'string',
          name: 'title',
        },
      ],
    });
    await db.sync();
  });

  afterEach(async () => {
    await db.close();
  });

  test('my case', async () => {
    const repository = db.getRepository('posts');
    const post = await repository.create({
      values: {
        title: 'hello',
      },
    });

    expect(post.get('title')).toEqual('hello');
  });
});
`,paraId:4,tocIndex:1},{value:"mockServer()",paraId:2},{value:"A mock server application instance is provided, with the corresponding app.db being a ",paraId:5,tocIndex:2},{value:"mockDatabase()",paraId:5,tocIndex:2},{value:" instance. Additionally, a convenient ",paraId:5,tocIndex:2},{value:"app.agent()",paraId:5,tocIndex:2},{value:" is available for testing HTTP APIs. For Resource Action specific to NocoBase, ",paraId:5,tocIndex:2},{value:"app.agent().resource()",paraId:5,tocIndex:2},{value:" is encapsulated for testing the Action of resources.",paraId:5,tocIndex:2},{value:`import { MockServer, mockServer } from '@nocobase/test';

// Each plugin's minimal installation app is different, the necessary plugins need to be added according to their own conditions.
async function createApp(options: any = {}) {
  const app = mockServer({
    ...options,
    plugins: [
      'acl',
      'users',
      'collection-manager',
      'error-handler',
      ...options.plugins,
    ],
    // Other configuration parameters might also be present.
  });
  // Here, some logic that needs special handling can be supplemented, such as importing data tables needed for testing.
  return app;
}

// Most tests need to start the application, so a common startup method can also be provided.
async function startApp() {
  const app = createApp();
  await app.quickstart({
    // Before running tests, clear the database.
    clean: true,
  });
  return app;
}

describe('test example', () => {
  let app: MockServer;

  beforeEach(async () => {
    app = await startApp();
  });

  afterEach(async () => {
    // After running the tests, clear the database.
    await app.destroy();
    // Stop without clearing the database.
    await app.stop();
  });

  test('case1', async () => {
    // coding...
  });
});
`,paraId:6,tocIndex:2},{value:"If you need to test different processes, you can execute related commands according to the following examples.",paraId:7,tocIndex:3},{value:"Terminal command line",paraId:8,tocIndex:4},{value:`yarn nocobase install
yarn start
`,paraId:9,tocIndex:4},{value:"Preliminary test process",paraId:10,tocIndex:4},{value:`const app = mockServer();
await app.runCommand('install');
await app.runCommand('start');
`,paraId:11,tocIndex:4},{value:"Terminal command line",paraId:12,tocIndex:5},{value:`yarn start # Stay in memory
# Execute in another terminal
yarn nocobase install
`,paraId:13,tocIndex:5},{value:"Preliminary test process",paraId:14,tocIndex:5},{value:`const app = mockServer();
await app.runCommand('start');
await app.runCommand('install');
`,paraId:15,tocIndex:5},{value:"Terminal command line",paraId:16,tocIndex:6},{value:`yarn start --quickstart
`,paraId:17,tocIndex:6},{value:"Preliminary test process",paraId:18,tocIndex:6},{value:`const app = mockServer();
await app.runCommand('start', '--quickstart');
`,paraId:19,tocIndex:6},{value:"Terminal command line",paraId:20,tocIndex:7},{value:`yarn start --quickstart
# Execute in another terminal
yarn nocobase install -f
`,paraId:21,tocIndex:7},{value:"Preliminary test process",paraId:22,tocIndex:7},{value:`const app = mockServer();
await app.runCommand('start', '--quickstart');
await app.runCommand('install', '-f');
`,paraId:23,tocIndex:7},{value:"Terminal command line",paraId:24,tocIndex:8},{value:`yarn nocobase upgrade
yarn start
`,paraId:25,tocIndex:8},{value:"Preliminary test process",paraId:26,tocIndex:8},{value:`const app = mockServer();
await app.runCommand('upgrade', '-f');
await app.runCommand('start', '--quickstart');
`,paraId:27,tocIndex:8},{value:`yarn start # Stay in memory
# Execute in another terminal
yarn nocobase upgrade
`,paraId:28,tocIndex:9},{value:"Preliminary test process",paraId:29,tocIndex:9},{value:`const app = mockServer();
await app.runCommand('start', '--quickstart');
await app.runCommand('upgrade', '-f');
`,paraId:30,tocIndex:9},{value:"Terminal command line",paraId:31,tocIndex:10},{value:`yarn start --quickstart
yarn pm enable @my-project/plugin-hello
`,paraId:32,tocIndex:10},{value:"Preliminary test process",paraId:33,tocIndex:10},{value:`const app = mockServer();
await app.runCommand('start', '--quickstart');
await app.runCommand('pm', 'enable', '@my-project/plugin-hello');
`,paraId:34,tocIndex:10},{value:"Terminal command line",paraId:35,tocIndex:11},{value:`yarn start --quickstart
yarn pm disable @my-project/plugin-hello
`,paraId:36,tocIndex:11},{value:"Preliminary test process",paraId:37,tocIndex:11},{value:`const app = mockServer();
await app.runCommand('start', '--quickstart');
await app.runCommand('pm', 'disable', '@my-project/plugin-hello');
`,paraId:38,tocIndex:11}]},530036:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Before start, you need to install NocoBase:.",paraId:0,tocIndex:0},{value:"create-nocobase-app installation",paraId:1,tocIndex:0},{value:"Git source installation",paraId:2,tocIndex:0},{value:"Once NocoBase is installed, we can start our plugin development journey.",paraId:3,tocIndex:0},{value:"First, you can quickly create an empty plugin via the CLI with the following command.",paraId:4,tocIndex:1},{value:`yarn pm create @my-project/plugin-hello
`,paraId:5,tocIndex:1},{value:"The directory where the plugin located is ",paraId:6,tocIndex:1},{value:"packages/plugins/@my-project/plugin-hello",paraId:6,tocIndex:1},{value:" and the plugin directory structure is",paraId:6,tocIndex:1},{value:`|- /packages/plugins/@my-project/plugin-hello
  |- /src
    |- /client # plugin client code
    |- /server # plugin server code
  |- client.d.ts
  |- client.js
  |- package.json # plugin package information
  |- server.d.ts
  |- server.js
`,paraId:7,tocIndex:1},{value:"Visit the Plugin Manager to view the plugin you just added, the default address is ",paraId:8,tocIndex:1},{value:"http://localhost:13000/admin/pm/list/local/",paraId:8,tocIndex:1},{value:"If the plugin is not shown in the plugin manager, you can add it manually with the ",paraId:9,tocIndex:1},{value:"pm add",paraId:9,tocIndex:1},{value:" command.",paraId:9,tocIndex:1},{value:`yarn pm add @my-project/plugin-hello
`,paraId:10,tocIndex:1},{value:"Create a new collection file in the plugin, e.g. ",paraId:11,tocIndex:2},{value:". /src/server/collections/hello.ts",paraId:11,tocIndex:2},{value:" with the following contents:",paraId:11,tocIndex:2},{value:`import { defineCollection } from '@nocobase/database';

export default defineCollection({
  name: 'hello',
  fields: [{ type: 'string', name: 'name' }],
});
`,paraId:12,tocIndex:2},{value:"Modify the ",paraId:13,tocIndex:2},{value:". /src/server/plugin.ts",paraId:13,tocIndex:2},{value:" file as follows",paraId:13,tocIndex:2},{value:`import { Plugin } from '@nocobase/server';

export class PluginHelloServer extends Plugin {
  async afterAdd() {}

  async beforeLoad() {}

  async load() {
    // This is just an example. Expose all actions of the hello collection to the public
    this.app.acl.allow('hello', '*', 'public');
  }

  async install() {}

  async afterEnable() {}

  async afterDisable() {}

  async remove() {}
}

export default PluginHelloServer;
`,paraId:14,tocIndex:2},{value:"Operated by command",paraId:15,tocIndex:3},{value:`yarn pm enable @my-project/plugin-hello
`,paraId:16,tocIndex:3},{value:"Operated by UI",paraId:17,tocIndex:3},{value:`Visit the Plugin Manager to view the plugin you just added and click enable.
The Plugin Manager page defaults to `,paraId:18,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:18,tocIndex:3},{value:"The collection configured in the plugin is automatically synchronized with the database when the plugin is activated, generating the corresponding data tables and fields. If the plugin is already active, you need to handle the synchronization of the data tables with the upgrade command ",paraId:19},{value:"yarn nocobase upgrade",paraId:19},{value:".",paraId:19},{value:"If the app is not started, you need to start the app first",paraId:20,tocIndex:4},{value:`# for development
yarn dev

# for production
yarn build
yarn start
`,paraId:21,tocIndex:4},{value:"Insert data into the hello collection of the plugin",paraId:22,tocIndex:4},{value:`curl --location --request POST 'http://localhost:13000/api/hello:create' \\
--header 'Content-Type: application/json' \\
--data-raw '{
    "name": "Hello world"
}'
`,paraId:23,tocIndex:4},{value:"View the data",paraId:24,tocIndex:4},{value:`curl --location --request GET 'http://localhost:13000/api/hello:list'
`,paraId:25,tocIndex:4},{value:"If you cloned the source code, you need to execute ",paraId:26,tocIndex:5},{value:"yarn build",paraId:26,tocIndex:5},{value:" for a full build, otherwise, a type error will be reported.",paraId:26,tocIndex:5},{value:`yarn build @my-project/plugin-hello --tar

# step by step
yarn build @my-project/plugin-hello
yarn nocobase tar @my-project/plugin-hello
`,paraId:27,tocIndex:5},{value:"The default saved path for the plugin tar is ",paraId:28,tocIndex:5},{value:"storage/tar/@my-project/plugin-hello.tar.gz",paraId:28,tocIndex:5},{value:"Only supported in v0.14 and above",paraId:29,tocIndex:6}]},142222:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's ACL module mainly consists of two parts:",paraId:0,tocIndex:1},{value:"@nocobase/acl",paraId:1,tocIndex:1},{value:" in the kernel, which provides core functions",paraId:1,tocIndex:1},{value:"@nocobase/plugin-acl",paraId:1,tocIndex:1},{value:" in the plugin, which provides dynamic configuration capabilities",paraId:1,tocIndex:1},{value:"Built-in plugin, no separate installation required.",paraId:2,tocIndex:2},{value:'Below is an example of the "Mobile Menu" configuration item, demonstrating how to extend a new permission configuration tab. The effect is shown in the figure below:',paraId:3,tocIndex:4},{value:"The code is as follows:",paraId:4,tocIndex:4},{value:`import { Plugin } from '@nocobase/client';
import PluginACLClient from '@nocobase/plugin-acl/client';

class PluginMobileClient extends Plugin {
  async load() {
    const aclInstance = this.app.pm.get(PluginACLClient);

    aclInstance?.settingsUI.addPermissionsTab(({ t, TabLayout, activeKey }) => ({
      key: 'mobile-menu',
      label: t('Mobile menu', {
        ns: 'plugin-mobile',
      }),
      children: (
        <TabLayout>
          <MenuPermissions />
        </TabLayout>
      ),
    }));
  }
}
`,paraId:5,tocIndex:4},{value:"First, we need to obtain an instance of the ",paraId:6,tocIndex:4},{value:"PluginACLClient",paraId:6,tocIndex:4},{value:" plugin (",paraId:6,tocIndex:4},{value:"other methods to obtain plugin instances",paraId:6,tocIndex:4},{value:"), and add a new permission configuration tab using the ",paraId:6,tocIndex:4},{value:"settingsUI.addPermissionsTab",paraId:6,tocIndex:4},{value:' method. In this example, we added a permission configuration tab named "Mobile Menu".',paraId:6,tocIndex:4},{value:"The value of the ",paraId:7,tocIndex:4},{value:"settingsUI",paraId:7,tocIndex:4},{value:" property is an instance of a class named ",paraId:7,tocIndex:4},{value:"ACLSettingsUI",paraId:7,tocIndex:4},{value:", and its type information is as follows:",paraId:7,tocIndex:4},{value:`import { TabsProps } from 'antd/es/tabs/index';

interface ACLSettingsUI {
  addPermissionsTab(tab: Tab | TabCallback): void;
  getPermissionsTabs(props: PermissionsTabsProps): Tab[];
}

type Tab = TabsProps['items'][0];

type TabCallback = (props: PermissionsTabsProps) => Tab;

interface PermissionsTabsProps {
  /**
   * the key of the currently active tab panel
   */
  activeKey: string;
  /**
   * the currently selected role
   */
  role: Role;
  /**
   * translation function
   */
  t: TFunction;
  /**
   * used to constrain the size of the container in the Tab
   */
  TabLayout: React.FC;
}
`,paraId:8,tocIndex:4}]},287081:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The application comes with two predefined roles: "Admin" and "Member," each with distinct default permission settings tailored to their functionalities.',paraId:0,tocIndex:2},{value:"The role identifier, a unique system identifier, allows customization of default roles, but the system's predefined roles cannot be deleted.",paraId:1,tocIndex:3},{value:"The default role is the one automatically assigned to new users if no specific role is provided during their creation.",paraId:2,tocIndex:4},{value:"Allows to configure interface",paraId:3,tocIndex:7},{value:': This permission governs whether a user can configure the interface. Activating it adds a UI configuration button. The "admin" role has this permission enabled by default.',paraId:3,tocIndex:7},{value:"Allows to install, activate, disable plugins",paraId:3,tocIndex:7},{value:': This permission dictates whether a user can enable or disable plugins. When active, the user gains access to the plugin manager interface. The "admin" role has this permission enabled by default.',paraId:3,tocIndex:7},{value:"Allows to configure plugins",paraId:3,tocIndex:7},{value:': This permission lets the user configure plugin parameters or manage plugin backend data. The "admin" role has this permission enabled by default.',paraId:3,tocIndex:7},{value:"Allows to clear cache, reboot application",paraId:3,tocIndex:7},{value:": This permission is tied to system maintenance tasks like clearing the cache and restarting the application. Once activated, related operation buttons appear in the personal center. This permission is disabled by default.",paraId:3,tocIndex:7},{value:"New menu items are allowed to be accessed by default",paraId:3,tocIndex:7},{value:": Newly created menus are accessible by default, and this setting is enabled by default.",paraId:3,tocIndex:7},{value:"Action permissions apply universally to all data tables and are categorized by operation type. These permissions can be configured based on data scope: all data or the user's own data. The former allows operations on the entire data table, while the latter restricts operations to data relevant to the user.",paraId:4,tocIndex:8},{value:"Collection operation permissions allow fine-tuning of Action permissions by configuring access to resources within each data table. These permissions include:",paraId:5,tocIndex:9},{value:"Action permissions",paraId:6,tocIndex:9},{value:": These include adding, viewing, editing, deleting, exporting, and importing actions. Permissions are set based on data scope:",paraId:6,tocIndex:9},{value:"All records",paraId:7,tocIndex:9},{value:": Grants the user the ability to perform actions on all records within the data table.",paraId:7,tocIndex:9},{value:"Own records",paraId:7,tocIndex:9},{value:": Restricts the user to perform actions only on records they have created.",paraId:7,tocIndex:9},{value:"Field Permissions",paraId:8,tocIndex:9},{value:": Field permissions enable you to set specific permissions for each field during different operations. For instance, certain fields can be configured to be view-only, without editing privileges.",paraId:8,tocIndex:9},{value:"Menu permissions control access based on menu items.",paraId:9,tocIndex:10},{value:"Plugin configuration permissions control the ability to configure specific plugin parameters. When enabled, the corresponding plugin management interface appears in the management center.",paraId:10,tocIndex:11},{value:"Users can be assigned multiple roles and switch between them in the personal center. The default role when logging in is determined by the most recently switched role (this value updates with each switch) or, if not applicable, the first role (system default role).",paraId:11,tocIndex:13},{value:"Visibility of data blocks in a data table is controlled by view operation permissions, with individual configurations taking precedence over global settings.",paraId:12,tocIndex:15},{value:'For example, under global permissions, the "admin" role has full access, but the order table may have individual permissions configured, making it invisible.',paraId:13,tocIndex:15},{value:"Global permission configuration:",paraId:14,tocIndex:15},{value:"Order table individual permission configuration:",paraId:15,tocIndex:15},{value:"In the UI, all blocks in the order table are not displayed.",paraId:16,tocIndex:15},{value:"Complete configuration process:",paraId:17,tocIndex:15},{value:"View",paraId:18,tocIndex:16},{value:": Determines whether specific fields are visible at the field level, allowing control over which fields are visible to certain roles within the order table.",paraId:18,tocIndex:16},{value:"In the UI, only fields with configured permissions are visible within the order table block. System fields (Id, CreatedAt, LastUpdatedAt) retain view permissions even without specific configuration.",paraId:19,tocIndex:16},{value:"Edit",paraId:20,tocIndex:16},{value:": Controls whether fields can be edited and saved (updated).",paraId:20,tocIndex:16},{value:"Configure edit permissions for order table fields (quantity and associated items have edit permissions):",paraId:21,tocIndex:16},{value:"In the UI, only fields with edit permissions are shown in the edit operation form block within the order table.",paraId:22,tocIndex:16},{value:"Complete configuration process:",paraId:23,tocIndex:16},{value:"Add",paraId:24,tocIndex:16},{value:": Determines whether fields can be added (created).",paraId:24,tocIndex:16},{value:"Configure add permissions for order table fields (order number, quantity, items, and shipment have add permissions):",paraId:25,tocIndex:16},{value:"In the UI, only fields with add permissions are displayed within the add operation form block of the order table.",paraId:26,tocIndex:16},{value:"Export",paraId:27,tocIndex:16},{value:": Controls whether fields can be exported.",paraId:27,tocIndex:16},{value:"Import",paraId:28,tocIndex:16},{value:": Controls whether fields can be imported.",paraId:28,tocIndex:16},{value:"Individually configured permissions take the highest priority. If specific permissions are configured, they override global settings; otherwise, the global settings are applied.",paraId:29,tocIndex:17},{value:"Add",paraId:30,tocIndex:17},{value:": Controls whether the add operation button is visible within a block.",paraId:30,tocIndex:17},{value:"Configure individual operation permissions for the order table to allow adding:",paraId:31,tocIndex:17},{value:"When the add operation is permitted, the add button appears within the operation area of the order table block in the UI.",paraId:32,tocIndex:17},{value:"View",paraId:33,tocIndex:17},{value:": Determines whether the data block is visible.",paraId:33,tocIndex:17},{value:"Global permission configuration (no view permission):",paraId:34,tocIndex:17},{value:"Order table individual permission configuration:",paraId:35,tocIndex:17},{value:"In the UI, data blocks for other data tables remain hidden, but the order table block is shown.",paraId:36,tocIndex:17},{value:"Complete example configuration process:",paraId:37,tocIndex:17},{value:"Edit",paraId:38,tocIndex:17},{value:": Controls whether the edit operation button is displayed within a block.",paraId:38,tocIndex:17},{value:"Operation permissions can be further refined by setting the data scope.",paraId:39,tocIndex:17},{value:"For example, setting the order data table so users can only edit their own data:",paraId:40,tocIndex:17},{value:"Delete",paraId:41,tocIndex:17},{value:": Controls whether the delete operation button is visible within a block.",paraId:41,tocIndex:17},{value:"Export",paraId:42,tocIndex:17},{value:": Controls whether the export operation button is visible within a block.",paraId:42,tocIndex:17},{value:"Import",paraId:43,tocIndex:17},{value:": Controls whether the import operation button is visible within a block.",paraId:43,tocIndex:17},{value:"The visibility of a relationship field is determined by the permissions set on the source table's fields. These permissions control whether the entire relationship field component appears in the user interface.",paraId:44,tocIndex:19},{value:'For example, in the Order table, the "Customer" relationship field is restricted to view and import/export permissions:',paraId:45,tocIndex:19},{value:'In the UI, this configuration ensures that the "Customer" relationship field does not appear in the add and edit operation sections of the Order table.',paraId:46,tocIndex:19},{value:"Complete example configuration process:",paraId:47,tocIndex:19},{value:"The permissions for fields within the relationship field component (such as those found in sub-tables or sub-forms) are determined by the permissions of the target data table.",paraId:48,tocIndex:19},{value:"When the relationship field component is a sub-form:",paraId:49,tocIndex:19},{value:'As shown, the "Customer" relationship field in the Order table is granted full permissions, while the Customer table itself is configured to be read-only.',paraId:50,tocIndex:19},{value:'Order table individual permission configuration, "Customer" relationship field has all field permissions:',paraId:51,tocIndex:19},{value:"Customer table individual permission configuration, fields in the Customer table have view-only permissions:",paraId:52,tocIndex:19},{value:'In the UI, this configuration results in the "Customer" relationship field being visible in the Order table section. However, when the interface is switched to a sub-form (where fields within the sub-form are visible in the details but hidden during new or edit operations), the behavior changes accordingly.',paraId:53,tocIndex:19},{value:"Complete example configuration process:",paraId:54,tocIndex:19},{value:"Further refinement of sub-form field permissions allows individual fields to be specifically controlled.",paraId:55,tocIndex:19},{value:'For instance, the Customer table can be configured so that the "Customer Name" field is neither visible nor editable:',paraId:56,tocIndex:19},{value:"Complete example configuration process:",paraId:57,tocIndex:19},{value:"When the relationship field component is a sub-table, the situation is consistent with sub-forms:",paraId:58,tocIndex:19},{value:'As illustrated, the "Shipment" relationship field in the Order table has full permissions, while the Shipment table is set to read-only.',paraId:59,tocIndex:19},{value:"In the UI, this setup allows the relationship field to be visible. However, when the interface is switched to a sub-table (where fields within the sub-table are visible during viewing operations but hidden during new or edit operations), the behavior adjusts accordingly.",paraId:60,tocIndex:19},{value:"Fine-tuning sub-table field permissions also enables specific control over individual fields:",paraId:61,tocIndex:19},{value:"The visibility of a relationship block is governed by the permissions set on the target table associated with the relationship field, independent of the permissions on the relationship field itself.",paraId:62,tocIndex:20},{value:'For example, the visibility of the "Customer" relationship block is controlled by the permissions configured for the Customer table:',paraId:63,tocIndex:20},{value:"The fields within a relationship block are controlled by the permissions set on the target table's fields.",paraId:64,tocIndex:20},{value:"As depicted below, the Customer table can be configured to allow viewing of specific fields only:",paraId:65,tocIndex:20},{value:"Role Union is a permission management mode. According to system settings, system developers can choose to use ",paraId:66,tocIndex:21},{value:"Independent roles",paraId:66,tocIndex:21},{value:", ",paraId:66,tocIndex:21},{value:"Allow roles union",paraId:66,tocIndex:21},{value:", or ",paraId:66,tocIndex:21},{value:"Roles union only",paraId:66,tocIndex:21},{value:", to meet different permission requirements.",paraId:66,tocIndex:21},{value:"By default, the system uses independent roles. Users must switch between the roles they possess individually.",paraId:67,tocIndex:22},{value:"System developers can enable ",paraId:68,tocIndex:23},{value:"Allow roles union",paraId:68,tocIndex:23},{value:", allowing users to simultaneously have permissions of all assigned roles while still permitting users to switch roles individually.",paraId:68,tocIndex:23},{value:"Users are enforced to only use Role Union and cannot switch roles individually.",paraId:69,tocIndex:24},{value:"Role union grants the maximum permissions across all roles. Below are the explanations for resolving permission conflicts when roles have different settings on the same permission.",paraId:70,tocIndex:25},{value:"Example:",paraId:71,tocIndex:26},{value:`
Role1 is configured to `,paraId:71,tocIndex:26},{value:"Allows to configure interface",paraId:71,tocIndex:26},{value:" and Role2 is configured to ",paraId:71,tocIndex:26},{value:"Allows to install, activate, disable plugins",paraId:71,tocIndex:26},{value:"When logging in with the ",paraId:72,tocIndex:26},{value:"Full Permissions",paraId:72,tocIndex:26},{value:" role, the user will have both permissions simultaneously.",paraId:72,tocIndex:26},{value:"Scenario 1: Multiple roles setting conditions on the same field",paraId:73,tocIndex:28},{value:"Role A filter: Age < 30",paraId:74,tocIndex:28},{value:"UserID",paraId:75,tocIndex:28},{value:"Name",paraId:75,tocIndex:28},{value:"Age",paraId:75,tocIndex:28},{value:"1",paraId:75,tocIndex:28},{value:"Jack",paraId:75,tocIndex:28},{value:"23",paraId:75,tocIndex:28},{value:"2",paraId:75,tocIndex:28},{value:"Lily",paraId:75,tocIndex:28},{value:"29",paraId:75,tocIndex:28},{value:"Role B filter: Age > 25",paraId:76,tocIndex:28},{value:"UserID",paraId:77,tocIndex:28},{value:"Name",paraId:77,tocIndex:28},{value:"Age",paraId:77,tocIndex:28},{value:"2",paraId:77,tocIndex:28},{value:"Lily",paraId:77,tocIndex:28},{value:"29",paraId:77,tocIndex:28},{value:"3",paraId:77,tocIndex:28},{value:"Sam",paraId:77,tocIndex:28},{value:"32",paraId:77,tocIndex:28},{value:"After merging:",paraId:78,tocIndex:28},{value:"UserID",paraId:79,tocIndex:28},{value:"Name",paraId:79,tocIndex:28},{value:"Age",paraId:79,tocIndex:28},{value:"1",paraId:79,tocIndex:28},{value:"Jack",paraId:79,tocIndex:28},{value:"23",paraId:79,tocIndex:28},{value:"2",paraId:79,tocIndex:28},{value:"Lily",paraId:79,tocIndex:28},{value:"29",paraId:79,tocIndex:28},{value:"3",paraId:79,tocIndex:28},{value:"Sam",paraId:79,tocIndex:28},{value:"32",paraId:79,tocIndex:28},{value:"Scenario 2: Different roles setting conditions on different fields",paraId:80,tocIndex:28},{value:"Role A filter: Age < 30",paraId:81,tocIndex:28},{value:"UserID",paraId:82,tocIndex:28},{value:"Name",paraId:82,tocIndex:28},{value:"Age",paraId:82,tocIndex:28},{value:"1",paraId:82,tocIndex:28},{value:"Jack",paraId:82,tocIndex:28},{value:"23",paraId:82,tocIndex:28},{value:"2",paraId:82,tocIndex:28},{value:"Lily",paraId:82,tocIndex:28},{value:"29",paraId:82,tocIndex:28},{value:'Role B filter: Name contains "Ja"',paraId:83,tocIndex:28},{value:"UserID",paraId:84,tocIndex:28},{value:"Name",paraId:84,tocIndex:28},{value:"Age",paraId:84,tocIndex:28},{value:"1",paraId:84,tocIndex:28},{value:"Jack",paraId:84,tocIndex:28},{value:"23",paraId:84,tocIndex:28},{value:"3",paraId:84,tocIndex:28},{value:"Jasmin",paraId:84,tocIndex:28},{value:"27",paraId:84,tocIndex:28},{value:"After merging:",paraId:85,tocIndex:28},{value:"UserID",paraId:86,tocIndex:28},{value:"Name",paraId:86,tocIndex:28},{value:"Age",paraId:86,tocIndex:28},{value:"1",paraId:86,tocIndex:28},{value:"Jack",paraId:86,tocIndex:28},{value:"23",paraId:86,tocIndex:28},{value:"2",paraId:86,tocIndex:28},{value:"Lily",paraId:86,tocIndex:28},{value:"29",paraId:86,tocIndex:28},{value:"3",paraId:86,tocIndex:28},{value:"Jasmin",paraId:86,tocIndex:28},{value:"27",paraId:86,tocIndex:28},{value:"Role A visible columns: Name, Age",paraId:87,tocIndex:29},{value:"UserID",paraId:88,tocIndex:29},{value:"Name",paraId:88,tocIndex:29},{value:"Age",paraId:88,tocIndex:29},{value:"1",paraId:88,tocIndex:29},{value:"Jack",paraId:88,tocIndex:29},{value:"23",paraId:88,tocIndex:29},{value:"2",paraId:88,tocIndex:29},{value:"Lily",paraId:88,tocIndex:29},{value:"29",paraId:88,tocIndex:29},{value:"Role B visible columns: Name, Sex",paraId:89,tocIndex:29},{value:"UserID",paraId:90,tocIndex:29},{value:"Name",paraId:90,tocIndex:29},{value:"Sex",paraId:90,tocIndex:29},{value:"1",paraId:90,tocIndex:29},{value:"Jack",paraId:90,tocIndex:29},{value:"Man",paraId:90,tocIndex:29},{value:"2",paraId:90,tocIndex:29},{value:"Lily",paraId:90,tocIndex:29},{value:"Woman",paraId:90,tocIndex:29},{value:"After merging:",paraId:91,tocIndex:29},{value:"UserID",paraId:92,tocIndex:29},{value:"Name",paraId:92,tocIndex:29},{value:"Age",paraId:92,tocIndex:29},{value:"Sex",paraId:92,tocIndex:29},{value:"1",paraId:92,tocIndex:29},{value:"Jack",paraId:92,tocIndex:29},{value:"23",paraId:92,tocIndex:29},{value:"Man",paraId:92,tocIndex:29},{value:"2",paraId:92,tocIndex:29},{value:"Lily",paraId:92,tocIndex:29},{value:"29",paraId:92,tocIndex:29},{value:"Woman",paraId:92,tocIndex:29},{value:"Role A filter: Age < 30, columns Name, Age",paraId:93,tocIndex:30},{value:"UserID",paraId:94,tocIndex:30},{value:"Name",paraId:94,tocIndex:30},{value:"Age",paraId:94,tocIndex:30},{value:"1",paraId:94,tocIndex:30},{value:"Jack",paraId:94,tocIndex:30},{value:"23",paraId:94,tocIndex:30},{value:"2",paraId:94,tocIndex:30},{value:"Lily",paraId:94,tocIndex:30},{value:"29",paraId:94,tocIndex:30},{value:'Role B filter: Name contains "Ja", columns Name, Sex',paraId:95,tocIndex:30},{value:"UserID",paraId:96,tocIndex:30},{value:"Name",paraId:96,tocIndex:30},{value:"Sex",paraId:96,tocIndex:30},{value:"3",paraId:96,tocIndex:30},{value:"Jade",paraId:96,tocIndex:30},{value:"Woman",paraId:96,tocIndex:30},{value:"4",paraId:96,tocIndex:30},{value:"James",paraId:96,tocIndex:30},{value:"Man",paraId:96,tocIndex:30},{value:"After merging:",paraId:97,tocIndex:30},{value:"UserID",paraId:98,tocIndex:30},{value:"Name",paraId:98,tocIndex:30},{value:"Age",paraId:98,tocIndex:30},{value:"Sex",paraId:98,tocIndex:30},{value:"1",paraId:98,tocIndex:30},{value:"Jack",paraId:98,tocIndex:30},{value:"23",paraId:98,tocIndex:30},{value:"Man",paraId:98,tocIndex:30},{value:"2",paraId:98,tocIndex:30},{value:"Lily",paraId:98,tocIndex:30},{value:"29",paraId:98,tocIndex:30},{value:"Woman",paraId:98,tocIndex:30},{value:"3",paraId:98,tocIndex:30},{value:"Jade",paraId:98,tocIndex:30},{value:"27",paraId:98,tocIndex:30},{value:"Woman",paraId:98,tocIndex:30},{value:"4",paraId:98,tocIndex:30},{value:"James",paraId:98,tocIndex:30},{value:"31",paraId:98,tocIndex:30},{value:"Man",paraId:98,tocIndex:30},{value:"Note: Cells with red background indicate data invisible in individual roles but visible in the merged role.",paraId:99,tocIndex:30},{value:"Role merging data-scope rules:",paraId:100,tocIndex:31},{value:"Between rows, if any condition is satisfied, the row has permissions.",paraId:101,tocIndex:31},{value:"Between columns, fields are combined.",paraId:101,tocIndex:31},{value:"When rows and columns are both configured, rows and columns are merged separately, not by row-column combinations.",paraId:101,tocIndex:31}]},108652:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Management Center",paraId:0},{value:"Role Management",paraId:0},{value:'The application comes with two predefined roles: "Admin" and "Member," each with distinct default permission settings tailored to their functionalities.',paraId:1,tocIndex:2},{value:"Adding, Deleting, and Modifying Roles",paraId:0},{value:"The role identifier, a unique system identifier, allows customization of default roles, but the system's predefined roles cannot be deleted.",paraId:2,tocIndex:3},{value:"Setting the Default Role",paraId:0},{value:"The default role is the one automatically assigned to new users if no specific role is provided during their creation.",paraId:3,tocIndex:4},{value:"Configuring Permissions",paraId:0},{value:"General Permission Settings",paraId:0},{value:"Allows to configure interface",paraId:4,tocIndex:6},{value:': This permission governs whether a user can configure the interface. Activating it adds a UI configuration button. The "admin" role has this permission enabled by default.',paraId:4,tocIndex:6},{value:"Allows to install, activate, disable plugins",paraId:4,tocIndex:6},{value:': This permission dictates whether a user can enable or disable plugins. When active, the user gains access to the plugin manager interface. The "admin" role has this permission enabled by default.',paraId:4,tocIndex:6},{value:"Allows to configure plugins",paraId:4,tocIndex:6},{value:': This permission lets the user configure plugin parameters or manage plugin backend data. The "admin" role has this permission enabled by default.',paraId:4,tocIndex:6},{value:"Allows to clear cache, reboot application",paraId:4,tocIndex:6},{value:": This permission is tied to system maintenance tasks like clearing the cache and restarting the application. Once activated, related operation buttons appear in the personal center. This permission is disabled by default.",paraId:4,tocIndex:6},{value:"New menu items are allowed to be accessed by default.",paraId:4,tocIndex:6},{value:": Newly created menus are accessible by default, and this setting is enabled by default.",paraId:4,tocIndex:6},{value:"Action permissions",paraId:0},{value:"Action permissions apply universally to all data tables and are categorized by operation type. These permissions can be configured based on data scope: all data or the user's own data. The former allows operations on the entire data table, while the latter restricts operations to data relevant to the user.",paraId:5,tocIndex:7},{value:"Data Table Operation Permissions",paraId:0},{value:"Collection operation permissions allow fine-tuning of Action permissions by configuring access to resources within each data table. These permissions include:",paraId:6,tocIndex:8},{value:"Action permissions",paraId:7,tocIndex:8},{value:": These include adding, viewing, editing, deleting, exporting, and importing actions. Permissions are set based on data scope:",paraId:7,tocIndex:8},{value:"All records",paraId:8,tocIndex:8},{value:": Grants the user the ability to perform actions on all records within the data table.",paraId:8,tocIndex:8},{value:"Own records",paraId:8,tocIndex:8},{value:": Restricts the user to perform actions only on records they have created.",paraId:8,tocIndex:8},{value:"Field Permissions",paraId:9,tocIndex:8},{value:": Field permissions enable you to set specific permissions for each field during different operations. For instance, certain fields can be configured to be view-only, without editing privileges.",paraId:9,tocIndex:8},{value:"Menu permissions",paraId:0},{value:"Menu permissions control access based on menu items.",paraId:10,tocIndex:9},{value:"Plugin Configuration Permissions",paraId:0},{value:"Plugin configuration permissions control the ability to configure specific plugin parameters. When enabled, the corresponding plugin management interface appears in the management center.",paraId:11,tocIndex:10},{value:"Personal Center",paraId:0},{value:"Role Switching",paraId:0},{value:"Users can be assigned multiple roles and switch between them in the personal center. The default role when logging in is determined by the most recently switched role (this value updates with each switch) or, if not applicable, the first role (system default role).",paraId:12,tocIndex:12},{value:"Application in UI",paraId:0},{value:"Data Block Permissions",paraId:0},{value:"Visibility of data blocks in a data table is controlled by view operation permissions, with individual configurations taking precedence over global settings.",paraId:13,tocIndex:14},{value:'For example, under global permissions, the "admin" role has full access, but the order table may have individual permissions configured, making it invisible.',paraId:14,tocIndex:14},{value:"Field Permissions",paraId:0},{value:"View",paraId:15,tocIndex:15},{value:": Determines whether specific fields are visible at the field level, allowing control over which fields are visible to certain roles within the order table.",paraId:15,tocIndex:15},{value:"In the UI, only fields with configured permissions are visible within the order table block. System fields (Id, CreatedAt, LastUpdatedAt) retain view permissions even without specific configuration.",paraId:16,tocIndex:15},{value:"Edit",paraId:17,tocIndex:15},{value:": Controls whether fields can be edited and saved (updated).",paraId:17,tocIndex:15},{value:"In the UI, only fields with edit permissions are shown in the edit operation form block within the order table.",paraId:18,tocIndex:15},{value:"Similarly, only fields with add permissions are shown in the add operation form block within the order table.",paraId:19,tocIndex:15},{value:"Add",paraId:20,tocIndex:15},{value:": Determines whether fields can be added (created).",paraId:20,tocIndex:15},{value:"In the UI, only fields with add permissions are displayed within the add operation form block of the order table.",paraId:21,tocIndex:15},{value:"Export",paraId:22,tocIndex:15},{value:": Controls whether fields can be exported.",paraId:22,tocIndex:15},{value:"Import",paraId:22,tocIndex:15},{value:": Controls whether fields can be imported.",paraId:22,tocIndex:15},{value:"Operation Permissions",paraId:0},{value:"Individually configured permissions take the highest priority. If specific permissions are configured, they override global settings; otherwise, the global settings are applied.",paraId:23,tocIndex:16},{value:"Add new",paraId:24,tocIndex:16},{value:": Controls whether the add operation button is visible within a block.",paraId:24,tocIndex:16},{value:"When the add operation is permitted, the add button appears within the operation area of the order table block in the UI.",paraId:25,tocIndex:16},{value:"View",paraId:26,tocIndex:16},{value:": Determines whether the data block is visible.",paraId:26,tocIndex:16},{value:"In the UI, data blocks for other data tables remain hidden, but the order table block is shown if individual permissions are set.",paraId:27,tocIndex:16},{value:"Edit",paraId:28,tocIndex:16},{value:": Controls whether the edit operation button is displayed within a block.",paraId:28,tocIndex:16},{value:"Operation permissions can be further refined by setting the data scope.",paraId:29,tocIndex:16},{value:"Delete",paraId:30,tocIndex:16},{value:": Controls whether the delete operation button is visible within a block.",paraId:30,tocIndex:16},{value:"Export",paraId:31,tocIndex:16},{value:": Controls whether the export operation button is visible within a block.",paraId:31,tocIndex:16},{value:"Import",paraId:31,tocIndex:16},{value:": Controls whether the import operation button is visible within a block.",paraId:31,tocIndex:16},{value:"The visibility of a relationship field is determined by the permissions set on the source table's fields. These permissions control whether the entire relationship field component appears in the user interface.",paraId:32,tocIndex:18},{value:'For example, in the Order table, the "Customer" relationship field is restricted to view and import/export permissions, as depicted below:',paraId:33,tocIndex:18},{value:'In the UI, this configuration ensures that the "Customer" relationship field does not appear in the add and edit operation sections of the Order table.',paraId:34,tocIndex:18},{value:"The complete configuration process is illustrated below:",paraId:35,tocIndex:18},{value:"The permissions for fields within the relationship field component (such as those found in sub-tables or sub-forms) are determined by the permissions of the target data table.",paraId:36,tocIndex:18},{value:"When the relationship field component is a sub-form:",paraId:37,tocIndex:18},{value:'In this case, as shown, the "Customer" relationship field in the Order table is granted full permissions, while the Customer table itself is configured to be read-only.',paraId:38,tocIndex:18},{value:'The permissions for the Order table are set as follows, granting the "Customer" relationship field full access:',paraId:39,tocIndex:18},{value:"The permissions for the Customer table are configured to allow view-only access:",paraId:40,tocIndex:18},{value:'In the UI, this configuration results in the "Customer" relationship field being visible in the Order table section. However, when the interface is switched to a sub-form (where fields within the sub-form are visible in the details but hidden during new or edit operations), the behavior changes accordingly.',paraId:41,tocIndex:18},{value:"The complete configuration process is demonstrated below:",paraId:42,tocIndex:18},{value:"Further refinement of sub-form field permissions allows individual fields to be specifically controlled.",paraId:43,tocIndex:18},{value:'For instance, as shown below, the Customer table can be configured so that the "Customer Name" field is neither visible nor editable:',paraId:44,tocIndex:18},{value:"The complete configuration process for this setting is illustrated here:",paraId:45,tocIndex:18},{value:"When dealing with a sub-table instead of a sub-form, the configuration principles remain the same:",paraId:46,tocIndex:18},{value:'As illustrated, the "shipment" relationship field in the Order table has full permissions, while the shipment collection itself is set to read-only.',paraId:47,tocIndex:18},{value:"In the UI, this setup allows the relationship field to be visible. However, when the interface is switched to a sub-table (where fields within the sub-table are visible during viewing operations but hidden during new or edit operations), the behavior adjusts accordingly.",paraId:48,tocIndex:18},{value:"Fine-tuning sub-collection field permissions also enables specific control over individual fields.",paraId:49,tocIndex:18},{value:"The visibility of a relationship block is governed by the permissions set on the target table associated with the relationship field, independent of the permissions on the relationship field itself.",paraId:50,tocIndex:19},{value:'For example, the visibility of the "Customer" relationship block is controlled by the permissions configured for the Customer table:',paraId:51,tocIndex:19},{value:"The fields within a relationship block are controlled by the permissions set on the target table\u2019s fields.",paraId:52,tocIndex:19},{value:"As depicted below, the Customer table can be configured to allow viewing of specific fields only:",paraId:53,tocIndex:19}]},10402:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Bulk Edit",paraId:0},{value:"The Bulk editing feature is crafted for situations where different update logic must be applied to various groups of records, offering high flexibility in data processing tasks. When the user clicks the batch editing button, a configuration interface appears, enabling the user to define distinct assignment logic for each field. This allows for precise control over how each record is updated based on specific needs.",paraId:1,tocIndex:1},{value:"Select the data for Bulk editing: either Selected or All, with the default option being Selected.",paraId:2,tocIndex:3},{value:"Define the update logic for each field, with options to:",paraId:3,tocIndex:3},{value:"Leave unchanged",paraId:4,tocIndex:3},{value:"Modify to a specified value",paraId:4,tocIndex:3},{value:"Clear the field",paraId:4,tocIndex:3},{value:"In the example shown, the Bulk editing operation is applied within the shipment table block. The selected data has the transportation mode updated to air freight, and both the delivery confirmation and actual arrival times are cleared.",paraId:5,tocIndex:3}]},812419:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The bulk update function is designed for situations where you need to apply the same modification across multiple records. Before executing a batch update, users must first define the logic for assigning values to the fields that will be updated. This logic is applied to all selected records once the update button is clicked.",paraId:0,tocIndex:1},{value:'Set the Data to Update: Choose between "Selected" or "All," with "Selected" being the default option.',paraId:1,tocIndex:2},{value:"Field Assignment: Specify which fields will be included in the batch update; only these specified fields will be affected.",paraId:1,tocIndex:2},{value:'In the example shown, the batch update operation is configured in the waybill table to mark the selected records as "Delivery Confirmed."',paraId:2,tocIndex:2}]},438304:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is built-in, so no separate installation is required.",paraId:0,tocIndex:2},{value:'When the "Allows to configuration interface" option is selected, you can set up custom requests.',paraId:1,tocIndex:4},{value:"The customRequests table is system-level, and permissions are controlled via the acl.registerSnippet method.",paraId:2,tocIndex:4},{value:`this.app.acl.registerSnippet({
  name: 'ui.customRequests', // Permission for configuring interface related to ui.*
  actions: ['customRequests:*'],
});
`,paraId:3,tocIndex:4},{value:"You can configure variables within both the URL and request body.",paraId:4,tocIndex:5},{value:"Current record",paraId:5,tocIndex:5},{value:"Current user",paraId:5,tocIndex:5},{value:"Current time",paraId:5,tocIndex:5},{value:"API token (supported by v1.3.22-beta and above)",paraId:5,tocIndex:5},{value:"Each custom request can have custom role-based permissions, with default permissions granted to all users.",paraId:6,tocIndex:8}]},320533:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The copy feature allows users to create new data entries based on existing records. It supports two modes: direct copy and copy to a form for further editing.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, so no additional installation is needed.",paraId:1,tocIndex:2},{value:"By default, data is copied using the direct copy mode;",paraId:2,tocIndex:4},{value:"Target collection: Specifies where the copied data will be stored(For inherited tables, the data can be copied to a sub-table. Direct copy is limited to the current table);",paraId:2,tocIndex:4},{value:"Data fields: Defines which fields to include in the copy. You can select all or specific fields, required.",paraId:2,tocIndex:4},{value:"Once configured, simply click the button to copy the data.",paraId:3,tocIndex:4},{value:"The fields defined in the template will be pre-filled as default values in a form, allowing you to modify them before submitting to complete the copy.",paraId:4,tocIndex:5},{value:"You can choose to copy the data to the current table or a sub-table (in inherited cases).",paraId:5,tocIndex:5},{value:"Template Field Configuration: Only the selected fields will be pre-filled in the form as default values.",paraId:6,tocIndex:5},{value:'The "Waybill" (o2m) relationship is copied, and its field components are set as a sub-form. The fields within the sub-form are configurable.',paraId:7,tocIndex:5},{value:"The system will automatically interpret the fields already configured in the current form block as template fields;",paraId:8,tocIndex:6},{value:'After modifying the form block fields (e.g., adjusting relationship components), you can reopen the template configuration and click the "Sync Form" button to ensure consistency between the form and the template.',paraId:8,tocIndex:6},{value:"Template data will populate the form with default values, allowing you to adjust them and submit to complete the copy operation.",paraId:9,tocIndex:6},{value:"Below is an example of setting up the copy function for an order list.",paraId:10,tocIndex:6},{value:"Different field types (with different relationships) require different handling logic, such as copying, referencing, or preloading. Modifications to relationship field components can also affect this logic (Select and Record picker components handle references, while Sub-form and Sub-table components handle copies).",paraId:11,tocIndex:8},{value:"Copying:",paraId:12,tocIndex:8},{value:"Standard fields are copied;",paraId:13,tocIndex:8},{value:`For hasOne and hasMany relationships, fields can only be copied (i.e., these types of relationships cannot use Select or Record picker as components but must use Sub-form, Sub-table, etc.);
`,paraId:13,tocIndex:8},{value:"Adjusting hasOne or hasMany field components won\u2019t change the copying logic;",paraId:14,tocIndex:8},{value:"All sub-fields of copied relationships can be selected.",paraId:14,tocIndex:8},{value:"Referencing",paraId:15,tocIndex:8},{value:"belongsTo and belongsToMany relationships are handled as references;",paraId:16,tocIndex:8},{value:"References can transform into copies. For example, if the field component changes from select to sub-form, the relationship turns from a reference to a copy. After this, all subfields become selectable.",paraId:16,tocIndex:8},{value:"Preloading: Refers to relationship fields within referenced fields.",paraId:17,tocIndex:8},{value:"Fields within referenced relationships are preloaded;",paraId:18,tocIndex:8},{value:"Adjustments to preloaded relationship fields can cause them to switch to a reference or copy logic.",paraId:18,tocIndex:8},{value:"All copy and reference fields are selected by default.",paraId:19,tocIndex:9},{value:"Primary keys of copied relationships are filtered out, but primary keys of references and preloaded data are not",paraId:20,tocIndex:10},{value:"Foreign keys",paraId:20,tocIndex:10},{value:"Fields that must remain unique",paraId:20,tocIndex:10},{value:"Sorting fields",paraId:20,tocIndex:10},{value:"Auto-generated fields",paraId:20,tocIndex:10},{value:"Password field",paraId:20,tocIndex:10},{value:"Creator",paraId:20,tocIndex:10},{value:"Creation date",paraId:20,tocIndex:10},{value:"Last updated by",paraId:20,tocIndex:10},{value:"Last update date",paraId:20,tocIndex:10},{value:"The fields already configured in the form block will be automatically parsed as template fields.",paraId:21,tocIndex:11},{value:'After modifying the form block (e.g., adjusting relationship field components), reopen the template configuration and click the "Sync Form" button to ensure the form aligns with the template.',paraId:21,tocIndex:11}]},632098:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Export records Pro plugin provides enhanced functionality based on the regular export feature.",paraId:0,tocIndex:1},{value:"This plugin depends on the async task management plugin. Please enable the async task management plugin before use.",paraId:1,tocIndex:2},{value:"Supports asynchronous export operations, executed in independent threads, suitable for exporting large amounts of data.",paraId:2,tocIndex:3},{value:"Supports attachment export.",paraId:2,tocIndex:3},{value:"You can configure the export mode on the export button, with three available export modes:",paraId:3,tocIndex:5},{value:"Auto: Determines the export mode based on the amount of data at export time. If the data volume is less than 1000 records (100 records for attachment export), synchronous export is used; if the data volume exceeds 1000 records (100 records for attachment export), asynchronous export is used.",paraId:4,tocIndex:5},{value:"Sync: Uses synchronous export, which runs in the main thread and is suitable for small-scale data. Using synchronous mode for large-scale data exports may cause system blocking, lag, and inability to process other user requests.",paraId:4,tocIndex:5},{value:"Async: Uses asynchronous export, which runs in a separate background thread and won't block the current system.",paraId:4,tocIndex:5},{value:"After initiating an export, the export process will be executed in a separate background thread without requiring manual user configuration. In the user interface, after executing the export operation, the current export task will be displayed in the upper right corner, showing real-time task progress.",paraId:5,tocIndex:6},{value:"After the export is complete, you can download the exported file from the export task.",paraId:6,tocIndex:6},{value:`When there are many concurrent export tasks, server configuration can affect system response time, potentially slowing it down. Therefore, we recommend system developers configure the maximum number of concurrent export tasks (default is 3). When the configured concurrency limit is exceeded, tasks will enter a queuing state.
`,paraId:7,tocIndex:7},{value:"Concurrency configuration method: Set using environment variables, e.g., ASYNC_TASK_MAX_CONCURRENCY=",paraId:8,tocIndex:7},{value:", ",paraId:8,tocIndex:7},{value:"How to configure environment variables?",paraId:9,tocIndex:7},{value:"Based on comprehensive testing with different configurations and data complexities, recommended concurrency settings:",paraId:10,tocIndex:7},{value:"For 2-core CPU: concurrency of 3.",paraId:11,tocIndex:7},{value:"For 4-core CPU: concurrency of 5.",paraId:11,tocIndex:7},{value:"When you notice unusually slow export processes (see reference below), it may be due to performance issues caused by the database table structure.",paraId:12,tocIndex:8},{value:"Data Characteristics",paraId:13,tocIndex:8},{value:"Index Type",paraId:13,tocIndex:8},{value:"Data Volume",paraId:13,tocIndex:8},{value:"Export Duration",paraId:13,tocIndex:8},{value:"No relationship fields",paraId:13,tocIndex:8},{value:"Primary key/Unique constraint",paraId:13,tocIndex:8},{value:"1 million",paraId:13,tocIndex:8},{value:"3-6 minutes",paraId:13,tocIndex:8},{value:"No relationship fields",paraId:13,tocIndex:8},{value:"Regular index",paraId:13,tocIndex:8},{value:"1 million",paraId:13,tocIndex:8},{value:"6-10 minutes",paraId:13,tocIndex:8},{value:"No relationship fields",paraId:13,tocIndex:8},{value:"Compound index (non-unique)",paraId:13,tocIndex:8},{value:"1 million",paraId:13,tocIndex:8},{value:"30 minutes",paraId:13,tocIndex:8},{value:"With relationship fields",paraId:13,tocIndex:8},{value:"(one-to-one, one-to-many,",paraId:13,tocIndex:8},{value:"many-to-one, many-to-many)",paraId:13,tocIndex:8},{value:"Primary key/Unique constraint",paraId:13,tocIndex:8},{value:"500,000",paraId:13,tocIndex:8},{value:"15-30 minutes",paraId:13,tocIndex:8},{value:"To ensure efficient exports, we recommend:",paraId:14,tocIndex:8},{value:"Your data tables must meet the following conditions:",paraId:15,tocIndex:8},{value:"Condition Type",paraId:16,tocIndex:8},{value:"Required Criteria",paraId:16,tocIndex:8},{value:"Additional Notes",paraId:16,tocIndex:8},{value:"Table Structure (at least one requirement)",paraId:16,tocIndex:8},{value:"Has primary key",paraId:16,tocIndex:8},{value:"Has unique constraint",paraId:16,tocIndex:8},{value:"Has index (unique, regular, compound)",paraId:16,tocIndex:8},{value:"Priority: primary key > unique constraint > index",paraId:16,tocIndex:8},{value:"Field Properties",paraId:16,tocIndex:8},{value:"Primary key/unique constraint/index (one of them) must have sortable properties, such as: auto-increment ID, snowflake ID, UUID v1, timestamp, numbers, etc.",paraId:16,tocIndex:8},{value:"(Note: Non-sortable fields like UUID v3/v4/v5, ordinary strings, etc. will affect performance)",paraId:16,tocIndex:8},{value:"None",paraId:16,tocIndex:8},{value:`Reduce unnecessary export fields, especially relationship fields (performance issues with relationship fields are still being optimized)
`,paraId:17,tocIndex:8},{value:`If you've met all the above conditions and still experience slow exports, you can analyze logs or provide feedback to our official team.
`,paraId:17,tocIndex:8},{value:"Attachment export supports exporting attachment-related fields as compressed packages.",paraId:18,tocIndex:9},{value:"Configure the attachment fields to be exported, multiple selections supported.",paraId:19,tocIndex:10},{value:"You can choose whether to generate a folder for each record.",paraId:19,tocIndex:10},{value:"File naming rules:",paraId:20,tocIndex:10},{value:"If you choose to generate a folder for each record, the file naming rule is: ",paraId:21,tocIndex:10},{value:"{record title field value}/{attachment field name}[-{file sequence number}].{file extension}",paraId:21,tocIndex:10},{value:".",paraId:21,tocIndex:10},{value:"If you choose not to generate folders, the file naming rule is: ",paraId:21,tocIndex:10},{value:"{record title field value}-{attachment field name}[-{file sequence number}].{file extension}",paraId:21,tocIndex:10},{value:".",paraId:21,tocIndex:10},{value:"The file sequence number is automatically generated when there are multiple attachments in the attachment field.",paraId:22,tocIndex:10}]},186721:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin comes pre-installed, so no additional installation steps are required.",paraId:0,tocIndex:2},{value:"First Level: Displays all fields of the current collection.",paraId:1,tocIndex:4},{value:"Second Level: If the field is a relational type, you'll need to select fields from the related table.",paraId:1,tocIndex:4},{value:"Third Level: Only up to three levels of relationships are supported. Fields in the final relational level won't be shown.",paraId:1,tocIndex:4}]},854134:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Import Pro plugin provides enhanced functionality based on the regular import feature.",paraId:0,tocIndex:1},{value:"This plugin depends on the async task management plugin. Please enable the async task management plugin before use.",paraId:1,tocIndex:2},{value:"Supports asynchronous import operations, executed in independent threads, suitable for importing large amounts of data.",paraId:2,tocIndex:3},{value:"Supports advanced import options.",paraId:2,tocIndex:3},{value:"After initiating an import, the import process will be executed in a separate background thread without requiring manual user configuration. In the user interface, after executing the import operation, the current import task will be displayed in the upper right corner, showing real-time task progress.",paraId:3,tocIndex:5},{value:"After the import is complete, you can view the import results in the import task.",paraId:4,tocIndex:5},{value:"To evaluate the performance of large-scale data imports, we conducted comparative tests across different scenarios, field types, and trigger configurations (results may vary depending on server and database configurations, provided for reference only):",paraId:5,tocIndex:6},{value:"Data Volume",paraId:6,tocIndex:6},{value:"Field Types",paraId:6,tocIndex:6},{value:"Import Configuration",paraId:6,tocIndex:6},{value:"Processing Time",paraId:6,tocIndex:6},{value:"1 million records",paraId:6,tocIndex:6},{value:"String, number, date, email, long text",paraId:6,tocIndex:6},{value:"\u2022 Trigger workflow: No",paraId:6,tocIndex:6},{value:"\u2022 Duplicate identification: None",paraId:6,tocIndex:6},{value:"Approx. 1 minute",paraId:6,tocIndex:6},{value:"500,000 records",paraId:6,tocIndex:6},{value:"String, number, date, email, long text, many-to-many",paraId:6,tocIndex:6},{value:"\u2022 Trigger workflow: No",paraId:6,tocIndex:6},{value:"\u2022 Duplicate identification: None",paraId:6,tocIndex:6},{value:"Approx. 16 minutes",paraId:6,tocIndex:6},{value:"500,000 records",paraId:6,tocIndex:6},{value:"String, number, date, email, long text, many-to-many, many-to-one",paraId:6,tocIndex:6},{value:"\u2022 Trigger workflow: No",paraId:6,tocIndex:6},{value:"\u2022 Duplicate identification: None",paraId:6,tocIndex:6},{value:"Approx. 22 minutes",paraId:6,tocIndex:6},{value:"500,000 records",paraId:6,tocIndex:6},{value:"String, number, date, email, long text, many-to-many, many-to-one",paraId:6,tocIndex:6},{value:"\u2022 Trigger workflow: Async notifications",paraId:6,tocIndex:6},{value:"\u2022 Duplicate identification: None",paraId:6,tocIndex:6},{value:"Approx. 22 minutes",paraId:6,tocIndex:6},{value:"500,000 records",paraId:6,tocIndex:6},{value:"String, number, date, email, long text, many-to-many, many-to-one",paraId:6,tocIndex:6},{value:"\u2022 Trigger workflow: Async notifications",paraId:6,tocIndex:6},{value:"\u2022 Duplicate identification: Update duplicates (50,000 duplicate records)",paraId:6,tocIndex:6},{value:"Approx. 3 hours",paraId:6,tocIndex:6},{value:"Based on the above performance test results and current design considerations, here are explanations and recommendations regarding key influencing factors:",paraId:7,tocIndex:6},{value:"Duplicate Record Processing Mechanism",paraId:8,tocIndex:6},{value:": When selecting the ",paraId:8,tocIndex:6},{value:"Update Duplicates",paraId:8,tocIndex:6},{value:" or ",paraId:8,tocIndex:6},{value:"Update Duplicates Only",paraId:8,tocIndex:6},{value:" options, the system executes queries and updates record-by-record, which significantly reduces import efficiency. We recommend preprocessing your data (using professional tools for deduplication) before importing it into the system, which can substantially shorten the overall processing time.",paraId:8,tocIndex:6},{value:"Relationship Field Processing Efficiency",paraId:9,tocIndex:6},{value:": The system processes relationship fields using record-by-record query associations, which becomes a performance bottleneck in large data volume scenarios. For simple relationship structures (such as one-to-many associations between two tables), we recommend a phased import strategy: first import the main table's basic data, then establish relationships between tables afterward. If business requirements necessitate importing relationship data simultaneously, please refer to the performance test results above to plan import times accordingly.",paraId:9,tocIndex:6},{value:"Workflow Processing Mechanism",paraId:10,tocIndex:6},{value:": We do not recommend enabling workflow triggers when importing large volumes of data, primarily for two reasons:",paraId:10,tocIndex:6},{value:"When the import task status shows 100%, the task does not immediately end, as the system still needs additional time to create workflow execution plans. During this phase, the system generates corresponding workflow execution plans for each imported record, occupying the import thread, though this does not affect the use of already imported data.",paraId:11,tocIndex:6},{value:"After the import task is fully completed, the concurrent execution of numerous workflows may cause system resource constraints, affecting overall system response speed and user experience.",paraId:11,tocIndex:6},{value:"These three factors affecting performance are being considered for further optimization in future updates.",paraId:12,tocIndex:6},{value:"When importing, you can choose whether to trigger a workflow. If this option is selected and the data table is bound to a workflow (via data table events), the workflow will be triggered for each row during the import.",paraId:13,tocIndex:8},{value:"Select this option and choose the corresponding mode to automatically identify and handle duplicate records during import.",paraId:14,tocIndex:9},{value:"The values configured in the import options will be used as default during the import process. Admins can control whether uploaders can modify these options (except for the trigger workflow option).",paraId:15,tocIndex:9},{value:"Allow uploaders to modify import options",paraId:16,tocIndex:10},{value:"Disable uploaders from modifying import options",paraId:17,tocIndex:10},{value:'Skip Duplicate: Check for existing records using the data in the "Identifying Field". If a record exists, skip this entry; otherwise, import it as a new record.',paraId:18,tocIndex:11},{value:'Update Duplicate: Check for existing records using the data in the "Identifying Field". If a record exists, update it; otherwise, import it as a new record.',paraId:18,tocIndex:11},{value:'Update Duplicate Only: Check for existing records using the data in the "Identifying Field". If a record exists, update it; otherwise, skip it.',paraId:18,tocIndex:11},{value:"The system identifies whether a row is a duplicate record based on the value of this field.",paraId:19,tocIndex:12}]},591492:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Numeric and percentage values are supported, while entries like ",paraId:0,tocIndex:4},{value:"N/A",paraId:0,tocIndex:4},{value:" or ",paraId:0,tocIndex:4},{value:"-",paraId:0,tocIndex:4},{value:" will be excluded.",paraId:0,tocIndex:4},{value:"Number 1",paraId:1,tocIndex:4},{value:"Percentage",paraId:1,tocIndex:4},{value:"Number 2",paraId:1,tocIndex:4},{value:"Number 3",paraId:1,tocIndex:4},{value:"123",paraId:1,tocIndex:4},{value:"25%",paraId:1,tocIndex:4},{value:"N/A",paraId:1,tocIndex:4},{value:"-",paraId:1,tocIndex:4},{value:"After conversion to JSON:",paraId:2,tocIndex:4},{value:`{
  "Number 1": 123,
  "Percentage": 0.25,
  "Number 2": null,
  "Number 3": null,
}
`,paraId:3,tocIndex:4},{value:"The following text values are recognized (case-insensitive for English):",paraId:4,tocIndex:5},{value:"Yes",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"Y",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"True",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"1",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"\u662F",paraId:5,tocIndex:5},{value:"No",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"N",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"False",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"0",paraId:5,tocIndex:5},{value:", ",paraId:5,tocIndex:5},{value:"\u5426",paraId:5,tocIndex:5},{value:"Field 1",paraId:6,tocIndex:5},{value:"Field 2",paraId:6,tocIndex:5},{value:"Field 3",paraId:6,tocIndex:5},{value:"Field 4",paraId:6,tocIndex:5},{value:"Field 5",paraId:6,tocIndex:5},{value:"No",paraId:6,tocIndex:5},{value:"Yes",paraId:6,tocIndex:5},{value:"Y",paraId:6,tocIndex:5},{value:"true",paraId:6,tocIndex:5},{value:"0",paraId:6,tocIndex:5},{value:"After conversion to JSON:",paraId:7,tocIndex:5},{value:`{
  "Field 1": false,
  "Field 2": true,
  "Field 3": true,
  "Field 4": true,
  "Field 5": false,
}
`,paraId:8,tocIndex:5},{value:"DateOnly",paraId:9,tocIndex:6},{value:"Local (+08:00)",paraId:9,tocIndex:6},{value:"GMT",paraId:9,tocIndex:6},{value:"2023-01-18 22:22:22",paraId:9,tocIndex:6},{value:"2023-01-18 22:22:22",paraId:9,tocIndex:6},{value:"2023-01-18 22:22:22",paraId:9,tocIndex:6},{value:"After conversion to JSON:",paraId:10,tocIndex:6},{value:`{
  "DateOnly": "2023-01-18T00:00:00.000Z",
  "Local (+08:00)": "2023-01-18T14:22:22.000Z",
  "GMT": "2023-01-18T22:22:22.000Z",
}
`,paraId:11,tocIndex:6},{value:"Option values and labels can be used interchangeably as input text. Multiple options can be separated by commas (",paraId:12,tocIndex:7},{value:",",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:"\uFF0C",paraId:12,tocIndex:7},{value:") or by full-width commas ( ",paraId:12,tocIndex:7},{value:"\u3001",paraId:12,tocIndex:7},{value:").",paraId:12,tocIndex:7},{value:"For instance, if the ",paraId:13,tocIndex:7},{value:"Priority",paraId:13,tocIndex:7},{value:" field has the following options:",paraId:13,tocIndex:7},{value:"Option Value",paraId:14,tocIndex:7},{value:"Option Label",paraId:14,tocIndex:7},{value:"low",paraId:14,tocIndex:7},{value:"Low",paraId:14,tocIndex:7},{value:"medium",paraId:14,tocIndex:7},{value:"Medium",paraId:14,tocIndex:7},{value:"high",paraId:14,tocIndex:7},{value:"High",paraId:14,tocIndex:7},{value:"Both the value and label can be used as input.",paraId:15,tocIndex:7},{value:"Priority",paraId:16,tocIndex:7},{value:"High",paraId:16,tocIndex:7},{value:"low",paraId:16,tocIndex:7},{value:"After conversion to JSON:",paraId:17,tocIndex:7},{value:`[{ Priority: 'high' }, { Priority: 'low' }];
`,paraId:18,tocIndex:7},{value:"Region 1",paraId:19,tocIndex:8},{value:"Region 2",paraId:19,tocIndex:8},{value:"Beijing/City",paraId:19,tocIndex:8},{value:"Tianjin/City",paraId:19,tocIndex:8},{value:"After conversion to JSON:",paraId:20,tocIndex:8},{value:`{
  "Region 1": ["11", "1101"],
  "Region 2": ["12", "1201"]
}
`,paraId:21,tocIndex:8},{value:"Attachment",paraId:22,tocIndex:9},{value:"https://www.nocobase.com/images/logo.png",paraId:22,tocIndex:9},{value:"After conversion to JSON:",paraId:23,tocIndex:9},{value:`{
  "Attachment": [
    {
      "filename": "logo.png",
      "title": "logo.png",
      "extname": ".png",
      "url": "https://www.nocobase.com/images/logo.png"
    }
  ]
}
`,paraId:24,tocIndex:9},{value:"Multiple values can be separated by commas (",paraId:25,tocIndex:10},{value:",",paraId:25,tocIndex:10},{value:" ",paraId:25,tocIndex:10},{value:"\uFF0C",paraId:25,tocIndex:10},{value:") or full-width commas ( ",paraId:25,tocIndex:10},{value:"\u3001",paraId:25,tocIndex:10},{value:").",paraId:25,tocIndex:10},{value:"Department/Name",paraId:26,tocIndex:10},{value:"Category/Title",paraId:26,tocIndex:10},{value:"Development",paraId:26,tocIndex:10},{value:"Category 1, Category 2",paraId:26,tocIndex:10},{value:"After conversion to JSON:",paraId:27,tocIndex:10},{value:`{
  "Department": [1], // 1 is the record ID for the department named "Development"
  "Category": [1, 2], // 1 and 2 are the record IDs for categories titled "Category 1" and "Category 2"
}
`,paraId:28,tocIndex:10},{value:"JSON1",paraId:29,tocIndex:11},{value:'{"key":"value"}',paraId:29,tocIndex:11},{value:"After conversion to JSON:",paraId:30,tocIndex:11},{value:`{
  "JSON": {"key":"value"}
}
`,paraId:31,tocIndex:11},{value:"Point",paraId:32,tocIndex:12},{value:"Line",paraId:32,tocIndex:12},{value:"Polygon",paraId:32,tocIndex:12},{value:"Circle",paraId:32,tocIndex:12},{value:"1,2",paraId:32,tocIndex:12},{value:"(1,2),(3,4)",paraId:32,tocIndex:12},{value:"(1,2),(3,4),(1,2)",paraId:32,tocIndex:12},{value:"1,2,3",paraId:32,tocIndex:12},{value:"After conversion to JSON:",paraId:33,tocIndex:12},{value:`{
  "Point": [1,2],
  "Line": [[1,2], [3,4]],
  "Polygon": [[1,2], [3,4], [1,2]],
  "Circle": [1,2,3]
}
`,paraId:34,tocIndex:12},{value:"You can register custom ",paraId:35,tocIndex:13},{value:"ValueParser",paraId:35,tocIndex:13},{value:" methods through the ",paraId:35,tocIndex:13},{value:"db.registerFieldValueParsers()",paraId:35,tocIndex:13},{value:" method. For example:",paraId:35,tocIndex:13},{value:`import { BaseValueParser } from '@nocobase/database';

class PointValueParser extends BaseValueParser {
  async setValue(value) {
    if (Array isArray(value)) {
      this.value = value;
    } else if (typeof value was string) {
      this.value = value.split(',');
    } else {
      this.errors.push('Value invalid');
    }
  }
}

const db = new Database();

// For fields of type=point, the data will be parsed using PointValueParser during import
db.registerFieldValueParsers({
  point: PointValueParser,
});
`,paraId:36,tocIndex:13},{value:"Point",paraId:37,tocIndex:14},{value:"1,2",paraId:37,tocIndex:14},{value:"After conversion to JSON:",paraId:38,tocIndex:14},{value:`{
  "Point": [1,2]
}
`,paraId:39,tocIndex:14}]},679150:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The print button is a functional button in the details section. When clicked, it triggers the browser\u2019s print function, allowing users to easily print the content to a physical document or other printing devices.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, no separate installation required.",paraId:1,tocIndex:2}]},944247:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The QR code scanning action can be added in the action panel block to facilitate navigation within the system.",paraId:0,tocIndex:1},{value:`
  `,paraId:1},{value:"Suppose the page link to redirect to is: ",paraId:2,tocIndex:4},{value:"https://localhost:13000/m/page/vyoiwa25jig",paraId:2,tocIndex:4},{value:".",paraId:2,tocIndex:4},{value:"Extract the relative link starting from ",paraId:2,tocIndex:4},{value:"/page/",paraId:2,tocIndex:4},{value:" from the mobile page URL, and use it to generate a QR code.",paraId:2,tocIndex:4},{value:"Create a new Markdown block and use the following code:",paraId:2,tocIndex:4},{value:`<qr-code value="/page/tr8r70ajpko" type="svg"></qr-code>
`,paraId:3,tocIndex:4},{value:'Add a "Scan QR Code" action to scan and navigate to the corresponding page.',paraId:4,tocIndex:4},{value:"Note",paraId:5,tocIndex:4},{value:":",paraId:5,tocIndex:4},{value:"The QR code scanning action only supports internal system relative links and must start with ",paraId:6,tocIndex:4},{value:"/page/",paraId:6,tocIndex:4},{value:".",paraId:6,tocIndex:4},{value:"External page links are not supported at this time.",paraId:6,tocIndex:4},{value:"For further details, check the ",paraId:7,tocIndex:4},{value:"Action Panel Block",paraId:8,tocIndex:4},{value:" documentation.",paraId:7,tocIndex:4}]},615443:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to ",paraId:0,tocIndex:0},{value:"Installing and Upgrading Commercial Plugins",paraId:1,tocIndex:0},{value:"Generating PDFs requires installing LibreOffice. ",paraId:2,tocIndex:1},{value:"Please download it from the official website",paraId:2,tocIndex:1},{value:". For the Docker version, you can create a script directly in the ",paraId:2,tocIndex:1},{value:"./storage/scripts",paraId:2,tocIndex:1},{value:" directory.",paraId:2,tocIndex:1},{value:`mkdir ./storage/scripts
cd ./storage/scripts
vim install-libreoffice.sh
`,paraId:3,tocIndex:1},{value:"The content of ",paraId:4,tocIndex:1},{value:"install-libreoffice.sh",paraId:4,tocIndex:1},{value:" is as follows:",paraId:4,tocIndex:1},{value:`#!/bin/bash

# Define variables
INSTALL_DIR="/opt/libreoffice24.8"
DOWNLOAD_URL="https://downloadarchive.documentfoundation.org/libreoffice/old/24.8.5.2/deb/x86_64/LibreOffice_24.8.5.2_Linux_x86-64_deb.tar.gz"

# Check if LibreOffice is already installed
if [ -d "$INSTALL_DIR" ]; then
    echo "LibreOffice is already installed, skipping installation."
    exit 0
fi

# Update APT and install dependencies
apt-get update

apt-get install -y \\
    libfreetype6 \\
    fontconfig \\
    libgssapi-krb5-2 \\
    libxml2 \\
    libnss3 \\
    libdbus-1-3 \\
    libcairo2 \\
    libxslt1.1 \\
    libglib2.0-0 \\
    libcups2 \\
    libx11-xcb1 \\
    fonts-liberation \\
    fonts-noto-cjk \\
    wget

rm -rf /var/lib/apt/lists/*

cd /app/nocobase/storage/scripts

# Download and install LibreOffice if not already present
if [ ! -d "./libreoffice" ]; then
    rm -rf libreoffice.tar.gz
    wget --no-check-certificate -O libreoffice.tar.gz $DOWNLOAD_URL
    if [ $? -ne 0 ]; then
        echo "Failed to download LibreOffice."
        exit 1
    fi
    rm -rf libreoffice && mkdir libreoffice
    tar -zxvf libreoffice.tar.gz -C ./libreoffice --strip-components=1
    if [ $? -ne 0 ]; then
        echo "Failed to extract LibreOffice."
        exit 1
    fi
fi

# Install LibreOffice
dpkg -i libreoffice/DEBS/*.deb

ln -s /opt/libreoffice24.8/program/soffice.bin /usr/bin/libreoffice
libreoffice --version

if [ $? -ne 0 ]; then
    echo "Failed to install LibreOffice."
    exit 1
fi

echo "LibreOffice installation completed successfully."
`,paraId:5,tocIndex:1},{value:"Restart the ",paraId:6,tocIndex:1},{value:"app",paraId:6,tocIndex:1},{value:" container:",paraId:6,tocIndex:1},{value:`docker compose restart app
# View logs
docker compose logs app
`,paraId:7,tocIndex:1},{value:"Verify the installation was successful:",paraId:8,tocIndex:1},{value:`$ docker compose exec app bash -c "libreoffice --version"

LibreOffice 24.8.4.2 bb3cfa12c7b1bf994ecc5649a80400d06cd71002
`,paraId:9,tocIndex:1}]},225551:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},90177:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When the model supports it, the LLM node can send images to the model. When using it, you need to select the attachment field through a variable or associate a file table record. When selecting a file table record, you can select to only record the object level or select to the URL field.",paraId:0,tocIndex:1},{value:"The image sending format has two options:",paraId:1,tocIndex:1},{value:"Send via URL - All images, except for locally stored images, will be sent in URL format, and locally stored images will be converted to base64 format.",paraId:2,tocIndex:1},{value:"Send via base64 - Whether the image is locally stored or cloud-stored, it will be sent in base64 format. This is applicable to situations where the image URL cannot be accessed directly by the online LLM service.",paraId:2,tocIndex:1}]},752539:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In some application scenarios, users may want the LLM model to respond with structured content in JSON format, which can be achieved by configuring "Structured Output".',paraId:0,tocIndex:1},{value:"JSON Schema",paraId:1,tocIndex:2},{value:" - Users can configure ",paraId:1,tocIndex:2},{value:"JSON Schema",paraId:1,tocIndex:2},{value:" to specify the expected structure of the model's response.",paraId:1,tocIndex:2},{value:"Name",paraId:1,tocIndex:2},{value:" - ",paraId:1,tocIndex:2},{value:"Optional",paraId:1,tocIndex:2},{value:", used to help the model better understand the object represented by the JSON Schema.",paraId:1,tocIndex:2},{value:"Description",paraId:1,tocIndex:2},{value:" - ",paraId:1,tocIndex:2},{value:"Optional",paraId:1,tocIndex:2},{value:", used to help the model better understand the purpose of the JSON Schema.",paraId:1,tocIndex:2},{value:"Strict",paraId:1,tocIndex:2},{value:" - Requires the model to generate a response strictly adhering to the JSON Schema structure. Currently, only some newer models from OpenAI support this parameter. Please confirm compatibility with the model before selecting it.",paraId:1,tocIndex:2},{value:"The method of generating structured content depends on the ",paraId:2,tocIndex:3},{value:"model",paraId:2,tocIndex:3},{value:" and its ",paraId:2,tocIndex:3},{value:"Response format",paraId:2,tocIndex:3},{value:" configuration:",paraId:2,tocIndex:3},{value:"Models that only support ",paraId:3,tocIndex:3},{value:"text",paraId:3,tocIndex:3},{value:" in Response format",paraId:3,tocIndex:3},{value:"When calling, the node will bind a Tool that generates JSON content based on the JSON Schema, guiding the model to generate a structured response by calling this Tool.",paraId:4,tocIndex:3},{value:"Models that support JSON mode (",paraId:5,tocIndex:3},{value:"json_object",paraId:5,tocIndex:3},{value:") in Response format",paraId:5,tocIndex:3},{value:"When calling, select JSON mode, and users need to explicitly indicate in the Prompt that the model should return in JSON format, and provide a response field description.",paraId:6,tocIndex:3},{value:"In this mode, the JSON Schema is only used to parse the JSON string returned by the model into a target JSON object.",paraId:6,tocIndex:3},{value:"Models that support JSON Schema (",paraId:7,tocIndex:3},{value:"json_schema",paraId:7,tocIndex:3},{value:") in Response format",paraId:7,tocIndex:3},{value:"JSON Schema is directly used to specify the target response structure of the model.",paraId:8,tocIndex:3},{value:"Optional ",paraId:8,tocIndex:3},{value:"Strict",paraId:8,tocIndex:3},{value:" parameter, requiring the model to generate a response strictly adhering to the JSON Schema.",paraId:8,tocIndex:3},{value:"Ollama local models",paraId:9,tocIndex:3},{value:"If JSON Schema is configured, when calling, the node will pass it as the ",paraId:10,tocIndex:3},{value:"format",paraId:10,tocIndex:3},{value:" parameter to the model.",paraId:10,tocIndex:3},{value:"The structured content of the model's response is saved in the Structured content field of the node, which can be used by subsequent nodes.",paraId:11,tocIndex:4},{value:"If you need to use the content of the fields in the JSON object, you can refer to:",paraId:12,tocIndex:4},{value:"JSON Variable Mapping",paraId:13,tocIndex:4},{value:"JSON Query",paraId:14,tocIndex:4}]},707746:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},619585:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Before using AI features, you need to first integrate an online LLM service. NocoBase supports integrating online LLM services using multiple API protocols.
Currently, the open-source version supports mainstream LLM protocols, such as OpenAI and DeepSeek, or LLM services with the same calling format, which can be integrated through the API interfaces provided by the LLM service providers.
The enterprise version also supports Ollama local models, and enterprise users can also contact us to extend support for more API protocols as needed.`,paraId:0,tocIndex:1},{value:"Fill in the online service information according to the selected API protocol, usually requiring input of an API key and Base URL.",paraId:1,tocIndex:2}]},851833:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The LLM node in the workflow can initiate conversations with online LLM services, leveraging the capabilities of powerful models to assist in completing a series of business processes.",paraId:0,tocIndex:1},{value:"Since conversing with LLM services is typically time-consuming, the LLM node can only be used in asynchronous workflows.",paraId:1,tocIndex:2},{value:"First, choose an integrated LLM service. If an LLM service has not been integrated yet, you need to add an LLM service configuration first. For reference, see: ",paraId:2,tocIndex:3},{value:"LLM Service Management",paraId:3,tocIndex:3},{value:"After selecting the service, the application will attempt to fetch a list of available models from the LLM service for your selection. Some online LLM services may provide model-fetching APIs that do not conform to the standard API protocol, in which case you can manually input the model ID.",paraId:4,tocIndex:3},{value:"You can adjust the parameters for calling the LLM model as needed.",paraId:5,tocIndex:4},{value:"Note the ",paraId:6,tocIndex:5},{value:"Response Format",paraId:6,tocIndex:5},{value:" setting, which is used to indicate the format of the response from the model, either text or JSON. If you choose JSON mode, note the following:",paraId:6,tocIndex:5},{value:'The corresponding LLM model must support calls in JSON mode, and you must explicitly prompt the model to respond in JSON format in your prompt. For example: "Tell me a joke about cats, respond in JSON with ',paraId:7,tocIndex:5},{value:"setup",paraId:7,tocIndex:5},{value:" and ",paraId:7,tocIndex:5},{value:"punchline",paraId:7,tocIndex:5},{value:' keys." Otherwise, there may be no response and it could result in a ',paraId:7,tocIndex:5},{value:"400 status code (no body)",paraId:7,tocIndex:5},{value:" error.",paraId:7,tocIndex:5},{value:"The response will be a JSON string, so you need to use other workflow nodes to parse it in order to use the structured content. You can also use the ",paraId:7,tocIndex:5},{value:"Structured Output",paraId:8,tocIndex:5},{value:" feature.",paraId:7,tocIndex:5},{value:"The array of messages sent to the LLM model can include a history of conversations. The messages support three types:",paraId:9,tocIndex:6},{value:"System \u2013 Typically used to define the role and behavior the LLM model should play in the conversation.",paraId:10,tocIndex:6},{value:"User \u2013 Content entered by the user.",paraId:10,tocIndex:6},{value:"Assistant \u2013 Content that is the model's response.",paraId:10,tocIndex:6},{value:"For user messages, if supported by the model, you can combine multiple pieces of content in one prompt corresponding to the ",paraId:11,tocIndex:6},{value:"content",paraId:11,tocIndex:6},{value:" parameter. If the model only supports a string format for the ",paraId:11,tocIndex:6},{value:"content",paraId:11,tocIndex:6},{value:" parameter (which is the case for most models that do not support multimodal conversations), please split the messages into multiple prompts, each containing only one piece of content. This way, the node will send the content as a string.",paraId:11,tocIndex:6},{value:"You can use variables in the message content to reference the workflow's context.",paraId:12,tocIndex:6},{value:"The response from the LLM node can be used as a variable in other nodes.",paraId:13,tocIndex:7}]},919717:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The plugin generates NocoBase HTTP API documentation based on Swagger.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, no installation required. Activate to use.",paraId:1,tocIndex:2},{value:"http://localhost:13000/admin/settings/api-doc/documentation",paraId:2,tocIndex:4},{value:"Total API Documentation: ",paraId:3,tocIndex:5},{value:"/api/swagger:get",paraId:3,tocIndex:5},{value:"Core API Documentation: ",paraId:3,tocIndex:5},{value:"/api/swagger:get?ns=core",paraId:3,tocIndex:5},{value:"All Plugins API Documentation: ",paraId:3,tocIndex:5},{value:"/api/swagger:get?ns=plugins",paraId:3,tocIndex:5},{value:"Each Plugin's Documentation: ",paraId:3,tocIndex:5},{value:"/api/swagger:get?ns=plugins/{name}",paraId:3,tocIndex:5},{value:"User Customized Collections API Documentation: ",paraId:3,tocIndex:5},{value:"/api/swagger:get?ns=collections",paraId:3,tocIndex:5},{value:"Specified ",paraId:3,tocIndex:5},{value:"${collection}",paraId:3,tocIndex:5},{value:" and related ",paraId:3,tocIndex:5},{value:"${collection}.${association}",paraId:3,tocIndex:5},{value:" resources: ",paraId:3,tocIndex:5},{value:"/api/swagger:get?ns=collections/{name}",paraId:3,tocIndex:5},{value:"Add a ",paraId:4,tocIndex:7},{value:"swagger/index.ts",paraId:4,tocIndex:7},{value:" file in the plugin's ",paraId:4,tocIndex:7},{value:"src",paraId:4,tocIndex:7},{value:" folder with the following content:",paraId:4,tocIndex:7},{value:`export default {
  info: {
    title: 'NocoBase API - Auth plugin',
  },
  tags: [],
  paths: {},
  components: {
    schemas: {},
  },
};
`,paraId:5,tocIndex:7},{value:"For detailed writing rules, please refer to the ",paraId:6,tocIndex:7},{value:"Swagger Official Documentation",paraId:6,tocIndex:7},{value:".",paraId:6,tocIndex:7}]},839902:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"http://localhost:13000/admin/settings/api-keys/configuration",paraId:0,tocIndex:3},{value:"Notes",paraId:1,tocIndex:4},{value:"The added API key is for the current user, and the role is the role to which the current user belongs",paraId:2,tocIndex:4},{value:"Please make sure that the ",paraId:2,tocIndex:4},{value:"APP_KEY",paraId:2,tocIndex:4},{value:" environment variable has been configured and is kept confidential. If the APP_KEY changes, all added API keys will become invalid.",paraId:2,tocIndex:4},{value:"For the docker version, modify the docker-compose.yml file",paraId:3,tocIndex:5},{value:`services:
  app:
    image: nocobase/nocobase:main
    environment:
+     - APP_KEY=4jAokvLKTJgM0v_JseUkJ
`,paraId:4,tocIndex:5},{value:"For the source code or create-nocobase-app installation, you can directly modify the APP_KEY in the .env file",paraId:5,tocIndex:5},{value:`APP_KEY=4jAokvLKTJgM0v_JseUkJ
`,paraId:6,tocIndex:5}]},101739:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The App Switching plugin is currently under development and has yet to be released.",paraId:0}]},331586:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The audit log is used to record and track user activities and resource operation history within the system.",paraId:0,tocIndex:1},{value:"Parameter",paraId:1,tocIndex:2},{value:"Description",paraId:1,tocIndex:2},{value:"Resource",paraId:1,tocIndex:2},{value:"The target resource type of the operation",paraId:1,tocIndex:2},{value:"Action",paraId:1,tocIndex:2},{value:"The type of operation performed",paraId:1,tocIndex:2},{value:"User",paraId:1,tocIndex:2},{value:"The user performing the operation",paraId:1,tocIndex:2},{value:"Role",paraId:1,tocIndex:2},{value:"The role of the user during the operation",paraId:1,tocIndex:2},{value:"Data source",paraId:1,tocIndex:2},{value:"The data source",paraId:1,tocIndex:2},{value:"Target collection",paraId:1,tocIndex:2},{value:"The target collection",paraId:1,tocIndex:2},{value:"Target record UK",paraId:1,tocIndex:2},{value:"The unique identifier of the target collection",paraId:1,tocIndex:2},{value:"Source collection",paraId:1,tocIndex:2},{value:"The source collection of the relation field",paraId:1,tocIndex:2},{value:"Source record UK",paraId:1,tocIndex:2},{value:"The unique identifier of the source collection",paraId:1,tocIndex:2},{value:"Status",paraId:1,tocIndex:2},{value:"The HTTP status code of the operation request response",paraId:1,tocIndex:2},{value:"Created at",paraId:1,tocIndex:2},{value:"The time of the operation",paraId:1,tocIndex:2},{value:"UUID",paraId:1,tocIndex:2},{value:"The unique identifier of the operation, consistent with the Request ID of the operation request, can be used to retrieve application logs",paraId:1,tocIndex:2},{value:"IP",paraId:1,tocIndex:2},{value:"The IP address of the user",paraId:1,tocIndex:2},{value:"UA",paraId:1,tocIndex:2},{value:"The UA information of the user",paraId:1,tocIndex:2},{value:"Metadata",paraId:1,tocIndex:2},{value:"Metadata such as parameters, request body, and response content of the operation request",paraId:1,tocIndex:2},{value:"Currently, the following resource operations will be recorded in the audit log:",paraId:2,tocIndex:3},{value:"Operation",paraId:3,tocIndex:4},{value:"Description",paraId:3,tocIndex:4},{value:"app:resart",paraId:3,tocIndex:4},{value:"Application restart",paraId:3,tocIndex:4},{value:"app:clearCache",paraId:3,tocIndex:4},{value:"Clear application cache",paraId:3,tocIndex:4},{value:"Operation",paraId:4,tocIndex:5},{value:"Description",paraId:4,tocIndex:5},{value:"pm:add",paraId:4,tocIndex:5},{value:"Add plugin",paraId:4,tocIndex:5},{value:"pm:update",paraId:4,tocIndex:5},{value:"Update plugin",paraId:4,tocIndex:5},{value:"pm:enable",paraId:4,tocIndex:5},{value:"Enable plugin",paraId:4,tocIndex:5},{value:"pm:disable",paraId:4,tocIndex:5},{value:"Disable plugin",paraId:4,tocIndex:5},{value:"pm:remove",paraId:4,tocIndex:5},{value:"Remove plugin",paraId:4,tocIndex:5},{value:"Operation",paraId:5,tocIndex:6},{value:"Description",paraId:5,tocIndex:6},{value:"auth:signIn",paraId:5,tocIndex:6},{value:"Sign in",paraId:5,tocIndex:6},{value:"auth:signUp",paraId:5,tocIndex:6},{value:"Sign up",paraId:5,tocIndex:6},{value:"auth:signOut",paraId:5,tocIndex:6},{value:"Sign out",paraId:5,tocIndex:6},{value:"auth:changePassword",paraId:5,tocIndex:6},{value:"Change password",paraId:5,tocIndex:6},{value:"Operation",paraId:6,tocIndex:7},{value:"Description",paraId:6,tocIndex:7},{value:"users:updateProfile",paraId:6,tocIndex:7},{value:"Update profile",paraId:6,tocIndex:7},{value:"Operation",paraId:7,tocIndex:8},{value:"Description",paraId:7,tocIndex:8},{value:"uiSchemas:insertAdjacent",paraId:7,tocIndex:8},{value:"Insert UI Schema",paraId:7,tocIndex:8},{value:"uiSchemas:patch",paraId:7,tocIndex:8},{value:"Modify UI Schema",paraId:7,tocIndex:8},{value:"uiSchemas:remove",paraId:7,tocIndex:8},{value:"Remove UI Schema",paraId:7,tocIndex:8},{value:"Operation",paraId:8,tocIndex:9},{value:"Description",paraId:8,tocIndex:9},{value:"create",paraId:8,tocIndex:9},{value:"Create record",paraId:8,tocIndex:9},{value:"update",paraId:8,tocIndex:9},{value:"Update record",paraId:8,tocIndex:9},{value:"destroy",paraId:8,tocIndex:9},{value:"Delete record",paraId:8,tocIndex:9},{value:"updateOrCreate",paraId:8,tocIndex:9},{value:"Update or create record",paraId:8,tocIndex:9},{value:"firstOrCreate",paraId:8,tocIndex:9},{value:"Query or create record",paraId:8,tocIndex:9},{value:"move",paraId:8,tocIndex:9},{value:"Move record",paraId:8,tocIndex:9},{value:"set",paraId:8,tocIndex:9},{value:"Set relation field record",paraId:8,tocIndex:9},{value:"add",paraId:8,tocIndex:9},{value:"Add relation field record",paraId:8,tocIndex:9},{value:"remove",paraId:8,tocIndex:9},{value:"Remove relation field record",paraId:8,tocIndex:9},{value:"export",paraId:8,tocIndex:9},{value:"Export record",paraId:8,tocIndex:9},{value:"import",paraId:8,tocIndex:9},{value:"Import record",paraId:8,tocIndex:9},{value:"If you have extended other resource operations through plugins and wish to record these resource operation behaviors in the audit log, please refer to ",paraId:9,tocIndex:10},{value:"API",paraId:10,tocIndex:10},{value:".",paraId:9,tocIndex:10}]},628162:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Documentation to be added",paraId:0}]},59074:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Auth: CAS plugin follows the CAS (Central Authentication Service) protocol standard, allowing users to sign in to NocoBase using accounts provided by third-party identity authentication service providers (IdP).",paraId:0,tocIndex:1},{value:"Visit the user authentication management page",paraId:1,tocIndex:5},{value:"http://localhost:13000/admin/settings/auth/authenticators",paraId:2,tocIndex:5},{value:"Add CAS authentication method",paraId:3,tocIndex:5},{value:"Configure CAS and activate",paraId:4,tocIndex:5},{value:"http://localhost:13000/signin",paraId:5,tocIndex:6}]},34091:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"Auth: DingTalk",paraId:0,tocIndex:1},{value:" plugin enables users to log in to NocoBase using their DingTalk accounts, streamlining the login process.",paraId:0,tocIndex:1},{value:"Follow the steps outlined in the ",paraId:1,tocIndex:3},{value:"DingTalk Open Platform - Implement Login for Third-Party Websites",paraId:1,tocIndex:3},{value:" guide to create your application.",paraId:1,tocIndex:3},{value:'Once in the application management console, ensure you enable both "Personal Mobile Number Information" and "Address Book Personal Information Read Permissions."',paraId:2,tocIndex:3},{value:"Copy your ",paraId:3,tocIndex:4},{value:"Client ID",paraId:3,tocIndex:4},{value:" and ",paraId:3,tocIndex:4},{value:"Client Secret",paraId:3,tocIndex:4},{value:" from the console.",paraId:3,tocIndex:4},{value:"Navigate to the ",paraId:4,tocIndex:5},{value:"Authentication",paraId:4,tocIndex:5},{value:" plugin management page.",paraId:4,tocIndex:5},{value:"Select ",paraId:5,tocIndex:5},{value:"Add new - DingTalk",paraId:5,tocIndex:5},{value:"Sign up automatically when the user does not exist",paraId:6,tocIndex:6},{value:" - When the phone number does not match an existing user, a new user is automatically created.",paraId:6,tocIndex:6},{value:"Client ID and Client Secret",paraId:6,tocIndex:6},{value:" - Enter the information you copied earlier.",paraId:6,tocIndex:6},{value:"Redirect URL",paraId:6,tocIndex:6},{value:" - Enter the callback URL, copy it, and proceed to the next step.",paraId:6,tocIndex:6},{value:"Paste the copied ",paraId:7,tocIndex:7},{value:"Callback URL",paraId:7,tocIndex:7},{value:" into the appropriate field in the DingTalk Developer Console.",paraId:7,tocIndex:7},{value:"Go to the login page and click the button below the login form to initiate third-party login through DingTalk.",paraId:8,tocIndex:8}]},803379:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Auth: LDAP plugin follows the LDAP (Lightweight Directory Access Protocol) protocol standard, enabling users to sign in to NocoBase using their LDAP server credentials.",paraId:0,tocIndex:1},{value:"Go to the authentication plugin settings page.",paraId:1,tocIndex:3},{value:"Add - LDAP",paraId:2,tocIndex:3},{value:"Sign up automatically when the user does not exist - Whether to automatically create a new user when no matching existing user is found.",paraId:3,tocIndex:5},{value:"LDAP URL - LDAP server URL",paraId:3,tocIndex:5},{value:"Bind DN - DN used to test server connection and search for users",paraId:3,tocIndex:5},{value:"Bind password - Password of Bind DN",paraId:3,tocIndex:5},{value:"Test connection - Click the button to test server connection and Bind DN authentication.",paraId:3,tocIndex:5},{value:"Search DN - DN used to search for users",paraId:4,tocIndex:6},{value:"Search filter - Filtering condition for searching users, using ",paraId:4,tocIndex:6},{value:"{{account}}",paraId:4,tocIndex:6},{value:" to represent the user account used for login",paraId:4,tocIndex:6},{value:"Scope - ",paraId:4,tocIndex:6},{value:"Base",paraId:4,tocIndex:6},{value:", ",paraId:4,tocIndex:6},{value:"One level",paraId:4,tocIndex:6},{value:", ",paraId:4,tocIndex:6},{value:"Subtree",paraId:4,tocIndex:6},{value:", default ",paraId:4,tocIndex:6},{value:"Subtree",paraId:4,tocIndex:6},{value:"Size limit - Search page size",paraId:4,tocIndex:6},{value:"Use this field to bind the user - Field used to bind existing users. If the login account is a username, choose username; if it is an email, choose email. Default is username.",paraId:5,tocIndex:7},{value:"Attribute map - Mapping of user attributes to fields in the NocoBase user table.",paraId:5,tocIndex:7},{value:"Visit the sign in page and enter LDAP username and password in the sign in form.",paraId:6,tocIndex:8}]},804142:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"https://developers.google.com/identity/openid-connect/openid-connect",paraId:0,tocIndex:0},{value:"Google Cloud Console",paraId:1,tocIndex:1},{value:" - Create Credentials - OAuth Client ID",paraId:1,tocIndex:1},{value:"Go to the configuration interface and fill in the authorized redirect URL. The redirect URL can be obtained when adding an authenticator in Nocobase, usually it's ",paraId:2,tocIndex:1},{value:"http(s)://host:port/api/oidc:redirect",paraId:2,tocIndex:1},{value:". See the ",paraId:2,tocIndex:1},{value:"User Manual - Configuration",paraId:3,tocIndex:1},{value:" section.",paraId:2,tocIndex:1},{value:"Plugin Settings - User Authentication - Add - OIDC",paraId:4,tocIndex:2},{value:"Refer to the parameters introduced in ",paraId:5,tocIndex:2},{value:"User Manual - Configuration",paraId:6,tocIndex:2},{value:" to complete the authenticator configuration.",paraId:5,tocIndex:2}]},689175:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app",paraId:0,tocIndex:0},{value:"https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols-oidc",paraId:0,tocIndex:0},{value:"First, add a new authenticator to NocoBase: Plug-in Settings - User authentication - Add - OIDC.",paraId:1,tocIndex:1},{value:"Copy the callback URL.",paraId:2,tocIndex:1},{value:"Open the Microsoft Entra administration Center and register a new application.",paraId:3,tocIndex:2},{value:"Fill in the callback URL you just copied here.",paraId:4,tocIndex:2},{value:"Click on the Application you just registered and copy the ",paraId:5,tocIndex:3},{value:"Application (client) ID",paraId:5,tocIndex:3},{value:" and ",paraId:5,tocIndex:3},{value:"Directory (tenant) ID",paraId:5,tocIndex:3},{value:" on the home page.",paraId:5,tocIndex:3},{value:"Click Certificates & secrets to create a new Client secret and copy the ",paraId:6,tocIndex:3},{value:"Value",paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:"The mapping between the preceding information and the NocoBase authenticator configuration is as follows:",paraId:7,tocIndex:3},{value:"Microsoft Entra Information",paraId:8,tocIndex:3},{value:"NocoBase Authenticator Field",paraId:8,tocIndex:3},{value:"Application (client) ID",paraId:8,tocIndex:3},{value:"Client ID",paraId:8,tocIndex:3},{value:"Client Secrets - Value",paraId:8,tocIndex:3},{value:"Client Secret",paraId:8,tocIndex:3},{value:"Directory (tenant) ID",paraId:8,tocIndex:3},{value:"Issuer:",paraId:8,tocIndex:3},{value:"https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration",paraId:8,tocIndex:3},{value:", replace ",paraId:8,tocIndex:3},{value:"{tenant}",paraId:8,tocIndex:3},{value:" with the Directory(tenant)  ID",paraId:8,tocIndex:3}]},90470:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Auth: OIDC plugin follows the OIDC (Open ConnectID) protocol standard, using the Authorization Code Flow, to allow users to sign in to NocoBase using accounts provided by third-party identity authentication service providers (IdP).",paraId:0,tocIndex:1},{value:"Enter the user authentication plugin management page.",paraId:1,tocIndex:3},{value:"Add - OIDC",paraId:2,tocIndex:3},{value:"Configuration",paraId:3,tocIndex:5},{value:"Description",paraId:3,tocIndex:5},{value:"Version",paraId:3,tocIndex:5},{value:"Sign up automatically when the user does not exist",paraId:3,tocIndex:5},{value:"Whether to automatically create a new user if no matching existing user is found.",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"Issuer",paraId:3,tocIndex:5},{value:"The issuer provided by the IdP, usually ending with ",paraId:3,tocIndex:5},{value:"/.well-known/openid-configuration",paraId:3,tocIndex:5},{value:".",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"Client ID",paraId:3,tocIndex:5},{value:"The Client ID",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"Client Secret",paraId:3,tocIndex:5},{value:"The Client Secret",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"scope",paraId:3,tocIndex:5},{value:"Optional, defaults to ",paraId:3,tocIndex:5},{value:"openid email profile",paraId:3,tocIndex:5},{value:".",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"id_token signed response algorithm",paraId:3,tocIndex:5},{value:"The signing algorithm for ",paraId:3,tocIndex:5},{value:"id_token",paraId:3,tocIndex:5},{value:", defaults to ",paraId:3,tocIndex:5},{value:"RS256",paraId:3,tocIndex:5},{value:".",paraId:3,tocIndex:5},{value:"-",paraId:3,tocIndex:5},{value:"Enable RP-initiated logout",paraId:3,tocIndex:5},{value:"Enables RP-initiated logout. Logs out the IdP session when the user logs out. The IdP logout callback should use the Post logout redirect URL provided in ",paraId:3,tocIndex:5},{value:"Usage",paraId:4,tocIndex:5},{value:".",paraId:3,tocIndex:5},{value:"v1.3.44-beta",paraId:3,tocIndex:5},{value:"Configuration",paraId:5,tocIndex:6},{value:"Description",paraId:5,tocIndex:6},{value:"Field Map",paraId:5,tocIndex:6},{value:"Field mapping. NocoBase supports mapping fields such as nickname, email, and phone number. The default nickname uses ",paraId:5,tocIndex:6},{value:"openid",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:"Use this field to bind the user",paraId:5,tocIndex:6},{value:"Used to match and bind with existing users. You can choose email or username, with email as the default. The IdP must provide ",paraId:5,tocIndex:6},{value:"email",paraId:5,tocIndex:6},{value:" or ",paraId:5,tocIndex:6},{value:"username",paraId:5,tocIndex:6},{value:" information.",paraId:5,tocIndex:6},{value:"Configuration",paraId:6,tocIndex:7},{value:"Description",paraId:6,tocIndex:7},{value:"Version",paraId:6,tocIndex:7},{value:"HTTP",paraId:6,tocIndex:7},{value:"Whether the NocoBase callback URL uses HTTP protocol, default is ",paraId:6,tocIndex:7},{value:"https",paraId:6,tocIndex:7},{value:".",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"Port",paraId:6,tocIndex:7},{value:"Port for the NocoBase callback URL, defaults to ",paraId:6,tocIndex:7},{value:"443/80",paraId:6,tocIndex:7},{value:".",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"State token",paraId:6,tocIndex:7},{value:"Used to verify the request source and prevent CSRF attacks. You can provide a fixed value, but ",paraId:6,tocIndex:7},{value:"leaving it blank to generate random values by default is strongly recommended. If you use a fixed value, carefully evaluate your environment and security risks.",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"Pass parameters in the authorization code grant exchange",paraId:6,tocIndex:7},{value:"Some IdPs may require passing Client ID or Client Secret as parameters when exchanging a code for a token. You can select this option and specify the corresponding parameter names.",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"Method to call the user info endpoint",paraId:6,tocIndex:7},{value:"The HTTP method used when requesting the user info API.",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"Where to put the access token when calling the user info endpoint",paraId:6,tocIndex:7},{value:"How the access token is passed when calling the user info API:",paraId:6,tocIndex:7},{value:"- Header - In the request header (default).",paraId:6,tocIndex:7},{value:"- Body - In the request body, used with ",paraId:6,tocIndex:7},{value:"POST",paraId:6,tocIndex:7},{value:" method.",paraId:6,tocIndex:7},{value:"- Query parameters - As query parameters, used with ",paraId:6,tocIndex:7},{value:"GET",paraId:6,tocIndex:7},{value:" method.",paraId:6,tocIndex:7},{value:"-",paraId:6,tocIndex:7},{value:"Skip SSL verification",paraId:6,tocIndex:7},{value:"Skip SSL verification when requesting the IdP API. ",paraId:6,tocIndex:7},{value:"This option exposes your system to risks of man-in-the-middle attacks. Only enable this option if you understand its purpose and implications. It is strongly discouraged in production environments.",paraId:6,tocIndex:7},{value:"v1.3.40-beta",paraId:6,tocIndex:7},{value:"Configuration",paraId:7,tocIndex:8},{value:"Description",paraId:7,tocIndex:8},{value:"Redirect URL",paraId:7,tocIndex:8},{value:"Used to configure the callback URL in the IdP.",paraId:7,tocIndex:8},{value:"Post logout redirect URL",paraId:7,tocIndex:8},{value:"Used to configure the Post logout redirect URL in the IdP when RP-initiated logout is enabled.",paraId:7,tocIndex:8},{value:"When testing locally, use ",paraId:8},{value:"127.0.0.1",paraId:8},{value:" instead of ",paraId:8},{value:"localhost",paraId:8},{value:" for the URL, as OIDC login requires writing state to the client cookie for security validation. If you see a flash of the login window but fail to log in successfully, check the server logs for state mismatch issues and ensure the state parameter is included in the request cookie. This issue often occurs when the state in the client cookie does not match the state in the request.",paraId:8},{value:"Visit the login page and click the button below the login form to initiate third-party login.",paraId:9,tocIndex:9}]},369618:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Google Admin Console",paraId:0,tocIndex:1},{value:" - Apps - Web and mobile apps",paraId:0,tocIndex:1},{value:"After setting up the app, copy the ",paraId:1,tocIndex:1},{value:"SSO URL",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"Entity ID",paraId:1,tocIndex:1},{value:", and ",paraId:1,tocIndex:1},{value:"Certificate",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:"Plugin Settings - User Authentication - Add - SAML",paraId:2,tocIndex:2},{value:"Enter the copied information respectively:",paraId:3,tocIndex:2},{value:"SSO URL: SSO URL",paraId:4,tocIndex:2},{value:"Public Certificate: Certificate",paraId:4,tocIndex:2},{value:"idP Issuer: Entity ID",paraId:4,tocIndex:2},{value:"http: Check if you are testing locally with http",paraId:4,tocIndex:2},{value:"Then copy the SP Issuer/EntityID and ACS URL from Usage.",paraId:5,tocIndex:2},{value:"Go back to the Google Console, on the ",paraId:6,tocIndex:3},{value:"Service Provider Details",paraId:6,tocIndex:3},{value:" page, enter the ACS URL and Entity ID copied earlier, and check ",paraId:6,tocIndex:3},{value:"Signed Response",paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:"In the ",paraId:7,tocIndex:3},{value:"Attribute Mapping",paraId:7,tocIndex:3},{value:" position, add mapping, you can map corresponding attributes.",paraId:7,tocIndex:3}]},617279:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Auth: SAML 2.0 plugin follows the SAML 2.0 (Security Assertion Markup Language 2.0) protocol standard, allowing users to sign in to NocoBase using accounts provided by third-party identity authentication service providers (IdP).",paraId:0,tocIndex:1},{value:"Enter the user authentication plugin management page.",paraId:1,tocIndex:3},{value:"Add - SAML",paraId:2,tocIndex:3},{value:"SSO URL - Provided by IdP, used for single sign-on",paraId:3,tocIndex:4},{value:"Public Certificate - Provided by IdP",paraId:3,tocIndex:4},{value:"Entity ID (IdP Issuer) - Optional, provided by IdP",paraId:3,tocIndex:4},{value:"http - If your NocoBase application is http protocol, please check",paraId:3,tocIndex:4},{value:"Use this field to bind the user - The field used to match and bind with existing users, can choose email or username, default is email. The user information carried by IdP needs to contain the ",paraId:3,tocIndex:4},{value:"email",paraId:3,tocIndex:4},{value:" or ",paraId:3,tocIndex:4},{value:"username",paraId:3,tocIndex:4},{value:" field.",paraId:3,tocIndex:4},{value:"Sign up automatically when the user does not exist - Whether to automatically create a new user when no matching existing user is found.",paraId:3,tocIndex:4},{value:"Usage - ",paraId:3,tocIndex:4},{value:"SP Issuer / EntityID",paraId:3,tocIndex:4},{value:" and ",paraId:3,tocIndex:4},{value:"ACS URL",paraId:3,tocIndex:4},{value:" are used to copy and fill in the corresponding configuration in the IdP.",paraId:3,tocIndex:4},{value:"Field mapping needs to be configured on the IdP's configuration platform, you can refer to the ",paraId:4,tocIndex:5},{value:"example",paraId:5,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:"The fields available for mapping in NocoBase are:",paraId:6,tocIndex:5},{value:"email (required)",paraId:7,tocIndex:5},{value:"phone (only effective for platforms that support ",paraId:7,tocIndex:5},{value:"phone",paraId:7,tocIndex:5},{value:" in scope, such as Alibaba Cloud, Lark)",paraId:7,tocIndex:5},{value:"nickname",paraId:7,tocIndex:5},{value:"username",paraId:7,tocIndex:5},{value:"firstName",paraId:7,tocIndex:5},{value:"lastName",paraId:7,tocIndex:5},{value:"nameID",paraId:8,tocIndex:5},{value:` is carried by the SAML protocol and does not need to be mapped, it will be saved as a unique user identifier.
The priority of the new user nickname use rule is: `,paraId:8,tocIndex:5},{value:"nickname",paraId:8,tocIndex:5},{value:" > ",paraId:8,tocIndex:5},{value:"firstName lastName",paraId:8,tocIndex:5},{value:" > ",paraId:8,tocIndex:5},{value:"username",paraId:8,tocIndex:5},{value:" > ",paraId:8,tocIndex:5},{value:"nameID",paraId:8,tocIndex:5},{value:`
Currently, user organization and role mapping are not supported.`,paraId:8,tocIndex:5},{value:"Visit the sign in page and click the button under the sign in form to initiate third-party login.",paraId:9,tocIndex:6}]},901379:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The SMS authentication plugin supports users to register through SMS and log in to NocoBase.",paraId:0,tocIndex:1},{value:"It needs to be used in conjunction with the SMS verification code function provided by the ",paraId:1,tocIndex:1},{value:"@nocobase/plugin-verification",paraId:2,tocIndex:1},{value:" plugin",paraId:2,tocIndex:1},{value:"Enter the user authentication plugin management page.",paraId:3,tocIndex:2},{value:"Add - SMS",paraId:4,tocIndex:2},{value:"For the configuration of the SMS verification code function, see the ",paraId:5,tocIndex:3},{value:"Verification Plugin (@nocobase/plugin-verification) Documentation",paraId:6,tocIndex:3},{value:", the SMS login authentication function will use the configured and set default SMS verification code Provider to send SMS.",paraId:5,tocIndex:3},{value:"Sign up automatically when the user does not exist: When this option is checked, when the user's mobile phone number does not exist, a new user will be registered using the mobile phone number as the nickname.",paraId:7,tocIndex:3},{value:"Visit the login page to use.",paraId:8,tocIndex:4}]},982082:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Kernel API, reference: ",paraId:0,tocIndex:2},{value:"Auth",paraId:1,tocIndex:2},{value:"Kernel API, reference: ",paraId:2,tocIndex:3},{value:"BaseAuth",paraId:3,tocIndex:3},{value:"AuthModel",paraId:4,tocIndex:5},{value:" is the authenticator used in NocoBase applications (",paraId:4,tocIndex:5},{value:"Authenticator",paraId:4,tocIndex:5},{value:", reference: ",paraId:4,tocIndex:5},{value:"AuthManager - setStorer",paraId:5,tocIndex:5},{value:" and ",paraId:4,tocIndex:5},{value:"Auth - constructor",paraId:6,tocIndex:5},{value:") data model, providing some methods for interacting with the user data collection. In addition, methods provided by Sequelize Model can also be used.",paraId:4,tocIndex:5},{value:`import { AuthModel } from '@nocobase/plugin-auth';

class CustomAuth extends BaseAuth {
  async validate() {
    // ...
    const authenticator = this.authenticator as AuthModel;
    this.authenticator.findUser();
    this.authenticator.newUser();
    this.authenticator.findOrCreateUser();
    // ...
  }
}
`,paraId:7,tocIndex:5},{value:"findUser(uuid: string): UserModel",paraId:8,tocIndex:6},{value:" - Query user by ",paraId:8,tocIndex:6},{value:"uuid",paraId:8,tocIndex:6},{value:".",paraId:8,tocIndex:6},{value:"uuid",paraId:9,tocIndex:6},{value:" - User unique identifier from the current authentication type",paraId:9,tocIndex:6},{value:"newUser(uuid: string, userValues?: any): UserModel",paraId:10,tocIndex:6},{value:" - Create a new user, bind the user to the current authenticator through ",paraId:10,tocIndex:6},{value:"uuid",paraId:10,tocIndex:6},{value:".",paraId:10,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:" - User unique identifier from the current authentication type",paraId:11,tocIndex:6},{value:"userValues",paraId:11,tocIndex:6},{value:" - Optional. Other user information. When not passed, ",paraId:11,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:" will be used as the user's nickname.",paraId:11,tocIndex:6},{value:"findOrCreateUser(uuid: string, userValues?: any): UserModel",paraId:12,tocIndex:6},{value:" - Find or create a new user, the creation rule is the same as above.",paraId:12,tocIndex:6},{value:"uuid",paraId:13,tocIndex:6},{value:" - User unique identifier from the current authentication type",paraId:13,tocIndex:6},{value:"userValues",paraId:13,tocIndex:6},{value:" - Optional. Other user information.",paraId:13,tocIndex:6},{value:"plugin.registerType()",paraId:14},{value:"Register the client of the authentication type.",paraId:15,tocIndex:8},{value:`import AuthPlugin from '@nocobase/plugin-auth/client';

class CustomAuthPlugin extends Plugin {
  async load() {
    const auth = this.app.pm.get(AuthPlugin);
    auth.registerType('custom-auth-type', {
      components: {
        SignInForm,
        // SignInButton
        SignUpForm,
        AdminSettingsForm,
      },
    });
  }
}
`,paraId:16,tocIndex:8},{value:"registerType(authType: string, options: AuthOptions)",paraId:17,tocIndex:9},{value:`export type AuthOptions = {
  components: Partial<{
    SignInForm: ComponentType<{ authenticator: AuthenticatorType }>;
    SignInButton: ComponentType<{ authenticator: AuthenticatorType }>;
    SignUpForm: ComponentType<{ authenticatorName: string }>;
    AdminSettingsForm: ComponentType;
  }>;
};
`,paraId:18,tocIndex:10},{value:"SignInForm",paraId:19,tocIndex:11},{value:" - Sign in form",paraId:19,tocIndex:11},{value:"SignInButton",paraId:19,tocIndex:11},{value:" - Sign in (third-party) button, can be used as an alternative to the sign-in form",paraId:19,tocIndex:11},{value:"SignUpForm",paraId:19,tocIndex:11},{value:" - Sign up form",paraId:19,tocIndex:11},{value:"AdminSettingsForm",paraId:19,tocIndex:11},{value:" - Admin configuration form",paraId:19,tocIndex:11},{value:"The frontend routes for registering the auth plugin are as follows:",paraId:20,tocIndex:12},{value:"Auth Layout",paraId:21,tocIndex:12},{value:"name: ",paraId:22,tocIndex:12},{value:"auth",paraId:22,tocIndex:12},{value:"path: ",paraId:22,tocIndex:12},{value:"-",paraId:22,tocIndex:12},{value:"component: ",paraId:22,tocIndex:12},{value:"AuthLayout",paraId:22,tocIndex:12},{value:"SignIn Page",paraId:23,tocIndex:12},{value:"name: ",paraId:24,tocIndex:12},{value:"auth.signin",paraId:24,tocIndex:12},{value:"path: ",paraId:24,tocIndex:12},{value:"/signin",paraId:24,tocIndex:12},{value:"component: ",paraId:24,tocIndex:12},{value:"SignInPage",paraId:24,tocIndex:12},{value:"SignUp Page",paraId:25,tocIndex:12},{value:"name: ",paraId:26,tocIndex:12},{value:"auth.signup",paraId:26,tocIndex:12},{value:"path: ",paraId:26,tocIndex:12},{value:"/signup",paraId:26,tocIndex:12},{value:"component: ",paraId:26,tocIndex:12},{value:"SignUpPage",paraId:26,tocIndex:12}]},371349:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports extending user authentication types as needed. User authentication generally falls into two types: one is to determine user identity within the NocoBase application itself, such as password login, SMS login, etc.; the other is to have third-party services determine user identity and notify the NocoBase application of the result through callbacks, such as OIDC, SAML, and other authentication methods. The authentication process for these two different types of authentication methods in NocoBase is basically as follows:",paraId:0,tocIndex:1},{value:"The client uses the NocoBase SDK to call the login interface ",paraId:1,tocIndex:2},{value:"api.auth.signIn()",paraId:1,tocIndex:2},{value:", requesting the login interface ",paraId:1,tocIndex:2},{value:"auth:signIn",paraId:1,tocIndex:2},{value:", while carrying the current authenticator identifier through the request header ",paraId:1,tocIndex:2},{value:"X-Authenticator",paraId:1,tocIndex:2},{value:" to the backend.",paraId:1,tocIndex:2},{value:"The ",paraId:1,tocIndex:2},{value:"auth:signIn",paraId:1,tocIndex:2},{value:" interface forwards to the corresponding authentication type based on the authenticator identifier in the request header, and the ",paraId:1,tocIndex:2},{value:"validate",paraId:1,tocIndex:2},{value:" method in the registered authentication class of that authentication type performs the corresponding logical processing.",paraId:1,tocIndex:2},{value:"The client retrieves user information and authentication token from the ",paraId:1,tocIndex:2},{value:"auth:signIn",paraId:1,tocIndex:2},{value:" interface response, saves the token to Local Storage, and completes the login. This step is automatically handled internally by the SDK.",paraId:1,tocIndex:2},{value:"The client obtains the third-party login URL through its own registered interface (such as ",paraId:2,tocIndex:3},{value:"auth:getAuthUrl",paraId:2,tocIndex:3},{value:"), and carries information such as the application name and authenticator identifier according to the protocol.",paraId:2,tocIndex:3},{value:"Redirect to the third-party URL to complete the login. The third-party service calls the callback interface of the NocoBase application (which needs to be registered by itself, such as ",paraId:2,tocIndex:3},{value:"auth:redirect",paraId:2,tocIndex:3},{value:"), returns the authentication result, and returns information such as the application name and authenticator identifier.",paraId:2,tocIndex:3},{value:"In the callback interface method, parse the parameters to obtain the authenticator identifier, obtain the corresponding authentication class through ",paraId:2,tocIndex:3},{value:"AuthManager",paraId:2,tocIndex:3},{value:", and actively call the ",paraId:2,tocIndex:3},{value:"auth.signIn()",paraId:2,tocIndex:3},{value:" method. The ",paraId:2,tocIndex:3},{value:"auth.signIn()",paraId:2,tocIndex:3},{value:" method will call the ",paraId:2,tocIndex:3},{value:"validate()",paraId:2,tocIndex:3},{value:" method to handle the authentication logic.",paraId:2,tocIndex:3},{value:"After the callback method obtains the authentication token, it redirects back to the frontend page with a 302 status code, and carries the ",paraId:2,tocIndex:3},{value:"token",paraId:2,tocIndex:3},{value:" and authenticator identifier in the URL parameters, ",paraId:2,tocIndex:3},{value:"?authenticator=xxx&token=yyy",paraId:2,tocIndex:3},{value:".",paraId:2,tocIndex:3},{value:"Next, we'll discuss how to register server-side interfaces and client-side user interfaces.",paraId:3,tocIndex:3},{value:"The NocoBase kernel provides registration and management for extending authentication types. The core logic processing of extending the login plugin requires inheriting the ",paraId:4,tocIndex:5},{value:"Auth",paraId:4,tocIndex:5},{value:" abstract class of the kernel and implementing the corresponding standard interfaces.",paraId:4,tocIndex:5},{value:`
For the complete API, see `,paraId:4,tocIndex:5},{value:"Auth",paraId:5,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:`import { Auth } from '@nocobase/auth';

class CustomAuth extends Auth {
  set user(user) {}
  get user() {}

  async check() {}
  async signIn() {}
}
`,paraId:6,tocIndex:5},{value:"In most cases, the extended user authentication type can also use the existing JWT authentication logic to generate the credential for the user to access the API. The ",paraId:7,tocIndex:5},{value:"BaseAuth",paraId:7,tocIndex:5},{value:" class in the kernel has done the basic implementation of the ",paraId:7,tocIndex:5},{value:"Auth",paraId:7,tocIndex:5},{value:" abstract class, see ",paraId:7,tocIndex:5},{value:"BaseAuth",paraId:8,tocIndex:5},{value:". Plugins can directly inherit the ",paraId:7,tocIndex:5},{value:"BaseAuth",paraId:7,tocIndex:5},{value:" class to reuse part of the logic code and reduce development costs.",paraId:7,tocIndex:5},{value:`import { BaseAuth } from '@nocobase/auth';

class CustomAuth extends BaseAuth {
  constructor(config: AuthConfig) {
    // Set user data table
    const userCollection = config.ctx.db.getCollection('users');
    super({ ...config, userCollection });
  }

  // Implement user login logic
  async validate() {}
}
`,paraId:9,tocIndex:5},{value:"In a NocoBase application, the related collections are defined by default as:",paraId:10,tocIndex:6},{value:"Collections",paraId:11,tocIndex:6},{value:"Description",paraId:11,tocIndex:6},{value:"Plugin",paraId:11,tocIndex:6},{value:"users",paraId:11,tocIndex:6},{value:"Store user information, such as email, nickname, and password",paraId:11,tocIndex:6},{value:"User Plugin (",paraId:12,tocIndex:6},{value:"@nocobase/plugin-users",paraId:12,tocIndex:6},{value:")",paraId:12,tocIndex:6},{value:"authenticators",paraId:11,tocIndex:6},{value:"Store authenticator (authentication type entity) information, corresponding to authentication type and configuration",paraId:11,tocIndex:6},{value:"User Authentication Plugin (",paraId:11,tocIndex:6},{value:"@nocobase/plugin-auth",paraId:11,tocIndex:6},{value:")",paraId:11,tocIndex:6},{value:"usersAuthenticators",paraId:11,tocIndex:6},{value:"Associates users and authenticators, saves user information under the corresponding authenticator",paraId:11,tocIndex:6},{value:"User Authentication Plugin (",paraId:11,tocIndex:6},{value:"@nocobase/plugin-auth",paraId:11,tocIndex:6},{value:")",paraId:11,tocIndex:6},{value:"In general, extended login methods use ",paraId:13,tocIndex:6},{value:"users",paraId:13,tocIndex:6},{value:" and ",paraId:13,tocIndex:6},{value:"usersAuthenticators",paraId:13,tocIndex:6},{value:" to store corresponding user data. Only in special cases do you need to add a new Collection yourself.",paraId:13,tocIndex:6},{value:"The main fields of ",paraId:14,tocIndex:6},{value:"usersAuthenticators",paraId:14,tocIndex:6},{value:" are",paraId:14,tocIndex:6},{value:"Field",paraId:15,tocIndex:6},{value:"Description",paraId:15,tocIndex:6},{value:"uuid",paraId:15,tocIndex:6},{value:"Unique identifier for this type of authentication, such as phone number, WeChat openid, etc",paraId:15,tocIndex:6},{value:"meta",paraId:15,tocIndex:6},{value:"JSON field, other information to be saved",paraId:15,tocIndex:6},{value:"userId",paraId:15,tocIndex:6},{value:"User ID",paraId:15,tocIndex:6},{value:"authenticator",paraId:15,tocIndex:6},{value:"Authenticator name (unique identifier)",paraId:15,tocIndex:6},{value:"For user query and creation operations, the ",paraId:16,tocIndex:6},{value:"authenticators",paraId:16,tocIndex:6},{value:" data model ",paraId:16,tocIndex:6},{value:"AuthModel",paraId:16,tocIndex:6},{value:" also encapsulates several methods that can be used in the ",paraId:16,tocIndex:6},{value:"CustomAuth",paraId:16,tocIndex:6},{value:" class via ",paraId:16,tocIndex:6},{value:"this.authenticator[methodName]",paraId:16,tocIndex:6},{value:". For the complete API, see ",paraId:16,tocIndex:6},{value:"AuthModel",paraId:17,tocIndex:6},{value:".",paraId:16,tocIndex:6},{value:`import { AuthModel } from '@nocobase/plugin-auth';

class CustomAuth extends BaseAuth {
  async validate() {
    // ...
    const authenticator = this.authenticator as AuthModel;
    this.authenticator.findUser(); // Query user
    this.authenticator.newUser(); // Create new user
    this.authenticator.findOrCreateUser(); // Query or create new user
    // ...
  }
}
`,paraId:18,tocIndex:6},{value:"The extended authentication method needs to be registered with the authentication management module.",paraId:19,tocIndex:7},{value:`class CustomAuthPlugin extends Plugin {
  async load() {
    this.app.authManager.registerTypes('custom-auth-type', {
      auth: CustomAuth,
    });
  }
}
`,paraId:20,tocIndex:7},{value:"The client user interface is registered through the interface ",paraId:21,tocIndex:8},{value:"registerType",paraId:21,tocIndex:8},{value:" provided by the user authentication plugin client:",paraId:21,tocIndex:8},{value:`import AuthPlugin from '@nocobase/plugin-auth/client';

class CustomAuthPlugin extends Plugin {
  async load() {
    const auth = this.app.pm.get(AuthPlugin);
    auth.registerType('custom-auth-type', {
      components: {
        SignInForm, // Sign in form
        SignInButton, // Sign in (third party) button, can be either with the login form
        SignUpForm, // Sign up form
        AdminSettingsForm, // Backstage management form
      },
    });
  }
}
`,paraId:22,tocIndex:8},{value:"If multiple authenticators corresponding to the authentication type have registered login forms, they will be displayed in the form of Tabs. The Tab title is the title of the authenticator configured in the background.",paraId:23,tocIndex:9},{value:"Usually for third-party login buttons, but can actually be any component.",paraId:24,tocIndex:10},{value:"If you need to jump from the login page to the sign up page, you need to handle it yourself in the login component.",paraId:25,tocIndex:11},{value:"The top is the generic authenticator configuration, and the bottom is the part of the custom configuration form that can be registered.",paraId:26,tocIndex:12},{value:"To initiate requests for user authentication-related interfaces on the client-side, you can use the SDK provided by NocoBase.",paraId:27,tocIndex:13},{value:`import { useAPIClient } from '@nocobase/client';

// Use in component
const api = useAPIClient();
api.auth.signIn(data, authenticator);
`,paraId:28,tocIndex:13},{value:"For detailed API references, see ",paraId:29,tocIndex:13},{value:"@nocobase/sdk - Auth",paraId:30,tocIndex:13},{value:".",paraId:29,tocIndex:13}]},179738:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The user authentication module of NocoBase mainly consists of two parts:",paraId:0,tocIndex:1},{value:"The ",paraId:1,tocIndex:1},{value:"@nocobase/auth",paraId:1,tocIndex:1},{value:" in the kernel defines login, registration, verification and other user authentication related expandable interfaces and middleware, and is also used for registering and managing various extended authentication methods.",paraId:1,tocIndex:1},{value:"The ",paraId:1,tocIndex:1},{value:"@nocobase/plugin-auth",paraId:1,tocIndex:1},{value:" in the plugin is used to initialize the authentication management module in the kernel, and also provides basic username (or email) / password authentication method.",paraId:1,tocIndex:1},{value:"It needs to be used in conjunction with the user management function provided by the ",paraId:2,tocIndex:1},{value:"@nocobase/plugin-users",paraId:3,tocIndex:1},{value:" plugin",paraId:3,tocIndex:1},{value:"In addition, NocoBase also provides other various user authentication method plugins",paraId:4,tocIndex:1},{value:"@nocobase/plugin-auth-sms",paraId:5,tocIndex:1},{value:" - Provides SMS verification login function",paraId:6,tocIndex:1},{value:"@nocobase/plugin-auth-saml",paraId:7,tocIndex:1},{value:" - Provides SAML SSO login function",paraId:6,tocIndex:1},{value:"@nocobase/plugin-auth-oidc",paraId:8,tocIndex:1},{value:" - Provides OIDC SSO login function",paraId:6,tocIndex:1},{value:"@nocobase/plugin-auth-cas",paraId:9,tocIndex:1},{value:" - Provides CAS SSO login function",paraId:6,tocIndex:1},{value:"Through the above plugins, after the administrator configures the corresponding authentication method, users can directly use the user identity provided by platforms such as Google Workspace, Microsoft Azure to log in to the system, and can also connect to Auth0, Logto, Keycloak and other platform tools. In addition, developers can also conveniently expand other authentication methods they need through the basic interfaces we provide.",paraId:10,tocIndex:1}]},248178:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When the user authentication plugin is installed, it will initialize an authentication method of ",paraId:0,tocIndex:1},{value:"password",paraId:0,tocIndex:1},{value:", based on the user's username and email.",paraId:0,tocIndex:1},{value:"Only activated authentication types will be displayed on the login page",paraId:1,tocIndex:2},{value:"The user authentication types currently supported by NocoBase are:",paraId:2,tocIndex:3},{value:"Password (Password), built-in user authentication plugin",paraId:3,tocIndex:3},{value:"SMS (SMS), expanded by ",paraId:3,tocIndex:3},{value:"sms-auth plugin",paraId:4,tocIndex:3},{value:"CAS, expanded by ",paraId:3,tocIndex:3},{value:"cas-auth plugin",paraId:5,tocIndex:3},{value:"SAML, expanded by ",paraId:3,tocIndex:3},{value:"saml-auth plugin",paraId:6,tocIndex:3},{value:"OIDC, expanded by ",paraId:3,tocIndex:3},{value:"oidc-auth plugin",paraId:7,tocIndex:3},{value:"In addition, you can also expand user authentication by yourself, refer to the ",paraId:8,tocIndex:3},{value:"Developer's Guide",paraId:9,tocIndex:3},{value:".",paraId:8,tocIndex:3},{value:"When sign up is allowed, the login page will display the link to create an account, and you can go to the sign up page",paraId:10,tocIndex:6},{value:"Sign up page",paraId:11,tocIndex:6},{value:"When sign up is not allowed, the login page will not display the link to create an account",paraId:12,tocIndex:6},{value:"When sign up is not allowed, the sign up page cannot be accessed",paraId:13,tocIndex:6},{value:"v1.4.0-beta.7+",paraId:14,tocIndex:6},{value:"You can set which fields in the user collection need to be displayed in the sign up form and whether they are required or not. At least one of username or email fields needs to be set to display and required.",paraId:15,tocIndex:7},{value:"Sign up page",paraId:16,tocIndex:7},{value:"v1.8.0+",paraId:17,tocIndex:7},{value:"The forgot password feature allows users to reset their password via email verification if they forget it.",paraId:18,tocIndex:8},{value:"Enable Forgot Password Feature",paraId:19,tocIndex:9},{value:'In "Settings" > "Authentication" > "Forgot password" tab, check the "Enable Forgot Password Feature" checkbox.',paraId:20,tocIndex:9},{value:"Configure Notification Channel",paraId:21,tocIndex:9},{value:"Select an email notification channel (currently only email is supported). If no notification channel is available, you need to add one first.",paraId:22,tocIndex:9},{value:"Configure Password Reset Email",paraId:23,tocIndex:9},{value:"Customize the email subject and content, supporting HTML or plain text format. You can use the following variables:",paraId:24,tocIndex:9},{value:"Current user",paraId:25,tocIndex:9},{value:"System settings",paraId:25,tocIndex:9},{value:"Reset password link",paraId:25,tocIndex:9},{value:"Reset link expiration (minutes)",paraId:25,tocIndex:9},{value:"Set Reset Link Expiration",paraId:26,tocIndex:9},{value:"Set the validity period (in minutes) for the reset link, default is 120 minutes.",paraId:27,tocIndex:9},{value:"Initiate Password Reset Request",paraId:28,tocIndex:10},{value:'Click the "Forgot Password" link on the login page (requires the administrator to enable the forgot password feature first) to go to the forgot password page.',paraId:29,tocIndex:10},{value:'Enter the registered email address and click the "Send Reset Email" button.',paraId:30,tocIndex:10},{value:"Reset Password",paraId:31,tocIndex:10},{value:"The user will receive an email containing a reset link. Click the link to open a page where you can set a new password.",paraId:32,tocIndex:10},{value:"After setting it up, the user can log in to the system with the new password.",paraId:33,tocIndex:10},{value:"The reset link has a time limit, by default it is valid for 120 minutes after generation (configurable by the administrator).",paraId:34,tocIndex:11},{value:"The link can only be used once and becomes invalid immediately after use.",paraId:34,tocIndex:11},{value:"If the user does not receive the reset email, please check if the email address is correct or check the spam folder.",paraId:34,tocIndex:11},{value:"The administrator should ensure that the mail server configuration is correct to guarantee that the reset email can be sent successfully.",paraId:34,tocIndex:11}]},141447:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The backup and restore plugin can be used for scenarios such as application replication, migration, and upgrade.",paraId:0,tocIndex:1},{value:"This plugin is built-in and does not require manual installation or activation.",paraId:1,tocIndex:2},{value:"You can choose to upload a backup from your local device or click on a backup file to restore.",paraId:2,tocIndex:5},{value:"Select the data you need to restore, the selected data will completely overwrite the corresponding data table of the target application.",paraId:3,tocIndex:5},{value:'Click on "Learn more" to view the backup instructions.',paraId:4,tocIndex:6},{value:"Backup Instructions",paraId:5,tocIndex:6},{value:"Backup Groups",paraId:6,tocIndex:6},{value:"Required Data: Essential data for system operation.",paraId:7,tocIndex:6},{value:"Skipped Data: Data skipped and not backed up.",paraId:7,tocIndex:6},{value:"User Data: Data related to users.",paraId:7,tocIndex:6},{value:"Log Data: Data used to record some actions log.",paraId:7,tocIndex:6},{value:"Third-party Service Information: Generally information about various service providers, such as file storage services, map services, and SMS service provider configuration information, etc.",paraId:7,tocIndex:6},{value:"Custom Collection Data: Data of collections added through the collection manager.",paraId:7,tocIndex:6},{value:"Unknown Data: Data without configured backup rules.",paraId:7,tocIndex:6},{value:"Note: You can choose the data you want to back up or restore by group. The selected data will completely overwrite when restoring.",paraId:8,tocIndex:6}]},793085:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The NocoBase backup manager plugin provides features for fully backing up of the NocoBase database and user uploaded files, including backup's scheduling, downloading, deleting, and restoring operation.",paraId:0,tocIndex:1},{value:"The Backup Manager plugin is included in the Professional and Enterprise editions. For Community and Standard edition users, you can directly back up the database; see details at: ",paraId:1},{value:"How to Backup and Restore NocoBase",paraId:1},{value:"Visit the official website to download the client that matches the version of the database you are using:",paraId:2,tocIndex:3},{value:"MySQL: ",paraId:3,tocIndex:3},{value:"https://dev.mysql.com/downloads/",paraId:3,tocIndex:3},{value:"PostgreSQL: ",paraId:3,tocIndex:3},{value:"https://www.postgresql.org/download/",paraId:3,tocIndex:3},{value:"For Docker versions, you can directly write a script in the ",paraId:4,tocIndex:3},{value:"./storage/scripts",paraId:4,tocIndex:3},{value:" directory",paraId:4,tocIndex:3},{value:`mkdir ./storage/scripts
cd ./storage/scripts
vim install-database-client.sh
`,paraId:5,tocIndex:3},{value:"The content of ",paraId:6,tocIndex:3},{value:"install-database-client.sh",paraId:6,tocIndex:3},{value:" is as follows:",paraId:6,tocIndex:3},{value:`#!/bin/bash

# Check if pg_dump is installed
if [ ! -f /usr/bin/pg_dump ]; then
    echo "pg_dump is not installed, starting PostgreSQL client installation..."

    # Install necessary tools and clean cache
    apt-get update && apt-get install -y --no-install-recommends wget gnupg \\
      && rm -rf /var/lib/apt/lists/*

    # Configure PostgreSQL source
    echo "deb [signed-by=/usr/share/keyrings/pgdg.asc] https://apt.postgresql.org/pub/repos/apt bookworm-pgdg main" > /etc/apt/sources.list.d/pgdg.list
    wget --quiet -O /usr/share/keyrings/pgdg.asc https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc

    # Install PostgreSQL client
    apt-get update && apt-get install -y --no-install-recommends postgresql-client-16 \\
      && rm -rf /var/lib/apt/lists/*

    echo "PostgreSQL client installation completed."
else
    echo "pg_dump is already installed, skipping PostgreSQL client installation."
fi
`,paraId:7},{value:`#!/bin/bash

if [ ! -f /usr/bin/mysql ]; then
    echo "MySQL client is not installed, starting MySQL client installation..."
    echo "Updating package list and installing necessary tools..."
    apt-get update && apt-get install -y --no-install-recommends wget gnupg \\
        && rm -rf /var/lib/apt/lists/*

    wget --no-check-certificate https://downloads.mysql.com/archives/get/p/23/file/mysql-community-client-core_8.0.39-1debian12_amd64.deb && \\
        dpkg -x mysql-community-client-core_8.0.39-1debian12_amd64.deb /tmp/mysql-client && \\
        cp /tmp/mysql-client/usr/bin/mysqldump /usr/bin/ && \\
        cp /tmp/mysql-client/usr/bin/mysql /usr/bin/

    echo "MySQL client installation completed."
else
    echo "MySQL client is already installed, skipping installation."
fi
`,paraId:8},{value:"Then restart the app container",paraId:9},{value:`docker compose restart app
# View logs
docker compose logs app
`,paraId:10},{value:"Check the database client version number, which must match the database server version number",paraId:11},{value:`docker compose exec app bash -c "pg_dump -V"
`,paraId:12},{value:`docker compose exec app bash -c "mysql -V"
`,paraId:13},{value:"Refer to ",paraId:14,tocIndex:4},{value:"Installation and Upgrade of Commercial Plugins",paraId:15,tocIndex:4},{value:`Click the "New backup" button to create a new backup based on the backup configuration and display the backup status in the backup list.
`,paraId:16,tocIndex:6},{value:`Supports restoring backups from the backup list or uploading local backup files to restore backups.
Restore operations are not allowed in the following scenarios:`,paraId:17,tocIndex:7},{value:"When the current NocoBase version is lower than the NocoBase version in the backup file.",paraId:18,tocIndex:7},{value:`When the current NocoBase database is inconsistent with the following configurations in the backup file:
`,paraId:18,tocIndex:7},{value:"dialect",paraId:19,tocIndex:7},{value:"underscored",paraId:19,tocIndex:7},{value:"table prefix",paraId:19,tocIndex:7},{value:"schema",paraId:19,tocIndex:7},{value:"When the ",paraId:18,tocIndex:7},{value:"Tolerant mode",paraId:18,tocIndex:7},{value:" is not enabled, and the database version when creating the backup is higher than the current application database version.",paraId:18,tocIndex:7},{value:"Restore is a full database operation. It is recommended to back up the current database before restoring a backup.",paraId:20,tocIndex:7},{value:'Click the "Restore" button of the backup item in the backup list, enter the backup file encryption password in the pop-up window, and click "Confirm" to restore the backup.',paraId:21,tocIndex:8},{value:"Leave password empty for unencrypted backup.",paraId:22,tocIndex:8},{value:"If you need to restore the backup to a lower version of the database, you need to enable the tolerant mode.",paraId:23,tocIndex:8},{value:"Click the ",paraId:24,tocIndex:9},{value:"Restore from local backup",paraId:24,tocIndex:9},{value:' button, select the local backup file in the pop-up window, enter the backup file encryption password, and click "Confirm" to restore the backup.',paraId:24,tocIndex:9},{value:"Leave password empty for unencrypted backup.",paraId:25,tocIndex:9},{value:"If you need to restore the backup to a lower version of the database, you need to enable the tolerant mode.",paraId:26,tocIndex:9},{value:"Click the ",paraId:27,tocIndex:10},{value:"Download",paraId:27,tocIndex:10},{value:" button of the backup item in the backup list to download the backup file.",paraId:27,tocIndex:10},{value:"Click the ",paraId:28,tocIndex:11},{value:"Delete",paraId:28,tocIndex:11},{value:" button of the backup item in the backup list to delete the backup file.",paraId:28,tocIndex:11},{value:'Switch to the "Settings" tab, modify the backup settings, and click ',paraId:29,tocIndex:12},{value:"Save",paraId:29,tocIndex:12},{value:` to take effect.
`,paraId:29,tocIndex:12},{value:"Automatic backup",paraId:30,tocIndex:13},{value:": When enable ",paraId:30,tocIndex:13},{value:"Run automatic backup on the cron schedule",paraId:30,tocIndex:13},{value:", you can set automatic backups at specified times.",paraId:30,tocIndex:13},{value:"Maximum number of backups",paraId:30,tocIndex:13},{value:": Set the maximum number of locally saved backup files. After exceeding the number, the earliest backup files will be automatically deleted.",paraId:30,tocIndex:13},{value:"Sync backup to cloud storage",paraId:30,tocIndex:13},{value:": Set the cloud storage location where the backup files are automatically uploaded after successful backup, only support cloud storage.",paraId:30,tocIndex:13},{value:"Backup local storage files",paraId:30,tocIndex:13},{value:": Whether to include files uploaded by users to the server's local storage (storage/uploads) in the backup.",paraId:30,tocIndex:13},{value:"Restore password",paraId:30,tocIndex:13},{value:": If a restore password is set, it must be entered when restoring the backup.",paraId:30,tocIndex:13},{value:"Please keep the restore password safe. Forgetting the password will make it impossible to restore the backup file.",paraId:31,tocIndex:13}]},795656:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Visit the official website to download the client that matches the version of the database you are using:",paraId:0,tocIndex:0},{value:"MySQL: ",paraId:1,tocIndex:0},{value:"https://dev.mysql.com/downloads/",paraId:1,tocIndex:0},{value:"PostgreSQL: ",paraId:1,tocIndex:0},{value:"https://www.postgresql.org/download/",paraId:1,tocIndex:0},{value:"For Docker versions, you can directly write a script in the ",paraId:2,tocIndex:0},{value:"./storage/scripts",paraId:2,tocIndex:0},{value:" directory",paraId:2,tocIndex:0},{value:`mkdir ./storage/scripts
cd ./storage/scripts
vim install-database-client.sh
`,paraId:3,tocIndex:0},{value:"The content of ",paraId:4,tocIndex:0},{value:"install-database-client.sh",paraId:4,tocIndex:0},{value:" is as follows:",paraId:4,tocIndex:0},{value:`#!/bin/bash

# Check if pg_dump is installed
if [ ! -f /usr/bin/pg_dump ]; then
    echo "pg_dump is not installed, starting PostgreSQL client installation..."

    # Install necessary tools and clean cache
    apt-get update && apt-get install -y --no-install-recommends wget gnupg \\
      && rm -rf /var/lib/apt/lists/*

    # Configure PostgreSQL source
    echo "deb [signed-by=/usr/share/keyrings/pgdg.asc] https://apt.postgresql.org/pub/repos/apt bookworm-pgdg main" > /etc/apt/sources.list.d/pgdg.list
    wget --quiet -O /usr/share/keyrings/pgdg.asc https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc

    # Install PostgreSQL client
    apt-get update && apt-get install -y --no-install-recommends postgresql-client-16 \\
      && rm -rf /var/lib/apt/lists/*

    echo "PostgreSQL client installation completed."
else
    echo "pg_dump is already installed, skipping PostgreSQL client installation."
fi
`,paraId:5},{value:`#!/bin/bash

if [ ! -f /usr/bin/mysql ]; then
    echo "MySQL client is not installed, starting MySQL client installation..."
    echo "Updating package list and installing necessary tools..."
    apt-get update && apt-get install -y --no-install-recommends wget gnupg \\
        && rm -rf /var/lib/apt/lists/*

    wget --no-check-certificate https://downloads.mysql.com/archives/get/p/23/file/mysql-community-client-core_8.0.39-1debian12_amd64.deb && \\
        dpkg -x mysql-community-client-core_8.0.39-1debian12_amd64.deb /tmp/mysql-client && \\
        cp /tmp/mysql-client/usr/bin/mysqldump /usr/bin/ && \\
        cp /tmp/mysql-client/usr/bin/mysql /usr/bin/

    echo "MySQL client installation completed."
else
    echo "MySQL client is already installed, skipping installation."
fi
`,paraId:6},{value:"Then restart the app container",paraId:7},{value:`docker compose restart app
# View logs
docker compose logs app
`,paraId:8},{value:"Check the database client version number, which must match the database server version number",paraId:9},{value:`docker compose exec app bash -c "pg_dump -V"
`,paraId:10},{value:`docker compose exec app bash -c "mysql -V"
`,paraId:11},{value:"Refer to ",paraId:12,tocIndex:1},{value:"Installation and Upgrade of Commercial Plugins",paraId:13,tocIndex:1}]},430575:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`# Based on the "next" version
FROM nocobase/nocobase:latest

# Update sources.list with the official Debian repositories
RUN tee /etc/apt/sources.list > /dev/null <<EOF
deb http://deb.debian.org/debian/ bullseye main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye main contrib non-free
deb http://security.debian.org/debian-security bullseye-security main contrib non-free
deb-src http://security.debian.org/debian-security bullseye-security main contrib non-free
deb http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb http://deb.debian.org/debian/ bullseye-backports main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-backports main contrib non-free
EOF

# Run the installation script to install the latest MySQL client version
RUN apt-get update && apt-get install -y wget && \\
  wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-client-core_8.1.0-1debian11_amd64.deb && \\
  dpkg -x mysql-community-client-core_8.1.0-1debian11_amd64.deb /tmp/mysql-client && \\
  cp /tmp/mysql-client/usr/bin/mysqldump /usr/bin/ && \\
  cp /tmp/mysql-client/usr/bin/mysql /usr/bin/
`,paraId:0,tocIndex:2},{value:`version: "3"

networks:
  nocobase:
    driver: bridge

services:
  app:
-   image: nocobase/nocobase:next  # (previously: registry.cn-shanghai.aliyuncs.com/nocobase/nocobase:next)
+   build:
+     dockerfile: Dockerfile
    networks:
      - nocobase
    restart: always
    depends_on:
      - mariadb
    environment:
      # Application secret key used for generating user tokens, etc.
      # Changing APP_KEY will invalidate existing tokens.
      # Use any random string and keep it confidential.
      - APP_KEY=your-secret-key
      # Database dialect; supports postgres, mysql, mariadb
      - DB_DIALECT=mariadb
      # Database host; can be replaced with an existing database server's IP
      - DB_HOST=mariadb
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=root
      # Database password
      - DB_PASSWORD=nocobase
      # Whether to convert table and field names to snake case
      - DB_UNDERSCORED=true
      # Time zone
      - TZ=Asia/Shanghai
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - "13000:80"
    # init: true

  # If you are using an existing database service, you can omit starting mariadb
  mariadb:
-    image: nocobase/mariadb:11  # (previously: registry.cn-shanghai.aliyuncs.com/nocobase/mariadb:11)
+    image: nocobase/mariadb:11
    environment:
      MYSQL_DATABASE: nocobase
      MYSQL_USER: nocobase
      MYSQL_PASSWORD: nocobase
      MYSQL_ROOT_PASSWORD: nocobase
    restart: always
    volumes:
      - ./storage/db/mariadb:/var/lib/mysql
    networks:
      - nocobase
`,paraId:1,tocIndex:3},{value:"Previously, you would pull a new image for each update. Now, you need to build a new image every time:",paraId:2,tocIndex:4},{value:`# Pull the latest image
- docker-compose pull app
# Update the app container
+ docker-compose build app --pull
# Start the container
docker-compose up -d app
# Check the app logs
docker-compose logs app
`,paraId:3,tocIndex:4},{value:"If your NocoBase was installed using ",paraId:4,tocIndex:5},{value:"create-nocobase-app",paraId:5,tocIndex:5},{value:" or by ",paraId:4,tocIndex:5},{value:"cloning the Git repository",paraId:6,tocIndex:5},{value:", please visit the official MySQL download page for installation.",paraId:4,tocIndex:5},{value:"Latest version: ",paraId:7,tocIndex:5},{value:"https://dev.mysql.com/downloads/mysql/",paraId:7,tocIndex:5}]},318734:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`# Based on the "next" version
FROM nocobase/nocobase:latest

# Update sources.list to use the official Debian repositories
RUN tee /etc/apt/sources.list > /dev/null <<EOF
deb http://deb.debian.org/debian/ bullseye main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye main contrib non-free
deb http://security.debian.org/debian-security bullseye-security main contrib non-free
deb-src http://security.debian.org/debian-security bullseye-security main contrib non-free
deb http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb http://deb.debian.org/debian/ bullseye-backports main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-backports main contrib non-free
EOF

# Execute the installation script.
# Please replace the link below with the appropriate MySQL version link if necessary.
RUN apt-get update && apt-get install -y wget && \\
 wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-client-core_8.1.0-1debian11_amd64.deb && \\
 dpkg -x mysql-community-client-core_8.1.0-1debian11_amd64.deb /tmp/mysql-client && \\
 cp /tmp/mysql-client/usr/bin/mysqldump /usr/bin/ && \\
 cp /tmp/mysql-client/usr/bin/mysql /usr/bin/
`,paraId:0,tocIndex:2},{value:`version: "3"
networks:
  nocobase:
    driver: bridge
services:
  app:
-   image: nocobase/nocobase:next
+   build:
+     dockerfile: Dockerfile
    networks:
      - nocobase
    restart: always
    depends_on:
      - postgres
    environment:
      # Application secret key used for generating user tokens, etc.
      # Changing APP_KEY will invalidate existing tokens.
      # Use any random string and keep it confidential.
      - APP_KEY=your-secret-key
      # Database dialect; supports postgres, mysql, mariadb
      - DB_DIALECT=postgres
      # Database host; replace with the IP address of your existing database server if needed
      - DB_HOST=postgres
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=nocobase
      # Database password
      - DB_PASSWORD=nocobase
      # Time zone
      - TZ=Asia/Shanghai
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - "13000:80"
    # init: true
  # If you are using an existing database service, you can omit the postgres service.
  postgres:
-    image: nocobase/postgres:16
+    image: nocobase/postgres:16
    restart: always
    command: postgres -c wal_level=logical
    environment:
      POSTGRES_USER: nocobase
      POSTGRES_DB: nocobase
      POSTGRES_PASSWORD: nocobase
    volumes:
      - ./storage/db/postgres:/var/lib/postgresql/data
    networks:
      - nocobase
`,paraId:1,tocIndex:3},{value:"Previously, you would pull a new image for each update. Now, you need to build a new image every time:",paraId:2,tocIndex:4},{value:`# Pull the latest image
- docker-compose pull app
# Update the app container
+ docker-compose build app --pull
# Start the container
docker-compose up -d app
# Check the app logs
docker-compose logs app
`,paraId:3,tocIndex:4},{value:"If you installed NocoBase using ",paraId:4,tocIndex:5},{value:"create-nocobase-app installation",paraId:5,tocIndex:5},{value:" or by ",paraId:4,tocIndex:5},{value:"cloning the Git repository",paraId:6,tocIndex:5},{value:", please visit the official MySQL download page to select the appropriate MySQL version and follow the official documentation for installation:",paraId:4,tocIndex:5},{value:"Historical versions: ",paraId:7,tocIndex:5},{value:"https://downloads.mysql.com/archives/community/",paraId:7,tocIndex:5},{value:"Latest version: ",paraId:7,tocIndex:5},{value:"https://dev.mysql.com/downloads/mysql/",paraId:7,tocIndex:5}]},463324:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`# Based on the "next" version
FROM nocobase/nocobase:latest

# Choose the appropriate PostgreSQL version as needed; here we use version 16 as an example.
ARG PG_VERSION=16

# Update sources.list with the official Debian repositories
RUN tee /etc/apt/sources.list > /dev/null <<EOF
deb http://deb.debian.org/debian/ bullseye main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye main contrib non-free
deb http://security.debian.org/debian-security bullseye-security main contrib non-free
deb-src http://security.debian.org/debian-security bullseye-security main contrib non-free
deb http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-updates main contrib non-free
deb http://deb.debian.org/debian/ bullseye-backports main contrib non-free
deb-src http://deb.debian.org/debian/ bullseye-backports main contrib non-free
EOF

# Execute the installation script
RUN apt update && apt install -y postgresql-common gnupg \\
  && /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y \\
  && apt install -y postgresql-client-\${PG_VERSION}
`,paraId:0,tocIndex:2},{value:`version: "3"
networks:
  nocobase:
    driver: bridge
services:
  app:
-   image: nocobase/nocobase:next
+   build:
+     dockerfile: Dockerfile
    networks:
      - nocobase
    restart: always
    depends_on:
      - postgres
    environment:
      # Application secret key used for generating user tokens, etc.
      # Changing APP_KEY will invalidate existing tokens.
      # Use any random string and keep it confidential.
      - APP_KEY=your-secret-key
      # Database dialect; supports postgres, mysql, mariadb
      - DB_DIALECT=postgres
      # Database host; replace with the IP address of your existing database server if needed
      - DB_HOST=postgres
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=nocobase
      # Database password
      - DB_PASSWORD=nocobase
      # Time zone
      - TZ=Asia/Shanghai
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - "13000:80"
    # init: true
  # If you are using an existing database service, you can omit the postgres service.
  postgres:
    image: nocobase/postgres:16
    restart: always
    command: postgres -c wal_level=logical
    environment:
      POSTGRES_USER: nocobase
      POSTGRES_DB: nocobase
      POSTGRES_PASSWORD: nocobase
    volumes:
      - ./storage/db/postgres:/var/lib/postgresql/data
    networks:
      - nocobase
`,paraId:1,tocIndex:3},{value:"Previously, you would pull a new image for each update. Now, you need to build a new image every time:",paraId:2,tocIndex:4},{value:`# Pull the latest image
- docker-compose pull app
# Update the app container
+ docker-compose build app --pull
# Start the container
docker-compose up -d app
# Check the app logs
docker-compose logs app
`,paraId:3,tocIndex:4},{value:"If you installed NocoBase using ",paraId:4,tocIndex:5},{value:"create-nocobase-app",paraId:5,tocIndex:5},{value:" or by ",paraId:4,tocIndex:5},{value:"cloning the Git repository",paraId:6,tocIndex:5},{value:", please visit ",paraId:4,tocIndex:5},{value:"PostgreSQL's official download page",paraId:4,tocIndex:5},{value:" to select the appropriate PostgreSQL version and follow the official documentation for installation.",paraId:4,tocIndex:5}]},249944:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"It is used for placing various quick actions. Currently, it supports",paraId:0,tocIndex:1},{value:"link",paraId:1,tocIndex:1},{value:"Scan QR code",paraId:2,tocIndex:1},{value:"Popup action",paraId:3,tocIndex:1},{value:"Custom request",paraId:4,tocIndex:1},{value:"The action panel supports the following action types:",paraId:5,tocIndex:2},{value:`
  `,paraId:6},{value:`
  `,paraId:6},{value:"Consistent with the configured blocks on the page",paraId:7,tocIndex:5},{value:`
  `,paraId:6},{value:`
  `,paraId:6}]},631572:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Gantt chart block displays data in the form of a timeline, making it ideal for project management, event planning, engineering schedules, and task scheduling.",paraId:0,tocIndex:1},{value:"It's a built-in plugin, no installation is required.",paraId:1,tocIndex:2},{value:"Title Field",paraId:2,tocIndex:3},{value:": Displays the information directly on the Gantt chart bars",paraId:2,tocIndex:3},{value:"Time Scale",paraId:2,tocIndex:3},{value:": Sets the time scale, with the default level being days",paraId:2,tocIndex:3},{value:"Start Date Field",paraId:2,tocIndex:3},{value:": Defines the start date for each task (required)",paraId:2,tocIndex:3},{value:"End Date Field",paraId:2,tocIndex:3},{value:": Defines the end date for each task (required)",paraId:2,tocIndex:3},{value:"Progress Field",paraId:2,tocIndex:3},{value:": Indicates the progress of a task (optional percentage field)",paraId:2,tocIndex:3},{value:"Hover over a task to see a floating card that displays task duration and progress.",paraId:3,tocIndex:4},{value:"Drag the task to adjust the start and end dates.",paraId:3,tocIndex:4},{value:"Drag the progress bar to adjust task progress.",paraId:3,tocIndex:4},{value:"For more details, refer to ",paraId:4,tocIndex:6},{value:"Setting Data Range",paraId:5,tocIndex:6},{value:".",paraId:4,tocIndex:6},{value:"Save as Block Template",paraId:6,tocIndex:6},{value:"Set Data Loading Mode",paraId:7,tocIndex:6},{value:"Filter",paraId:8,tocIndex:8},{value:"Add New",paraId:9,tocIndex:8},{value:"Delete",paraId:10,tocIndex:8},{value:"Refresh",paraId:11,tocIndex:8},{value:"Import",paraId:12,tocIndex:8},{value:"Export",paraId:13,tocIndex:8},{value:"Add Record",paraId:14,tocIndex:8},{value:"Bulk Update",paraId:15,tocIndex:8},{value:"Bulk Edit",paraId:16,tocIndex:8},{value:"View",paraId:17,tocIndex:9},{value:"Edit",paraId:18,tocIndex:9},{value:"Duplicate",paraId:19,tocIndex:9},{value:"Delete",paraId:20,tocIndex:9},{value:"Pop-Up",paraId:21,tocIndex:9},{value:"Update Record",paraId:22,tocIndex:9},{value:"Custom Request",paraId:23,tocIndex:9},{value:"Trigger Workflow",paraId:24,tocIndex:9}]},269175:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The IFrame block allows embedding external web pages or content into the current page. Users can integrate external applications seamlessly by configuring a URL or directly inserting HTML code. With HTML, users can flexibly customize content to meet specific display needs, making it ideal for customized scenarios. This approach enables loading external resources without redirection, enhancing user experience and page interactivity.",paraId:0,tocIndex:1},{value:"It's a built-in plugin, no installation is required.",paraId:1,tocIndex:2},{value:"Configure the URL or Html to directly embed the external application.",paraId:2,tocIndex:3},{value:"The default rendering engine supports variables",paraId:3,tocIndex:5},{value:"For more information, refer to ",paraId:4,tocIndex:6},{value:"Handlebars template",paraId:5,tocIndex:6},{value:"You can also inject custom variables into the application through code and use them in HTML. For example, creating a dynamic calendar application using Vue 3 and Element Plus:",paraId:6,tocIndex:10},{value:`<!doctype html>
<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vue3 CDN Example</title>
    <script src="https://cdn.bootcdn.net/ajax/libs/vue/3.5.9/vue.global.prod.js"><\/script>
    <script src="https://unpkg.com/element-plus"><\/script>
    <script src="https://unpkg.com/element-plus/dist/locale/zh-cn"><\/script>
    <link
      rel="stylesheet"
      href="https://unpkg.com/element-plus/dist/index.css"
    />
  </head>
  <body>
    <div id="app">
      <el-container>
        <el-main>
          <el-calendar v-model="month">
            <div class="header-container">
              <div class="action-group">
                <span class="month-display">{{ month }}</span>
                <el-button-group>
                  <el-button
                    type="primary"
                    :loading="loading"
                    @click="changeMonth(-1)"
                    >Last month</el-button
                  >
                  <el-button
                    type="primary"
                    :loading="loading"
                    @click="changeMonth(1)"
                    >Next month</el-button
                  >
                </el-button-group>
              </div>
            </div>
          </el-calendar>
        </el-main>
      </el-container>
    </div>
    <script>
      const { createApp, ref, provide } = Vue;
      const app = createApp({
        setup() {
          const month = ref(new Date().toISOString().slice(0, 7));
          const loading = ref(false);

          const changeMonth = (offset) => {
            const date = new Date(month.value + '-01');
            date.setMonth(date.getMonth() + offset);
            month.value = date.toISOString().slice(0, 7);
          };
          provide('month', month);
          provide('changeMonth', changeMonth);
          return { month, loading, changeMonth };
        },
      });
      app.use(ElementPlus);
      app.mount('#app');
    <\/script>
  </body>
</html>
`,paraId:7,tocIndex:10},{value:"Example: A simple calendar component created with React and Ant Design (antd), using dayjs to handle dates",paraId:8,tocIndex:10},{value:`<!doctype html>
<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React CDN Example </title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"><\/script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"><\/script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/antd/dist/antd.min.css"
    />
    <script src="https://unpkg.com/dayjs/dayjs.min.js"><\/script>
  </head>
  <body>
    <div id="app"></div>
    <script src="https://cdn.jsdelivr.net/npm/antd/dist/antd.min.js"><\/script>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const { useState } = React;
        const { Calendar, Button, Space, Typography } = window.antd;
        const { Title } = Typography;
        const CalendarComponent = () => {
          const [month, setMonth] = useState(dayjs().format('YYYY-MM'));
          const [loading, setLoading] = useState(false);
          const changeMonth = (offset) => {
            const newMonth = dayjs(month)
              .add(offset, 'month')
              .format('YYYY-MM');
            setMonth(newMonth);
          };
          return React.createElement(
            'div',
            { style: { padding: 20 } },
            React.createElement(
              'div',
              {
                style: {
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  marginBottom: 16,
                },
              },
              React.createElement(Title, { level: 4 }, month),
              React.createElement(
                Space,
                null,
                React.createElement(
                  Button,
                  { type: 'primary', loading, onClick: () => changeMonth(-1) },
                  'Last month',
                ),
                React.createElement(
                  Button,
                  { type: 'primary', loading, onClick: () => changeMonth(1) },
                  'Next month',
                ),
              ),
            ),
            React.createElement(Calendar, {
              fullscreen: false,
              value: dayjs(month),
            }),
          );
        };
        ReactDOM.createRoot(document.getElementById('app')).render(
          React.createElement(CalendarComponent),
        );
      });
    <\/script>
  </body>
</html>
`,paraId:9,tocIndex:10},{value:"For more information on variables, refer to ",paraId:10,tocIndex:11},{value:"Variables",paraId:11,tocIndex:11}]},837798:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Kanban block presents data in a Kanban view, enabling drag-and-drop functionality to update the status of items.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, so no installation is needed.",paraId:1,tocIndex:2},{value:`
      `,paraId:2},{value:"Used to organize data into specific groups. When creating or configuring a Kanban block, you must select a single-choice field as the grouping field.",paraId:3,tocIndex:4},{value:"Used to arrange data within each group. Only fields tied to the grouping field can be selected for sorting. You can also quickly create a sorting field while setting up the Kanban block.",paraId:4,tocIndex:5},{value:"Clicking on a card opens a pop-up window where you can configure data blocks as needed, such as setting up an edit form to modify the current card's record.",paraId:5,tocIndex:7},{value:"You can also configure how the pop-up window opens and its size.",paraId:6,tocIndex:7},{value:"Example: Adjust the status of a product by dragging the card. Once dragging is complete, the data will be saved automatically.",paraId:7,tocIndex:8},{value:`
      `,paraId:2},{value:"Example: Default filtering for promotional products.",paraId:8,tocIndex:10},{value:"For more details, refer to ",paraId:9,tocIndex:10},{value:"Setting Data Range",paraId:10,tocIndex:10},{value:".",paraId:9,tocIndex:10},{value:"Example: Adjust the height of the order Kanban block, with the scrollbar appearing within the columns.",paraId:11,tocIndex:11},{value:"For more details, refer to ",paraId:12,tocIndex:11},{value:"Block Height",paraId:13,tocIndex:11},{value:".",paraId:12,tocIndex:11},{value:"Filter",paraId:14,tocIndex:13},{value:"Add New",paraId:15,tocIndex:13}]},398215:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Block Map is an essential tool for displaying and managing map-related data, offering support for four types of map fields: points, lines, circles, and polygons.",paraId:0,tocIndex:1},{value:"This plugin comes pre-installed but must be activated before use.",paraId:1,tocIndex:2},{value:"After activation, map authentication details need to be configured.",paraId:2,tocIndex:2},{value:"Once configured, map fields can be integrated into your data tables.",paraId:3,tocIndex:2},{value:"Map blocks can only be added if the associated data table includes map fields.",paraId:4,tocIndex:3},{value:"Map Field:",paraId:5,tocIndex:3},{value:" Defines the type of map element (point, line, polygon).",paraId:5,tocIndex:3},{value:"Marker Field:",paraId:5,tocIndex:3},{value:" Specifies map markers (applicable only for point types).",paraId:5,tocIndex:3},{value:"Use Case:",paraId:6,tocIndex:4},{value:" Ideal for visualizing the distribution of retail store locations.",paraId:6,tocIndex:4},{value:"Lines are constructed from a sequence of map points, commonly used to illustrate paths, such as delivery routes.",paraId:7,tocIndex:5},{value:"Use Case:",paraId:8,tocIndex:7},{value:" Perfect for area planning and zoning applications.",paraId:8,tocIndex:7},{value:"Connect points according to the order defined by sequential fields.",paraId:9,tocIndex:9},{value:"The zoom level defaults to 13 but can be adjusted as needed.",paraId:10,tocIndex:10},{value:"Example:",paraId:11,tocIndex:11},{value:' Filter for waybills marked as "shipped" (using relational fields). Only waybills within the specified data scope will be displayed.',paraId:11,tocIndex:11},{value:"For further details, refer to ",paraId:12,tocIndex:11},{value:"Setting Data Scope",paraId:13,tocIndex:11},{value:".",paraId:12,tocIndex:11},{value:"Example:",paraId:14,tocIndex:12},{value:" Modify the height of the map block to suit your layout.",paraId:14,tocIndex:12},{value:"For more information, see ",paraId:15,tocIndex:12},{value:"Block Height",paraId:16,tocIndex:12},{value:".",paraId:15,tocIndex:12},{value:"Edit Block Title",paraId:17,tocIndex:12},{value:"Connect Data Block",paraId:18,tocIndex:12},{value:"Save as Block Template",paraId:19,tocIndex:12},{value:"Filter",paraId:20,tocIndex:14},{value:"Add",paraId:21,tocIndex:14},{value:"Refresh",paraId:22,tocIndex:14},{value:"Bulk Update",paraId:23,tocIndex:14},{value:"Bulk Edit",paraId:24,tocIndex:14}]},494056:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Multi-step form is a block used to build a data entry and editing interface that supports step-by-step configuration on top of the capabilities of the form block.",paraId:0,tocIndex:1},{value:`
      `,paraId:1},{value:"Control the behavior of form fields through linkage rules.",paraId:2,tocIndex:4},{value:"More content reference ",paraId:3,tocIndex:4},{value:"Linkage rules",paraId:4,tocIndex:4},{value:'Example: Set the block height to "Specify height" mode.',paraId:5,tocIndex:5},{value:`
  `,paraId:1},{value:"More content reference ",paraId:6,tocIndex:5},{value:"Block height",paraId:7,tocIndex:5},{value:`
  `,paraId:1},{value:"Refer to the field configuration items ",paraId:8,tocIndex:10},{value:"Form configuration field",paraId:9,tocIndex:10},{value:"previous: return to the previous form",paraId:10,tocIndex:11},{value:"next: switch to the next form",paraId:10,tocIndex:11},{value:"submit",paraId:11,tocIndex:11},{value:"custom request",paraId:12,tocIndex:11}]},603929:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Block Template provides templating capabilities for blocks, enabling centralized management of templates and the creation of blocks from them.",paraId:0,tocIndex:1},{value:"Built-in plugin, no installation required.",paraId:1,tocIndex:2},{value:"NocoBase offers two types of templates: Inherited templates and Reference templates. Their differences and application scenarios are as follows:",paraId:2,tocIndex:4},{value:"Reference template",paraId:3,tocIndex:4},{value:`: Similar to a UI Schema snippet. When used, you can choose either the Reference or Duplicate method.
`,paraId:3,tocIndex:4},{value:"Reference",paraId:4,tocIndex:4},{value:": The block remains completely consistent with the template. Modifying the block instance will synchronously modify the original template. Suitable for scenarios requiring strict consistency of content/structure across multiple locations.",paraId:4,tocIndex:4},{value:"Duplicate",paraId:4,tocIndex:4},{value:": Copies the current configuration of the template completely to the target location. After duplication, it is disconnected from the original template and no longer synchronizes updates. Suitable for quickly creating blocks or starting from a template base for completely independent modifications.",paraId:4,tocIndex:4},{value:"Inherited template",paraId:3,tocIndex:4},{value:": Blocks created maintain an inheritance relationship with the template. Blocks can be configured individually based on the template, while unmodified parts continue to synchronize with template updates. Suitable for scenarios requiring a unified basic configuration but allowing for localized differences.",paraId:3,tocIndex:4},{value:'A Reference template is a general-purpose template, similar to an UI Schema snippet. It allows saving data blocks (including blocks in pages, modals, and compatible third-party blocks) as Reference templates, which can then be used elsewhere via "Reference" or "Duplicate" methods.',paraId:5,tocIndex:5},{value:"There are two types of reference templates:",paraId:6,tocIndex:5},{value:"Reference template: Save the complete configuration of the block, including fields and actions. Most blocks are saved as this type.",paraId:7,tocIndex:5},{value:"Reference template (Fields only): Save only the fields configuration of the block, and actions will not be saved. When converting a form or a single record detail block to a reference template, it will be saved as this type.",paraId:7,tocIndex:5},{value:'Select the data block you want to save as a Reference template, click the "Save as reference template" button to create the Reference template.',paraId:8,tocIndex:6},{value:"Reference templates offer two ways of usage; choose the method that best suits your scenario:",paraId:9,tocIndex:7},{value:"Reference",paraId:10,tocIndex:7},{value:"When creating a block on a page, select the corresponding reference template to create the block using the template reference.",paraId:11,tocIndex:7},{value:"Duplicate",paraId:12,tocIndex:7},{value:"When creating a block on a page, select the corresponding duplicate template option to duplicate the template and create the block.",paraId:13,tocIndex:7},{value:"Inherited templates are primarily suited for scenarios where you want blocks to follow the basic updates of a template but also need to make some specific adjustments. Blocks created from an Inherited template inherit the template's configuration and allow for extensions or overrides on top of it. Configurations not overridden by the block will synchronize with template updates.",paraId:14,tocIndex:8},{value:"Inherited templates can be created in two ways, choose the method that best suits your scenario:",paraId:15,tocIndex:9},{value:"Create in the Block Template Management Interface",paraId:16,tocIndex:9},{value:"Applicable Scenario:",paraId:17,tocIndex:9},{value:"When starting a new inherited template from scratch",paraId:18,tocIndex:9},{value:"Steps:",paraId:19,tocIndex:9},{value:"Go to the block template management interface",paraId:20,tocIndex:9},{value:'Click the "Add new" button',paraId:20,tocIndex:9},{value:"Enter basic information for the inherited template",paraId:20,tocIndex:9},{value:'Click "Submit" to complete creation',paraId:20,tocIndex:9},{value:"Configure the content of the inherited template",paraId:20,tocIndex:9},{value:"Create from an Existing Block",paraId:21,tocIndex:9},{value:"Applicable Scenario:",paraId:22,tocIndex:9},{value:"When the desired block is already configured on the page",paraId:23,tocIndex:9},{value:"When you need to reuse the configuration of an existing block in another context",paraId:23,tocIndex:9},{value:"When you want to quickly create an inherited template without reconfiguring",paraId:23,tocIndex:9},{value:"Steps:",paraId:24,tocIndex:9},{value:"Locate the data block on the page that you wish to save as a template",paraId:25,tocIndex:9},{value:'Select the "Save as inherited template" option',paraId:25,tocIndex:9},{value:"Enter a template name and save",paraId:25,tocIndex:9},{value:"Only data blocks on pages can be saved as inherited templates",paraId:26},{value:"Blocks in pop-up dialogs cannot be directly saved as inherited templates",paraId:26},{value:"Chart blocks are currently not supported for inherited templating",paraId:26},{value:`Select an inherited template, click the "Configure" button to enter the inherited template configuration interface and configure the template's data block.`,paraId:27,tocIndex:10},{value:"Currently, an inherited template supports only one data block. Without a data block configured, the inherited template cannot be used to create a block.",paraId:28},{value:"Chart blocks are not currently supported for inherited templating.",paraId:28},{value:`Select an inherited template and click the "Edit" button to enter the editing interface where you can modify the template's title and description.`,paraId:29,tocIndex:11},{value:`Select an inherited template, click the "Duplicate" button, enter a new template title, and click "Submit" to copy the template.
The copied template can then be edited to suit new requirements.`,paraId:30,tocIndex:12},{value:'Select an inherited template, click the "Delete" button, and then click "Submit" to delete the template.',paraId:31,tocIndex:13},{value:'When deleting, you can choose whether to "Keep the created blocks":',paraId:32,tocIndex:13},{value:"If kept, the blocks created from the template will be converted to regular page blocks once the template is deleted.",paraId:33,tocIndex:13},{value:"If not kept, the blocks created from the template will also be deleted.",paraId:33,tocIndex:13},{value:"When creating a block on a page, select the corresponding inherited template to create the block using that template.",paraId:34,tocIndex:15},{value:"Blocks created from an inherited template differ from regular blocks in the following ways:",paraId:35,tocIndex:15},{value:"The block inherits from the template, allowing you to add your own configurations on top; any unmodified settings remain synchronized with the template.",paraId:36,tocIndex:15},{value:`UI components inherited from the template cannot be removed from the page.
`,paraId:37,tocIndex:15},{value:`Additional fields and actions in the block are highlighted with different background colors for easy distinction.
`,paraId:38,tocIndex:15},{value:`Both the block and the UI components inherited from the inherited template include an option to "Revert to Template", which resets them entirely to match the template.
`,paraId:39,tocIndex:15},{value:"The positioning of UI components within a block is determined by the page layout and will not automatically update to reflect changes in the inherited template. To synchronize component positions with the template, you must revert the entire block to the template.",paraId:40},{value:"Q: How do I create an edit form inherited template?",paraId:41,tocIndex:16},{value:"A: The configuration for an edit form inherited template is the same as that for an add form inherited template. You can create an edit form inherited template by configuring an add form block, and the template will automatically appear in the edit form's inherited template options.",paraId:42,tocIndex:16},{value:"Q: Why do the field positions in the inherited template not sync with the block created from it?",paraId:43,tocIndex:16},{value:'A: The positioning of UI components within a block is determined by the page layout and does not automatically synchronize with changes in the inherited template. If you need to sync them, use the "Revert to Template" function; note that reverting will erase any custom configurations on the block.',paraId:44,tocIndex:16},{value:"Q: How should unused templates be handled?",paraId:45,tocIndex:16},{value:"A: It is recommended to delete unused inherited templates. When deleting a template, you can choose whether or not to keep the blocks created from it. If you choose to keep them, the blocks will be converted to standard page blocks without affecting existing functionality; if not, the blocks created from the template will also be deleted.",paraId:46,tocIndex:16},{value:"Q: Why can't inherited templates be configured for chart blocks?",paraId:47,tocIndex:16},{value:"A: Future versions will support inherited templates for chart blocks.",paraId:48,tocIndex:16},{value:"Q: Why is there no option to save a block from a pop-up as an inherited template?",paraId:49,tocIndex:16},{value:"A: Templates are based on blocks within the page, which operate in an independent context. Blocks in pop-up dialogs depend on blocks outside the current pop-up, so saving blocks from pop-ups as inherited templates is not currently supported.",paraId:50,tocIndex:16}]},867082:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The tree filter block needs to be connected to the data block for use, providing filtering capabilities for the data block.",paraId:0,tocIndex:1},{value:`
  `,paraId:1},{value:"Example: The form filter block connects to the detail data block to achieve linkage.",paraId:2,tocIndex:4},{value:`
    `,paraId:1},{value:`
  `,paraId:1},{value:"For more information, refer to ",paraId:3,tocIndex:4},{value:"Connecting Data Block",paraId:4,tocIndex:4},{value:"Editing Block Title",paraId:5,tocIndex:4},{value:"Save as Block Template",paraId:6,tocIndex:4}]},716411:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},67776:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In NocoBase, calculation engines are integral to formula fields, linkage rules, and workflows, providing users with versatile computational tools.",paraId:0,tocIndex:0},{value:"Formula.js",paraId:1,tocIndex:1},{value:" is a lightweight JavaScript library that replicates many of Microsoft Excel's formula functions.  It enables users to perform complex calculations effortlessly. Key features include:",paraId:1,tocIndex:1},{value:"Extensive Function Library",paraId:2,tocIndex:1},{value:": Offers a wide range of functions for various mathematical operations, including statistical and financial calculations.",paraId:2,tocIndex:1},{value:"User-Friendly API",paraId:2,tocIndex:1},{value:": Designed for ease of use, allowing both developers and non-developers to create formulas without extensive coding.",paraId:2,tocIndex:1},{value:"Real-Time Calculations",paraId:2,tocIndex:1},{value:": Optimized for real-time data processing, making it suitable for applications requiring immediate computational feedback.",paraId:2,tocIndex:1},{value:"Math.js",paraId:3,tocIndex:2},{value:" is a comprehensive mathematics library for JavaScript and Node.js.  It supports a broad spectrum of mathematical operations, from basic arithmetic to advanced algebra, statistics, and linear algebra. Key features include:",paraId:3,tocIndex:2},{value:"Comprehensive Functionality",paraId:4,tocIndex:2},{value:": Provides an extensive array of functions for all types of mathematical operations.",paraId:4,tocIndex:2},{value:"Flexible Expression Parsing",paraId:4,tocIndex:2},{value:": Capable of parsing and evaluating mathematical expressions in string format.",paraId:4,tocIndex:2},{value:"Advanced Calculations",paraId:4,tocIndex:2},{value:": Supports matrix operations, symbolic computation, and statistical analysis, among other advanced mathematical functions.",paraId:4,tocIndex:2},{value:"Extensibility",paraId:4,tocIndex:2},{value:": Can be extended with custom functions and constants to meet specific needs.",paraId:4,tocIndex:2},{value:"By integrating Formula.js and Math.js, NocoBase users can:",paraId:5,tocIndex:3},{value:"Execute a Wide Range of Calculations",paraId:6,tocIndex:3},{value:": From simple arithmetic to complex mathematical operations, enhancing the computational capabilities of their applications.",paraId:6,tocIndex:3},{value:"Develop Robust and Efficient Applications",paraId:6,tocIndex:3},{value:": Build applications that require precise and powerful mathematical computations, ensuring reliability and performance.",paraId:6,tocIndex:3},{value:"Boost Productivity",paraId:6,tocIndex:3},{value:": Utilize pre-built functions to reduce the need for extensive custom code, thereby improving development efficiency.",paraId:6,tocIndex:3},{value:"These libraries are pivotal in NocoBase's no-code platform, enabling users to create flexible and customizable calculation logic without delving into complex coding. This approach simplifies the development process while enhancing the functionality and adaptability of applications.",paraId:7,tocIndex:3}]},649443:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},942133:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A calendar Collection is a specialized data table designed to store dates and date-related information. It is commonly used to manage and track time within applications or systems. The primary goal of the calendar table is to offer flexible and efficient access to date information, allowing for the swift retrieval of relevant data as needed.",paraId:0,tocIndex:1}]},442646:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Calendar Block offers a streamlined way to view and manage events and date-related data in a calendar format, making it perfect for scheduling meetings, planning events, and organizing your time efficiently.",paraId:0,tocIndex:1},{value:"This plugin comes pre-installed, so no additional setup is required.",paraId:1,tocIndex:2},{value:`
      `,paraId:2},{value:"Title Field: Displays key information directly on the calendar bars.",paraId:3,tocIndex:3},{value:"Start Time: Indicates when the task begins.",paraId:3,tocIndex:3},{value:"End Time: Marks when the task ends.",paraId:3,tocIndex:3},{value:"Clicking on a task bar highlights the selection and opens a detailed pop-up window.",paraId:4,tocIndex:3},{value:"Edit Block Title",paraId:5,tocIndex:5},{value:"Save as Block Template",paraId:6,tocIndex:5},{value:"For additional information, see ",paraId:7,tocIndex:6},{value:"Set Data Range",paraId:8,tocIndex:6},{value:".",paraId:7,tocIndex:6},{value:"Example: Adjust the height of the order calendar block. No scrollbar will appear inside the calendar block.",paraId:9,tocIndex:7},{value:"For more information, refer to ",paraId:10,tocIndex:7},{value:"Block Height",paraId:11,tocIndex:7},{value:"The version of NocoBase needs to be v1.4.0-beta or above.",paraId:12},{value:"This option can be used to configure the background color of calendar events. Here's how to use it:",paraId:13},{value:"The calendar data table needs to have a field of type ",paraId:14},{value:"Single select",paraId:14},{value:" or ",paraId:14},{value:"Radio group",paraId:14},{value:", and this field needs to be configured with colors.",paraId:14},{value:"Then, return to the calendar block configuration interface and select the field you just configured with colors in the ",paraId:14},{value:"Background Color Field",paraId:14},{value:".",paraId:14},{value:"Finally, you can try selecting a color for a calendar event and click submit. You'll see that the color has taken effect.",paraId:14},{value:"Supported in version v1.7.7 and above",paraId:15,tocIndex:9},{value:"The calendar block supports setting the start day of the week, allowing you to choose ",paraId:16,tocIndex:9},{value:"Sunday",paraId:16,tocIndex:9},{value:" or ",paraId:16,tocIndex:9},{value:"Monday",paraId:16,tocIndex:9},{value:" as the first day of the week.",paraId:16,tocIndex:9},{value:`
The default start day is `,paraId:16,tocIndex:9},{value:"Monday",paraId:16,tocIndex:9},{value:", making it easier for users to adjust the calendar display according to regional habits for a better user experience.",paraId:16,tocIndex:9},{value:'The "Today" button in the Calendar Block offers quick navigation, enabling users to instantly return to the current date after exploring other dates.',paraId:17,tocIndex:11},{value:"The default view is set to Month.",paraId:18,tocIndex:12}]},381986:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Offers a seamless user interface for interacting with the NocoBase server.",paraId:0,tocIndex:1},{value:"As a built-in plugin, no additional installation is necessary.",paraId:1,tocIndex:2}]},273076:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is one of the core components built into NocoBase, providing the client interface. The client features an AdminLayout design, with the following key elements:",paraId:0,tocIndex:0},{value:"Manage your plugins with options to add, activate, disable, or delete them.",paraId:1,tocIndex:1},{value:"Access the configuration pages for each plugin.",paraId:2,tocIndex:2}]},472183:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Plugin Manager offers a straightforward and intuitive interface for adding plugins, enhancing NocoBase's functionality with a lightweight and user-friendly experience. It allows for seamless expansion and customization of application features, including the installation, upgrade, and uninstallation of plugins.",paraId:0,tocIndex:0},{value:"Key Components of the Plugin Manager:",paraId:1,tocIndex:0},{value:"Local Plugins/Plugin Marketplace",paraId:2,tocIndex:0},{value:": Access and manage plugins available locally or through the marketplace.",paraId:2,tocIndex:0},{value:"Plugin Classification",paraId:2,tocIndex:0},{value:": Organize plugins by categories such as Built-in, Enabled, Disabled, and Problematic. The system supports fuzzy search by plugin name.",paraId:2,tocIndex:0},{value:"Add New Plugin",paraId:2,tocIndex:0},{value:": Easily expand functionality by adding new plugins.",paraId:2,tocIndex:0},{value:"Plugin Configuration Main Body",paraId:2,tocIndex:0},{value:": Centralize your plugin configurations in one place.",paraId:2,tocIndex:0},{value:"A simple click on any plugin allows for a quick view of its documentation, which includes user instructions, compatibility checks for dependencies, and update logs.",paraId:3,tocIndex:1},{value:"With plug-and-play convenience, you can effortlessly add new plugins via the interface. The system supports downloading from the npm registry (private registries are also supported), local uploads, and URL downloads.",paraId:4,tocIndex:2},{value:"Currently, the option to update plugins is available only for those located under storage/plugins, as illustrated below:",paraId:5,tocIndex:6}]},381721:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Management Center offers users a unified platform to manage and configure system information and work-related settings. It allows users to tailor the system, data table modeling, workflow configuration, and plugin settings to meet their specific business needs and personal preferences.",paraId:0,tocIndex:0},{value:"Quick Configuration Items at the Top",paraId:1,tocIndex:1},{value:"List of All Activated Plugin Configurations",paraId:1,tocIndex:1},{value:"Plugin Tabs",paraId:1,tocIndex:1},{value:"Main Content Area",paraId:1,tocIndex:1}]},119671:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},597721:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Add Record",paraId:0},{value:"The custom add data operation empowers users to insert data into any table within the system.",paraId:1,tocIndex:0}]},82558:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom Request",paraId:0},{value:"Configure the URL for custom request operations to cater to specific business needs. For additional information, refer to the custom request plugin documentation.",paraId:1,tocIndex:0}]},331369:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Delete",paraId:0},{value:"The delete operation enables the removal of data records, whether through row buttons or batch operation buttons, and includes a confirmation dialog to ensure intent.",paraId:1,tocIndex:0}]},80362:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Duplicate operation enables users to duplicate a row of data to create new records, offering two methods: ",paraId:0,tocIndex:0},{value:"direct duplicate",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"copy into the form and continue to fill in",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"By default, the data is copied directly.",paraId:1,tocIndex:1},{value:"Target Data Table: This is the table where the copied data will be added. In cases involving inheritance, it can be copied to a sub-table; however, direct Duplicate only adds data to the current table.",paraId:1,tocIndex:1},{value:"Template Fields: These specify the fields to be copied, allowing for full selection. This configuration is mandatory.",paraId:1,tocIndex:1},{value:"Once the configuration is complete, simply click the button to duplicate the data.",paraId:2,tocIndex:1},{value:"The template fields you configure will populate the form with default values, which can be modified before submission.",paraId:3,tocIndex:2},{value:"You can choose either the current table or a sub-table as the target table for adding the copied data.",paraId:4,tocIndex:2},{value:"Configure Template Fields: Template fields will serve as default values in the form, only including the values of selected fields.",paraId:5,tocIndex:2},{value:'The "Waybill" (o2m) relationship is duplicated. Adjust its field component to a sub-form, where you can configure the sub-form fields.',paraId:6,tocIndex:2},{value:"Sync Form Fields: After configuring the form, click the sync form fields button. This will automatically select all configured fields within the form (note: each time the form field configuration is modified, it must be manually synced again). After syncing, you can further customize the template fields.",paraId:7,tocIndex:2},{value:"Clicking the Duplicate button will open a pop-up window, where the template data will populate the form with default values. You can then modify the data before submission to complete the copy process.",paraId:8,tocIndex:2},{value:"The complete example below demonstrates how to configure the duplicate operation within an order list.",paraId:9,tocIndex:2},{value:"Different fields (with different relationship types) follow distinct processing logics, such as duplicate, reference, and preload. Adjusting field components within relationship fields also influences the processing logic. For example, Select and Record Picker handle reference relationships, while Sub-form and Sub-table manage copy relationships.",paraId:10,tocIndex:3},{value:"Duplicate",paraId:11,tocIndex:3},{value:"Standard fields are duplicated.",paraId:12,tocIndex:3},{value:`The relationship fields of hasOne and hasMany can only be copied (i.e., these types of relationship fields cannot use Select or Record Picker as field components; instead, Sub-form or Sub-table should be used).
`,paraId:12,tocIndex:3},{value:"Changes to the field components of hasOne and hasMany do not alter the processing logic (copy).",paraId:13,tocIndex:3},{value:"In copied relationship fields, all child fields are selectable.",paraId:13,tocIndex:3},{value:"Reference",paraId:14,tocIndex:3},{value:"belongsTo and belongsToMany are references.",paraId:15,tocIndex:3},{value:"References can be converted into copies. For instance, if the field component is changed from select to sub-form, the relationship transitions from reference to copy (after conversion, all child fields become selectable).",paraId:15,tocIndex:3},{value:"Preload: Relationship fields within referenced fields",paraId:16,tocIndex:3},{value:"These relationship fields are preloaded.",paraId:17,tocIndex:3},{value:"Preloaded relationship fields may shift to reference or copy following adjustments to the field components.",paraId:17,tocIndex:3},{value:"All copy fields are selected.",paraId:18,tocIndex:4},{value:"All reference fields are selected.",paraId:18,tocIndex:4},{value:"All foreign key fields in relationships are filtered out.",paraId:19,tocIndex:5},{value:"For copied relationships, primary key fields are also filtered out.",paraId:19,tocIndex:5},{value:"References and preloads retain their primary key fields.",paraId:19,tocIndex:5},{value:"In most cases, form configurations involve a large number of fields. Managing such complex forms manually can be cumbersome. To streamline this process, the sync form fields button has been introduced. This feature automatically analyzes the form field configurations and applies the appropriate copy logic\u2014whether copy, reference, or preload\u2014based on the field types and relationship field components. Fields that have already been configured are selected by default.",paraId:20,tocIndex:6},{value:"After any modifications to the form field configurations, the system does not automatically update these changes. Therefore, users need to manually click the sync form fields button to apply the latest configuration to the template settings.",paraId:21,tocIndex:6}]},616565:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Edit",paraId:0},{value:"The edit operation allows for data modification, typically achieved by configuring the relevant form block.",paraId:1,tocIndex:0}]},663185:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The export operation is facilitated through plugin extensions, allowing you to batch export all data from the tables associated with a block. This feature also supports configuring the titles of the export fields.",paraId:0,tocIndex:0},{value:"Configuring Exportable Fields",paraId:1,tocIndex:0}]},74389:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The filtering operation typically appears within data blocks, enabling the configuration of various conditions to filter data. It is important to note that if a block already has a data range configured, the filtering operation will merge with the data range conditions to create the final filter criteria.",paraId:0,tocIndex:0},{value:"Supports configuring which fields can be filtered.",paraId:1,tocIndex:0},{value:"As shown below, a filter operation is set up for the waybill list, where data is filtered by adjusting the condition configurations.",paraId:2,tocIndex:0}]},499871:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Import",paraId:0},{value:"The import operation is facilitated through plugin extensions, currently allowing batch data import via ",paraId:1,tocIndex:0},{value:".xlsx",paraId:1,tocIndex:0},{value:" files.",paraId:1,tocIndex:0},{value:"Set up the fields available for import.",paraId:2,tocIndex:0},{value:"Download the import template, populate it with data, and then proceed with the import.",paraId:3,tocIndex:0},{value:"For further details, consult the import documentation.",paraId:4,tocIndex:0},{value:"https://github.com/nocobase/nocobase/tree/main/packages/plugins/%40nocobase/plugin-import#%E5%AF%BC%E5%85%A5%E8%AF%B4%E6%98%8E",paraId:5,tocIndex:0}]},698088:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the UI, actions are buttons designed to trigger specific commands. These buttons can be placed directly on the page, within dialogs or drawers, and can also be used in combination with blocks. Currently, dynamic configurations of actions are primarily used in combination with blocks.",paraId:0,tocIndex:0},{value:"Unlike blocks and fields, the action designer only features two icons:",paraId:1,tocIndex:2},{value:"Drag",paraId:2,tocIndex:2},{value:"Parameter Configuration",paraId:2,tocIndex:2},{value:'By holding down the "Drag" icon in the button designer, you can reorder the buttons.',paraId:3,tocIndex:3},{value:`A gif is missing
`,paraId:4,tocIndex:3},{value:"Edit Button",paraId:5,tocIndex:4},{value:"Open Mode: Drawer, Dialog",paraId:5,tocIndex:4},{value:"Popup Size: Large, Medium, Small",paraId:5,tocIndex:4},{value:"Delete",paraId:5,tocIndex:4},{value:'Actions with contextual data can also be configured with "Linkage Rules."',paraId:6,tocIndex:5},{value:"Linkage Rules Configuration",paraId:7,tocIndex:5},{value:"Multiple rules can be added, with conditions similar to those used in filtering. These rules can control whether buttons are displayed, hidden, enabled, or disabled.",paraId:8,tocIndex:5}]},746097:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Open popup operation presents data in a popup window, allowing you to customize detail blocks or form blocks. This feature is suitable for various scenarios. For example, when a data table has many fields, these fields can be divided into different operation blocks, allowing you to focus on viewing or modifying specific fields. You can create multiple customized data display or editing interfaces based on business needs.",paraId:0,tocIndex:0},{value:"As illustrated, the order table is configured with three Open popup operations: View Main Order (Order Main Information), View Products (Product Information associated with the Order), and View Customer (Customer Information associated with the Order).",paraId:1,tocIndex:0}]},418605:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},87435:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refresh",paraId:0},{value:"The refresh operation is designed to reload data within a data block, providing support for manual refresh.",paraId:1,tocIndex:0}]},960121:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom Save Record operations are unique to form blocks, supporting the customization of the operation's behavior:",paraId:0,tocIndex:0},{value:"Edit Button",paraId:1,tocIndex:0},{value:"Assign Field Values: Upon clicking the custom button, the current data field assignments are saved.",paraId:1,tocIndex:0},{value:"Skip Required Validation",paraId:1,tocIndex:0},{value:"After successful submission",paraId:1,tocIndex:0},{value:"Bind Workflow",paraId:2,tocIndex:0}]},999965:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Submit to Workflow operation is implemented via plugin extensions.",paraId:0,tocIndex:0},{value:"Addition and update forms support the configuration and triggering of submission to workflows.",paraId:1,tocIndex:0},{value:"Multiple workflows can be triggered with one button click, each selecting a different workflow and data context (data is not restricted, and users are responsible for ensuring this).",paraId:1,tocIndex:0},{value:'Form button triggers only support the new workflow type "Form Event."',paraId:1,tocIndex:0},{value:"For more details, refer to the Plugin Documentation.",paraId:2,tocIndex:0}]},332904:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Submit operation is used to save form data (specific to form blocks).",paraId:0,tocIndex:0},{value:"Save Method: Only supports configuring save methods in ",paraId:1,tocIndex:1},{value:"new",paraId:1,tocIndex:1},{value:" operations for form blocks.",paraId:1,tocIndex:1},{value:"Bind Workflow: Supports binding with workflows, automatically triggering workflows after submission. By defining trigger data contexts, advanced automation tasks can be achieved, improving data processing efficiency and business process control.",paraId:2,tocIndex:1},{value:"For more details, refer to the Workflow Documentation.",paraId:3,tocIndex:1}]},716505:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom row operations update record by configuring field assignments to specify the content to be modified.",paraId:0,tocIndex:0},{value:"As shown in the illustration, an update data operation is configured in the waybill table block to confirm delivery.",paraId:1,tocIndex:0}]},310354:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Detail operations are used to view detailed information about data, usually by configuring detail blocks.",paraId:0,tocIndex:0}]},153452:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A block serves as the content container, designed to be placed within a page, modal, or drawer. These blocks can be easily rearranged through drag-and-drop functionality, allowing for flexible layout customization.",paraId:0,tocIndex:0},{value:"Blocks can be seamlessly integrated into a page, a modal, or a drawer, depending on the desired application.",paraId:1,tocIndex:1},{value:"Within pages, you can choose from various block types, including Data Blocks, Filter Blocks, and Other Blocks, each serving distinct purposes.",paraId:2,tocIndex:2},{value:"Modals, which include dialogs and drawers, also support block integration. While similar to pages, the blocks within modals are typically used for operations related to single records, such as adding, editing, or viewing data. Available block types include Current Data Blocks, Relationship Blocks, and Other Blocks.",paraId:3,tocIndex:3},{value:"Each block features three icons in the upper right corner, offering easy access to essential tools:",paraId:4,tocIndex:6},{value:"Drag-and-Drop Layout",paraId:5,tocIndex:6},{value:"Quick Add Block",paraId:5,tocIndex:6},{value:"Block Parameter Configuration",paraId:5,tocIndex:6},{value:'For simple blocks, all configuration options are centralized under "Block Parameter Configuration," such as in Markdown blocks.',paraId:6,tocIndex:6},{value:'More complex blocks, especially those dealing with data, provide additional embedded options like "Configure Field" and "Configure Action," offering greater flexibility.',paraId:7,tocIndex:6},{value:"Moreover, you can explore advanced nesting possibilities, as demonstrated by the Chart Block.",paraId:8,tocIndex:6},{value:"To customize the layout, simply drag and drop blocks into your preferred arrangement.",paraId:9,tocIndex:7},{value:"You can save any data-type block as a template, which allows for quick duplication or referencing in future projects. For example, a form used for both adding and editing data can be saved as a template, streamlining your workflow by reusing it in different contexts.",paraId:10,tocIndex:8},{value:"Save a data block as a block template (note: only data-type blocks have this feature).",paraId:11,tocIndex:9},{value:"When adding a block, select either the duplicate or reference option for the template.",paraId:12,tocIndex:9},{value:"Duplicate template a new block based on the template, with no link to the original template\u2014any changes to the block will not affect the template. Referencing, however, directly links to the template, meaning any changes to the block will alter the template, and all instances where the template is referenced will be updated accordingly.",paraId:13,tocIndex:10},{value:"NocoBase categorizes blocks into four primary types:",paraId:14,tocIndex:11},{value:"Data Blocks:",paraId:15,tocIndex:11},{value:" Used to display Collection data within the block.",paraId:15,tocIndex:11},{value:"Filter Blocks:",paraId:15,tocIndex:11},{value:" These can be added to pages and are specifically designed for filtering data within Data Blocks.",paraId:15,tocIndex:11},{value:"Relationship Blocks:",paraId:15,tocIndex:11},{value:" These are added to modals and are used for CRUD operations on data related to the current record.",paraId:15,tocIndex:11},{value:"Other Blocks:",paraId:15,tocIndex:11},{value:" These include standalone blocks like Markdown, Audit Log blocks, Workflow To-Do blocks, etc.",paraId:15,tocIndex:11}]},293010:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the UI, fields are field components that carry unit data, with different types of data presented by different field components. Fields can only be attached to blocks and cannot be used independently.",paraId:0,tocIndex:0},{value:'Fields are generally not used alone but exist as sub-elements of data-type blocks. Data-type blocks typically have a "configure fields" option, and the field list is provided by the current data table.',paraId:1,tocIndex:1},{value:"Like blocks, field components also have three icons in the upper right corner:",paraId:2,tocIndex:2},{value:"Drag to layout",paraId:3,tocIndex:2},{value:"Quick add field",paraId:3,tocIndex:2},{value:"Configure field parameters",paraId:3,tocIndex:2},{value:"The layout of fields within a block can be customized by dragging to move them.",paraId:4,tocIndex:3},{value:"Edit field title",paraId:5,tocIndex:4},{value:"Display title",paraId:5,tocIndex:4},{value:"Edit description",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"Validation rules",paraId:5,tocIndex:4},{value:"Set Default value",paraId:5,tocIndex:4},{value:"Pattern",paraId:5,tocIndex:4},{value:"Important Parameter Configuration:",paraId:6,tocIndex:4},{value:"(to be added)",paraId:7,tocIndex:5},{value:"(to be added)",paraId:8,tocIndex:6},{value:"Unlike blocks, field components have three display modes:",paraId:9,tocIndex:7},{value:"Editable",paraId:10,tocIndex:7},{value:"Readonly (non-editable)",paraId:10,tocIndex:7},{value:"Easy-reading (read mode)",paraId:10,tocIndex:7},{value:"The fields in a block are provided by the data table. For more field type configurations, refer to ",paraId:11,tocIndex:8},{value:"Data Table Field Types",paraId:11,tocIndex:8},{value:".",paraId:11,tocIndex:8}]},312370:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When the interface configuration button is activated, it enters the UI configuration state.",paraId:0,tocIndex:0},{value:"Menu",paraId:1,tocIndex:1},{value:"Page",paraId:1,tocIndex:1},{value:"Block",paraId:1,tocIndex:1},{value:"Blocks without fields or operations",paraId:2,tocIndex:1},{value:"Blocks with fields and operations",paraId:2,tocIndex:1},{value:"Fields (attached to blocks)",paraId:3,tocIndex:1},{value:"Operations (attached to blocks)",paraId:3,tocIndex:1}]},774349:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"There are three built-in menu item types:",paraId:0,tocIndex:1},{value:"Group",paraId:1,tocIndex:1},{value:"Page",paraId:1,tocIndex:1},{value:"Link",paraId:1,tocIndex:1},{value:"When using a group, a submenu will appear on the left side.",paraId:2,tocIndex:2},{value:"A page can be used to add various blocks.",paraId:3,tocIndex:3},{value:"Used for URL redirection.",paraId:4,tocIndex:4},{value:"In the upper right corner of each menu item, there are two icons:",paraId:5,tocIndex:5},{value:"Drag to move",paraId:6,tocIndex:5},{value:"Configure menu item",paraId:6,tocIndex:5},{value:"Edit:",paraId:7,tocIndex:6},{value:" Modify the menu item title, icon, etc.",paraId:7,tocIndex:6},{value:"Move to:",paraId:7,tocIndex:6},{value:' Besides dragging to move, you can also use the "Move to" option to quickly relocate the menu item.',paraId:7,tocIndex:6},{value:"Insert before",paraId:7,tocIndex:6},{value:"Insert after",paraId:7,tocIndex:6},{value:"Insert inside",paraId:7,tocIndex:6},{value:" (only for group type)",paraId:7,tocIndex:6},{value:"Delete",paraId:7,tocIndex:6}]},562759:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Page Designer",paraId:0,tocIndex:1},{value:"Page Title",paraId:0,tocIndex:1},{value:"Page Tabs (Subpages)",paraId:0,tocIndex:1},{value:"Page Body (Hosts blocks)",paraId:0,tocIndex:1},{value:"Enable page header:",paraId:1,tocIndex:2},{value:" Controls whether the header is displayed.",paraId:1,tocIndex:2},{value:"Display page title:",paraId:1,tocIndex:2},{value:" Controls whether the page title is displayed in the header.",paraId:1,tocIndex:2},{value:"Edit page title:",paraId:1,tocIndex:2},{value:" The default page title is the menu item title, but you can customize it.",paraId:1,tocIndex:2},{value:"Enable page tabs:",paraId:1,tocIndex:2},{value:" Tabs refer to the subpages of the page.",paraId:1,tocIndex:2},{value:"After enabling page tabs, you can add subpages within the page.",paraId:2,tocIndex:3},{value:"Multiple blocks can be arranged by dragging to adjust the layout.",paraId:3,tocIndex:4}]},744434:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Before utilizing dynamic expression operation nodes within a workflow, it's essential to first create an \u201CExpression\u201D template table using the data table management tool. This table serves as a repository for various expressions:",paraId:0,tocIndex:1},{value:"Following this, you can set up a table block and input several formula entries into the template table. Each row in the \u201CExpression\u201D template table can be viewed as a calculation rule designed for a specific data model within the table. You can utilize different fields from the data models of various tables as variables, crafting unique expressions as calculation rules. Moreover, you can leverage different calculation engines as needed.",paraId:1,tocIndex:2},{value:"Once the formulas are established, they need to be linked to the business data. Directly associating each row of business data with formula data can be tedious, so a common approach is to use a metadata table, similar to a classification table, to create a many-to-one (or one-to-one) relationship with the formula table. Then, the business data is associated with the classified metadata in a many-to-one relationship. This approach allows you to simply specify the relevant classified metadata when creating business data, making it easy to locate and utilize the corresponding formula data through the established association path.",paraId:2},{value:"As an example, consider creating a workflow triggered by a data table event. When an order is created, the trigger should preload the associated product data along with the product-related expression data:",paraId:3,tocIndex:3}]},761269:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The MySQL database does not enable the federated module by default. You need to modify the my.cnf configuration. If you are using the Docker version, you can handle the extension situation through volumes:",paraId:0,tocIndex:0},{value:`mysql:
  image: mysql:8.1.0
  volumes:
    - ./storage/mysql-conf:/etc/mysql/conf.d
  environment:
    MYSQL_DATABASE: nocobase
    MYSQL_USER: nocobase
    MYSQL_PASSWORD: nocobase
    MYSQL_ROOT_PASSWORD: nocobase
  restart: always
  networks:
    - nocobase
`,paraId:1,tocIndex:0},{value:"Create a new ",paraId:2,tocIndex:0},{value:"./storage/mysql-conf/federated.cnf",paraId:2,tocIndex:0},{value:" file",paraId:2,tocIndex:0},{value:`[mysqld]
federated
`,paraId:3,tocIndex:0},{value:"Restart MySQL",paraId:4,tocIndex:0},{value:`docker compose up -d mysql
`,paraId:5,tocIndex:0},{value:"Check if federated is activated",paraId:6,tocIndex:0},{value:`show engines
`,paraId:7,tocIndex:0}]},601235:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This is a plugin that connects to remote data tables based on the foreign data wrapper of the database. Currently, it supports MySQL and PostgreSQL databases.",paraId:0,tocIndex:1},{value:"Connecting data sources",paraId:1},{value:" refers to establishing a connection with a specific database or API service, and you can fully use the features of the database or the services provided by the API;",paraId:1},{value:"Connecting external data tables",paraId:1},{value:" refers to obtaining data from the outside and mapping it for local use. In the database, it is called FDW (Foreign Data Wrapper), which is a database technology that focuses on using remote tables as local tables and can only connect one by one. Because it is remote access, there will be various constraints and limitations when using it.",paraId:1},{value:"The two can also be used in combination. The former is used to establish a connection with the data source, and the latter is used for cross data-source access. For example, a certain PostgreSQL data source is connected, and a certain table in this data source is an external data table created based on FDW.",paraId:2},{value:"MySQL uses the ",paraId:3,tocIndex:2},{value:"federated",paraId:3,tocIndex:2},{value:" engine, which needs to be activated, and supports connecting to remote MySQL and protocol-compatible databases, such as MariaDB. For more details, refer to the ",paraId:3,tocIndex:2},{value:"Federated Storage Engine",paraId:3,tocIndex:2},{value:" documentation.",paraId:3,tocIndex:2},{value:"In PostgreSQL, different types of ",paraId:4,tocIndex:3},{value:"fdw",paraId:4,tocIndex:3},{value:" extensions can be used to support different types of remote data. The currently supported extensions include:",paraId:4,tocIndex:3},{value:"postgres_fdw",paraId:5,tocIndex:3},{value:": Connect to a remote PostgreSQL database in PostgreSQL.",paraId:5,tocIndex:3},{value:"mysql_fdw(under development)",paraId:5,tocIndex:3},{value:": Connect to a remote MySQL database in PostgreSQL.",paraId:5,tocIndex:3},{value:"For other types of fdw extensions, refer to ",paraId:5,tocIndex:3},{value:"PostgreSQL Foreign Data Wrappers",paraId:5,tocIndex:3},{value:". You need to implement the corresponding adaptation interface in the code.",paraId:5,tocIndex:3},{value:"Prerequisites",paraId:6,tocIndex:4},{value:"If the Main database of NocoBase is MySQL, it needs to activate ",paraId:7,tocIndex:4},{value:"federated",paraId:7,tocIndex:4},{value:". Refer to ",paraId:7,tocIndex:4},{value:"How to enable the federated engine in MySQL",paraId:8,tocIndex:4},{value:"Then install and activate the plugin through the plugin manager",paraId:9,tocIndex:4},{value:'Under "Collection manager > Create collection", select "Connect to foreign data"',paraId:10,tocIndex:5},{value:'In the "Database Server" dropdown, select an existing database service, or "Create Database Server"',paraId:11,tocIndex:5},{value:"Create a database server",paraId:12,tocIndex:5},{value:'After selecting the database server, in the "Remote table" dropdown, select the data table you need to connect.',paraId:13,tocIndex:5},{value:"Configure field information",paraId:14,tocIndex:5},{value:'If the remote table has structural changes, you can also "Sync from remote table"',paraId:15,tocIndex:5},{value:"Remote table sync",paraId:16,tocIndex:5},{value:"Finally, display it on the interface",paraId:17,tocIndex:5}]},900125:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The SQL collection provides a powerful method for retrieving data using SQL queries. By extracting data fields through SQL queries and configuring the associated field metadata, users can utilize these fields as though they were working with a standard table. This feature is particularly beneficial for scenarios involving complex join queries, statistical analysis, and more.",paraId:0,tocIndex:1},{value:"Enter your SQL query in the provided input box and click Execute. The system will analyze the query to determine the tables and fields involved, automatically extracting the relevant field metadata from the source tables.",paraId:1,tocIndex:3},{value:"If the system's analysis of the source tables and fields is incorrect, you can manually select the appropriate tables and fields to ensure the correct metadata is used. Start by selecting the source table, then choose the corresponding fields in the field source section below.",paraId:2,tocIndex:3},{value:"For fields that do not have a direct source, the system will infer the field type based on the data type. If this inference is incorrect, you can manually select the proper field type.",paraId:3,tocIndex:3},{value:"As you configure each field, you can preview its display in the preview area, allowing you to see the immediate impact of your settings.",paraId:4,tocIndex:3},{value:"After you have completed the configuration and confirmed that everything is correct, click the Confirm button below the SQL input box to finalize the submission.",paraId:5,tocIndex:3},{value:"If you need to modify the SQL query, click the Edit button to directly alter the SQL statement and reconfigure the fields as needed.",paraId:6,tocIndex:4},{value:"To adjust the field metadata, use the Configure Fields option, which allows you to update the field settings just as you would for a regular table.",paraId:7,tocIndex:4},{value:"If the SQL query remains unchanged but the underlying database table structure has been modified, you can synchronize and reconfigure the fields by selecting Configure Fields - Sync from Database.",paraId:8,tocIndex:5},{value:"Template Type",paraId:9,tocIndex:6},{value:"Best Suited For",paraId:9,tocIndex:6},{value:"Implementation Method",paraId:9,tocIndex:6},{value:"Support for CRUD Operations",paraId:9,tocIndex:6},{value:"SQL",paraId:9,tocIndex:6},{value:"Simple models, lightweight use cases",paraId:9,tocIndex:6},{value:"Limited interaction with the database",paraId:9,tocIndex:6},{value:"Avoiding maintenance of views",paraId:9,tocIndex:6},{value:"Prefer UI-driven operations",paraId:9,tocIndex:6},{value:"SQL subquery",paraId:9,tocIndex:6},{value:"Not Supported",paraId:9,tocIndex:6},{value:"Connect to database view",paraId:9,tocIndex:6},{value:"Complex models",paraId:9,tocIndex:6},{value:"Requires database interaction",paraId:9,tocIndex:6},{value:"Data modification needed",paraId:9,tocIndex:6},{value:"Requires stronger and more stable database support",paraId:9,tocIndex:6},{value:"Database view",paraId:9,tocIndex:6},{value:"Partially Supported",paraId:9,tocIndex:6},{value:"When using SQL collection, be sure to select tables that are manageable within NocoBase. Using tables from the same database that are not connected to NocoBase may lead to inaccurate SQL query parsing. If this is a concern, consider creating and linking to a view.",paraId:10}]},197455:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A tree structure collection is a data collection design pattern used for organizing hierarchical data. This collection structure mirrors a tree, where each data item may have one or more child items, and those child items can, in turn, have their own descendants.",paraId:0,tocIndex:1}]},152968:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},409316:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The default brand name is "NocoBase", which is primarily displayed in the following three places as shown in the images:',paraId:0,tocIndex:1},{value:"On the bottom of the login page:",paraId:1,tocIndex:1},{value:"The logo at position number 1 can be configured via the system settings under the Logo option. Positions number 2 and 3 can be customized using this plugin.",paraId:2,tocIndex:1},{value:"After activating the plugin, you can access the configuration page by clicking on the 'Custom Brand' menu in the upper right corner of the page.",paraId:3,tocIndex:2},{value:"The ",paraId:4,tocIndex:2},{value:"Brand",paraId:4,tocIndex:2},{value:" option is used to set the text at the bottom of the login page (position number 3), while the ",paraId:4,tocIndex:2},{value:"About",paraId:4,tocIndex:2},{value:" option is used to configure the content of the menu in the upper right corner (as shown in the image below).",paraId:4,tocIndex:2},{value:"HTML is used for the configuration to allow users more flexibility in customizing their content. However, if you only need to make simple text changes, you can directly modify the existing content, as shown in the image below:",paraId:5,tocIndex:2},{value:"v1.2.23-alpha+",paraId:6,tocIndex:2},{value:"In v1.2.23-alpha, we added the ability to set a favicon as shown below:",paraId:7,tocIndex:3}]},98152:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.8.0+",paraId:0},{value:"\u81EA\u5B9A\u4E49\u53D8\u91CF\u63D2\u4EF6\u662F NocoBase \u7684\u4E00\u4E2A\u5546\u4E1A\u63D2\u4EF6\uFF0C\u5B83\u4E3A\u5E94\u7528\u63D0\u4F9B\u4E86",paraId:1,tocIndex:1},{value:"\u81EA\u5B9A\u4E49\u53D8\u91CF\u7BA1\u7406\u7CFB\u7EDF",paraId:1,tocIndex:1},{value:"\u3002\u5728\u5F53\u524D\u7248\u672C\u4E2D\uFF0C\u4E3B\u8981\u652F\u6301",paraId:1,tocIndex:1},{value:"\u805A\u5408\u53D8\u91CF",paraId:1,tocIndex:1},{value:"\u529F\u80FD\uFF0C\u5141\u8BB8\u60A8\u521B\u5EFA\u6570\u636E\u7EDF\u8BA1\u53D8\u91CF\uFF0C\u5982\u8BA1\u6570\u3001\u6C42\u548C\u3001\u5E73\u5747\u503C\u7B49\u3002\u8FD9\u4E9B\u53D8\u91CF\u53EF\u4EE5\u7528\u5728\u83DC\u5355\u5FBD\u7AE0\u3001\u9875\u9762\u6807\u7B7E\u7B49\u5730\u65B9\uFF0C\u8BA9\u60A8\u7684\u5E94\u7528\u754C\u9762\u66F4\u52A0\u76F4\u89C2\u548C\u4FE1\u606F\u4E30\u5BCC\u3002",paraId:1,tocIndex:1},{value:"\u6CE8\u610F",paraId:2,tocIndex:1},{value:"\uFF1A\u672A\u6765\u7248\u672C\u5C06\u652F\u6301\u66F4\u591A\u7C7B\u578B\u7684\u81EA\u5B9A\u4E49\u53D8\u91CF\u3002",paraId:2,tocIndex:1},{value:"\u{1F3D7}\uFE0F ",paraId:3,tocIndex:2},{value:"\u81EA\u5B9A\u4E49\u53D8\u91CF\u7CFB\u7EDF",paraId:3,tocIndex:2},{value:"\uFF1A\u63D0\u4F9B\u53D8\u91CF\u6DFB\u52A0\u3001\u7BA1\u7406\u548C\u4F7F\u7528\u7684\u5B8C\u6574\u6846\u67B6",paraId:3,tocIndex:2},{value:"\u{1F4CA} ",paraId:3,tocIndex:2},{value:"\u805A\u5408\u53D8\u91CF",paraId:3,tocIndex:2},{value:"\uFF1A\u652F\u6301\u8BA1\u6570\uFF08COUNT\uFF09\u3001\u6C42\u548C\uFF08SUM\uFF09\u3001\u5E73\u5747\u503C\uFF08AVG\uFF09\u3001\u6700\u5C0F\u503C\uFF08MIN\uFF09\u3001\u6700\u5927\u503C\uFF08MAX\uFF09",paraId:3,tocIndex:2},{value:"\u{1F3F7}\uFE0F ",paraId:3,tocIndex:2},{value:"\u5FBD\u7AE0\u663E\u793A",paraId:3,tocIndex:2},{value:"\uFF1A\u5728\u83DC\u5355\u9879\u548C\u9875\u9762\u6807\u7B7E\u4E0A\u663E\u793A\u52A8\u6001\u6570\u636E",paraId:3,tocIndex:2},{value:"\u{1F3AF} ",paraId:3,tocIndex:2},{value:"\u4F5C\u7528\u57DF\u7BA1\u7406",paraId:3,tocIndex:2},{value:"\uFF1A\u53D8\u91CF\u53EA\u5728\u7279\u5B9A\u7684\u754C\u9762\u533A\u57DF\u751F\u6548",paraId:3,tocIndex:2},{value:"\u{1F527} ",paraId:3,tocIndex:2},{value:"\u7075\u6D3B\u914D\u7F6E",paraId:3,tocIndex:2},{value:"\uFF1A\u652F\u6301\u81EA\u5B9A\u4E49\u8FC7\u6EE4\u6761\u4EF6\u548C\u663E\u793A\u683C\u5F0F",paraId:3,tocIndex:2},{value:"\u{1F680} ",paraId:3,tocIndex:2},{value:"\u53EF\u6269\u5C55\u6027",paraId:3,tocIndex:2},{value:"\uFF1A\u9884\u7559\u63A5\u53E3\u652F\u6301\u672A\u6765\u6DFB\u52A0\u5176\u4ED6\u7C7B\u578B\u7684\u53D8\u91CF",paraId:3,tocIndex:2},{value:"NocoBase \u7248\u672C v1.8.0+",paraId:4,tocIndex:4},{value:"\u8D2D\u4E70",paraId:5,tocIndex:5},{value:" NocoBase \u5546\u4E1A\u6388\u6743",paraId:5,tocIndex:5},{value:"\u5B89\u88C5",paraId:5,tocIndex:5},{value:"\u63D2\u4EF6",paraId:5,tocIndex:5},{value:'\u5728\u63D2\u4EF6\u7BA1\u7406\u5668\u4E2D\u627E\u5230"\u81EA\u5B9A\u4E49\u53D8\u91CF"\u63D2\u4EF6',paraId:5,tocIndex:5},{value:'\u70B9\u51FB"\u542F\u7528"\u6309\u94AE',paraId:5,tocIndex:5},{value:"\u7B49\u5F85\u9875\u9762\u5237\u65B0",paraId:5,tocIndex:5},{value:'\u5047\u8BBE\u60A8\u6709\u4E00\u4E2A"\u8BA2\u5355"\u6570\u636E\u8868\uFF0C\u60F3\u8981\u5728\u83DC\u5355\u4E0A\u663E\u793A\u4ECA\u5929\u7684\u8BA2\u5355\u6570\u91CF\u3002',paraId:6,tocIndex:8},{value:"\u8FDB\u5165\u53D8\u91CF\u521B\u5EFA\u754C\u9762",paraId:7,tocIndex:9},{value:"\u5728\u9700\u8981\u663E\u793A\u7EDF\u8BA1\u4FE1\u606F\u7684\u83DC\u5355\u9879",paraId:8,tocIndex:9},{value:"\u6253\u5F00\u914D\u7F6E\u9879\u5217\u8868",paraId:8,tocIndex:9},{value:'\u9009\u62E9"\u7F16\u8F91\u5FBD\u7AE0"\u9009\u9879',paraId:8,tocIndex:9},{value:"\u6DFB\u52A0\u65B0\u53D8\u91CF",paraId:9,tocIndex:9},{value:'\u5728\u5FBD\u7AE0\u7F16\u8F91\u5BF9\u8BDD\u6846\u4E2D\uFF0C\u70B9\u51FB"\u6DFB\u52A0\u53D8\u91CF"\u6309\u94AE',paraId:10,tocIndex:9},{value:'\u9009\u62E9"\u805A\u5408\u53D8\u91CF"\u7C7B\u578B',paraId:10,tocIndex:9},{value:"\uFF08\u5F53\u524D\u7248\u672C\u652F\u6301\u7684\u53D8\u91CF\u7C7B\u578B\uFF09",paraId:10,tocIndex:9},{value:"\u914D\u7F6E\u805A\u5408\u53D8\u91CF\u8BBE\u7F6E",paraId:11,tocIndex:9},{value:"\u53D8\u91CF\u540D\u79F0",paraId:12,tocIndex:9},{value:'\uFF1A\u8F93\u5165\u4E00\u4E2A\u63CF\u8FF0\u6027\u7684\u540D\u79F0\uFF0C\u5982"\u4ECA\u65E5\u8BA2\u5355\u6570"',paraId:12,tocIndex:9},{value:"\u6570\u636E\u8868",paraId:12,tocIndex:9},{value:'\uFF1A\u9009\u62E9"\u8BA2\u5355"\u6570\u636E\u8868',paraId:12,tocIndex:9},{value:"\u805A\u5408\u65B9\u5F0F",paraId:12,tocIndex:9},{value:'\uFF1A\u9009\u62E9"\u8BA1\u6570\uFF08COUNT\uFF09"',paraId:12,tocIndex:9},{value:"\u805A\u5408\u5B57\u6BB5",paraId:12,tocIndex:9},{value:"\uFF1A\u9009\u62E9\u8981\u7EDF\u8BA1\u7684\u5B57\u6BB5\uFF08\u6700\u597D\u9009\u62E9\u5177\u6709\u552F\u4E00\u6027\u7684\u5B57\u6BB5\uFF0C\u6BD4\u5982 ID\uFF09",paraId:12,tocIndex:9},{value:"\u8BBE\u7F6E\u8FC7\u6EE4\u6761\u4EF6",paraId:13,tocIndex:9},{value:"\uFF08\u53EF\u9009\uFF09",paraId:13,tocIndex:9},{value:'\u70B9\u51FB"\u8FC7\u6EE4\u6761\u4EF6"\u533A\u57DF',paraId:14,tocIndex:9},{value:"\u6DFB\u52A0\u65F6\u95F4\u8303\u56F4\u8FC7\u6EE4\uFF1A\u521B\u5EFA\u65F6\u95F4 = \u4ECA\u5929",paraId:14,tocIndex:9},{value:"\u6216\u5176\u4ED6\u9700\u8981\u7684\u6761\u4EF6",paraId:14,tocIndex:9},{value:"\u4FDD\u5B58\u53D8\u91CF",paraId:15,tocIndex:9},{value:'\u70B9\u51FB"\u786E\u5B9A"\u4FDD\u5B58\u53D8\u91CF\u8BBE\u7F6E',paraId:16,tocIndex:9},{value:"\u914D\u7F6E\u5FBD\u7AE0\u663E\u793A",paraId:17,tocIndex:9},{value:'\u5728"\u5FBD\u7AE0"\u8F93\u5165\u6846\u4E2D\u8F93\u5165\uFF1A',paraId:18,tocIndex:9},{value:"{{$customVariables.\u4ECA\u65E5\u8BA2\u5355\u6570}}",paraId:18,tocIndex:9},{value:"\u53EF\u4EE5\u8BBE\u7F6E\u5FBD\u7AE0\u7684\u989C\u8272\u548C\u6837\u5F0F",paraId:18,tocIndex:9},{value:'\u70B9\u51FB"\u63D0\u4EA4"\u5B8C\u6210\u914D\u7F6E',paraId:18,tocIndex:9},{value:"\u8FD9\u662F\u5F53\u524D\u7248\u672C\u652F\u6301\u7684\u4E3B\u8981\u53D8\u91CF\u7C7B\u578B\uFF0C\u7528\u4E8E\u5BF9\u6570\u636E\u8868\u8FDB\u884C\u7EDF\u8BA1\u8BA1\u7B97\u3002",paraId:19,tocIndex:11},{value:"\u6CE8\u610F",paraId:20,tocIndex:11},{value:"\uFF1A\u672A\u6765\u7248\u672C\u5C06\u652F\u6301\u66F4\u591A\u7C7B\u578B\u7684\u81EA\u5B9A\u4E49\u53D8\u91CF\uFF0C\u5982\u65E5\u671F\u53D8\u91CF\u3001\u8BA1\u7B97\u53D8\u91CF\u7B49\u3002",paraId:20,tocIndex:11},{value:"\u652F\u6301\u7684\u805A\u5408\u65B9\u5F0F\uFF1A",paraId:21,tocIndex:11},{value:"\u8BA1\u6570 (COUNT)",paraId:22,tocIndex:11},{value:"\uFF1A\u7EDF\u8BA1\u8BB0\u5F55\u6570\u91CF",paraId:22,tocIndex:11},{value:"\u7528\u9014\uFF1A\u7EDF\u8BA1\u8BA2\u5355\u6570\u91CF\u3001\u7528\u6237\u6570\u91CF\u7B49",paraId:23,tocIndex:11},{value:"\u793A\u4F8B\uFF1A\u4ECA\u65E5\u65B0\u589E\u7528\u6237\u6570",paraId:23,tocIndex:11},{value:"\u6C42\u548C (SUM)",paraId:24,tocIndex:11},{value:"\uFF1A\u8BA1\u7B97\u6570\u503C\u5B57\u6BB5\u7684\u603B\u548C",paraId:24,tocIndex:11},{value:"\u7528\u9014\uFF1A\u7EDF\u8BA1\u9500\u552E\u603B\u989D\u3001\u5E93\u5B58\u603B\u91CF\u7B49",paraId:25,tocIndex:11},{value:"\u793A\u4F8B\uFF1A\u672C\u6708\u9500\u552E\u603B\u989D",paraId:25,tocIndex:11},{value:"\u5E73\u5747\u503C (AVG)",paraId:26,tocIndex:11},{value:"\uFF1A\u8BA1\u7B97\u6570\u503C\u5B57\u6BB5\u7684\u5E73\u5747\u503C",paraId:26,tocIndex:11},{value:"\u7528\u9014\uFF1A\u7EDF\u8BA1\u5E73\u5747\u8BC4\u5206\u3001\u5E73\u5747\u4EF7\u683C\u7B49",paraId:27,tocIndex:11},{value:"\u793A\u4F8B\uFF1A\u4EA7\u54C1\u5E73\u5747\u8BC4\u5206",paraId:27,tocIndex:11},{value:"\u6700\u5C0F\u503C (MIN)",paraId:28,tocIndex:11},{value:"\uFF1A\u627E\u51FA\u6570\u503C\u5B57\u6BB5\u7684\u6700\u5C0F\u503C",paraId:28,tocIndex:11},{value:"\u7528\u9014\uFF1A\u6700\u4F4E\u4EF7\u683C\u3001\u6700\u65E9\u65F6\u95F4\u7B49",paraId:29,tocIndex:11},{value:"\u793A\u4F8B\uFF1A\u5546\u54C1\u6700\u4F4E\u4EF7\u683C",paraId:29,tocIndex:11},{value:"\u6700\u5927\u503C (MAX)",paraId:30,tocIndex:11},{value:"\uFF1A\u627E\u51FA\u6570\u503C\u5B57\u6BB5\u7684\u6700\u5927\u503C",paraId:30,tocIndex:11},{value:"\u7528\u9014\uFF1A\u6700\u9AD8\u4EF7\u683C\u3001\u6700\u665A\u65F6\u95F4\u7B49",paraId:31,tocIndex:11},{value:"\u793A\u4F8B\uFF1A\u6700\u9AD8\u9500\u552E\u989D",paraId:31,tocIndex:11},{value:"\u8FC7\u6EE4\u6761\u4EF6\u5141\u8BB8\u60A8\u53EA\u7EDF\u8BA1\u7B26\u5408\u7279\u5B9A\u6761\u4EF6\u7684\u6570\u636E\u3002",paraId:32,tocIndex:12},{value:"\u65F6\u95F4\u8303\u56F4\u8FC7\u6EE4\uFF1A",paraId:33,tocIndex:13},{value:"\u4ECA\u5929\uFF1A",paraId:34,tocIndex:13},{value:"\u521B\u5EFA\u65F6\u95F4 = \u4ECA\u5929",paraId:34,tocIndex:13},{value:"\u672C\u5468\uFF1A",paraId:34,tocIndex:13},{value:"\u521B\u5EFA\u65F6\u95F4 = \u672C\u5468",paraId:34,tocIndex:13},{value:"\u672C\u6708\uFF1A",paraId:34,tocIndex:13},{value:"\u521B\u5EFA\u65F6\u95F4 = \u672C\u6708",paraId:34,tocIndex:13},{value:"\u6700\u8FD17\u5929\uFF1A",paraId:34,tocIndex:13},{value:"\u521B\u5EFA\u65F6\u95F4 >= 7\u5929\u524D",paraId:34,tocIndex:13},{value:"\u72B6\u6001\u8FC7\u6EE4\uFF1A",paraId:35,tocIndex:13},{value:"\u5DF2\u5B8C\u6210\u7684\u8BA2\u5355\uFF1A",paraId:36,tocIndex:13},{value:'\u72B6\u6001 = "\u5DF2\u5B8C\u6210"',paraId:36,tocIndex:13},{value:"\u5F85\u5904\u7406\u7684\u4EFB\u52A1\uFF1A",paraId:36,tocIndex:13},{value:'\u72B6\u6001 = "\u5F85\u5904\u7406"',paraId:36,tocIndex:13},{value:"\u7528\u6237\u76F8\u5173\u8FC7\u6EE4\uFF1A",paraId:37,tocIndex:13},{value:"\u5F53\u524D\u7528\u6237\u7684\u6570\u636E\uFF1A",paraId:38,tocIndex:13},{value:"\u521B\u5EFA\u8005 = {{$user.id}}",paraId:38,tocIndex:13},{value:"\u7279\u5B9A\u90E8\u95E8\u7684\u6570\u636E\uFF1A",paraId:38,tocIndex:13},{value:'\u90E8\u95E8 = "\u9500\u552E\u90E8"',paraId:38,tocIndex:13},{value:'\u60A8\u53EF\u4EE5\u8BBE\u7F6E\u591A\u4E2A\u8FC7\u6EE4\u6761\u4EF6\uFF0C\u5B83\u4EEC\u4E4B\u95F4\u662F"\u4E14"\u7684\u5173\u7CFB\uFF1A',paraId:39,tocIndex:14},{value:`\u521B\u5EFA\u65F6\u95F4 = \u672C\u6708
\u4E14 \u72B6\u6001 = "\u5DF2\u5B8C\u6210"
\u4E14 \u91D1\u989D > 1000
`,paraId:40,tocIndex:14},{value:"\u80CC\u666F\u989C\u8272",paraId:41,tocIndex:16},{value:"\uFF1A\u8BBE\u7F6E\u5FBD\u7AE0\u7684\u80CC\u666F\u8272",paraId:41,tocIndex:16},{value:"\u6587\u5B57\u989C\u8272",paraId:41,tocIndex:16},{value:"\uFF1A\u8BBE\u7F6E\u5FBD\u7AE0\u5185\u6587\u5B57\u7684\u989C\u8272",paraId:41,tocIndex:16},{value:"\u5927\u5C0F",paraId:41,tocIndex:16},{value:"\uFF1A\u9009\u62E9\u9ED8\u8BA4\u5927\u5C0F\u6216\u5C0F\u5C3A\u5BF8",paraId:41,tocIndex:16},{value:"\u6700\u5927\u6570\u5B57",paraId:41,tocIndex:16},{value:'\uFF1A\u5F53\u6570\u5B57\u8D85\u8FC7\u6B64\u503C\u65F6\u663E\u793A"99+"\u7684\u5F62\u5F0F',paraId:41,tocIndex:16},{value:"\u663E\u793A\u96F6\u503C",paraId:41,tocIndex:16},{value:"\uFF1A\u662F\u5426\u5728\u6570\u503C\u4E3A 0 \u65F6\u4E5F\u663E\u793A\u5FBD\u7AE0",paraId:41,tocIndex:16},{value:"\u91CD\u8981\u6570\u636E",paraId:42,tocIndex:17},{value:"\uFF1A\u4F7F\u7528\u7EA2\u8272\u6216\u6A59\u8272\u80CC\u666F\uFF0C\u5438\u5F15\u6CE8\u610F",paraId:42,tocIndex:17},{value:"\u6B63\u5E38\u6570\u636E",paraId:42,tocIndex:17},{value:"\uFF1A\u4F7F\u7528\u84DD\u8272\u6216\u7EFF\u8272\u80CC\u666F",paraId:42,tocIndex:17},{value:"\u6B21\u8981\u6570\u636E",paraId:42,tocIndex:17},{value:"\uFF1A\u4F7F\u7528\u7070\u8272\u80CC\u666F\uFF0C\u964D\u4F4E\u89C6\u89C9\u91CD\u91CF",paraId:42,tocIndex:17},{value:"\u65B0\u5BA2\u6237\u6570\u91CF",paraId:43,tocIndex:19},{value:"\uFF1A\u663E\u793A\u672C\u6708\u65B0\u589E\u5BA2\u6237\u6570",paraId:43,tocIndex:19},{value:"\u5F85\u8DDF\u8FDB\u5BA2\u6237",paraId:43,tocIndex:19},{value:'\uFF1A\u663E\u793A\u72B6\u6001\u4E3A"\u5F85\u8DDF\u8FDB"\u7684\u5BA2\u6237\u6570\u91CF',paraId:43,tocIndex:19},{value:"\u6210\u4EA4\u5BA2\u6237",paraId:43,tocIndex:19},{value:"\uFF1A\u663E\u793A\u672C\u6708\u6210\u4EA4\u7684\u5BA2\u6237\u6570\u91CF",paraId:43,tocIndex:19},{value:"\u5F85\u5904\u7406\u8BA2\u5355",paraId:44,tocIndex:20},{value:'\uFF1A\u663E\u793A\u72B6\u6001\u4E3A"\u5F85\u5904\u7406"\u7684\u8BA2\u5355\u6570',paraId:44,tocIndex:20},{value:"\u4ECA\u65E5\u9500\u552E\u989D",paraId:44,tocIndex:20},{value:"\uFF1A\u663E\u793A\u4ECA\u5929\u7684\u8BA2\u5355\u91D1\u989D\u603B\u548C",paraId:44,tocIndex:20},{value:"\u5E73\u5747\u8BA2\u5355\u91D1\u989D",paraId:44,tocIndex:20},{value:"\uFF1A\u663E\u793A\u8BA2\u5355\u7684\u5E73\u5747\u91D1\u989D",paraId:44,tocIndex:20},{value:"\u8FDB\u884C\u4E2D\u9879\u76EE",paraId:45,tocIndex:21},{value:'\uFF1A\u663E\u793A\u72B6\u6001\u4E3A"\u8FDB\u884C\u4E2D"\u7684\u9879\u76EE\u6570',paraId:45,tocIndex:21},{value:"\u903E\u671F\u4EFB\u52A1",paraId:45,tocIndex:21},{value:"\uFF1A\u663E\u793A\u622A\u6B62\u65F6\u95F4\u5DF2\u8FC7\u4E14\u672A\u5B8C\u6210\u7684\u4EFB\u52A1\u6570",paraId:45,tocIndex:21},{value:"\u56E2\u961F\u5DE5\u4F5C\u91CF",paraId:45,tocIndex:21},{value:"\uFF1A\u663E\u793A\u56E2\u961F\u6210\u5458\u7684\u5E73\u5747\u4EFB\u52A1\u6570",paraId:45,tocIndex:21},{value:"\u5E93\u5B58\u4E0D\u8DB3\u5546\u54C1",paraId:46,tocIndex:22},{value:"\uFF1A\u663E\u793A\u5E93\u5B58\u6570\u91CF\u4F4E\u4E8E\u5B89\u5168\u5E93\u5B58\u7684\u5546\u54C1\u6570",paraId:46,tocIndex:22},{value:"\u603B\u5E93\u5B58\u4EF7\u503C",paraId:46,tocIndex:22},{value:"\uFF1A\u663E\u793A\u6240\u6709\u5546\u54C1\u7684\u5E93\u5B58\u4EF7\u503C\u603B\u548C",paraId:46,tocIndex:22},{value:"\u6700\u9AD8\u4EF7\u503C\u5546\u54C1",paraId:46,tocIndex:22},{value:"\uFF1A\u663E\u793A\u5355\u4EF7\u6700\u9AD8\u7684\u5546\u54C1\u4EF7\u683C",paraId:46,tocIndex:22},{value:"\u60A8\u53EF\u4EE5\u5728\u5FBD\u7AE0\u4E2D\u4F7F\u7528\u8868\u8FBE\u5F0F\u6765\u5904\u7406\u805A\u5408\u53D8\u91CF\u7684\u503C\uFF1A",paraId:47,tocIndex:24},{value:"\u663E\u793A\u767E\u5206\u6BD4",paraId:48,tocIndex:24},{value:"\u4FDD\u7559\u5C0F\u6570\u4F4D",paraId:49,tocIndex:24},{value:"\u6761\u4EF6\u663E\u793A",paraId:50,tocIndex:24},{value:"\u53EF\u4EE5\u5728\u4E00\u4E2A\u5FBD\u7AE0\u4E2D\u4F7F\u7528\u591A\u4E2A\u805A\u5408\u53D8\u91CF\uFF1A",paraId:51,tocIndex:25},{value:"\u663E\u793A\u6BD4\u4F8B",paraId:52,tocIndex:25},{value:"\u663E\u793A\u5DEE\u503C",paraId:53,tocIndex:25},{value:"\u5BF9\u4E8E\u805A\u5408\u53D8\u91CF\u7684\u6570\u503C\u8BA1\u7B97\uFF0C\u60A8\u53EF\u4EE5\u8BBE\u7F6E\u5C0F\u6570\u4F4D\u6570\uFF1A",paraId:54,tocIndex:26},{value:"\u7CBE\u5EA6\u8BBE\u7F6E\u4E3A 0\uFF1A\u663E\u793A\u6574\u6570",paraId:55,tocIndex:26},{value:"\u7CBE\u5EA6\u8BBE\u7F6E\u4E3A 2\uFF1A\u663E\u793A\u4E24\u4F4D\u5C0F\u6570",paraId:55,tocIndex:26},{value:"\u4F7F\u7528\u6709\u610F\u4E49\u7684\u4E2D\u6587\u540D\u79F0",paraId:56,tocIndex:28},{value:"\u907F\u514D\u4F7F\u7528\u7279\u6B8A\u7B26\u53F7",paraId:56,tocIndex:28},{value:"\u4FDD\u6301\u540D\u79F0\u7B80\u6D01\u660E\u4E86",paraId:56,tocIndex:28},{value:"\u4F8B\u5982\uFF1A",paraId:56,tocIndex:28},{value:"\u4ECA\u65E5\u8BA2\u5355\u6570",paraId:56,tocIndex:28},{value:"\u3001",paraId:56,tocIndex:28},{value:"\u672C\u6708\u9500\u552E\u989D",paraId:56,tocIndex:28},{value:"\u3001",paraId:56,tocIndex:28},{value:"\u5F85\u5904\u7406\u4EFB\u52A1",paraId:56,tocIndex:28},{value:"\u907F\u514D\u5728\u5927\u6570\u636E\u8868\u4E0A\u4F7F\u7528\u590D\u6742\u7684\u8FC7\u6EE4\u6761\u4EF6",paraId:57,tocIndex:29},{value:"\u5408\u7406\u8BBE\u7F6E\u8FC7\u6EE4\u6761\u4EF6\uFF0C\u51CF\u5C11\u67E5\u8BE2\u8303\u56F4",paraId:57,tocIndex:29},{value:"\u5B9A\u671F\u6E05\u7406\u4E0D\u518D\u4F7F\u7528\u7684\u805A\u5408\u53D8\u91CF",paraId:57,tocIndex:29},{value:"\u9009\u62E9\u5408\u9002\u7684\u5FBD\u7AE0\u989C\u8272\uFF0C\u786E\u4FDD\u6613\u8BFB\u6027",paraId:58,tocIndex:30},{value:"\u8BBE\u7F6E\u5408\u7406\u7684\u6700\u5927\u663E\u793A\u6570\u5B57",paraId:58,tocIndex:30},{value:"\u5BF9\u4E8E\u53EF\u80FD\u4E3A 0 \u7684\u7EDF\u8BA1\uFF0C\u8003\u8651\u662F\u5426\u663E\u793A\u96F6\u503C",paraId:58,tocIndex:30},{value:"\u5B9A\u671F\u68C0\u67E5\u8FC7\u6EE4\u6761\u4EF6\u662F\u5426\u7B26\u5408\u4E1A\u52A1\u9700\u6C42",paraId:59,tocIndex:31},{value:"\u786E\u4FDD\u7EDF\u8BA1\u7684\u5B57\u6BB5\u6570\u636E\u7C7B\u578B\u6B63\u786E",paraId:59,tocIndex:31},{value:"\u6D4B\u8BD5\u805A\u5408\u53D8\u91CF\u5728\u4E0D\u540C\u6570\u636E\u60C5\u51B5\u4E0B\u7684\u8868\u73B0",paraId:59,tocIndex:31},{value:"\u95EE\u98981\uFF1A\u805A\u5408\u53D8\u91CF\u663E\u793A\u4E3A\u7A7A\u767D\u6216\u9519\u8BEF",paraId:60,tocIndex:33},{value:"\u68C0\u67E5\u6570\u636E\u8868\u540D\u79F0\u662F\u5426\u6B63\u786E",paraId:61,tocIndex:33},{value:"\u786E\u8BA4\u9009\u62E9\u7684\u5B57\u6BB5\u5B58\u5728\u4E14\u6709\u6570\u636E",paraId:61,tocIndex:33},{value:"\u68C0\u67E5\u8FC7\u6EE4\u6761\u4EF6\u662F\u5426\u8FC7\u4E8E\u4E25\u683C",paraId:61,tocIndex:33},{value:"\u95EE\u98982\uFF1A\u5FBD\u7AE0\u4E0D\u663E\u793A",paraId:62,tocIndex:33},{value:"\u786E\u8BA4\u8868\u8FBE\u5F0F\u8BED\u6CD5\u662F\u5426\u6B63\u786E\uFF0C\u53C2\u8003 ",paraId:63,tocIndex:33},{value:"Formula.js",paraId:63,tocIndex:33},{value:"\u68C0\u67E5\u805A\u5408\u53D8\u91CF\u662F\u5426\u5DF2\u521B\u5EFA\u6210\u529F",paraId:63,tocIndex:33},{value:'\u786E\u8BA4"\u663E\u793A\u96F6\u503C"\u8BBE\u7F6E\u662F\u5426\u7B26\u5408\u9884\u671F',paraId:63,tocIndex:33},{value:"\u95EE\u98983\uFF1A\u6570\u636E\u4E0D\u5B9E\u65F6\u66F4\u65B0",paraId:64,tocIndex:33},{value:"\u6570\u636E\u4F1A\u5728\u76F8\u5173\u8BB0\u5F55\u53D1\u751F\u53D8\u5316\u65F6\u81EA\u52A8\u66F4\u65B0",paraId:65,tocIndex:33},{value:"\u5982\u679C\u6570\u636E\u672A\u66F4\u65B0\uFF0C\u53EF\u4EE5\u5C1D\u8BD5\u5237\u65B0\u9875\u9762\uFF0C\u6216\u5728",paraId:65,tocIndex:33},{value:"\u793E\u533A",paraId:65,tocIndex:33},{value:"\u8FDB\u884C\u53CD\u9988",paraId:65,tocIndex:33},{value:"\u95EE\u98984\uFF1A\u6743\u9650\u76F8\u5173\u95EE\u9898",paraId:66,tocIndex:33},{value:"\u786E\u8BA4\u5F53\u524D\u7528\u6237\u6709\u6743\u9650\u8BBF\u95EE\u76F8\u5173\u6570\u636E\u8868",paraId:67,tocIndex:33},{value:"\u68C0\u67E5\u5B57\u6BB5\u7EA7\u522B\u7684\u6743\u9650\u8BBE\u7F6E",paraId:67,tocIndex:33},{value:"\u5982\u679C\u9047\u5230\u95EE\u9898\uFF0C\u53EF\u4EE5\uFF1A",paraId:68,tocIndex:34},{value:"\u67E5\u770B NocoBase ",paraId:69,tocIndex:34},{value:"\u5B98\u65B9\u6587\u6863",paraId:69,tocIndex:34},{value:"\u8054\u7CFB\u6280\u672F\u652F\u6301\u56E2\u961F",paraId:69,tocIndex:34},{value:"\u5728",paraId:69,tocIndex:34},{value:"\u793E\u533A",paraId:69,tocIndex:34},{value:"\u8BBA\u575B\u5BFB\u6C42\u5E2E\u52A9",paraId:69,tocIndex:34},{value:"\u81EA\u5B9A\u4E49\u53D8\u91CF\u63D2\u4EF6\u4E3A\u60A8\u7684 NocoBase \u5E94\u7528\u63D0\u4F9B\u4E86\u5F3A\u5927\u7684\u53D8\u91CF\u7BA1\u7406\u7CFB\u7EDF\u3002\u5728\u5F53\u524D\u7248\u672C\u4E2D\uFF0C\u901A\u8FC7\u805A\u5408\u53D8\u91CF\u529F\u80FD\uFF0C\u60A8\u53EF\u4EE5\u8F7B\u677E\u521B\u5EFA\u6570\u636E\u7EDF\u8BA1\u5E76\u5728\u754C\u9762\u4E0A\u5C55\u793A\uFF0C\u8BA9\u5E94\u7528\u66F4\u52A0\u76F4\u89C2\u548C\u5B9E\u7528\u3002",paraId:70,tocIndex:35},{value:"\u8BB0\u4F4F\u4EE5\u4E0B\u8981\u70B9\uFF1A",paraId:71,tocIndex:35},{value:"\u5F53\u524D\u7248\u672C\u4E3B\u8981\u652F\u6301\u805A\u5408\u53D8\u91CF",paraId:72,tocIndex:35},{value:"\uFF0C\u672A\u6765\u5C06\u6269\u5C55\u66F4\u591A\u53D8\u91CF\u7C7B\u578B",paraId:72,tocIndex:35},{value:"\u4ECE\u7B80\u5355\u7684\u8BA1\u6570\u53D8\u91CF\u5F00\u59CB\u5B66\u4E60",paraId:72,tocIndex:35},{value:"\u9010\u6B65\u638C\u63E1\u8FC7\u6EE4\u6761\u4EF6\u7684\u4F7F\u7528",paraId:72,tocIndex:35},{value:"\u6CE8\u610F\u53D8\u91CF\u547D\u540D\u7684\u89C4\u8303\u6027",paraId:72,tocIndex:35},{value:"\u5B9A\u671F\u7EF4\u62A4\u548C\u4F18\u5316\u53D8\u91CF\u914D\u7F6E",paraId:72,tocIndex:35}]},597871:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},195914:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},710693:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},95076:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},314722:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},4228:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In NocoBase, relationship fields are not actual fields but are used to establish connections between collections. This concept is equivalent to relationships in relational databases.",paraId:0,tocIndex:0},{value:"In relational databases, the most common types of relationships include the following:",paraId:1,tocIndex:0},{value:"One-to-One",paraId:2,tocIndex:0},{value:": Each entity in two collections corresponds to only one entity in the other collection. This type of relationship is usually used to store different aspects of an entity in separate collections to reduce redundancy and improve data consistency.",paraId:3,tocIndex:0},{value:"One-to-Many",paraId:4,tocIndex:0},{value:": Each entity in one collection can be associated with multiple entities in another collection. This is one of the most common relationship types. For example, one author can write multiple articles, but each article can have only one author.",paraId:3,tocIndex:0},{value:"Many-to-One",paraId:5,tocIndex:0},{value:": Multiple entities in one collection can be associated with one entity in another collection. This type of relationship is also common in data modeling. For instance, multiple students can belong to the same class.",paraId:3,tocIndex:0},{value:"Many-to-Many",paraId:6,tocIndex:0},{value:": Multiple entities in two collections can be associated with each other. This type of relationship typically requires an intermediary collection to record the associations between the entities. For example, the relationship between students and courses\u2014a student can enroll in multiple courses, and a course can have multiple students.",paraId:3,tocIndex:0},{value:"These types of relationships play an important role in database design and data modeling, helping to describe complex real-world relationships and data structures.",paraId:7,tocIndex:0}]},679371:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a course enrollment system, there are two entities: students and courses. A student can enroll in multiple courses, and a course can have multiple students enrolled, constituting a many-to-many relationship. In a relational database, to represent the many-to-many relationship between students and courses, an intermediary collection, such as an enrollment collection, is usually used. This collection can record which courses each student has chosen and which students have enrolled in each course. This design effectively represents the many-to-many relationship between students and courses.",paraId:0,tocIndex:0},{value:"ER Diagram:",paraId:1,tocIndex:0},{value:"Field Configuration:",paraId:2,tocIndex:0},{value:"The source collection, which is the collection where the current field resides.",paraId:3,tocIndex:2},{value:"The target collection, which is the collection to be associated with.",paraId:4,tocIndex:3},{value:"The intermediary collection, used when a many-to-many relationship exists between two entities. The intermediary collection has two foreign keys that are used to maintain the association between the two entities.",paraId:5,tocIndex:4},{value:"The field in the source collection that is referenced by the foreign key. It must be unique.",paraId:6,tocIndex:5},{value:"The field in the intermediary collection that establishes the association with the source collection.",paraId:7,tocIndex:6},{value:"The field in the intermediary collection that establishes the association with the target collection.",paraId:8,tocIndex:7},{value:"The field in the target collection that is referenced by the foreign key. It must be unique.",paraId:9,tocIndex:8},{value:"ON DELETE refers to the rules applied to foreign key references in related child collections when records in the parent collection are deleted. It is an option used when defining a foreign key constraint. Common ON DELETE options include:",paraId:10,tocIndex:9},{value:"CASCADE",paraId:11,tocIndex:9},{value:": When a record in the parent collection is deleted, all related records in the child collection are automatically deleted.",paraId:11,tocIndex:9},{value:"SET NULL",paraId:11,tocIndex:9},{value:": When a record in the parent collection is deleted, the foreign key values in the related child collection records are set to NULL.",paraId:11,tocIndex:9},{value:"RESTRICT",paraId:11,tocIndex:9},{value:": The default option, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:11,tocIndex:9},{value:"NO ACTION",paraId:11,tocIndex:9},{value:": Similar to RESTRICT, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:11,tocIndex:9}]},153381:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a library database, there are two entities: books and authors. An author can write multiple books, but each book usually has only one author. In this case, the relationship between authors and books is many-to-one. Multiple books can be associated with the same author, but each book can have only one author.",paraId:0,tocIndex:0},{value:"ER Diagram:",paraId:1,tocIndex:0},{value:"Field Configuration:",paraId:2,tocIndex:0},{value:"The source collection, which is the collection where the current field resides.",paraId:3,tocIndex:2},{value:"The target collection, which is the collection to be associated with.",paraId:4,tocIndex:3},{value:"The field in the source collection that is used to establish the association between the two collections.",paraId:5,tocIndex:4},{value:"The field in the target collection that is referenced by the foreign key. It must be unique.",paraId:6,tocIndex:5},{value:"ON DELETE refers to the rules applied to foreign key references in related child collections when records in the parent collection are deleted. It is an option used when defining a foreign key constraint. Common ON DELETE options include:",paraId:7,tocIndex:6},{value:"CASCADE",paraId:8,tocIndex:6},{value:": When a record in the parent collection is deleted, all related records in the child collection are automatically deleted.",paraId:8,tocIndex:6},{value:"SET NULL",paraId:8,tocIndex:6},{value:": When a record in the parent collection is deleted, the foreign key values in the related child collection records are set to NULL.",paraId:8,tocIndex:6},{value:"RESTRICT",paraId:8,tocIndex:6},{value:": The default option, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:8,tocIndex:6},{value:"NO ACTION",paraId:8,tocIndex:6},{value:": Similar to RESTRICT, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:8,tocIndex:6}]},92840:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The relationship between a class and its students is an example of a one-to-many relationship: one class can have multiple students, but each student belongs to only one class.",paraId:0,tocIndex:0},{value:"ER Diagram:",paraId:1,tocIndex:0},{value:"Field Configuration:",paraId:2,tocIndex:0},{value:"The source collection, which is the collection where the current field resides.",paraId:3,tocIndex:2},{value:"The target collection, which is the collection to be associated with.",paraId:4,tocIndex:3},{value:"The field in the source collection that is referenced by the foreign key. It must be unique.",paraId:5,tocIndex:4},{value:"The field in the target collection that is used to establish the association between the two collections.",paraId:6,tocIndex:5},{value:"The field in the target collection used to view each row record in the relationship block, usually a unique field.",paraId:7,tocIndex:6},{value:"ON DELETE refers to the rules applied to foreign key references in related child collections when records in the parent collection are deleted. It is an option used when defining a foreign key constraint. Common ON DELETE options include:",paraId:8,tocIndex:7},{value:"CASCADE",paraId:9,tocIndex:7},{value:": When a record in the parent collection is deleted, all related records in the child collection are automatically deleted.",paraId:9,tocIndex:7},{value:"SET NULL",paraId:9,tocIndex:7},{value:": When a record in the parent collection is deleted, the foreign key values in the related child collection records are set to NULL.",paraId:9,tocIndex:7},{value:"RESTRICT",paraId:9,tocIndex:7},{value:": The default option, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:9,tocIndex:7},{value:"NO ACTION",paraId:9,tocIndex:7},{value:": Similar to RESTRICT, it prevents the deletion of a parent collection record if there are related records in the child collection.",paraId:9,tocIndex:7}]},103661:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the relationship between employees and personal profiles, each employee can only have one personal profile record, and each personal profile record can only correspond to one employee. In this case, the relationship between the employee and the personal profile is one-to-one.",paraId:0,tocIndex:0},{value:'The foreign key in a one-to-one relationship can be placed in either the source collection or the target collection. If it represents "having one," the foreign key is more appropriately placed in the target collection; if it represents "belonging to," then the foreign key is better placed in the source collection.',paraId:1,tocIndex:0},{value:"For example, in the case mentioned above, where an employee has only one personal profile and the personal profile belongs to the employee, it is appropriate to place the foreign key in the personal profile collection.",paraId:2,tocIndex:0},{value:"This indicates that an employee has a personal profile record.",paraId:3,tocIndex:1},{value:"ER Relationship",paraId:4,tocIndex:1},{value:"Field Configuration",paraId:5,tocIndex:1},{value:"This indicates that a personal profile belongs to a specific employee.",paraId:6,tocIndex:2},{value:"ER Relationship",paraId:7,tocIndex:2},{value:"Field Configuration",paraId:8,tocIndex:2},{value:"The source collection, which is the collection where the current field is located.",paraId:9,tocIndex:4},{value:"The target collection, the collection that is being related.",paraId:10,tocIndex:5},{value:'Used to establish a relationship between two collections. In a one-to-one relationship, the foreign key can be placed in either the source collection or the target collection. If it represents "having one," the foreign key is more appropriately placed in the target collection; if it represents "belonging to," then the foreign key is better placed in the source collection.',paraId:11,tocIndex:6},{value:'The field referenced by the foreign key constraint must be unique. When the foreign key is placed in the target collection, it indicates "having one."',paraId:12,tocIndex:7},{value:'The field referenced by the foreign key constraint must be unique. When the foreign key is placed in the source collection, it indicates a "belonging relationship."',paraId:13,tocIndex:8},{value:"ON DELETE refers to the action rules for the foreign key reference in the related child collection when deleting records from the parent collection. It is an option defined when establishing a foreign key constraint. Common ON DELETE options include:",paraId:14,tocIndex:9},{value:"CASCADE: When a record in the parent collection is deleted, automatically delete all related records in the child collection.",paraId:15,tocIndex:9},{value:"SET NULL: When a record in the parent collection is deleted, set the foreign key value in the related child collection to NULL.",paraId:15,tocIndex:9},{value:"RESTRICT: The default option, where deletion of a parent collection record is refused if there are related records in the child collection.",paraId:15,tocIndex:9},{value:"NO ACTION: Similar to RESTRICT, deletion of a parent collection record is refused if there are related records in the child collection.",paraId:15,tocIndex:9}]},837773:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},709245:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},637204:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},849234:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Edit mode",paraId:0,tocIndex:3},{value:"Read mode",paraId:1,tocIndex:3}]},47074:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},991782:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},287829:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},744850:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},412343:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},729083:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Edit mode",paraId:0,tocIndex:3},{value:"Read mode",paraId:1,tocIndex:3}]},624604:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},310957:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},477123:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},417174:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},327387:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},864404:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},731497:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},345211:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},22585:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},414735:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},504717:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"DateTime field types can be categorized as follows:",paraId:0,tocIndex:0},{value:"DateTime (with Time Zone):",paraId:1,tocIndex:0},{value:" These values are standardized to UTC (Coordinated Universal Time) and are subject to time zone adjustments when necessary.",paraId:1,tocIndex:0},{value:"DateTime (without Time Zone):",paraId:1,tocIndex:0},{value:" This type stores date and time data without incorporating any time zone information.",paraId:1,tocIndex:0},{value:"Date (without Time):",paraId:1,tocIndex:0},{value:" This format exclusively stores date information, omitting any time component.",paraId:1,tocIndex:0},{value:"Time:",paraId:1,tocIndex:0},{value:" Stores only time information, excluding the date.",paraId:1,tocIndex:0},{value:"Unix Timestamp:",paraId:1,tocIndex:0},{value:" This type represents the number of seconds that have elapsed since January 1, 1970, and is stored as a Unix timestamp.",paraId:1,tocIndex:0},{value:"Here are examples for each DateTime-related field type:",paraId:2,tocIndex:0},{value:"Field Type",paraId:3,tocIndex:0},{value:"Example Value",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:"DateTime (with Time Zone)",paraId:3,tocIndex:0},{value:"2024-08-24T07:30:00.000Z",paraId:3,tocIndex:0},{value:"Converted to UTC and can be adjusted for time zones",paraId:3,tocIndex:0},{value:"DateTime (without Time Zone)",paraId:3,tocIndex:0},{value:"2024-08-24 15:30:00",paraId:3,tocIndex:0},{value:"Stores date and time without time zone considerations",paraId:3,tocIndex:0},{value:"Date (without Time)",paraId:3,tocIndex:0},{value:"2024-08-24",paraId:3,tocIndex:0},{value:"Captures only the date, with no time information",paraId:3,tocIndex:0},{value:"Time",paraId:3,tocIndex:0},{value:"15:30:00",paraId:3,tocIndex:0},{value:"Captures only the time, excluding any date details",paraId:3,tocIndex:0},{value:"Unix Timestamp",paraId:3,tocIndex:0},{value:"1724437800",paraId:3,tocIndex:0},{value:"Represents seconds since 1970-01-01 00:00:00 UTC",paraId:3,tocIndex:0},{value:"Below is a comparison table for NocoBase, MySQL, and PostgreSQL:",paraId:4,tocIndex:1},{value:"Field Type",paraId:5,tocIndex:1},{value:"NocoBase",paraId:5,tocIndex:1},{value:"MySQL",paraId:5,tocIndex:1},{value:"PostgreSQL",paraId:5,tocIndex:1},{value:"DateTime (with Time Zone)",paraId:5,tocIndex:1},{value:"Datetime with timezone",paraId:5,tocIndex:1},{value:"TIMESTAMP",paraId:5,tocIndex:1},{value:" DATETIME",paraId:5,tocIndex:1},{value:"TIMESTAMP WITH TIME ZONE",paraId:5,tocIndex:1},{value:"DateTime (without Time Zone)",paraId:5,tocIndex:1},{value:"Datetime without timezone",paraId:5,tocIndex:1},{value:"DATETIME",paraId:5,tocIndex:1},{value:"TIMESTAMP WITHOUT TIME ZONE",paraId:5,tocIndex:1},{value:"Date (without Time)",paraId:5,tocIndex:1},{value:"Date",paraId:5,tocIndex:1},{value:"DATE",paraId:5,tocIndex:1},{value:"DATE",paraId:5,tocIndex:1},{value:"Time",paraId:5,tocIndex:1},{value:"Time",paraId:5,tocIndex:1},{value:"TIME",paraId:5,tocIndex:1},{value:"TIME WITHOUT TIME ZONE",paraId:5,tocIndex:1},{value:"Unix Timestamp",paraId:5,tocIndex:1},{value:"Unix timestamp",paraId:5,tocIndex:1},{value:"INTEGER",paraId:5,tocIndex:1},{value:"BIGINT",paraId:5,tocIndex:1},{value:"INTEGER",paraId:5,tocIndex:1},{value:"BIGINT",paraId:5,tocIndex:1},{value:"Time (with Time Zone)",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"TIME WITH TIME ZONE",paraId:5,tocIndex:1},{value:"Note:",paraId:6,tocIndex:1},{value:"MySQL\u2019s TIMESTAMP type covers a range between ",paraId:7,tocIndex:1},{value:"1970-01-01 00:00:01 UTC",paraId:7,tocIndex:1},{value:" and ",paraId:7,tocIndex:1},{value:"2038-01-19 03:14:07 UTC",paraId:7,tocIndex:1},{value:". For dates and times outside this range, it is recommended to use DATETIME or BIGINT to store Unix timestamps.",paraId:7,tocIndex:1},{value:"This includes ",paraId:8,tocIndex:3},{value:"DateTime (without Time Zone)",paraId:8,tocIndex:3},{value:" and ",paraId:8,tocIndex:3},{value:"Unix Timestamp",paraId:8,tocIndex:3},{value:".",paraId:8,tocIndex:3},{value:"Note:",paraId:9,tocIndex:3},{value:"To accommodate a broader range of dates, NocoBase uses the DATETIME type in MySQL for DateTime (with Time Zone) fields. The date value stored is converted based on the server's TZ environment variable, meaning that if the TZ environment variable changes, the stored DateTime value will also change.",paraId:10,tocIndex:3},{value:"Since there is a time zone difference between UTC and local time, directly displaying the raw UTC value could lead to user confusion.",paraId:10,tocIndex:3},{value:"UTC (Coordinated Universal Time) is the global time standard used to coordinate and synchronize time worldwide. It is a highly precise time standard, maintained by atomic clocks, and synchronized with the Earth's rotation.",paraId:11,tocIndex:5},{value:"The difference between UTC and local time can cause confusion when displaying raw UTC values. For example:",paraId:12,tocIndex:5},{value:"Time Zone",paraId:13,tocIndex:5},{value:"DateTime",paraId:13,tocIndex:5},{value:"UTC",paraId:13,tocIndex:5},{value:"2024-08-24T07:30:00.000Z",paraId:13,tocIndex:5},{value:"UTC+8",paraId:13,tocIndex:5},{value:"2024-08-24 15:30:00",paraId:13,tocIndex:5},{value:"UTC+5",paraId:13,tocIndex:5},{value:"2024-08-24 12:30:00",paraId:13,tocIndex:5},{value:"UTC-5",paraId:13,tocIndex:5},{value:"2024-08-24 02:30:00",paraId:13,tocIndex:5},{value:"UTC+0",paraId:13,tocIndex:5},{value:"2024-08-24 07:30:00",paraId:13,tocIndex:5},{value:"UTC-6",paraId:13,tocIndex:5},{value:"2024-08-23 01:30:00",paraId:13,tocIndex:5},{value:"These different times all correspond to the same moment, merely expressed in various time zones.",paraId:14,tocIndex:5}]},294744:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},679894:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},549618:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},910513:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},164644:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},244590:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},329221:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase classifies fields into the following categories from the Interface perspective:",paraId:0,tocIndex:1},{value:"Each Field Interface has a default data type. For instance, for fields with the Interface as a Number, the default data type is double, but it can also be float, decimal, etc. The data types currently supported are:",paraId:1,tocIndex:2},{value:"The process for adding new fields to the main database is as follows:",paraId:2,tocIndex:3},{value:"Select the Interface type",paraId:3,tocIndex:3},{value:"Configure the optional data type for the current Interface",paraId:3,tocIndex:3},{value:"The process for field mapping from external data sources is:",paraId:4,tocIndex:3},{value:"Automatically map the corresponding data type (Field type) and UI type (Field Interface) based on the field type of the external database.",paraId:5,tocIndex:3},{value:"Modify to a more suitable data type and Interface type as needed",paraId:5,tocIndex:3}]},740741:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The attachment field is a specialized relational field that connects directly to the file collection.",paraId:0,tocIndex:1},{value:"(Example to be added)",paraId:1,tocIndex:3}]},405408:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},651288:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},38861:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},656069:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},920027:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"to be added.",paraId:0,tocIndex:3}]},450628:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To ensure data accuracy,security and consistency in data tables, NocoBase provides field validation functionality. This feature consists of two main parts: rule configuration and validation rule apply.",paraId:0,tocIndex:0},{value:"NocoBase system fields integrate ",paraId:1,tocIndex:1},{value:"Joi",paraId:1,tocIndex:1},{value:" rules, with support as follows:",paraId:1,tocIndex:1},{value:"Joi string types correspond to the following NocoBase field types: single line text, long text, phone, email, URL, password, UUID.",paraId:2,tocIndex:2},{value:"Min length",paraId:3,tocIndex:3},{value:"Max length",paraId:3,tocIndex:3},{value:"Length",paraId:3,tocIndex:3},{value:"Pattern",paraId:3,tocIndex:3},{value:"Required",paraId:3,tocIndex:3},{value:"View more options",paraId:4,tocIndex:4},{value:"View more options",paraId:5,tocIndex:5},{value:"View more options",paraId:6,tocIndex:6},{value:"Joi number types correspond to the following NocoBase field types: integer, number, percentage.",paraId:7,tocIndex:7},{value:"Greater than",paraId:8,tocIndex:8},{value:"Less than",paraId:8,tocIndex:8},{value:"Max value",paraId:8,tocIndex:8},{value:"Min value",paraId:8,tocIndex:8},{value:"Multiple",paraId:8,tocIndex:8},{value:"In addition to common rules, integer fields additionally support ",paraId:9,tocIndex:9},{value:"integer validation",paraId:9,tocIndex:9},{value:" and ",paraId:9,tocIndex:9},{value:"unsafe integer validation",paraId:9,tocIndex:9},{value:`.
`,paraId:9,tocIndex:9},{value:"In addition to common rules, number and percentage fields additionally support ",paraId:10,tocIndex:10},{value:"precision validation",paraId:10,tocIndex:10},{value:`.
`,paraId:10,tocIndex:10},{value:"Joi date types correspond to the following NocoBase field types: date (with timezone), date (without timezone), date only, Unix timestamp.",paraId:11,tocIndex:11},{value:"Supported validation rules:",paraId:12,tocIndex:11},{value:"Greater than",paraId:13,tocIndex:11},{value:"Less than",paraId:13,tocIndex:11},{value:"Max value",paraId:13,tocIndex:11},{value:"Min value",paraId:13,tocIndex:11},{value:"Timestamp",paraId:13,tocIndex:11},{value:"Required",paraId:13,tocIndex:11},{value:`Association fields only support required validation. Note that required validation for association fields is currently not supported in sub-form or sub-table scenarios.
`,paraId:14,tocIndex:12},{value:`After configuring field rules, the corresponding validation rules will be triggered when adding or modifying data.
`,paraId:15,tocIndex:13},{value:`Validation rules also apply to sub-table and sub-form components:
`,paraId:16,tocIndex:13},{value:`Note that in sub-form or sub-table scenarios, required validation for relationship fields does not take effect.
`,paraId:17,tocIndex:13},{value:"Client-side field validation",paraId:18,tocIndex:14},{value:" and server-side field validation are applied in different scenarios, with significant differences in implementation and rule trigger timing, so they need to be managed separately.",paraId:19,tocIndex:14},{value:"Client-side validation",paraId:20,tocIndex:15},{value:": Configure rules in edit forms (as shown in the figure below)",paraId:20,tocIndex:15},{value:"Server-side field validation",paraId:20,tocIndex:15},{value:": Set field rules in Data Source \u2192 Collections Configuration",paraId:20,tocIndex:15},{value:"Client-side validation",paraId:21,tocIndex:16},{value:": Triggers validation in real-time as users fill in fields, displaying error messages immediately",paraId:21,tocIndex:16},{value:"Server-side field validation",paraId:21,tocIndex:16},{value:": Validates on the server side before data entry after data submission, with error messages returned through API responses",paraId:21,tocIndex:16},{value:"Application scope",paraId:21,tocIndex:16},{value:": Server-side field validation takes effect not only during form submission but also triggers in all scenarios involving data addition or modification, such as workflows and data imports",paraId:21,tocIndex:16},{value:"Error messages",paraId:21,tocIndex:16},{value:": Client-side validation supports custom error messages, while server-side validation does not currently support custom error messages",paraId:21,tocIndex:16}]},334922:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides a unique DSL to describe the structure of data, known as Collection, which unifies the data structure from various sources, providing a reliable foundation for data management, analysis, and application.",paraId:0,tocIndex:0},{value:"To conveniently use various data models, it supports various types of collections:",paraId:1,tocIndex:0},{value:"General collection",paraId:2,tocIndex:0},{value:": Built-in common system fields;",paraId:3,tocIndex:0},{value:"Inheritance collection",paraId:4,tocIndex:0},{value:": You can create a parent collection and then derive a child collection from the parent collection. The child collection will inherit the structure of the parent collection and can also define its own columns.",paraId:3,tocIndex:0},{value:"Tree collection",paraId:5,tocIndex:0},{value:": Tree structure collection, currently only supports adjacency collection design;",paraId:3,tocIndex:0},{value:"Calendar Tabcollectionle",paraId:6,tocIndex:0},{value:": Used to create calendar-related event collections;",paraId:3,tocIndex:0},{value:"File collection",paraId:7,tocIndex:0},{value:": Used for file storage management;",paraId:3,tocIndex:0},{value:"Expression collection",paraId:8,tocIndex:0},{value:": Used for dynamic expression scenarios in workflows;",paraId:3,tocIndex:0},{value:"SQL collection",paraId:9,tocIndex:0},{value:": Not an actual database collection, but quickly presents SQL queries in a structured manner;",paraId:3,tocIndex:0},{value:"Connect to database view",paraId:10,tocIndex:0},{value:": Connects to existing database views;",paraId:3,tocIndex:0},{value:"Connect to foreign data",paraId:11,tocIndex:0},{value:": Allows the database system to directly access and query data in external data sources, based on FDW technology.",paraId:3,tocIndex:0}]},116843:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},588719:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data modeling is a key step in designing databases, involving a deep analysis and abstraction process of various data and their relationships in the real world. In this process, we try to reveal the intrinsic connections between data and formalize them into data models, laying the foundation for the database structure of the information system. NocoBase is a data model-driven platform with the following features:",paraId:0,tocIndex:0},{value:"The data source of NocoBase can be common databases, API (SDK) platforms, and files.",paraId:1,tocIndex:1},{value:"NocoBase provides a ",paraId:2,tocIndex:1},{value:"data source manager",paraId:3,tocIndex:1},{value:" for managing various data sources and their data tables. The data source manager plugin only provides a management interface for all data sources and does not provide the ability to access data sources. It needs to be used in conjunction with various data source plugins. The currently supported data sources include:",paraId:2,tocIndex:1},{value:"Main Database",paraId:4,tocIndex:1},{value:": NocoBase's main database, supporting relational databases such as MySQL, PostgreSQL, SQLite, etc.",paraId:5,tocIndex:1},{value:"External MySQL",paraId:6,tocIndex:1},{value:": Use an external MySQL database as a data source.",paraId:5,tocIndex:1},{value:"External MariaDB",paraId:7,tocIndex:1},{value:": Use an external MariaDB database as a data source.",paraId:5,tocIndex:1},{value:"External PostgreSQL",paraId:8,tocIndex:1},{value:": Use an external PostgreSQL database as a data source.",paraId:5,tocIndex:1},{value:"Simple data table management interface",paraId:9,tocIndex:2},{value:": Used to create various models (data tables) or connect to existing models (data tables).",paraId:9,tocIndex:2},{value:"Visual interface similar to ER diagrams",paraId:10,tocIndex:2},{value:": Used to extract entities and their relationships from user and business requirements. It provides an intuitive and easy-to-understand way to describe data models. Through ER diagrams, you can more clearly understand the main data entities in the system and their relationships.",paraId:10,tocIndex:2},{value:"General collection",paraId:11,tocIndex:3},{value:": Built-in common system fields;",paraId:12,tocIndex:3},{value:"Inheritance collection",paraId:13,tocIndex:3},{value:": You can create a parent collection and then derive a child collection from the parent collection. The child collection will inherit the structure of the parent collection and can also define its own columns.",paraId:12,tocIndex:3},{value:"Tree collection",paraId:14,tocIndex:3},{value:": Tree structure collection, currently only supports adjacency collection design;",paraId:12,tocIndex:3},{value:"Calendar Tabcollectionle",paraId:15,tocIndex:3},{value:": Used to create calendar-related event collections;",paraId:12,tocIndex:3},{value:"File collection",paraId:16,tocIndex:3},{value:": Used for file storage management;",paraId:12,tocIndex:3},{value:"Expression collection",paraId:17,tocIndex:3},{value:": Used for dynamic expression scenarios in workflows;",paraId:12,tocIndex:3},{value:"SQL collection",paraId:18,tocIndex:3},{value:": Not an actual database collection, but quickly presents SQL queries in a structured manner;",paraId:12,tocIndex:3},{value:"Connect to database view",paraId:19,tocIndex:3},{value:": Connects to existing database views;",paraId:12,tocIndex:3},{value:"Connect to foreign data",paraId:20,tocIndex:3},{value:": Allows the database system to directly access and query data in external data sources, based on FDW technology.",paraId:12,tocIndex:3},{value:'For more content, see the "',paraId:21,tocIndex:3},{value:"Collection / Overview",paraId:22,tocIndex:3},{value:'" section.',paraId:21,tocIndex:3},{value:'For more content, see the "',paraId:23,tocIndex:4},{value:"Collection Fields / Overview",paraId:24,tocIndex:4},{value:'" section.',paraId:23,tocIndex:4}]},709098:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The differences between main databases and external databases in NocoBase are primarily reflected in four aspects: database type support, collection type support, field type support, and backup and migration capabilities.",paraId:0,tocIndex:0},{value:"For more details, see: ",paraId:1,tocIndex:1},{value:"Data Source Manager",paraId:1,tocIndex:1},{value:"Database Type",paraId:2,tocIndex:2},{value:"Main Database Support",paraId:2,tocIndex:2},{value:"External Database Support",paraId:2,tocIndex:2},{value:"PostgreSQL",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"MySQL",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"MariaDB",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"KingbaseES",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"MSSQL",paraId:2,tocIndex:2},{value:"\u274C",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"Oracle",paraId:2,tocIndex:2},{value:"\u274C",paraId:2,tocIndex:2},{value:"\u2705",paraId:2,tocIndex:2},{value:"Collection Management",paraId:3,tocIndex:3},{value:"Main Database Support",paraId:3,tocIndex:3},{value:"External Database Support",paraId:3,tocIndex:3},{value:"Basic Management",paraId:3,tocIndex:3},{value:"\u2705",paraId:3,tocIndex:3},{value:"\u2705",paraId:3,tocIndex:3},{value:"Visual Management",paraId:3,tocIndex:3},{value:"\u2705",paraId:3,tocIndex:3},{value:"\u274C",paraId:3,tocIndex:3},{value:"For more details, see: ",paraId:4,tocIndex:4},{value:"Collections",paraId:4,tocIndex:4},{value:"Collection Type",paraId:5,tocIndex:4},{value:"Main Database",paraId:5,tocIndex:4},{value:"External Database",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"General",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"Basic collection",paraId:5,tocIndex:4},{value:"View",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"Data source view",paraId:5,tocIndex:4},{value:"Inheritance",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Supports data model inheritance, master data source only",paraId:5,tocIndex:4},{value:"File",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Supports file uploads, master data source only",paraId:5,tocIndex:4},{value:"Comment",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Built-in comment system, master data source only",paraId:5,tocIndex:4},{value:"Calendar",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Collection for calendar views",paraId:5,tocIndex:4},{value:"Expression",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Supports formula calculations",paraId:5,tocIndex:4},{value:"Tree",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"For tree structure data modeling",paraId:5,tocIndex:4},{value:"SQL",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Collection defined through SQL",paraId:5,tocIndex:4},{value:"External Connection",paraId:5,tocIndex:4},{value:"\u2705",paraId:5,tocIndex:4},{value:"\u274C",paraId:5,tocIndex:4},{value:"Connection collection for external data sources, limited functionality",paraId:5,tocIndex:4},{value:"For more details, see: ",paraId:6,tocIndex:5},{value:"Collection Fields",paraId:6,tocIndex:5},{value:"Field Type",paraId:7,tocIndex:6},{value:"Main Database",paraId:7,tocIndex:6},{value:"External Database",paraId:7,tocIndex:6},{value:"Single text",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Long text",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Phone",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Email",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"URL",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Integer",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Number",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Percent",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Password",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Color",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Icon",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"\u2705",paraId:7,tocIndex:6},{value:"Field Type",paraId:8,tocIndex:7},{value:"Main Database",paraId:8,tocIndex:7},{value:"External Database",paraId:8,tocIndex:7},{value:"Checkbox",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"Single select",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"Multiple select",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"Radio group",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"Checkbox group",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"China region",paraId:8,tocIndex:7},{value:"\u2705",paraId:8,tocIndex:7},{value:"\u274C",paraId:8,tocIndex:7},{value:"Field Type",paraId:9,tocIndex:8},{value:"Main Database",paraId:9,tocIndex:8},{value:"External Database",paraId:9,tocIndex:8},{value:"Media",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"Markdown",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"Markdown(Vditor)",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"Rich text",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"Attachment(Association)",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u274C",paraId:9,tocIndex:8},{value:"Attachment(URL)",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"\u2705",paraId:9,tocIndex:8},{value:"Field Type",paraId:10,tocIndex:9},{value:"Main Database",paraId:10,tocIndex:9},{value:"External Database",paraId:10,tocIndex:9},{value:"Datetime(with time zone)",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"Datetime(without time zone)",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"Unix timestamp",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"Date(without time)",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"Time",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"\u2705",paraId:10,tocIndex:9},{value:"Field Type",paraId:11,tocIndex:10},{value:"Main Database",paraId:11,tocIndex:10},{value:"External Database",paraId:11,tocIndex:10},{value:"Point",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"Line",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"Circle",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"Polygon",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"\u2705",paraId:11,tocIndex:10},{value:"Field Type",paraId:12,tocIndex:11},{value:"Main Database",paraId:12,tocIndex:11},{value:"External Database",paraId:12,tocIndex:11},{value:"UUID",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Nano ID",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Sort",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Formula",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Sequence",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"JSON",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Collection select",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u274C",paraId:12,tocIndex:11},{value:"Encryption",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"\u2705",paraId:12,tocIndex:11},{value:"Field Type",paraId:13,tocIndex:12},{value:"Main Database",paraId:13,tocIndex:12},{value:"External Database",paraId:13,tocIndex:12},{value:"Created at",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"Last updated at",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"Created by",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"\u274C",paraId:13,tocIndex:12},{value:"Last updated by",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"\u274C",paraId:13,tocIndex:12},{value:"Table OID",paraId:13,tocIndex:12},{value:"\u2705",paraId:13,tocIndex:12},{value:"\u274C",paraId:13,tocIndex:12},{value:"Field Type",paraId:14,tocIndex:13},{value:"Main Database",paraId:14,tocIndex:13},{value:"External Database",paraId:14,tocIndex:13},{value:"One-to-one",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"One-to-many",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"Many-to-one",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"Many-to-many",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"Many-to-many (array)",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"\u2705",paraId:14,tocIndex:13},{value:"Attachment fields depend on file collections, which are only supported by main databases. Therefore, external databases do not currently support attachment fields.",paraId:15},{value:"Feature",paraId:16,tocIndex:14},{value:"Main Database",paraId:16,tocIndex:14},{value:"External Database",paraId:16,tocIndex:14},{value:"Backup & Restore",paraId:16,tocIndex:14},{value:"\u2705",paraId:16,tocIndex:14},{value:"\u274C (User managed)",paraId:16,tocIndex:14},{value:"Migration Management",paraId:16,tocIndex:14},{value:"\u2705",paraId:16,tocIndex:14},{value:"\u274C (User managed)",paraId:16,tocIndex:14},{value:"NocoBase provides backup, restore, and structure migration capabilities for main databases. For external databases, these operations need to be completed independently by users according to their own database environments. NocoBase does not provide built-in support.",paraId:17},{value:"Comparison Item",paraId:18,tocIndex:15},{value:"Main Database",paraId:18,tocIndex:15},{value:"External Database",paraId:18,tocIndex:15},{value:"Database Types",paraId:18,tocIndex:15},{value:"PostgreSQL, MySQL, MariaDB, KingbaseES",paraId:18,tocIndex:15},{value:"PostgreSQL, MySQL, MariaDB, MSSQL, Oracle, KingbaseES",paraId:18,tocIndex:15},{value:"Collection Type Support",paraId:18,tocIndex:15},{value:"All collection types",paraId:18,tocIndex:15},{value:"Only general and view collections",paraId:18,tocIndex:15},{value:"Field Type Support",paraId:18,tocIndex:15},{value:"All field types",paraId:18,tocIndex:15},{value:"All field types except attachment fields",paraId:18,tocIndex:15},{value:"Backup & Migration",paraId:18,tocIndex:15},{value:"Built-in support",paraId:18,tocIndex:15},{value:"User managed",paraId:18,tocIndex:15},{value:"If you are using NocoBase to build a new business system",paraId:19,tocIndex:16},{value:", please use the ",paraId:19,tocIndex:16},{value:"main database",paraId:19,tocIndex:16},{value:", which will allow you to use NocoBase's complete functionality.",paraId:19,tocIndex:16},{value:"If you are using NocoBase to connect to other systems' databases for basic CRUD operations",paraId:19,tocIndex:16},{value:", then use ",paraId:19,tocIndex:16},{value:"external databases",paraId:19,tocIndex:16},{value:".",paraId:19,tocIndex:16}]},276132:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use an external MariaDB database as a data source. Currently supported versions: MariaDB >= 10.3",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin, which needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2},{value:"Refer to the ",paraId:2,tocIndex:3},{value:"Data Source / External Database",paraId:3,tocIndex:3},{value:" section.",paraId:2,tocIndex:3}]},897707:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use an external MSSQL database as a data source. Currently supported versions: SQL Server 2014-2019",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin, which needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2},{value:"Refer to the ",paraId:2,tocIndex:3},{value:"Data Source / External Database",paraId:3,tocIndex:3},{value:" section.",paraId:2,tocIndex:3}]},220937:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use an external MySQL database as a data source. Currently supported versions: MySQL >= 5.7",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin, which needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2},{value:"Refer to the ",paraId:2,tocIndex:3},{value:"Data Source / External Database",paraId:3,tocIndex:3},{value:" section.",paraId:2,tocIndex:3}]},895250:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin allows you to use an external Oracle database as a data source. It supports Oracle versions >= 11g.",paraId:0,tocIndex:1},{value:"For Oracle server versions earlier than 12.1, you need to install the Oracle client.",paraId:1,tocIndex:3},{value:"Example for Linux:",paraId:2,tocIndex:3},{value:`apt-get update
apt-get install -y unzip wget libaio1
wget https://download.oracle.com/otn_software/linux/instantclient/1925000/instantclient-basic-linux.x64-19.25.0.0.0dbru.zip
unzip instantclient-basic-linux.x64-19.25.0.0.0dbru.zip -d /opt/
echo /opt/instantclient_19_25 > /etc/ld.so.conf.d/oracle-instantclient.conf
ldconfig
`,paraId:3,tocIndex:3},{value:"If the client is not installed as described above, you will need to specify the path to the client (for more details, refer to the ",paraId:4,tocIndex:3},{value:"node-oracledb documentation",paraId:4,tocIndex:3},{value:").",paraId:4,tocIndex:3},{value:"Follow the instructions in ",paraId:5,tocIndex:4},{value:"Installing and Upgrading Commercial Plugins",paraId:6,tocIndex:4},{value:".",paraId:5,tocIndex:4},{value:"For detailed instructions, refer to the ",paraId:7,tocIndex:5},{value:"Data Source / External Database",paraId:8,tocIndex:5},{value:" section.",paraId:7,tocIndex:5}]},235957:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use an external PostgreSQL database as a data source. Currently supported versions: PostgreSQL >= 9.5",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin, which needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2},{value:"Refer to the ",paraId:2,tocIndex:3},{value:"Data Source / External Database",paraId:3,tocIndex:3},{value:" section.",paraId:2,tocIndex:3}]},598231:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"KingbaseES can be used as a data source, either as the primary database or an external database.",paraId:0,tocIndex:1},{value:"Currently, only KingbaseES databases running in pg mode are supported.",paraId:1},{value:"Refer to the ",paraId:2,tocIndex:3},{value:"Installation Overview",paraId:3,tocIndex:3},{value:" for the setup procedures, the difference is mainly due to the environment variables.",paraId:2,tocIndex:3},{value:"Edit the .env file to add or modify the following environment variable configurations:",paraId:4,tocIndex:4},{value:`# Adjust DB parameters as needed
DB_DIALECT=kingbase
DB_HOST=localhost
DB_PORT=54321
DB_DATABASE=kingbase
DB_USER=nocobase
DB_PASSWORD=nocobase
`,paraId:5,tocIndex:4},{value:`version: "3"

networks:
  nocobase:
    driver: bridge

  app:
    image: registry.cn-shanghai.aliyuncs.com/nocobase/nocobase:latest
    restart: always
    networks:
      - nocobase
    depends_on:
      - postgres
    environment:
      # Application key for generating user tokens, etc.
      # Changing APP_KEY invalidates old tokens
      # Use a random string and keep it confidential
      - APP_KEY=your-secret-key
      # Database type
      - DB_DIALECT=kingbase
      # Database host, replace with existing database server IP if needed
      - DB_HOST=kingbase
      # Database name
      - DB_DATABASE=kingbase
      # Database user
      - DB_USER=nocobase
      # Database password
      - DB_PASSWORD=nocobase
      # Timezone
      - TZ=UTC
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - "13000:80"

  # Kingbase service for testing purposes only
  kingbase:
    image: registry.cn-shanghai.aliyuncs.com/nocobase/kingbase:v009r001c001b0030_single_x86
    platform: linux/amd64
    restart: always
    privileged: true
    networks:
      - nocobase
    volumes:
      - ./storage/db/kingbase:/home/kingbase/userdata
    environment:
      ENABLE_CI: no # Must be set to no
      DB_USER: nocobase
      DB_PASSWORD: nocobase
      DB_MODE: pg  # pg only
      NEED_START: yes
    command: ["/usr/sbin/init"]
`,paraId:6,tocIndex:5},{value:`yarn create nocobase-app my-nocobase-app -d kingbase \\
   -e DB_HOST=localhost \\
   -e DB_PORT=54321 \\
   -e DB_DATABASE=kingbase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:7,tocIndex:6},{value:"Execute the installation or upgrade command",paraId:8,tocIndex:7},{value:`yarn nocobase install
# or
yarn nocobase upgrade
`,paraId:9,tocIndex:7},{value:"Activate the Plugin",paraId:10,tocIndex:7},{value:"Primary Database: Refer to the ",paraId:11,tocIndex:8},{value:"handbook",paraId:12,tocIndex:8},{value:"External Database: See ",paraId:11,tocIndex:8},{value:"Data Source / External Database",paraId:13,tocIndex:8}]},262214:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"It is used in most scenarios. A general collection can be used unless a special collection template is needed.",paraId:0,tocIndex:1}]},983540:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's main database can be used to store both business data and the metadata of the application, including system table data and custom table data. The main database supports relational databases such as MySQL, PostgreSQL, etc. During the installation of the NocoBase application, the main database must be installed synchronously and cannot be deleted.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, no separate installation is required.",paraId:1,tocIndex:2},{value:"General collection",paraId:2,tocIndex:4},{value:": built-in commonly used system fields;",paraId:3,tocIndex:4},{value:"Inheritance collection",paraId:4,tocIndex:4},{value:": allows the creation of a parent table, from which child tables can be derived. Child tables will inherit the structure of the parent table, and can also define their own columns.",paraId:3,tocIndex:4},{value:"Tree collection",paraId:5,tocIndex:4},{value:": tree-structured table, currently only supports adjacent table design;",paraId:3,tocIndex:4},{value:"Calendar collection",paraId:6,tocIndex:4},{value:": for creating calendar-related event tables;",paraId:3,tocIndex:4},{value:"File collection",paraId:7,tocIndex:4},{value:": for managing file storage;",paraId:3,tocIndex:4},{value:"Expression Collection",paraId:8,tocIndex:4},{value:": for dynamic expression scenarios in workflows;",paraId:3,tocIndex:4},{value:"SQL Collection",paraId:9,tocIndex:4},{value:": Not an actual database table, but quickly presenting the SQL query in a structured manner;",paraId:3,tocIndex:4},{value:"Database View collection",paraId:10,tocIndex:4},{value:": connects to an existing database view;",paraId:3,tocIndex:4},{value:"FDW collection",paraId:11,tocIndex:4},{value:": allows the database system to directly access and query data in external data sources, based on FDW technology;",paraId:3,tocIndex:4},{value:"See more in the ",paraId:12,tocIndex:6},{value:"Data Table Fields / Overview",paraId:13,tocIndex:6},{value:" section.",paraId:12,tocIndex:6}]},691868:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"You can create a parent collection and derive child collection from that parent collection. The child collection will inherit the structure of the parent collection, and can also define its own columns. This design pattern helps organize and manage data with similar structures but possible differences.",paraId:0,tocIndex:1},{value:"Here are some common features of support for inheritable collections:",paraId:1,tocIndex:1},{value:"Parent Collection: The parent collection contains common columns and data, defining the basic structure of the entire inheritance hierarchy.",paraId:2,tocIndex:1},{value:"Child Collection: The child collection inherits the structure of the parent collection, but can also define its own columns. This allows each child collection to have the common properties of the parent collection while containing attributes specific to the subclass.",paraId:2,tocIndex:1},{value:"Querying: When querying, you can choose to query the entire inheritance hierarchy, just the parent collection, or a specific child collection. This allows different levels of data to be retrieved and processed as needed.",paraId:2,tocIndex:1},{value:"Inheritance Relationship: An inheritance relationship is established between the parent collection and the child collection, meaning that the structure of the parent collection can be used to define consistent attributes, while allowing the child collection to extend or override these attributes.",paraId:2,tocIndex:1},{value:"This design pattern helps to reduce data redundancy, simplify the database model, and make the data easier to maintain. However, it needs to be used with caution as inheritable collections can increase the complexity of queries, especially when dealing with the entire inheritance hierarchy. Databases that support inheritable collections generally provide specific syntax and tools to manage and query these collection structures.",paraId:3,tocIndex:1}]},949701:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use an existing external database as a data source. Currently, the supported external databases are MySQL, MariaDB, and PostgreSQL.",paraId:0,tocIndex:1},{value:"After activating the plugin, you can select and add it from the Add new dropdown menu in the data source management.",paraId:1,tocIndex:3},{value:"Fill in the information of the database you need to connect to.",paraId:2,tocIndex:3},{value:'After establishing a connection with the external database, all data tables in the data source will be directly read. The external database does not support directly adding data tables or modifying table structures. If modifications are needed, they can be made through the database client, and then the "Refresh" button can be clicked on the interface to synchronize.',paraId:3,tocIndex:4},{value:'The external database will automatically read the fields of the existing data tables and display them. You can quickly view and configure the title of the field, the data type (Field type), and the UI type (Field interface). You can also click the "Edit" button to modify more configurations.',paraId:4,tocIndex:5},{value:"Because the external database does not support modifying table structures, the only type available when adding new fields is the relationship field. Relationship fields are not real fields, but are used to establish connections between tables.",paraId:5,tocIndex:5},{value:"For more content, refer to the ",paraId:6,tocIndex:5},{value:"Collection Fields/Overview",paraId:7,tocIndex:5},{value:" section.",paraId:6,tocIndex:5},{value:"NocoBase will automatically map the corresponding data type (Field type) and UI type (Field Interface) for the field types of the external database.",paraId:8,tocIndex:6},{value:"Data type (Field type): Used to define the kind, format, and structure of data that the field can store.",paraId:9,tocIndex:6},{value:"UI type (Field Interface): Refers to the type of control used to display and input field values in the user interface.",paraId:9,tocIndex:6},{value:"The table below shows the mapping of field types for PostgreSQL, MySQL/MariaDB to NocoBase Data Type and NocoBase Interface Type.",paraId:10,tocIndex:6},{value:"PostgreSQL",paraId:11,tocIndex:6},{value:"MySQL/MariaDB",paraId:11,tocIndex:6},{value:"NocoBase Data Type",paraId:11,tocIndex:6},{value:"NocoBase Interface Type",paraId:11,tocIndex:6},{value:"BOOLEAN",paraId:11,tocIndex:6},{value:"BOOLEAN",paraId:11,tocIndex:6},{value:"TINYINT(1)",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"checkbox ",paraId:11,tocIndex:6},{value:" switch",paraId:11,tocIndex:6},{value:"SMALLINT",paraId:11,tocIndex:6},{value:"INTEGER",paraId:11,tocIndex:6},{value:"SERIAL",paraId:11,tocIndex:6},{value:"SMALLSERIAL",paraId:11,tocIndex:6},{value:"TINYINT",paraId:11,tocIndex:6},{value:"SMALLINT",paraId:11,tocIndex:6},{value:"MEDIUMINT",paraId:11,tocIndex:6},{value:"INTEGER",paraId:11,tocIndex:6},{value:"integer",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"sort",paraId:11,tocIndex:6},{value:"integer",paraId:11,tocIndex:6},{value:"sort",paraId:11,tocIndex:6},{value:"checkbox",paraId:11,tocIndex:6},{value:"switch",paraId:11,tocIndex:6},{value:"select",paraId:11,tocIndex:6},{value:"radioGroup",paraId:11,tocIndex:6},{value:"BIGINT",paraId:11,tocIndex:6},{value:"BIGSERIAL",paraId:11,tocIndex:6},{value:"BIGINT",paraId:11,tocIndex:6},{value:"bigInt",paraId:11,tocIndex:6},{value:"sort",paraId:11,tocIndex:6},{value:"integer",paraId:11,tocIndex:6},{value:"sort",paraId:11,tocIndex:6},{value:"checkbox",paraId:11,tocIndex:6},{value:"switch",paraId:11,tocIndex:6},{value:"select",paraId:11,tocIndex:6},{value:"radioGroup",paraId:11,tocIndex:6},{value:"unixTimestamp",paraId:11,tocIndex:6},{value:"createdAt",paraId:11,tocIndex:6},{value:"updatedAt",paraId:11,tocIndex:6},{value:"REAL",paraId:11,tocIndex:6},{value:"FLOAT",paraId:11,tocIndex:6},{value:"float",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"percent",paraId:11,tocIndex:6},{value:"DOUBLE PRECISION",paraId:11,tocIndex:6},{value:"DOUBLE PRECISION",paraId:11,tocIndex:6},{value:"double",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"percent",paraId:11,tocIndex:6},{value:"DECIMAL",paraId:11,tocIndex:6},{value:"NUMERIC",paraId:11,tocIndex:6},{value:"DECIMAL",paraId:11,tocIndex:6},{value:"decimal",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"percent",paraId:11,tocIndex:6},{value:"currency",paraId:11,tocIndex:6},{value:"VARCHAR",paraId:11,tocIndex:6},{value:"CHAR",paraId:11,tocIndex:6},{value:"VARCHAR",paraId:11,tocIndex:6},{value:"CHAR",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:"password",paraId:11,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:"nanoid",paraId:11,tocIndex:6},{value:"input",paraId:11,tocIndex:6},{value:"email",paraId:11,tocIndex:6},{value:"phone",paraId:11,tocIndex:6},{value:"password",paraId:11,tocIndex:6},{value:"color",paraId:11,tocIndex:6},{value:"icon",paraId:11,tocIndex:6},{value:"select",paraId:11,tocIndex:6},{value:"radioGroup",paraId:11,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:"nanoid",paraId:11,tocIndex:6},{value:"TEXT",paraId:11,tocIndex:6},{value:"TEXT",paraId:11,tocIndex:6},{value:"TINYTEXT",paraId:11,tocIndex:6},{value:"MEDIUMTEXT",paraId:11,tocIndex:6},{value:"LONGTEXT",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"textarea",paraId:11,tocIndex:6},{value:"markdown",paraId:11,tocIndex:6},{value:"vditor",paraId:11,tocIndex:6},{value:"richText",paraId:11,tocIndex:6},{value:"url",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"UUID",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:"uuid",paraId:11,tocIndex:6},{value:"JSON",paraId:11,tocIndex:6},{value:"JSONB",paraId:11,tocIndex:6},{value:"JSON",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"TIMESTAMP",paraId:11,tocIndex:6},{value:"DATETIME",paraId:11,tocIndex:6},{value:"TIMESTAMP",paraId:11,tocIndex:6},{value:"date",paraId:11,tocIndex:6},{value:"date",paraId:11,tocIndex:6},{value:"time",paraId:11,tocIndex:6},{value:"createdAt",paraId:11,tocIndex:6},{value:"updatedAt",paraId:11,tocIndex:6},{value:"DATE",paraId:11,tocIndex:6},{value:"DATE",paraId:11,tocIndex:6},{value:"dateOnly",paraId:11,tocIndex:6},{value:"datetime",paraId:11,tocIndex:6},{value:"TIME",paraId:11,tocIndex:6},{value:"TIME",paraId:11,tocIndex:6},{value:"time",paraId:11,tocIndex:6},{value:"time",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"YEAR",paraId:11,tocIndex:6},{value:"datetime",paraId:11,tocIndex:6},{value:"CIRCEL",paraId:11,tocIndex:6},{value:"circle",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"circle",paraId:11,tocIndex:6},{value:"PATH",paraId:11,tocIndex:6},{value:"GEOMETRY(LINESTRING)",paraId:11,tocIndex:6},{value:"LINESTRING",paraId:11,tocIndex:6},{value:"lineString",paraId:11,tocIndex:6},{value:"Json",paraId:11,tocIndex:6},{value:"lineString",paraId:11,tocIndex:6},{value:"POINT",paraId:11,tocIndex:6},{value:"GEOMETRY(POINT)",paraId:11,tocIndex:6},{value:"POINT",paraId:11,tocIndex:6},{value:"point",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"point",paraId:11,tocIndex:6},{value:"POLYGON",paraId:11,tocIndex:6},{value:"GEOMETRY(POLYGON)",paraId:11,tocIndex:6},{value:"POLYGON",paraId:11,tocIndex:6},{value:"polygon",paraId:11,tocIndex:6},{value:"json",paraId:11,tocIndex:6},{value:"polygon",paraId:11,tocIndex:6},{value:"GEOMETRY",paraId:11,tocIndex:6},{value:"GEOMETRY",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"BLOB",paraId:11,tocIndex:6},{value:"BLOB",paraId:11,tocIndex:6},{value:"blob",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"ENUM",paraId:11,tocIndex:6},{value:"ENUM",paraId:11,tocIndex:6},{value:"enum",paraId:11,tocIndex:6},{value:"select",paraId:11,tocIndex:6},{value:"radioGroup",paraId:11,tocIndex:6},{value:"ARRAY",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"array",paraId:11,tocIndex:6},{value:"multipleSelect",paraId:11,tocIndex:6},{value:"checkboxGroup",paraId:11,tocIndex:6},{value:"BIT",paraId:11,tocIndex:6},{value:"BIT",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"SET",paraId:11,tocIndex:6},{value:"SET",paraId:11,tocIndex:6},{value:"set",paraId:11,tocIndex:6},{value:"multipleSelect",paraId:11,tocIndex:6},{value:"checkboxGroup",paraId:11,tocIndex:6},{value:"RANGE",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"Unsupported field types will be displayed separately. These fields need to be developed for adaptation before they can be used.",paraId:12,tocIndex:7},{value:"Data tables that are displayed as blocks must have a filter target key configured. The filter target key refers to filtering data based on a specific field, and the field value must be unique. The filter target key defaults to the primary key field of the data table. If it is a view or a data table without a primary key, or a data table with a composite primary key, you need to customize the filter target key.",paraId:13,tocIndex:8},{value:"Only data tables that have set a filter target key can be added to the page.",paraId:14,tocIndex:8}]},147416:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides a data source management plugin for managing data sources and their data tables. The data source management plugin only provides a management interface for all data sources and does not provide the ability to access data sources. It needs to be used in conjunction with various data source plugins. The data sources currently supported for access include:",paraId:0,tocIndex:1},{value:"Main Database",paraId:1,tocIndex:1},{value:": NocoBase's main database, supporting relational databases such as MySQL, PostgreSQL, SQLite, etc.",paraId:2,tocIndex:1},{value:"External MySQL",paraId:3,tocIndex:1},{value:": Use an external MySQL database as a data source.",paraId:2,tocIndex:1},{value:"External MariaDB",paraId:4,tocIndex:1},{value:": Use an external MariaDB database as a data source.",paraId:2,tocIndex:1},{value:"External PostgreSQL",paraId:5,tocIndex:1},{value:": Use an external PostgreSQL database as a data source.",paraId:2,tocIndex:1},{value:"In addition, more types can be extended through plugins, which can be common types of databases or platforms that provide APIs (SDKs).",paraId:6,tocIndex:1},{value:"Built-in plugin, no separate installation required.",paraId:7,tocIndex:2},{value:"When the application is initialized and installed, a data source will be provided by default to store NocoBase data, known as the main database. For more information, see the ",paraId:8,tocIndex:3},{value:"Main Database",paraId:9,tocIndex:3},{value:".",paraId:8,tocIndex:3},{value:"At the same time, it also supports external databases as data sources. For more information, see the ",paraId:10,tocIndex:3},{value:"External Database / Introduction",paraId:11,tocIndex:3},{value:".",paraId:10,tocIndex:3},{value:"You can also access data from HTTP API sources. For more information, see the ",paraId:12,tocIndex:3},{value:"HTTP API Data Source",paraId:13,tocIndex:3},{value:".",paraId:12,tocIndex:3}]},394265:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin allows you to integrate data from REST API sources seamlessly.",paraId:0,tocIndex:1},{value:"As a commercial plugin, it requires uploading and activation through the plugin manager.",paraId:1,tocIndex:2},{value:"After activating the plugin, you can add a REST API source by selecting it from the Add new dropdown menu in the data source management section.",paraId:2,tocIndex:3},{value:"In NocoBase, a RESTful resource is mapped to a Collection, such as a Users resource.",paraId:3,tocIndex:5},{value:`GET /users
POST /users
GET /users/1
PUT /users/1
DELETE /users/1
`,paraId:4,tocIndex:5},{value:"These API endpoints are mapped in NocoBase as follows:",paraId:5,tocIndex:5},{value:`GET /users:list
POST /users:create
POST /users:get?filterByTk=1
POST /users:update?filterByTk=1
POST /users:destroy?filterByTk=1
`,paraId:6,tocIndex:5},{value:"For a comprehensive guide on NocoBase API design specifications, refer to the API documentation.",paraId:7,tocIndex:5},{value:'Check the "NocoBase API - Core" chapter for detailed information.',paraId:8,tocIndex:5},{value:"The Collection configuration for a REST API data source includes the following:",paraId:9,tocIndex:5},{value:"Map the interface for viewing a list of resources.",paraId:10,tocIndex:6},{value:"Map the interface for viewing resource details.",paraId:11,tocIndex:7},{value:"Map the interface for creating a resource.",paraId:12,tocIndex:8},{value:"Map the interface for updating a resource.",paraId:13,tocIndex:9},{value:"Map the interface for deleting a resource.",paraId:14,tocIndex:10},{value:"Both the List and Get interfaces are required to be configured.",paraId:15,tocIndex:10},{value:"example: configure pagination parameters for the List API.",paraId:16,tocIndex:12},{value:"if the third-party api does not support pagination natively, implement pagination will based on the retrieved list data.",paraId:17,tocIndex:12},{value:"Note: Only variables added to the API will work.",paraId:18,tocIndex:12},{value:"Third-party API params name",paraId:19,tocIndex:12},{value:"NocoBase params",paraId:19,tocIndex:12},{value:"page",paraId:19,tocIndex:12},{value:"{{request.params.page}}",paraId:19,tocIndex:12},{value:"limit",paraId:19,tocIndex:12},{value:"{{request.params.pageSize}}",paraId:19,tocIndex:12},{value:"You can easily debug the API by clicking Try it out.",paraId:20,tocIndex:12},{value:`
      `,paraId:21},{value:"The response format of the third-party API may not be in NocoBase standard, and it needs to be transformed before it can be correctly displayed on the front end.",paraId:22,tocIndex:13},{value:"Adjust the conversion rules based on the response format of the third-party API to ensure the output conforms to the NocoBase standard.",paraId:23,tocIndex:13},{value:"The REST API data source supports three types of variables for API integration:",paraId:24,tocIndex:15},{value:"Custom data source variables",paraId:25,tocIndex:15},{value:"NocoBase request variables",paraId:25,tocIndex:15},{value:"Third-party response variables",paraId:25,tocIndex:15},{value:"Params: URL query parameters (Search Params), which vary depending on the interface.",paraId:26,tocIndex:17},{value:"Headers: Custom request headers, primarily providing specific X- information from NocoBase.",paraId:26,tocIndex:17},{value:"Body: The request body.",paraId:26,tocIndex:17},{value:"Token: The API token for the current NocoBase request.",paraId:26,tocIndex:17},{value:"Currently, only the response body is available.",paraId:27,tocIndex:18},{value:"Below are the variables available for each interface:",paraId:28,tocIndex:18},{value:"Parameter",paraId:29,tocIndex:19},{value:"Description",paraId:29,tocIndex:19},{value:"request.params.page",paraId:29,tocIndex:19},{value:"Current page",paraId:29,tocIndex:19},{value:"request.params.pageSize",paraId:29,tocIndex:19},{value:"Number of items per page",paraId:29,tocIndex:19},{value:"request.params.filter",paraId:29,tocIndex:19},{value:"Filter criteria (must meet NocoBase Filter format)",paraId:29,tocIndex:19},{value:"request.params.sort",paraId:29,tocIndex:19},{value:"Sorting criteria (must meet NocoBase Sort format)",paraId:29,tocIndex:19},{value:"request.params.appends",paraId:29,tocIndex:19},{value:"Fields to load on demand, typically for association fields",paraId:29,tocIndex:19},{value:"request.params.fields",paraId:29,tocIndex:19},{value:"Fields to include (whitelist)",paraId:29,tocIndex:19},{value:"request.params.except",paraId:29,tocIndex:19},{value:"Fields to exclude (blacklist)",paraId:29,tocIndex:19},{value:"Parameter",paraId:30,tocIndex:20},{value:"Description",paraId:30,tocIndex:20},{value:"request.params.filterByTk",paraId:30,tocIndex:20},{value:"Required, typically the current record ID",paraId:30,tocIndex:20},{value:"request.params.filter",paraId:30,tocIndex:20},{value:"Filter criteria (must meet NocoBase Filter format)",paraId:30,tocIndex:20},{value:"request.params.appends",paraId:30,tocIndex:20},{value:"Fields to load on demand, typically for association fields",paraId:30,tocIndex:20},{value:"request.params.fields",paraId:30,tocIndex:20},{value:"Fields to include (whitelist)",paraId:30,tocIndex:20},{value:"request.params.except",paraId:30,tocIndex:20},{value:"Fields to exclude (blacklist)",paraId:30,tocIndex:20},{value:"Parameter",paraId:31,tocIndex:21},{value:"Description",paraId:31,tocIndex:21},{value:"request.params.whiteList",paraId:31,tocIndex:21},{value:"Whitelist",paraId:31,tocIndex:21},{value:"request.params.blacklist",paraId:31,tocIndex:21},{value:"Blacklist",paraId:31,tocIndex:21},{value:"request.body",paraId:31,tocIndex:21},{value:"Initial data for creation",paraId:31,tocIndex:21},{value:"Parameter",paraId:32,tocIndex:22},{value:"Description",paraId:32,tocIndex:22},{value:"request.params.filterByTk",paraId:32,tocIndex:22},{value:"Required, typically the current record ID",paraId:32,tocIndex:22},{value:"request.params.filter",paraId:32,tocIndex:22},{value:"Filter criteria (must meet NocoBase Filter format)",paraId:32,tocIndex:22},{value:"request.params.whiteList",paraId:32,tocIndex:22},{value:"Whitelist",paraId:32,tocIndex:22},{value:"request.params.blacklist",paraId:32,tocIndex:22},{value:"Blacklist",paraId:32,tocIndex:22},{value:"request.body",paraId:32,tocIndex:22},{value:"Data for update",paraId:32,tocIndex:22},{value:"Parameter",paraId:33,tocIndex:23},{value:"Description",paraId:33,tocIndex:23},{value:"request.params.filterByTk",paraId:33,tocIndex:23},{value:"Required, typically the current record ID",paraId:33,tocIndex:23},{value:"request.params.filter",paraId:33,tocIndex:23},{value:"Filtering conditions",paraId:33,tocIndex:23},{value:"Field metadata (Fields) is extracted from the CRUD interface data of the adapted resource to serve as the fields of the collection.",paraId:34,tocIndex:24},{value:"Field metadata extraction.",paraId:35,tocIndex:24},{value:"Field and preview.",paraId:36,tocIndex:24},{value:"Edit fields (similar to other data sources).",paraId:37,tocIndex:24},{value:"Once the collection is configured, you can add blocks to the interface.",paraId:38,tocIndex:25}]},906043:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 1 measure and 2 dimensions. One dimension will serve as the X-axis field, and the other will be used as the series (category) field.",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"XField",paraId:1,tocIndex:4},{value:"The dimension field for the X-axis",paraId:1,tocIndex:4},{value:"seriesField",paraId:1,tocIndex:4},{value:"The dimension field used for categorization",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Define the chart size, either by fixed aspect ratio or fixed height",paraId:1,tocIndex:4},{value:"Light mode theme",paraId:1,tocIndex:4},{value:"Select this option to preview when the system is in light mode",paraId:1,tocIndex:4},{value:"Dark mode theme",paraId:1,tocIndex:4},{value:"Select this option to preview when the system is in dark mode",paraId:1,tocIndex:4},{value:"Show legend",paraId:1,tocIndex:4},{value:"Toggle the display of the legend",paraId:1,tocIndex:4},{value:"Legend orient",paraId:1,tocIndex:4},{value:"Choose the direction of the legend display, either horizontal or vertical",paraId:1,tocIndex:4},{value:"Legend position (left, bottom, right, top)",paraId:1,tocIndex:4},{value:"Define the relative position of the legend",paraId:1,tocIndex:4},{value:"Label type",paraId:1,tocIndex:4},{value:"Control the visibility and type of labels",paraId:1,tocIndex:4},{value:"Smooth curve",paraId:1,tocIndex:4},{value:"Enable or disable the smoothing of curves",paraId:1,tocIndex:4},{value:"Whether stack",paraId:1,tocIndex:4},{value:"Enable or disable data stacking",paraId:1,tocIndex:4},{value:"X-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the X-axis title",paraId:1,tocIndex:4},{value:"Y-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the Y-axis title",paraId:1,tocIndex:4},{value:"X-Axis label rotate",paraId:1,tocIndex:4},{value:"Set the rotation angle of X-axis labels, helpful for displaying more labels when they are dense",paraId:1,tocIndex:4},{value:"Padding",paraId:1,tocIndex:4},{value:"Adjust the internal padding of the chart",paraId:1,tocIndex:4},{value:"Split line",paraId:1,tocIndex:4},{value:"Configure the display and style of grid lines",paraId:1,tocIndex:4},{value:"Mark line",paraId:1,tocIndex:4},{value:"Add marker lines with custom title, value, and color",paraId:1,tocIndex:4},{value:"Now, I will move on to the final refinement stage.",paraId:2,tocIndex:4},{value:"For this final pass, I've refined the text to enhance readability and ensure clarity, while keeping it professional and technically accurate.",paraId:3,tocIndex:5},{value:"This setup includes 1 measure and 2 dimensions. One dimension acts as the X-axis field, while the other is used as the series (category) field.",paraId:4,tocIndex:9},{value:"Option",paraId:5,tocIndex:10},{value:"Description",paraId:5,tocIndex:10},{value:"X-axis Field",paraId:5,tocIndex:10},{value:"Field used to define the X-axis dimension",paraId:5,tocIndex:10},{value:"Category Field",paraId:5,tocIndex:10},{value:"Field used to categorize data",paraId:5,tocIndex:10},{value:"Size",paraId:5,tocIndex:10},{value:"Specify chart size, either by fixed aspect ratio or fixed height",paraId:5,tocIndex:10},{value:"Light Mode Theme",paraId:5,tocIndex:10},{value:"Select for preview in light mode",paraId:5,tocIndex:10},{value:"Dark Mode Theme",paraId:5,tocIndex:10},{value:"Select for preview in dark mode",paraId:5,tocIndex:10},{value:"Show Legend",paraId:5,tocIndex:10},{value:"Toggle the visibility of the legend",paraId:5,tocIndex:10},{value:"Legend Direction",paraId:5,tocIndex:10},{value:"Set legend direction (horizontal or vertical)",paraId:5,tocIndex:10},{value:"Legend Position (Left, Bottom, Right, Top)",paraId:5,tocIndex:10},{value:"Set the position of the legend relative to the chart",paraId:5,tocIndex:10},{value:"Label Type",paraId:5,tocIndex:10},{value:"Manage the visibility and format of the labels",paraId:5,tocIndex:10},{value:"Smooth Curve",paraId:5,tocIndex:10},{value:"Enable smoothing of the curve for a more polished look",paraId:5,tocIndex:10},{value:"Stack Data",paraId:5,tocIndex:10},{value:"Option to stack values for cumulative data visualization",paraId:5,tocIndex:10},{value:"X-axis Title",paraId:5,tocIndex:10},{value:"Adjust the visibility and position of the X-axis title",paraId:5,tocIndex:10},{value:"Y-axis Title",paraId:5,tocIndex:10},{value:"Adjust the visibility and position of the Y-axis title",paraId:5,tocIndex:10},{value:"X-axis Label Rotation",paraId:5,tocIndex:10},{value:"Rotate X-axis labels to optimize space, useful when labels are densely packed",paraId:5,tocIndex:10},{value:"Padding",paraId:5,tocIndex:10},{value:"Customize the inner padding of the chart",paraId:5,tocIndex:10},{value:"Grid Lines",paraId:5,tocIndex:10},{value:"Define the visibility and style of grid lines",paraId:5,tocIndex:10},{value:"Marker Line",paraId:5,tocIndex:10},{value:"Add marker lines, and set their title, value, and color",paraId:5,tocIndex:10}]},589566:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 1 measure and 2 dimensions. 1 dimension is used as the Y-axis field, and the other as the series field.",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"yField",paraId:1,tocIndex:4},{value:"The dimension field for the Y-axis",paraId:1,tocIndex:4},{value:"seriesField",paraId:1,tocIndex:4},{value:"The dimension field for categorization",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set the size of the chart, either with a fixed aspect ratio or a fixed height",paraId:1,tocIndex:4},{value:"Light mode theme",paraId:1,tocIndex:4},{value:"Choose this option to preview the chart when the system is in light mode",paraId:1,tocIndex:4},{value:"Dark mode theme",paraId:1,tocIndex:4},{value:"Choose this option to preview the chart when the system is in dark mode",paraId:1,tocIndex:4},{value:"Show legend",paraId:1,tocIndex:4},{value:"Control whether the legend is displayed",paraId:1,tocIndex:4},{value:"Legend orient",paraId:1,tocIndex:4},{value:"Control the direction of the legend, either horizontal or vertical",paraId:1,tocIndex:4},{value:"Legend position (left, bottom, right, top)",paraId:1,tocIndex:4},{value:"Control the relative position of the legend",paraId:1,tocIndex:4},{value:"Label type",paraId:1,tocIndex:4},{value:"Control whether the labels are displayed and the type of labels shown",paraId:1,tocIndex:4},{value:"Label position",paraId:1,tocIndex:4},{value:"Control the position of the labels, such as top, inside, or inside top",paraId:1,tocIndex:4},{value:"Stack",paraId:1,tocIndex:4},{value:"Control whether the bars are stacked: not stacked, stacked, or percentage stacked",paraId:1,tocIndex:4},{value:"Bar width (min, max)",paraId:1,tocIndex:4},{value:"Control the width of the bars, which can be a fixed value or percentage, and can even be negative",paraId:1,tocIndex:4},{value:"Bar gap",paraId:1,tocIndex:4},{value:"Spacing between bars, as a percentage of the bar width",paraId:1,tocIndex:4},{value:"Bar category gap",paraId:1,tocIndex:4},{value:"Spacing between different categories, as a percentage of the bar width",paraId:1,tocIndex:4},{value:"Color by",paraId:1,tocIndex:4},{value:"Control whether the bar colors are distinguished by category or data",paraId:1,tocIndex:4},{value:"Colors",paraId:1,tocIndex:4},{value:"Precisely control the color for each category",paraId:1,tocIndex:4},{value:"X-Axis title",paraId:1,tocIndex:4},{value:"Control the position of the X-axis title",paraId:1,tocIndex:4},{value:"Y-Axis title",paraId:1,tocIndex:4},{value:"Control the position of the Y-axis title",paraId:1,tocIndex:4},{value:"Y-Axis label rotate",paraId:1,tocIndex:4},{value:"Control the rotation angle of the Y-axis labels, useful for displaying more labels when space is tight",paraId:1,tocIndex:4},{value:"Padding",paraId:1,tocIndex:4},{value:"Adjust the padding inside the chart",paraId:1,tocIndex:4},{value:"Split line",paraId:1,tocIndex:4},{value:"Control whether the grid lines are displayed and their style",paraId:1,tocIndex:4}]},923978:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 1 measure and 2 dimensions. 1 dimension serves as the X-axis field (X field), and the other as the Series field.",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"xField",paraId:1,tocIndex:4},{value:"Dimension field for the X-axis",paraId:1,tocIndex:4},{value:"seriesField",paraId:1,tocIndex:4},{value:"Dimension field for categorization",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set the chart size, either with a fixed aspect ratio or a fixed height",paraId:1,tocIndex:4},{value:"Light mode theme",paraId:1,tocIndex:4},{value:"Preview the chart when the system is in light mode",paraId:1,tocIndex:4},{value:"Dark mode theme",paraId:1,tocIndex:4},{value:"Preview the chart when the system is in dark mode",paraId:1,tocIndex:4},{value:"Show legend",paraId:1,tocIndex:4},{value:"Toggle the visibility of the legend",paraId:1,tocIndex:4},{value:"Legend orient Legend orient",paraId:1,tocIndex:4},{value:"Set the orientation of the legend, either horizontal or vertical",paraId:1,tocIndex:4},{value:"Legend position (left, bottom, right, top)",paraId:1,tocIndex:4},{value:"Set the position of the legend relative to the chart",paraId:1,tocIndex:4},{value:"Label type",paraId:1,tocIndex:4},{value:"Control whether to display labels and which type of labels to show",paraId:1,tocIndex:4},{value:"Label position",paraId:1,tocIndex:4},{value:"Set the position of the labels, such as top, inside, or inside top",paraId:1,tocIndex:4},{value:"Stack",paraId:1,tocIndex:4},{value:"Control whether the bars are stacked, with options for no stacking, stacking, or percentage stacking  ",paraId:1,tocIndex:4},{value:" ",paraId:1,tocIndex:4},{value:"Bar width (min, max)",paraId:1,tocIndex:4},{value:"Control the width of the bars, which can be a fixed value, percentage, or even negative values",paraId:1,tocIndex:4},{value:"Bar gap",paraId:1,tocIndex:4},{value:"Set the spacing between bars, as a percentage of the bar width",paraId:1,tocIndex:4},{value:"Bar category gap",paraId:1,tocIndex:4},{value:"Set the spacing between different categories, as a percentage of the bar width",paraId:1,tocIndex:4},{value:"Color by",paraId:1,tocIndex:4},{value:"Set bar colors by category or by data",paraId:1,tocIndex:4},{value:"Colors",paraId:1,tocIndex:4},{value:"Fine-tune the color for each category",paraId:1,tocIndex:4},{value:"X-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the X-axis title",paraId:1,tocIndex:4},{value:"Y-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the Y-axis title",paraId:1,tocIndex:4},{value:"X-Axis label rotate",paraId:1,tocIndex:4},{value:"Adjust the rotation angle of the X-axis labels to display more labels when they are dense",paraId:1,tocIndex:4},{value:"Padding",paraId:1,tocIndex:4},{value:"Adjust the chart's inner padding",paraId:1,tocIndex:4},{value:"Split line",paraId:1,tocIndex:4},{value:"Control whether gridlines are displayed and their style",paraId:1,tocIndex:4},{value:"Mark line",paraId:1,tocIndex:4},{value:"Add marker lines with custom titles, values, and colors",paraId:1,tocIndex:4}]},303633:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 2 metrics and 1 dimension. One metric will be assigned as the left-side X-axis field, and the other as the right-side X-axis field.",paraId:0,tocIndex:2},{value:"Option",paraId:1,tocIndex:3},{value:"Description",paraId:1,tocIndex:3},{value:"Left X field",paraId:1,tocIndex:3},{value:"Metric field for the left-side X-axis",paraId:1,tocIndex:3},{value:"Right X field",paraId:1,tocIndex:3},{value:"Metric field for the right-side X-axis",paraId:1,tocIndex:3},{value:"yField",paraId:1,tocIndex:3},{value:"Dimension field",paraId:1,tocIndex:3},{value:"Size",paraId:1,tocIndex:3},{value:"Set the size of the chart, either with a fixed aspect ratio or fixed height",paraId:1,tocIndex:3},{value:"Light mode theme",paraId:1,tocIndex:3},{value:"Select this option to preview in the system's light mode",paraId:1,tocIndex:3},{value:"Dark mode theme",paraId:1,tocIndex:3},{value:"Select this option to preview in the system's dark mode",paraId:1,tocIndex:3},{value:"Show legend",paraId:1,tocIndex:3},{value:"Controls whether to display the legend",paraId:1,tocIndex:3},{value:"Label type",paraId:1,tocIndex:3},{value:"Controls whether to show labels and their display types",paraId:1,tocIndex:3},{value:"Colors",paraId:1,tocIndex:3},{value:"Allows fine control of the color for each category",paraId:1,tocIndex:3},{value:"Y-Axis label rotate",paraId:1,tocIndex:3},{value:"Controls the rotation angle of Y-axis labels, useful when labels are dense",paraId:1,tocIndex:3},{value:"Padding",paraId:1,tocIndex:3},{value:"Adjust the padding within the chart",paraId:1,tocIndex:3},{value:"Split line",paraId:1,tocIndex:3},{value:"Controls whether to display grid lines and their styles",paraId:1,tocIndex:3}]},94580:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Set the chart size, choosing either a fixed aspect ratio or a fixed height.",paraId:0,tocIndex:3},{value:"Light mode theme",paraId:0,tocIndex:3},{value:"Required for previewing the chart in light mode.",paraId:0,tocIndex:3},{value:"Dark mode theme",paraId:0,tocIndex:3},{value:"Required for previewing the chart in dark mode.",paraId:0,tocIndex:3},{value:"Show legend",paraId:0,tocIndex:3},{value:"Toggles the visibility of the chart legend.",paraId:0,tocIndex:3},{value:"Legend orient",paraId:0,tocIndex:3},{value:"Sets the orientation of the legend, either horizontally or vertically.",paraId:0,tocIndex:3},{value:"Legend position (left, bottom, right, top)",paraId:0,tocIndex:3},{value:"Adjusts the position of the legend relative to the chart, offering flexibility in placement.",paraId:0,tocIndex:3},{value:"Label type",paraId:0,tocIndex:3},{value:"Controls whether labels are shown and specifies the label format.",paraId:0,tocIndex:3},{value:"Show label line",paraId:0,tocIndex:3},{value:"Determines whether the label line is displayed, applicable only when labels are positioned outside the funnel.",paraId:0,tocIndex:3},{value:"Label position",paraId:0,tocIndex:3},{value:"Sets the label position, either inside or outside of the funnel.",paraId:0,tocIndex:3},{value:"Funnel size (min, max)",paraId:0,tocIndex:3},{value:"Adjusts the size of the funnel chart. Modifying the minimum value controls whether the funnel ends in a pointed or flat base.",paraId:0,tocIndex:3},{value:"Padding",paraId:0,tocIndex:3},{value:"Adjusts the internal padding around the chart.",paraId:0,tocIndex:3}]},218937:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The use of ",paraId:0},{value:" ECharts ",paraId:0},{value:" enables data visualization, supporting more chart types such as funnel charts, radar charts, and provides a more user-friendly visualization configuration.",paraId:0}]},540224:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 1 measure and 2 dimensions. 1 dimension serves as the X-axis field, and the other as the series field.",paraId:0,tocIndex:3},{value:"Configuration Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"xField",paraId:1,tocIndex:4},{value:"The dimension field for the X-axis",paraId:1,tocIndex:4},{value:"seriesField",paraId:1,tocIndex:4},{value:"The dimension field for classification",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set the chart size, either with a fixed aspect ratio or a fixed height",paraId:1,tocIndex:4},{value:"Light mode theme",paraId:1,tocIndex:4},{value:"Select to preview in light mode in systems with light mode enabled",paraId:1,tocIndex:4},{value:"Dark mode theme",paraId:1,tocIndex:4},{value:"Select to preview in dark mode in systems with dark mode enabled",paraId:1,tocIndex:4},{value:"Show legend",paraId:1,tocIndex:4},{value:"Control whether to display the legend",paraId:1,tocIndex:4},{value:"Legend orient",paraId:1,tocIndex:4},{value:"Control the direction of the legend, either horizontal or vertical",paraId:1,tocIndex:4},{value:"Legend position (left, bottom, right, top)",paraId:1,tocIndex:4},{value:"Control the position of the legend relative to the chart",paraId:1,tocIndex:4},{value:"Label type",paraId:1,tocIndex:4},{value:"Control whether and how labels are displayed, only visible when marker points are displayed",paraId:1,tocIndex:4},{value:"Smooth curve",paraId:1,tocIndex:4},{value:"Enable or disable smooth curves in the line chart",paraId:1,tocIndex:4},{value:"Whether stack",paraId:1,tocIndex:4},{value:"Enable or disable stacked data values",paraId:1,tocIndex:4},{value:"Symbol",paraId:1,tocIndex:4},{value:"Control whether to display marker points and their styles",paraId:1,tocIndex:4},{value:"X-Axis title",paraId:1,tocIndex:4},{value:"Control the position of the X-axis title",paraId:1,tocIndex:4},{value:"Y-Axis title",paraId:1,tocIndex:4},{value:"Control the position of the Y-axis title",paraId:1,tocIndex:4},{value:"X-Axis label rotate",paraId:1,tocIndex:4},{value:"Control the rotation angle of X-axis labels, useful for displaying more labels in dense data",paraId:1,tocIndex:4},{value:"Padding",paraId:1,tocIndex:4},{value:"Adjust the chart\u2019s internal padding",paraId:1,tocIndex:4},{value:"Split line",paraId:1,tocIndex:4},{value:"Control the visibility and style of grid lines",paraId:1,tocIndex:4},{value:"Mark line",paraId:1,tocIndex:4},{value:"Add marker lines and set title, value, and color",paraId:1,tocIndex:4}]},650841:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Sets the chart's size, with a fixed aspect ratio or fixed height",paraId:0,tocIndex:3},{value:"Light mode theme",paraId:0,tocIndex:3},{value:"Must be selected to preview when the system is in light mode",paraId:0,tocIndex:3},{value:"Dark mode theme",paraId:0,tocIndex:3},{value:"Must be selected to preview when the system is in dark mode",paraId:0,tocIndex:3},{value:"Show legend",paraId:0,tocIndex:3},{value:"Controls whether the legend is displayed",paraId:0,tocIndex:3},{value:"Legend orient",paraId:0,tocIndex:3},{value:"Controls the orientation of the legend, either horizontal or vertical",paraId:0,tocIndex:3},{value:"Legend position (left, bottom, right, top)",paraId:0,tocIndex:3},{value:"Controls the relative position of the legend",paraId:0,tocIndex:3},{value:"Label type",paraId:0,tocIndex:3},{value:"Controls whether labels are displayed and their type",paraId:0,tocIndex:3},{value:"Show label line",paraId:0,tocIndex:3},{value:"Controls whether label lines are displayed, effective only when the labels are outside the pie",paraId:0,tocIndex:3},{value:"Label position",paraId:0,tocIndex:3},{value:"Controls the position of the labels: inside, outside, or middle. When in the middle, the label only appears when hovering over the corresponding part of the chart",paraId:0,tocIndex:3},{value:"Outter radius",paraId:0,tocIndex:3},{value:"Adjusts the outer radius of the chart",paraId:0,tocIndex:3},{value:"Inner radius",paraId:0,tocIndex:3},{value:"Adjusts the inner radius of the chart. Can be used to create a donut chart",paraId:0,tocIndex:3},{value:"Center coordinates",paraId:0,tocIndex:3},{value:"Controls the position of the chart, which can be set with fixed values or percentages",paraId:0,tocIndex:3},{value:"Colors",paraId:0,tocIndex:3},{value:"Fine-tunes the color for each category",paraId:0,tocIndex:3}]},671704:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Each value of the dimension field acts as a variable, with each measure forming one radar area.",paraId:0,tocIndex:3},{value:"Each measure acts as a variable, with each value of the dimension field forming one radar area.",paraId:1,tocIndex:4},{value:"Option",paraId:2,tocIndex:5},{value:"Description",paraId:2,tocIndex:5},{value:"Size",paraId:2,tocIndex:5},{value:"Set the size of the chart, either by fixing the aspect ratio or a fixed height",paraId:2,tocIndex:5},{value:"Light mode theme",paraId:2,tocIndex:5},{value:"Preview requires selection when the system is in light mode",paraId:2,tocIndex:5},{value:"Dark mode theme",paraId:2,tocIndex:5},{value:"Preview requires selection when the system is in dark mode",paraId:2,tocIndex:5},{value:"Show legend",paraId:2,tocIndex:5},{value:"Controls whether the legend is displayed",paraId:2,tocIndex:5},{value:"Legend orient",paraId:2,tocIndex:5},{value:"Controls the direction of the legend, either horizontal or vertical",paraId:2,tocIndex:5},{value:"Legend position (left, bottom, right, top)",paraId:2,tocIndex:5},{value:"Controls the relative position of the legend",paraId:2,tocIndex:5},{value:"Shape",paraId:2,tocIndex:5},{value:"Polygon or circle",paraId:2,tocIndex:5},{value:"Range",paraId:2,tocIndex:5},{value:"Controls the minimum and maximum values of the variables",paraId:2,tocIndex:5},{value:"Radius",paraId:2,tocIndex:5},{value:"Adjusts the radius of the chart",paraId:2,tocIndex:5},{value:"Center coordinate",paraId:2,tocIndex:5},{value:"Controls the position of the chart, can be fixed values or percentages",paraId:2,tocIndex:5}]},503581:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure one metric and two dimensions. One of the dimensions will serve as the X-axis field (X field), while the other will act as the series field.",paraId:0,tocIndex:3},{value:"Configuration Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"xField",paraId:1,tocIndex:4},{value:"Dimension field for the X-axis",paraId:1,tocIndex:4},{value:"seriesField",paraId:1,tocIndex:4},{value:"Dimension field for categorization",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set the chart size, either fixed aspect ratio or fixed height",paraId:1,tocIndex:4},{value:"Light mode theme",paraId:1,tocIndex:4},{value:"Preview available when the system is in light mode",paraId:1,tocIndex:4},{value:"Dark mode theme",paraId:1,tocIndex:4},{value:"Preview available when the system is in dark mode",paraId:1,tocIndex:4},{value:"Show legend",paraId:1,tocIndex:4},{value:"Toggle the visibility of the legend",paraId:1,tocIndex:4},{value:"Legend orient",paraId:1,tocIndex:4},{value:"Control the orientation of the legend, either horizontal or vertical",paraId:1,tocIndex:4},{value:"Legend position (left, bottom, right, top)",paraId:1,tocIndex:4},{value:"Control the relative position of the legend",paraId:1,tocIndex:4},{value:"Label type",paraId:1,tocIndex:4},{value:"Control whether labels are shown and the type of labels",paraId:1,tocIndex:4},{value:"X-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the X-axis title",paraId:1,tocIndex:4},{value:"Y-Axis title",paraId:1,tocIndex:4},{value:"Control the display position of the Y-axis title",paraId:1,tocIndex:4},{value:"X-Axis label rotate",paraId:1,tocIndex:4},{value:"Adjust the rotation angle of the X-axis labels; useful when there are dense labels to display more effectively",paraId:1,tocIndex:4},{value:"Padding",paraId:1,tocIndex:4},{value:"Adjust the internal padding of the chart",paraId:1,tocIndex:4},{value:"Split line",paraId:1,tocIndex:4},{value:"Control whether the grid lines are displayed and their style",paraId:1,tocIndex:4},{value:"Mark line",paraId:1,tocIndex:4},{value:"Add reference lines, set their title, value, and color",paraId:1,tocIndex:4}]},69182:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Set the size of the chart, either with a fixed aspect ratio or fixed height",paraId:0,tocIndex:3},{value:"Light mode theme",paraId:0,tocIndex:3},{value:"Must be selected for preview when the system is in light mode",paraId:0,tocIndex:3},{value:"Dark mode theme",paraId:0,tocIndex:3},{value:"Must be selected for preview when the system is in dark mode",paraId:0,tocIndex:3},{value:"Label type",paraId:0,tocIndex:3},{value:"Controls whether labels are displayed and the type of display",paraId:0,tocIndex:3}]},219835:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Sets the size of the chart, with either a fixed aspect ratio or fixed height",paraId:0,tocIndex:3},{value:"Light mode theme",paraId:0,tocIndex:3},{value:"Select this option to preview when the system is in light mode",paraId:0,tocIndex:3},{value:"Dark mode theme",paraId:0,tocIndex:3},{value:"Select this option to preview when the system is in dark mode",paraId:0,tocIndex:3},{value:"Shape",paraId:0,tocIndex:3},{value:"Controls the shape of the chart",paraId:0,tocIndex:3}]},252057:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In this setup, configure one metric and two dimensions. One dimension serves as the X-axis field (X field), while the other acts as the category field (Series field). The X-axis field and the category field can be the same.",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"X-axis Field",paraId:1,tocIndex:4},{value:"The field used for the X-axis dimension",paraId:1,tocIndex:4},{value:"Category Field",paraId:1,tocIndex:4},{value:"The field used for the category dimension",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Sets the chart size, either fixed aspect ratio or height",paraId:1,tocIndex:4},{value:"Grouping",paraId:1,tocIndex:4},{value:"Specifies whether to display grouped bars",paraId:1,tocIndex:4},{value:"Stacking",paraId:1,tocIndex:4},{value:"Specifies whether to stack the bars",paraId:1,tocIndex:4},{value:"Percentage View",paraId:1,tocIndex:4},{value:"Specifies whether percentage display",paraId:1,tocIndex:4}]},963127:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure 1 measure and 2 dimensions, where one dimension is used as the X-axis field (X field) and the other as the category field (Series field). The X-axis field and the category field can be the same.",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"X-axis Field",paraId:1,tocIndex:4},{value:"The dimension field for the X-axis",paraId:1,tocIndex:4},{value:"Category Field",paraId:1,tocIndex:4},{value:"The dimension field for categorization",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set the size of the chart, either with a fixed aspect ratio or fixed height",paraId:1,tocIndex:4},{value:"Grouped Display",paraId:1,tocIndex:4},{value:"Toggle grouped display",paraId:1,tocIndex:4},{value:"Stacked Display",paraId:1,tocIndex:4},{value:"Toggle stacked display",paraId:1,tocIndex:4},{value:"Percentage Display",paraId:1,tocIndex:4},{value:"Toggle percentage display",paraId:1,tocIndex:4}]},177837:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Sets the chart size, either with a fixed aspect ratio or a fixed height",paraId:0,tocIndex:3}]},163522:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The line chart can be configured with one measure and one dimension, as illustrated below:",paraId:0,tocIndex:2},{value:"Configure one metric and two dimensions. One of the dimensions is the X-axis field (X field) and the other is the Series field (Series field).",paraId:1,tocIndex:3},{value:"Configuration Option",paraId:2,tocIndex:4},{value:"Description",paraId:2,tocIndex:4},{value:"X-axis Field",paraId:2,tocIndex:4},{value:"The dimension field that defines the X-axis",paraId:2,tocIndex:4},{value:"Series Field",paraId:2,tocIndex:4},{value:"The dimension field that defines the categories",paraId:2,tocIndex:4},{value:"Size",paraId:2,tocIndex:4},{value:"Set the size of the chart, either fixed aspect ratio or fixed height",paraId:2,tocIndex:4},{value:"Smooth Curves",paraId:2,tocIndex:4},{value:"Enable or disable smooth curve rendering",paraId:2,tocIndex:4},{value:"Stack Data",paraId:2,tocIndex:4},{value:"Whether to stack the data values on top of each other",paraId:2,tocIndex:4}]},24817:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Use ",paraId:0,tocIndex:0},{value:"Ant Design Charts",paraId:0,tocIndex:0},{value:" 2.x for data visualization, supporting common basic chart types.",paraId:0,tocIndex:0}]},49069:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Option",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Size",paraId:0,tocIndex:3},{value:"Adjust the chart size, either by maintaining a fixed aspect ratio or setting a fixed height.",paraId:0,tocIndex:3}]},14465:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configure one metric and two dimensions. One of the dimensions is the X-axis field (X field) and the other is the Series field (Series field).",paraId:0,tocIndex:3},{value:"Option",paraId:1,tocIndex:4},{value:"Description",paraId:1,tocIndex:4},{value:"X-axis Field",paraId:1,tocIndex:4},{value:"The dimension used to define the X-axis of the chart.",paraId:1,tocIndex:4},{value:"Series Field",paraId:1,tocIndex:4},{value:"The dimension used to categorize data points into distinct series.",paraId:1,tocIndex:4},{value:"Size",paraId:1,tocIndex:4},{value:"Set chart\u2019s size, either by setting a fixed aspect ratio or a fixed height.",paraId:1,tocIndex:4}]},622228:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Provide tables and statistical presentations using ",paraId:0,tocIndex:0},{value:"Ant Design",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0}]},656427:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configuration Item",paraId:0,tocIndex:3},{value:"Description",paraId:0,tocIndex:3},{value:"Link",paraId:0,tocIndex:3},{value:"Fixed link, clickable for redirection",paraId:0,tocIndex:3}]},785504:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`{
  "columns": [
    { "key": "fieldName1", "dataIndex": "fieldName1", "title": "fieldTitle1" },
    { "key": "fieldName2", "dataIndex": "fieldName2", "title": "fieldTitle2" }
  ]
}
`,paraId:0,tocIndex:4}]},885891:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},545228:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase uses ",paraId:0,tocIndex:1},{value:"Ant Design Charts",paraId:0,tocIndex:1},{value:" as the default chart library, which includes commonly used chart types. Besides the built-in chart types, NocoBase also supports integrating other chart types or libraries, such as ECharts. This section primarily explains how to extend a new chart type.",paraId:0,tocIndex:1},{value:"In the visualization plugin, each chart type is defined using a class that must implement the ",paraId:1,tocIndex:2},{value:"ChartType",paraId:2,tocIndex:2},{value:" interface. To simplify development, we provide a ",paraId:1,tocIndex:2},{value:"Chart",paraId:3,tocIndex:2},{value:" base class, which partially implements the ",paraId:1,tocIndex:2},{value:"ChartType",paraId:1,tocIndex:2},{value:" interface. In most cases, to extend a chart type, you only need to inherit from the ",paraId:1,tocIndex:2},{value:"Chart",paraId:1,tocIndex:2},{value:" class and implement the required methods.",paraId:1,tocIndex:2},{value:`class CustomChart extends Chart {
  constructor({ name, title, Component, config }: ChartProps) {
    // ...
  }

  init(
    fields: FieldOption[],
    {
      measures,
      dimensions,
    }: { measures: MeasureProps[]; dimensions: DimensionProps[] },
  ) {
    // ...
  }

  getProps({ data, general, advanced, fieldProps }: RenderProps) {
    // ...
  }

  getReference() {
    // ...
  }
}
`,paraId:4,tocIndex:2},{value:"The basic information for a chart type includes:",paraId:5,tocIndex:3},{value:"Parameter",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:"name",paraId:6,tocIndex:3},{value:"Identifier",paraId:6,tocIndex:3},{value:"title",paraId:6,tocIndex:3},{value:"Display title",paraId:6,tocIndex:3},{value:"Component",paraId:6,tocIndex:3},{value:"Component used to render the chart",paraId:6,tocIndex:3},{value:"config",paraId:6,tocIndex:3},{value:"Basic visualization configuration form",paraId:6,tocIndex:3},{value:"Example:",paraId:7,tocIndex:3},{value:`new CustomChart({
  name: 'custom',
  title: 'Custom Chart',
  Component: CustomChart,
  config: ['xField', 'yField', 'seriesField'],
});
`,paraId:8,tocIndex:3},{value:"Refer to ",paraId:9,tocIndex:3},{value:"Chart",paraId:10,tocIndex:3},{value:" for specific usage.",paraId:9,tocIndex:3},{value:"When a user selects a chart, we may want to initialize the chart configuration based on the user\u2019s data query settings to reduce manual configuration.",paraId:11,tocIndex:4},{value:`
Each time a chart is selected, the plugin internally calls the `,paraId:11,tocIndex:4},{value:"init()",paraId:11,tocIndex:4},{value:" method of the chart class, passing all the field configurations from the current data table, as well as the current measures and dimensions configuration. The ",paraId:11,tocIndex:4},{value:"init()",paraId:11,tocIndex:4},{value:" method can then initialize the chart configuration based on the parameters.",paraId:11,tocIndex:4},{value:`
The `,paraId:11,tocIndex:4},{value:"Chart",paraId:11,tocIndex:4},{value:" class includes an ",paraId:11,tocIndex:4},{value:"infer()",paraId:11,tocIndex:4},{value:" method, which can be used to easily infer the initial x-axis, y-axis, and category fields configuration.",paraId:11,tocIndex:4},{value:`
Example:`,paraId:11,tocIndex:4},{value:`init(
  fields: FieldOption[],
  {
    measures,
    dimensions,
  }: { measures: MeasureProps[]; dimensions: DimensionProps[] },
) {
  const { xField, yField, seriesField } = this.infer(fields, { measures, dimensions });
  return {
    general: {
      xField: xField?.value,
      yField: yField?.value,
      seriesField: seriesField?.value,
    },
  };
}
`,paraId:12,tocIndex:4},{value:"After obtaining the user\u2019s chart configuration, we may need to further process the data before passing it as properties to the chart component. The ",paraId:13,tocIndex:5},{value:"getProps()",paraId:13,tocIndex:5},{value:" method accepts chart data, chart configuration, and related field information as parameters, processes them, and returns the final properties passed to the chart component.",paraId:13,tocIndex:5},{value:"For example, in a \u201Cstatistics\u201D chart:",paraId:14,tocIndex:5},{value:`getProps({ data, fieldProps, general, advanced }: RenderProps) {
  const record = data[0] || {};
  const field = general?.field;
  const props = fieldProps[field];
  return {
    value: record[field],
    formatter: props?.transformer,
    ...general,
    ...advanced,
  };
}
`,paraId:15,tocIndex:5},{value:"The ",paraId:16,tocIndex:6},{value:"getReference()",paraId:16,tocIndex:6},{value:" method retrieves reference documentation for the current chart type.",paraId:16,tocIndex:6},{value:`getReference() {
  return {
    title: this.title,
    link: \`https://ant.design/components/\${this.name}\`,
  };
}
`,paraId:17,tocIndex:6},{value:'After defining the chart class, we need to add the class instance to the data visualization plugin. When selecting charts, they are grouped for display, with the default group being "Built-in".',paraId:18,tocIndex:7},{value:"We can add a group of charts or add charts to an existing group.",paraId:19,tocIndex:7},{value:`import DataVisualization from '@nocobase/plugin-data-visualization'

class CustomChartsPlugin extends Plugin {
  async load() {
    const plugin = this.app.pm.get(DataVisualization);

    // Add a group of charts
    plugin.charts.addGroup('custom', [...]);

    // Set a group of charts,
    // can be used for overriding an exist group
    plugin.charts.setGroup('custom', [...]);

    // Append a chart to an exist group
    // The name of the chart is required to be unique in a group
    plugin.charts.add('Built-in', new CustomChart({
      // ...
    }));
  }
}
`,paraId:20,tocIndex:7},{value:"Refer to ",paraId:21,tocIndex:7},{value:"ChartGroup",paraId:22,tocIndex:7},{value:" for more details",paraId:21,tocIndex:7},{value:"src/client/chart/g2plot",paraId:23,tocIndex:8},{value:"src/client/chart/antd",paraId:24,tocIndex:8},{value:"ECharts Integration Example",paraId:25,tocIndex:8},{value:"addGroup()",paraId:26},{value:"Add a group of charts.",paraId:27,tocIndex:11},{value:`import DataVisualization from '@nocobase/plugin-data-visualization'

class CustomChartsPlugin extends Plugin {
  async load() {
    const plugin = this.app.pm.get(DataVisualization);

    // Add a group of charts
    plugin.charts.addGroup('custom', {
      title: 'Custom',
      charts: [...],
      sort: 1
    });
  }
}
`,paraId:28,tocIndex:11},{value:"Signature",paraId:29,tocIndex:11},{value:"addGroup(name: string, charts: ChartType[])",paraId:30,tocIndex:11},{value:"Types",paraId:31,tocIndex:11},{value:`interface Group {
  title: string;
  charts: ChartType[];
  sort?: number;
}
`,paraId:32,tocIndex:11},{value:"Details",paraId:33,tocIndex:11},{value:"Parameter",paraId:34,tocIndex:11},{value:"Type",paraId:34,tocIndex:11},{value:"Description",paraId:34,tocIndex:11},{value:"name",paraId:34,tocIndex:11},{value:"string",paraId:34,tocIndex:11},{value:"Grouped Chart Title",paraId:34,tocIndex:11},{value:"charts",paraId:34,tocIndex:11},{value:"ChartType[]",paraId:34,tocIndex:11},{value:"Array of charts",paraId:34,tocIndex:11},{value:"sort",paraId:34,tocIndex:11},{value:"number",paraId:34,tocIndex:11},{value:"Optional, Grouped Chart Sorting",paraId:34,tocIndex:11},{value:"add()",paraId:26},{value:"Add a chart to an existing group.",paraId:35,tocIndex:12},{value:`import DataVisualization from '@nocobase/plugin-data-visualization';

class CustomChartsPlugin extends Plugin {
  async load() {
    const plugin = this.app.pm.get(DataVisualization);

    plugin.charts.add(
      'Built-in',
      new CustomChart({
        // ...
      }),
    );
  }
}
`,paraId:36,tocIndex:12},{value:"Signature",paraId:37,tocIndex:12},{value:"add(group: string, chart: ChartType)",paraId:38,tocIndex:12},{value:"Details",paraId:39,tocIndex:12},{value:"Parameter",paraId:40,tocIndex:12},{value:"Type",paraId:40,tocIndex:12},{value:"Description",paraId:40,tocIndex:12},{value:"group",paraId:40,tocIndex:12},{value:"string",paraId:40,tocIndex:12},{value:"Unique identifier for the chart group",paraId:40,tocIndex:12},{value:"chart",paraId:40,tocIndex:12},{value:"ChartType",paraId:40,tocIndex:12},{value:"Chart to add",paraId:40,tocIndex:12},{value:"constructor()",paraId:26},{value:"Constructor to create a new ",paraId:41,tocIndex:14},{value:"Chart",paraId:41,tocIndex:14},{value:" instance.",paraId:41,tocIndex:14},{value:"Signature",paraId:42,tocIndex:14},{value:"constructor({ name, title, Component, config }: ChartProps)",paraId:43,tocIndex:14},{value:"Types",paraId:44,tocIndex:14},{value:`export type ChartProps = {
  name: string;
  title: string;
  Component: React.FC<any>;
  config?: Config[];
};

export type FieldConfigProps = Partial<{
  name: string;
  title: string;
  required: boolean;
  defaultValue: any;
  description: string;
  options: { label: string; value: any }[];
  componentProps: Record<string, any>;
}>;
export type ConfigType =
  | (FieldConfigProps & { configType?: string })
  | ((props?: FieldConfigProps) => AnySchemaProperties)
  | AnySchemaProperties;
export type Config = string | ConfigType;
`,paraId:45,tocIndex:14},{value:"Details",paraId:46,tocIndex:14},{value:"Property",paraId:47,tocIndex:14},{value:"Type",paraId:47,tocIndex:14},{value:"Description",paraId:47,tocIndex:14},{value:"name",paraId:47,tocIndex:14},{value:"string",paraId:47,tocIndex:14},{value:"Unique identifier for the chart",paraId:47,tocIndex:14},{value:"title",paraId:47,tocIndex:14},{value:"string",paraId:47,tocIndex:14},{value:"Display title of the chart",paraId:47,tocIndex:14},{value:"Component",paraId:47,tocIndex:14},{value:"React.FC<any>",paraId:47,tocIndex:14},{value:"Component used to render the chart",paraId:47,tocIndex:14},{value:"config",paraId:47,tocIndex:14},{value:"Config[]",paraId:48,tocIndex:14},{value:"Optional. Visualization configuration form",paraId:47,tocIndex:14},{value:"The ",paraId:49,tocIndex:15},{value:"config",paraId:49,tocIndex:15},{value:" supports multiple formats, which can be used in combination:",paraId:49,tocIndex:15},{value:'UI Schema field configuration. If you want to use fields already configured in the "Data Configuration" section within the UI Schema, you can use ',paraId:50,tocIndex:15},{value:"x-reactions': '{{ useChartFields }}'",paraId:50,tocIndex:15},{value:".",paraId:50,tocIndex:15},{value:`{
  xField: {
    title: 'xField',
    type: 'string',
    'x-decorator': 'FormItem',
    'x-component': 'Select',
    'x-reactions': '{{ useChartFields }}',
    required,
  }
}
`,paraId:51,tocIndex:15},{value:"Using predefined UI Schema.",paraId:52,tocIndex:15},{value:"For example, ",paraId:53,tocIndex:15},{value:"config: ['field']",paraId:53,tocIndex:15},{value:" corresponds to:",paraId:53,tocIndex:15},{value:`{
  field: {
    title: 'Field',
    type: 'string',
    'x-decorator': 'FormItem',
    'x-component': 'Select',
    'x-reactions': '{{ useChartFields }}',
    required,
  }
}
`,paraId:54,tocIndex:15},{value:"Using predefined UI Schema with some properties replaced, where ",paraId:55,tocIndex:15},{value:"property",paraId:55,tocIndex:15},{value:" refers to the predefined UI Schema identifier.",paraId:55,tocIndex:15},{value:`config: [
  {
    property: 'field',
    name: 'angleField',
    title: 'angleField',
    defaultValue: 'default',
  },
];
`,paraId:56,tocIndex:15},{value:"This corresponds to:",paraId:57,tocIndex:15},{value:`{
  angleField: {
    title: 'angleField',
    type: 'string',
    'x-decorator': 'FormItem',
    'x-component': 'Select',
    'x-reactions': '{{ useChartFields }}',
    required,
    defaultValue: 'default',
  }
}
`,paraId:58,tocIndex:15},{value:"You can find all predefined UI Schema options in the ",paraId:59,tocIndex:15},{value:"/src/client/chart/config.ts",paraId:59,tocIndex:15},{value:" file.",paraId:59,tocIndex:15},{value:`
Additionally, you can add new predefined UI Schema options using the `,paraId:59,tocIndex:15},{value:"addConfigs()",paraId:60,tocIndex:15},{value:" method.",paraId:59,tocIndex:15},{value:"addConfigTypes()",paraId:26},{value:"Adds predefined UI Schema for the chart's visualization configuration form.",paraId:61,tocIndex:16},{value:`// Add
const boolean = ({ name, title, defaultValue = false }: FieldConfigProps) => {
  return {
    [name]: {
      'x-content': lang(title),
      type: 'boolean',
      'x-decorator': 'FormItem',
      'x-component': 'Checkbox',
      default: defaultValue,
    },
  };
};
chart.addConfigTypes({ booleanField });

// Usage
new Chart({
  config: [
    'boolean',
    {
      configType: 'boolean',
      name: 'customBooleanField',
      title: 'Custom Boolean Field',
      defaultValue: true,
    },
  ],
});
`,paraId:62,tocIndex:16},{value:"Signature",paraId:63,tocIndex:16},{value:"addConfigTypes(configs: { [key: string]: ConfigType })",paraId:64,tocIndex:16},{value:"Types",paraId:65,tocIndex:16},{value:`export type ConfigType =
  | (FieldConfigProps & { configType?: string })
  | ((props?: FieldConfigProps) => AnySchemaProperties)
  | AnySchemaProperties;
`,paraId:66,tocIndex:16},{value:"Details",paraId:67,tocIndex:16},{value:"addConfigTypes()",paraId:68,tocIndex:16},{value:" accepts an object, where the ",paraId:68,tocIndex:16},{value:"key",paraId:68,tocIndex:16},{value:" is the unique identifier of the configuration, and the value is a method that retrieves a predefined UI Schema. This method takes parameters that can be replaced and returns the corresponding UI Schema field configuration.",paraId:68,tocIndex:16},{value:"init()",paraId:26},{value:"This function initializes the chart configuration when a chart is selected. It defines the initial settings for the chart\u2019s properties.",paraId:69,tocIndex:17},{value:"Signature",paraId:70,tocIndex:17},{value:`init?: (
  fields: FieldOption[],
  query: {
    measures?: MeasureProps[];
    dimensions?: DimensionProps[];
  },
) => {
  general?: any;
  advanced?: any;
};
`,paraId:71,tocIndex:17},{value:"Types",paraId:72,tocIndex:17},{value:`export type FieldOption = {
  value: string;
  label: string;
  key: string;
  alias?: string;
  name?: string;
  type?: string;
  interface?: string;
  uiSchema?: ISchema;
  target?: string;
  targetFields?: FieldOption[];
};

export type MeasureProps = {
  field: string | string[];
  aggregation?: string;
  alias?: string;
};

export type DimensionProps = {
  field: string | string[];
  alias?: string;
  format?: string;
};
`,paraId:73,tocIndex:17},{value:"Details",paraId:74,tocIndex:17},{value:"Parameter",paraId:75,tocIndex:17},{value:"Type",paraId:75,tocIndex:17},{value:"Description",paraId:75,tocIndex:17},{value:"fields",paraId:75,tocIndex:17},{value:"FieldOption[]",paraId:75,tocIndex:17},{value:"Contains key attributes of the fields in the current data table.",paraId:75,tocIndex:17},{value:"query.measures",paraId:75,tocIndex:17},{value:"MeasureProps[]",paraId:75,tocIndex:17},{value:"Configuration details for the measure fields.",paraId:75,tocIndex:17},{value:"query.dimensions",paraId:75,tocIndex:17},{value:"DimensionProps[]",paraId:75,tocIndex:17},{value:"Configuration details for the dimension fields.",paraId:75,tocIndex:17},{value:"infer()",paraId:26},{value:"Deriving the Initial Configuration of Charts.",paraId:76,tocIndex:18},{value:`// Example for a pie chart
init(fields, { measures, dimensions }) {
  const { xField, yField } = this.infer(fields, { measures, dimensions });
  return {
    general: {
      colorField: xField?.value,
      angleField: yField?.value,
    },
  };
};
`,paraId:77,tocIndex:18},{value:"Signature",paraId:78,tocIndex:18},{value:`infer: (fields: FieldOption[], query: {
  measures?: MeasureProps[];
  dimensions?: DimensionProps[];
}) => {
  xField: FieldOption;
  yField: FieldOption;
  seriesField: FieldOption;
  colorField: FieldOption;
  yFields: FieldOption[];
}
`,paraId:79,tocIndex:18},{value:"Details",paraId:80,tocIndex:18},{value:"Property",paraId:81,tocIndex:18},{value:"Type",paraId:81,tocIndex:18},{value:"Description",paraId:81,tocIndex:18},{value:"xField",paraId:81,tocIndex:18},{value:"FieldOption",paraId:81,tocIndex:18},{value:"The field to be used on the x-axis.",paraId:81,tocIndex:18},{value:"yField",paraId:81,tocIndex:18},{value:"FieldOption",paraId:81,tocIndex:18},{value:"The field to be used on the y-axis.",paraId:81,tocIndex:18},{value:"seriesField",paraId:81,tocIndex:18},{value:"FieldOption",paraId:81,tocIndex:18},{value:"The field representing categories or series.",paraId:81,tocIndex:18},{value:"colorField",paraId:81,tocIndex:18},{value:"FieldOption",paraId:81,tocIndex:18},{value:"The field used to define the color in the chart.",paraId:81,tocIndex:18},{value:"yFields",paraId:81,tocIndex:18},{value:"FieldOption[]",paraId:81,tocIndex:18},{value:"Multiple fields for the y-axis (used in complex charts).",paraId:81,tocIndex:18},{value:"getProps()",paraId:26},{value:"This function processes the raw chart data and chart configuration metadata and transforms them into properties required by the rendering component.",paraId:82,tocIndex:19},{value:"signature",paraId:83,tocIndex:19},{value:"getProps({ data, general, advanced, fieldProps }: RenderProps)",paraId:84,tocIndex:19},{value:"Types",paraId:85,tocIndex:19},{value:`export type RenderProps = {
  data: Record<string, any>[];
  general: any;
  advanced: any;
  fieldProps: {
    [field: string]: {
      label: string;
      transformer: Transformer;
      interface: string;
    };
  };
};
`,paraId:86,tocIndex:19},{value:"Property",paraId:87,tocIndex:19},{value:"Type",paraId:87,tocIndex:19},{value:"Description",paraId:87,tocIndex:19},{value:"data",paraId:87,tocIndex:19},{value:"Record<string, any>[]",paraId:87,tocIndex:19},{value:"The raw data to be displayed in the chart.",paraId:87,tocIndex:19},{value:"general",paraId:87,tocIndex:19},{value:"any",paraId:87,tocIndex:19},{value:"The configuration options from the chart\u2019s visualization form.",paraId:87,tocIndex:19},{value:"advanced",paraId:87,tocIndex:19},{value:"any",paraId:87,tocIndex:19},{value:"The advanced JSON-based configuration for the chart.",paraId:87,tocIndex:19},{value:"fieldProps",paraId:87,tocIndex:19},{value:"{ [field: string]: FieldProps }",paraId:87,tocIndex:19},{value:"Metadata about the fields from the data table, used for display purposes.",paraId:87,tocIndex:19},{value:"Property",paraId:88,tocIndex:20},{value:"Type",paraId:88,tocIndex:20},{value:"Description",paraId:88,tocIndex:20},{value:"label",paraId:88,tocIndex:20},{value:"string",paraId:88,tocIndex:20},{value:"The label displayed for the field.",paraId:88,tocIndex:20},{value:"transformer",paraId:88,tocIndex:20},{value:"Transformer",paraId:88,tocIndex:20},{value:"A function for transforming field values.",paraId:88,tocIndex:20},{value:"interface",paraId:88,tocIndex:20},{value:"string",paraId:88,tocIndex:20},{value:"The interface type of the field.",paraId:88,tocIndex:20},{value:"getReference()",paraId:26},{value:"Retrieves reference documentation for the chart component, including the title and a direct link to the documentation.",paraId:89,tocIndex:21},{value:`getReference() {
  return {
    title: this.title,
    link: \`https://ant.design/components/\${this.name}\`,
  };
}
`,paraId:90,tocIndex:21},{value:"Signature",paraId:91,tocIndex:21},{value:`getReference?: () => {
  title: string;
  link: string;
};
`,paraId:92,tocIndex:21},{value:"name",paraId:26},{value:"string",paraId:93,tocIndex:23},{value:". Identifier for the chart type.",paraId:93,tocIndex:23},{value:"title",paraId:26},{value:"string",paraId:94,tocIndex:24},{value:". The display title of the chart.",paraId:94,tocIndex:24},{value:"Component",paraId:26},{value:"React.FC<any>",paraId:95,tocIndex:25},{value:". The React component used to render the chart.",paraId:95,tocIndex:25},{value:"schema",paraId:26},{value:"ISchema",paraId:96,tocIndex:26},{value:". The UI Schema for the chart\u2019s visualization configuration.",paraId:96,tocIndex:26},{value:"init()",paraId:26},{value:"This function initializes the chart configuration.",paraId:97,tocIndex:27},{value:"Signature",paraId:98,tocIndex:27},{value:`init?: (
  fields: FieldOption[],
  query: {
    measures?: MeasureProps[];
    dimensions?: DimensionProps[];
  },
) => {
  general?: any;
  advanced?: any;
};
`,paraId:99,tocIndex:27},{value:"getProps()",paraId:26},{value:"Handles the processing and retrieval of properties for the chart component.",paraId:100,tocIndex:28},{value:"Signature",paraId:101,tocIndex:28},{value:"getProps(props: RenderProps): any",paraId:102,tocIndex:28},{value:"getReference()",paraId:26},{value:"Retrieves reference documentation for the chart component.",paraId:103,tocIndex:29},{value:"Signature",paraId:104,tocIndex:29},{value:`getReference?: () => {
  title: string;
  link: string;
};
`,paraId:105,tocIndex:29}]},647284:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to the documentation or use a demo to understand the properties supported by different components through the chart component reference link. Configuration is done using JSON key-value pairs.",paraId:0,tocIndex:1},{value:"The table component used is Antd's table component. Open the reference link ",paraId:1,tocIndex:2},{value:"Table",paraId:1,tocIndex:2},{value:". The API section corresponds to all the configurable properties supported by the component.",paraId:1,tocIndex:2},{value:"To adjust the order of table columns, modify the ",paraId:2,tocIndex:2},{value:"columns",paraId:2,tocIndex:2},{value:" configuration. Example:",paraId:2,tocIndex:2},{value:`{
  "columns": [
    { "key": "fieldName1", "dataIndex": "fieldName1", "title": "fieldTitle1" },
    { "key": "fieldName2", "dataIndex": "fieldName2", "title": "fieldTitle2" }
  ]
}
`,paraId:3,tocIndex:2},{value:"JavaScript expressions can be wrapped in ",paraId:4,tocIndex:3},{value:"{{}}",paraId:4,tocIndex:3},{value:". Example:",paraId:4,tocIndex:3},{value:`{
  "label": {
    "type": "inner",
    "content": "{{ ({ percent }) => \`\${(percent * 100).toFixed(0)}%\` }}"
  }
}
`,paraId:5,tocIndex:3},{value:"When there are charts from different data tables within a chart block and the same filter field is needed to filter these charts, ",paraId:6,tocIndex:4},{value:"custom fields",paraId:7,tocIndex:4},{value:" can be used. For example, you might want to filter data within a specific time period.",paraId:6,tocIndex:4}]},68445:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The NocoBase data visualization plugin provides robust data retrieval features and a rich variety of chart components. Based on system Collection data, users can quickly build visual dashboards, organize charts with flexibility, and conduct insightful business data analysis.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, so no additional installation is required.",paraId:1,tocIndex:2},{value:`User Manual
`,paraId:2,tocIndex:3},{value:"Chart Block",paraId:3,tocIndex:3},{value:"Configuring Charts",paraId:4,tocIndex:3},{value:"Filter Block",paraId:5,tocIndex:3},{value:`Developer Guide
`,paraId:2,tocIndex:3},{value:"API Reference",paraId:6,tocIndex:3},{value:"Step-by-Step Tutorial",paraId:7,tocIndex:3},{value:"FAQ",paraId:8,tocIndex:3},{value:"Simplified data processing and transformation",paraId:9,tocIndex:4},{value:"Ability to add charts in pop-up windows",paraId:9,tocIndex:4},{value:"Embed other blocks (e.g., Markdown) in chart blocks",paraId:9,tocIndex:4},{value:"Save configurations as templates",paraId:9,tocIndex:4},{value:"Enable data drill-down",paraId:9,tocIndex:4},{value:"Improved permissions control",paraId:9,tocIndex:4}]},14664:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Using the addition of ECharts charts as an example, the complete code is available in the ",paraId:0,tocIndex:0},{value:"@nocobase/plugin-sample-add-custom-charts",paraId:0,tocIndex:0},{value:" plugin.",paraId:0,tocIndex:0},{value:"Follow the steps in the ",paraId:1,tocIndex:1},{value:"Plugin Development Guide",paraId:1,tocIndex:1},{value:" to create a new plugin. Be sure to include the dependencies ",paraId:1,tocIndex:1},{value:"echarts",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"echarts-for-react",paraId:1,tocIndex:1},{value:", and ",paraId:1,tocIndex:1},{value:"@nocobase/plugin-data-visualization",paraId:1,tocIndex:1},{value:", placing these external dependencies in the ",paraId:1,tocIndex:1},{value:"devDependencies",paraId:1,tocIndex:1},{value:" section of the ",paraId:1,tocIndex:1},{value:"package.json",paraId:1,tocIndex:1},{value:" file.",paraId:1,tocIndex:1},{value:`yarn pm create @nocobase/plugin-sample-add-custom-charts
npx lerna add echarts --scope=@nocobase/plugin-sample-add-custom-charts --dev
npx lerna add echarts-for-react --scope=@nocobase/plugin-sample-add-custom-charts --dev
`,paraId:2,tocIndex:1},{value:`// package.json

{
  "name": "@nocobase/plugin-sample-add-custom-charts",
  "version": "0.14.0-alpha.7",
  "main": "dist/server/index.js",
  "devDependencies": {
    "echarts": "^5.4.3",
    "echarts-for-react": "^3.0.2"
  },
  "peerDependencies": {
    "@nocobase/client": "0.x",
    "@nocobase/server": "0.x",
    "@nocobase/test": "0.x",
    "@nocobase/plugin-data-visualization": "0.x"
  }
}
`,paraId:3,tocIndex:1},{value:"Unlike G2Plot, where each chart type is a distinct component, ECharts utilizes a single component that can render various charts by passing different parameters. Since the component provided by ",paraId:4,tocIndex:2},{value:"echarts-for-react",paraId:4,tocIndex:2},{value:" is a ",paraId:4,tocIndex:2},{value:"PureComponent",paraId:4,tocIndex:2},{value:", we need to wrap it into a ",paraId:4,tocIndex:2},{value:"FunctionComponent",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:`// client/echarts/react-echarts.tsx

import React, { useEffect } from 'react';
import ReactEChartsComponent, { EChartsInstance, EChartsReactProps } from 'echarts-for-react';

export const ReactECharts = (props: EChartsReactProps['option']) => {
  const echartRef = React.useRef<EChartsInstance>();
  useEffect(() => {
    echartRef.current?.resize();
  });
  return <ReactEChartsComponent option={props} ref={(e) => (echartRef.current = e)} />;
};
`,paraId:5,tocIndex:2},{value:"The ",paraId:6,tocIndex:2},{value:"echarts-for-react",paraId:6,tocIndex:2},{value:" component does not execute a ",paraId:6,tocIndex:2},{value:"resize",paraId:6,tocIndex:2},{value:" operation on its initial render. As the NocoBase visualization plugin might need to determine whether to display the component based on the current configuration while setting up charts, this could result in the component not displaying correctly. Therefore, we manually execute ",paraId:6,tocIndex:2},{value:"resize",paraId:6,tocIndex:2},{value:" each time to ensure proper rendering.",paraId:6,tocIndex:2},{value:"Chart",paraId:7},{value:"Before proceeding, please refer to the ",paraId:8,tocIndex:3},{value:"Development Guide",paraId:9,tocIndex:3},{value:" to familiarize yourself with the relevant APIs.",paraId:8,tocIndex:3},{value:"Since ECharts serves as a comprehensive charting library, we may need to add multiple chart types simultaneously. To facilitate this, we start by extending the basic ",paraId:10,tocIndex:4},{value:"Chart",paraId:10,tocIndex:4},{value:" class to create an ",paraId:10,tocIndex:4},{value:"ECharts",paraId:10,tocIndex:4},{value:" class that implements some foundational methods.",paraId:10,tocIndex:4},{value:`// client/echarts/echarts.ts

import { Chart } from '@nocobase/plugin-data-visualization/client';

export class ECharts extends Chart {
  constructor({
    name,
    title,
    series,
    config,
  }: {
    name: string;
    title: string;
    series: any;
    config?: ChartProps['config'];
  }) {
    super({
      name,
      title,
      component: ReactECharts,
      config: ['xField', 'yField', 'seriesField', ...(config || [])],
    });
    this.series = series;
  }
}
`,paraId:11,tocIndex:4},{value:"ECharts primarily configures different types of charts via the ",paraId:12,tocIndex:4},{value:"series",paraId:12,tocIndex:4},{value:" parameter. Therefore, when constructing the base class, we add a ",paraId:12,tocIndex:4},{value:"series",paraId:12,tocIndex:4},{value:" parameter and pass in the previously defined ",paraId:12,tocIndex:4},{value:"ReactECharts",paraId:12,tocIndex:4},{value:" component. The ",paraId:12,tocIndex:4},{value:"config",paraId:12,tocIndex:4},{value:" parameter is preset with default values for ",paraId:12,tocIndex:4},{value:"xField",paraId:12,tocIndex:4},{value:", ",paraId:12,tocIndex:4},{value:"yField",paraId:12,tocIndex:4},{value:", and ",paraId:12,tocIndex:4},{value:"seriesField",paraId:12,tocIndex:4},{value:", enabling our default visualization configuration to produce results similar to those shown in the example.",paraId:12,tocIndex:4},{value:"Since most commonly used chart types require configurations for the x-axis, y-axis, and classification fields, we first implement a general ",paraId:13,tocIndex:5},{value:"init",paraId:13,tocIndex:5},{value:" interface to initialize the chart\u2019s default configuration. If a chart requires additional configuration items upon initialization, this method can be overridden in derived classes. In the implementation, we can leverage the ",paraId:13,tocIndex:5},{value:"infer",paraId:13,tocIndex:5},{value:" method from the ",paraId:13,tocIndex:5},{value:"Chart",paraId:13,tocIndex:5},{value:" class to determine default field configurations based on the provided measures and dimensions.",paraId:13,tocIndex:5},{value:`init: ChartType['init'] = (fields, { measures, dimensions }) => {
  const { xField, yField, seriesField } = this.infer(fields, {
    measures,
    dimensions,
  });
  return {
    general: {
      xField: xField?.value,
      yField: yField?.value,
      seriesField: seriesField?.value,
    },
  };
};
`,paraId:14,tocIndex:5},{value:"Next, we implement the ",paraId:15,tocIndex:6},{value:"getProps",paraId:15,tocIndex:6},{value:" method, which primarily retrieves chart-related configurations and converts them into properties corresponding to the ECharts component. This method can also set default properties that we prefer not to expose in the configuration options. The following code implementation serves as a general guide.",paraId:15,tocIndex:6},{value:`getProps({ data, general, advanced, fieldProps }: RenderProps) {
    const { xField, yField, seriesField } = general;
    const xLabel = fieldProps[xField]?.label;
    const yLabel = fieldProps[yField]?.label;
    let seriesName = [yLabel];
    if (seriesField) {
      seriesName = Array.from(new Set(data.map((row: any) => row[seriesField]))).map((value) => value || 'null');
    }
    return deepmerge(
      {
        legend: {
          data: seriesName,
        },
        tooltip: {
          data: seriesName,
        },
        dataset: [
          {
            dimensions: [xField, ...(seriesField ? seriesName : [yField])],
            source: data,
          },
          {
            transform: [
              {
                type: 'data-visualization:transform',
                config: { fieldProps },
              },
              {
                type: 'data-visualization:toSeries',
                config: { xField, yField, seriesField },
              },
            ],
          },
        ],
        series: seriesName.map((name) => ({
          name,
          datasetIndex: 1,
          ...this.series,
        })),
        xAxis: {
          name: xLabel,
          type: 'category',
        },
        yAxis: {
          name: yLabel,
        },
        animation: false,
      },
      advanced,
    );
  }
`,paraId:16,tocIndex:6},{value:"This logic primarily involves processing raw data, chart configurations, field metadata, and data transformation settings into the format required for component rendering. In ECharts, data processing can be managed by registering ",paraId:17,tocIndex:6},{value:"transform",paraId:17,tocIndex:6},{value:" functions, as detailed in the ECharts documentation.",paraId:17,tocIndex:6},{value:"Finally, we implement a method to retrieve reference documentation via ",paraId:18,tocIndex:7},{value:"getReference",paraId:18,tocIndex:7},{value:". ECharts consolidates all chart parameters on a single page, so we define this method straightforwardly.",paraId:18,tocIndex:7},{value:`getReference() {
    return {
      title: 'ECharts',
      link: 'https://echarts.apache.org/en/option.html',
    };
  }
`,paraId:19,tocIndex:7},{value:"With the ",paraId:20,tocIndex:8},{value:"ECharts",paraId:20,tocIndex:8},{value:" class established, defining charts becomes a straightforward process. For most common 2D charts, the general logic is already encapsulated within the ",paraId:20,tocIndex:8},{value:"ECharts",paraId:20,tocIndex:8},{value:" class, eliminating the need for additional extensions.",paraId:20,tocIndex:8},{value:`new ECharts({
  name: 'line',
  title: 'Line Chart',
  series: { type: 'line' },
});

new ECharts({
  name: 'column',
  title: 'Column Chart',
  series: { type: 'bar' },
});

new ECharts({
  name: 'area',
  title: 'Area Chart',
  series: { type: 'line', areaStyle: {} },
});
`,paraId:21,tocIndex:8},{value:"You can also extend some visualization configurations as needed.",paraId:22,tocIndex:8},{value:`new ECharts({
  name: 'line',
  title: 'Line Chart',
  series: { type: 'line' },
  config: [
    {
      property: 'booleanField',
      name: 'smooth',
      title: 'isSmooth',
    },
  ],
});
`,paraId:23,tocIndex:8},{value:"For certain charts, the general methods may not suffice, requiring further customization.",paraId:24,tocIndex:8},{value:"Bar Chart\uFF1A",paraId:25,tocIndex:8},{value:`export class Bar extends ECharts {
  constructor() {
    super({
      name: 'bar',
      title: 'Bar Chart',
      series: { type: 'bar' },
    });
    this.config = [
      {
        property: 'yField',
        title: 'xField',
      },
      {
        property: 'xField',
        title: 'yField',
      },
      'seriesField',
    ];
  }

  getProps({ data, general, advanced, fieldProps }: RenderProps) {
    const props = super.getProps({ data, general, advanced, fieldProps });
    const xLabel = fieldProps[general.xField]?.label;
    const yLabel = fieldProps[general.yField]?.label;
    props.xAxis = {
      ...props.xAxis,
      type: 'value',
      name: yLabel,
    };
    props.yAxis = {
      ...props.yAxis,
      type: 'category',
      name: xLabel,
    };
    return props;
  }
}

new Bar();
`,paraId:26,tocIndex:8},{value:"Pie Chart\uFF1A",paraId:27,tocIndex:8},{value:`export class Pie extends ECharts {
  constructor() {
    super({
      name: 'pie',
      title: 'Pie Chart',
      series: { type: 'pie' },
    });
    this.config = [
      {
        property: 'field',
        name: 'angleField',
        title: 'angleField',
        required: true,
      },
      {
        property: 'field',
        name: 'colorField',
        title: 'colorField',
        required: true,
      },
    ];
  }

  init: ChartType['init'] = (fields, { measures, dimensions }) => {
    const { xField, yField } = this.infer(fields, { measures, dimensions });
    return {
      general: {
        colorField: xField?.value,
        angleField: yField?.value,
      },
    };
  };

  getProps({ data, general, advanced, fieldProps }: RenderProps) {
    return deepmerge(
      {
        legend: {},
        tooltip: {},
        dataset: [
          {
            dimensions: [general.colorField, general.angleField],
            source: data,
          },
          {
            transform: {
              type: 'data-visualization:transform',
              config: { fieldProps },
            },
          },
        ],
        series: {
          name: fieldProps[general.angleField]?.label,
          datasetIndex: 1,
          ...this.series,
        },
      },
      advanced,
    );
  }
}

new Pie();
`,paraId:28,tocIndex:8},{value:`// client/index.ts
import DataVisualizationPlugin from '@nocobase/plugin-data-visualization/client';

export class PluginSampleAddCustomChartClient extends Plugin {
  async afterAdd() {
    // await this.app.pm.add()
  }

  async beforeLoad() {
    const plugin = this.app.pm.get(DataVisualizationPlugin);
    plugin.charts.addGroup('echarts', {
      title: 'ECharts',
      charts: [
        new ECharts(),
        // ...
        // ...
      ],
    });
  }

  // You can get and modify the app instance here
  async load() {}
}
`,paraId:29,tocIndex:9}]},433639:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The chart block is a panel used for organizing multiple charts.",paraId:0,tocIndex:0},{value:'Click "Add Block" - "Charts" to create an empty chart block.',paraId:1,tocIndex:1},{value:'Inside the chart block, click "Add Block" - "Chart" and select the corresponding data Collection to create and configure charts. Only tables that the user has permission to view can be used for chart configuration, otherwise, they will be hidden from the options.',paraId:2,tocIndex:1},{value:"Edit Block Title - Allows setting a title for multiple charts in the block.",paraId:3,tocIndex:2},{value:"Show Background - Determines whether to display the background color of the chart block.",paraId:3,tocIndex:2},{value:"Show Padding - Determines whether to display the padding of the chart block.",paraId:3,tocIndex:2},{value:"The background and padding settings are particularly useful when there is only one chart in the block or when viewing on mobile devices, helping the style appear more comfortable.",paraId:4,tocIndex:2},{value:"The charts within a chart block can be freely dragged and organized like regular blocks.",paraId:5,tocIndex:2},{value:'Click the "Configure" button to modify the settings of the current chart.',paraId:6,tocIndex:2},{value:'Click the "Duplicate" button to quickly copy the current chart.',paraId:6,tocIndex:2},{value:'Click the "Delete" button to remove the current chart.',paraId:6,tocIndex:2},{value:"The configuration operation feature applies to chart blocks added in version ",paraId:7},{value:"v1.4.0-alpha",paraId:7},{value:" and later.",paraId:7},{value:"Chart blocks support configuring a refresh button. Clicking it refreshes all the charts within the block.",paraId:8,tocIndex:4},{value:"In configuration mode, you can set the refresh button to configure the auto-refresh interval, which will apply to all charts in the block. The auto-refresh interval configured here will apply to all users who access the page by default.",paraId:9,tocIndex:4},{value:"Users can also modify the auto-refresh interval using the button on the right, but this adjustment is only effective temporarily and will reset after the page is refreshed.",paraId:10,tocIndex:4},{value:"The operation buttons configured for individual charts will only appear when the mouse hovers over the chart and will automatically hide when the mouse leaves.",paraId:11},{value:"Individual charts also support configuring a refresh button, functioning the same way as the block's refresh button, but only affecting the current chart.",paraId:12,tocIndex:6},{value:"If both the chart block and an individual chart are configured with auto-refresh intervals, the interval configured for the individual chart takes precedence.",paraId:13},{value:"If the chart block is configured with an auto-refresh interval, and an individual chart either has auto-refresh disabled or has no refresh button configured, the auto-refresh interval of the chart block will apply.",paraId:13}]},610276:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The chart configuration panel is organized into three primary sections: Data Configuration, Chart Configuration, and Chart Preview.",paraId:0,tocIndex:0},{value:"The drop-down at the top represents the current Collection being configured, which can be switched using the drop-down menu.",paraId:1,tocIndex:1},{value:'Once the configuration is complete, clicking "Run Query" will retrieve the data according to the settings. The "Data" panel will display the resulting data.',paraId:1,tocIndex:1},{value:"Measure fields contain the key data that the chart will display. These fields can be aggregated using functions such as ",paraId:2,tocIndex:2},{value:"Sum",paraId:2,tocIndex:2},{value:", ",paraId:2,tocIndex:2},{value:"Count",paraId:2,tocIndex:2},{value:", ",paraId:2,tocIndex:2},{value:"Avg",paraId:2,tocIndex:2},{value:", ",paraId:2,tocIndex:2},{value:"Max",paraId:2,tocIndex:2},{value:", and ",paraId:2,tocIndex:2},{value:"Min",paraId:2,tocIndex:2},{value:". You can add multiple measure fields, and assign aliases to them as needed.",paraId:2,tocIndex:2},{value:"Dimension fields determine how the data is grouped within the chart. For date-type fields, various formatting options are available, as shown in the image. Formatting is handled by database functions (e.g., ",paraId:3,tocIndex:3},{value:"date_format",paraId:3,tocIndex:3},{value:" in MySQL). For other data types, refer to the [Data Transformation](#Data Transformation) section.",paraId:3,tocIndex:3},{value:"Dimension Formatting VS Data Transformation",paraId:4},{value:"Dimension formatting occurs before the final data is fetched, grouping data according to the formatted dimension values. This is commonly needed when filtering data by time periods.",paraId:5},{value:"Data transformation further refines the data after it is retrieved, enhancing readability and presentation. This transformation is applied on the frontend.",paraId:5},{value:"Filters are applied to the data before grouping. You can use variables for dynamic filtering:",paraId:6,tocIndex:4},{value:"Current User: Information related to the currently logged-in user.",paraId:7,tocIndex:4},{value:`Date Variables: Date ranges dynamically calculated based on the current date.
`,paraId:7,tocIndex:4},{value:"Current Filter: Custom filter fields set within the current chart block. Refer to ",paraId:8,tocIndex:4},{value:"Filter Block",paraId:9,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"The default DataSet is limited to a maximum of 2000 entries.",paraId:10,tocIndex:5},{value:"When enabled cache, the chart will display data from the cache. You can configure the cache duration as needed.",paraId:11,tocIndex:6},{value:"This section allows you to configure the properties of the container component that displays the chart.",paraId:12,tocIndex:8},{value:"Chart Title",paraId:13,tocIndex:8},{value:"Show Chart Border",paraId:13,tocIndex:8},{value:"The display effect of the chart title:",paraId:14,tocIndex:8},{value:"The display effect when showing the chart border:",paraId:15,tocIndex:8},{value:"Chart Type",paraId:16,tocIndex:9},{value:": This is where you select the type of chart to display. NocoBase uses ",paraId:16,tocIndex:9},{value:"Ant Design Charts",paraId:16,tocIndex:9},{value:" 2.x as the default chart library. To extend and use other chart libraries or components, see the ",paraId:16,tocIndex:9},{value:"Development Guide",paraId:17,tocIndex:9},{value:".",paraId:16,tocIndex:9},{value:"Basic Configuration",paraId:16,tocIndex:9},{value:": After selecting a chart type, basic visual configuration options appear, such as fields for the x-axis, y-axis, and classification. These field configurations are provided via dropdown menus, which list the basic fields and field aliases from the Collection.",paraId:16,tocIndex:9},{value:"JSON Configuration",paraId:16,tocIndex:9},{value:": If the basic configuration doesn\u2019t meet your requirements, you can configure additional chart component properties using JSON. Refer to the chart component documentation for details. To include JavaScript expressions in the JSON configuration, wrap them in ",paraId:16,tocIndex:9},{value:"{{}}",paraId:16,tocIndex:9},{value:". For example:",paraId:16,tocIndex:9},{value:`{
  "label": {
    "type": "inner",
    "content": "{{ ({ percent }) => \`\${(percent * 100).toFixed(0)}%\` }}"
  }
}
`,paraId:18,tocIndex:9},{value:"Data transformation enables further processing of response data. The supported data types for transformation are ",paraId:19,tocIndex:10},{value:"number",paraId:19,tocIndex:10},{value:", ",paraId:19,tocIndex:10},{value:"date",paraId:19,tocIndex:10},{value:", ",paraId:19,tocIndex:10},{value:"time",paraId:19,tocIndex:10},{value:", and ",paraId:19,tocIndex:10},{value:"datetime",paraId:19,tocIndex:10},{value:". For fields not belonging to these types, you can manually assign one of these types to apply the corresponding transformation methods.",paraId:19,tocIndex:10},{value:"Multiple transformation methods can be applied to the same field. The transformations are executed in sequence, with each step passing its result to the next. You can reorder the transformation steps by dragging them.",paraId:20,tocIndex:10},{value:"Be mindful that some transformation methods may alter the original data type. When applying multiple transformations, ensure that you choose the correct method based on the data type after each step. For instance, when formatting a number as currency by adjusting precision and adding a prefix, you should first apply the precision adjustment and then the prefix. This is because after adding the prefix, the number is converted to a string, and further precision adjustments will no longer apply.",paraId:21},{value:"Supported transformation methods:",paraId:22},{value:"Type",paraId:23},{value:"Method",paraId:23},{value:"Description",paraId:23},{value:"Converted Type",paraId:23},{value:"Number (",paraId:23},{value:"number",paraId:23},{value:")",paraId:23},{value:"Prefix",paraId:23},{value:"string",paraId:23},{value:"Suffix",paraId:23},{value:"string",paraId:23},{value:"Precision",paraId:23},{value:"1",paraId:23},{value:", ",paraId:23},{value:"1.0",paraId:23},{value:", ",paraId:23},{value:"1.00",paraId:23},{value:", ",paraId:23},{value:"1.000",paraId:23},{value:".",paraId:23},{value:"number",paraId:23},{value:"Separator",paraId:23},{value:"100,000.00",paraId:23},{value:" (English), ",paraId:23},{value:"100.000,00",paraId:23},{value:" (German), etc.",paraId:23},{value:"string",paraId:23},{value:"Percentage",paraId:23},{value:"string",paraId:23},{value:"Scientific Notation",paraId:23},{value:"number",paraId:23},{value:"Abbreviation",paraId:23},{value:"1K",paraId:23},{value:", ",paraId:23},{value:"1M",paraId:23},{value:", ",paraId:23},{value:"1T",paraId:23},{value:", ",paraId:23},{value:"1B",paraId:23},{value:", etc.",paraId:23},{value:"string",paraId:23},{value:"DateTime (",paraId:23},{value:"datetime",paraId:23},{value:", ",paraId:23},{value:"date",paraId:23},{value:", ",paraId:23},{value:"time",paraId:23},{value:")",paraId:23},{value:"Formatting",paraId:23},{value:"Uses preset or custom formats like ",paraId:23},{value:"YYYY-MM-DD",paraId:23},{value:". Refer to the ",paraId:23},{value:"dayjs",paraId:23},{value:" documentation.",paraId:23},{value:"string",paraId:23},{value:"Prefix",paraId:23},{value:"string",paraId:23},{value:"Suffix",paraId:23},{value:"string",paraId:23},{value:"String (",paraId:23},{value:"string",paraId:23},{value:")",paraId:23},{value:"Type Conversion",paraId:23},{value:"Converts the string into another type, such as date/time or number.",paraId:23},{value:"Date",paraId:23},{value:" | ",paraId:23},{value:"number",paraId:23},{value:"Prefix",paraId:23},{value:"string",paraId:23},{value:"Suffix",paraId:23},{value:"string",paraId:23}]},672120:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The filter block within a chart block allows for dynamic filtering across multiple charts within the same block.",paraId:0,tocIndex:0},{value:'To enable or disable a filter block, navigate within the chart block and select "Add Block" - "Filter."',paraId:1,tocIndex:1},{value:"For charts within the current chart block, you can create a filter form field by selecting the relevant fields directly from the associated Collection.",paraId:2,tocIndex:3},{value:"The form fields can be configured as follows:",paraId:3,tocIndex:3},{value:"Edit field title.",paraId:4,tocIndex:3},{value:"Edit description.",paraId:5,tocIndex:3},{value:"Define the operator to be used when applying the filter.",paraId:6,tocIndex:3},{value:`Assign a default value to the field, utilizing variables if needed. The variable\u2019s data type must align with the data type of the current field.
`,paraId:7,tocIndex:3},{value:"For instance:",paraId:8,tocIndex:3},{value:"Set the default value to the current user ID to automatically filter data for the current user when the page loads.",paraId:9,tocIndex:3},{value:"Set the default value to the current date to automatically filter data for the current date when the page loads.",paraId:9,tocIndex:3},{value:"In certain scenarios, you may need to use a single filter field to filter different fields across various tables. For example, a single date field might be used to filter different date fields in different tables. In such cases, you can opt to create a custom field.",paraId:10,tocIndex:4},{value:"When adding a custom field, you'll need to specify the field title, choose the appropriate field component, and configure it accordingly. Additionally, you can select a field from the data tables used in the current block to apply that field's metadata configuration directly, avoiding redundancy.",paraId:11,tocIndex:4},{value:'To implement a custom filter field, open the configuration of the relevant chart, then in the data query filter settings, add filter conditions using variables from the "Current filter." Ensure that the type of the field being filtered matches the type of the custom filter field.',paraId:12,tocIndex:4},{value:"For custom fields, you can also set the title, description, and default value.",paraId:13,tocIndex:4},{value:"Filter:",paraId:14,tocIndex:5},{value:" Apply the filter conditions.",paraId:14,tocIndex:5},{value:"Reset:",paraId:14,tocIndex:5},{value:" Reset the filter form.",paraId:14,tocIndex:5},{value:"Collapse / Expand:",paraId:14,tocIndex:5},{value:" Collapse into a single row or expand into multiple rows.",paraId:14,tocIndex:5}]},242866:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The departments plugin supports organizing users in the form of departments in NocoBase, setting up superior-subordinate relationships. You can control a group of users' permissions by binding roles to departments. It supports using department information as variables for workflows and expressions and other places that support setting variables.",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin, which needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2}]},205502:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Modify the superior department field in the department editing form. The current department and its sub-departments are not selectable.",paraId:0,tocIndex:5},{value:"A user can join multiple departments at the same time. The first department they join is the default main department. A user only has one main department.",paraId:1,tocIndex:8},{value:"Users who are already department members will not appear in the user selection list.",paraId:2,tocIndex:8},{value:"Click on the owners field in the department editing form to select a department member as the owner. Multiple selections are supported. Members who are already department owner will not appear in the member selection list.",paraId:3,tocIndex:9},{value:"In addition to adding members to the department, you can also configure departments for users from the user's perspective.",paraId:4,tocIndex:10},{value:"Departments that have already been joined are not selectable.",paraId:5,tocIndex:10},{value:"By associating one or more roles with a department, members of the current department can have these roles.",paraId:6,tocIndex:12},{value:"There are two ways to associate roles with a department.",paraId:7,tocIndex:12},{value:"The first is to select a role in the role field of the department editing form.",paraId:8,tocIndex:12},{value:"The second is to add departments to the corresponding role in role management.",paraId:9,tocIndex:12},{value:"Departments that already have this role are not selectable.",paraId:10,tocIndex:12},{value:"Search for users by nickname, username, phone, email, and search for departments by department name.",paraId:11,tocIndex:13}]},299950:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Email Manager Plugin is an efficient and convenient tool supporting Gmail and Outlook email authorization. It integrates email management and sending capabilities into various blocks and pages. By simply configuring authorization, users can achieve unified multi-account management and enjoy seamless email communication.",paraId:0,tocIndex:1},{value:"After enabling the email plugin, administrators must complete the configuration before regular users can connect their email accounts to NocoBase. Currently, only Outlook and Gmail accounts are supported via authorized login. Direct integration with Microsoft and Google accounts is not available.",paraId:1,tocIndex:2},{value:"The core of the configuration involves setting up API authentication with the email service providers. Administrators need to follow these steps to ensure proper plugin functionality:",paraId:2,tocIndex:2},{value:"Obtain Authentication Information from Providers",paraId:3,tocIndex:2},{value:"Log into the developer console of the email service provider (e.g., Google Cloud Console or Microsoft Azure Portal).",paraId:4,tocIndex:2},{value:"Create a new app or project, enabling Gmail or Outlook email API services.",paraId:4,tocIndex:2},{value:"Retrieve the Client ID and Client Secret.",paraId:4,tocIndex:2},{value:"Configure the redirect URI to match the plugin's callback address in NocoBase.",paraId:4,tocIndex:2},{value:"Service Provider Configuration",paraId:5,tocIndex:2},{value:"Navigate to the plugin's configuration page.",paraId:6,tocIndex:2},{value:"Enter the required API authentication details, including Client ID and Client Secret, ensuring proper integration with the email service provider.",paraId:6,tocIndex:2},{value:"Authorization Login",paraId:7,tocIndex:2},{value:"Users log in to their email accounts through the OAuth protocol.",paraId:8,tocIndex:2},{value:"The plugin automatically generates and stores the user's authorization tokens for subsequent API calls and email operations.",paraId:8,tocIndex:2},{value:"Email Integration",paraId:9,tocIndex:2},{value:"Upon successful authorization, users' email accounts are integrated into NocoBase.",paraId:10,tocIndex:2},{value:"The plugin synchronizes email data and provides management and sending capabilities.",paraId:10,tocIndex:2},{value:"Using Email Features",paraId:11,tocIndex:2},{value:"Users can view, manage, and send emails directly within the platform.",paraId:12,tocIndex:2},{value:"All operations are completed via API calls to the email service provider, ensuring real-time synchronization and efficient communication.",paraId:12,tocIndex:2},{value:"By following the above process, the NocoBase email plugin offers efficient and secure email management. If you encounter issues during configuration, consult the relevant documentation or contact the technical support team for assistance.",paraId:13,tocIndex:2},{value:"Navigate to the plugin management page.",paraId:14,tocIndex:4},{value:'Locate the "Email Manager" plugin and enable it.',paraId:14,tocIndex:4},{value:'Once the email plugin is enabled, proceed to configure the email provider. Currently, Google and Microsoft email services are supported. Click on "Settings" -> "Email Settings" to access the configuration page.',paraId:15,tocIndex:5},{value:"Each provider requires the Client ID and Client Secret. The following sections detail how to obtain these parameters.",paraId:16,tocIndex:5},{value:"To allow users to connect Gmail accounts to NocoBase, deploy NocoBase on a server that supports access to Google services, as the backend will call the Google API.",paraId:17,tocIndex:7},{value:"Open ",paraId:18,tocIndex:8},{value:"Google Cloud Console",paraId:18,tocIndex:8},{value:".",paraId:18,tocIndex:8},{value:"Agree to the terms upon first access.",paraId:18,tocIndex:8},{value:'Click "Select a project" at the top',paraId:19,tocIndex:9},{value:'Click "NEW PROJECT" in the modal',paraId:20,tocIndex:9},{value:"Fill in project details",paraId:21,tocIndex:9},{value:"Select the created project",paraId:22,tocIndex:9},{value:'Click "APIs & Services" button',paraId:23,tocIndex:10},{value:'Enter the "APIs & Services" panel',paraId:24,tocIndex:10},{value:'Search for "mail"',paraId:25,tocIndex:10},{value:'Click "ENABLE" to activate Gmail API',paraId:26,tocIndex:10},{value:'Click "OAuth consent screen" on the left',paraId:27,tocIndex:11},{value:'Choose "External"',paraId:28,tocIndex:11},{value:"Fill in project information (displayed on the authorization page) and save",paraId:29,tocIndex:11},{value:'Enter Developer Contact Information and click "Continue"',paraId:30,tocIndex:11},{value:'Click "Continue"',paraId:31,tocIndex:11},{value:"Add test users for pre-release testing",paraId:32,tocIndex:11},{value:'Click "Continue"',paraId:33,tocIndex:11},{value:"Review summary information and return to the control panel",paraId:34,tocIndex:11},{value:'Click "Credentials" on the left',paraId:35,tocIndex:12},{value:'Click "CREATE CREDENTIALS" and select "OAuth client ID"',paraId:36,tocIndex:12},{value:'Select "Web application"',paraId:37,tocIndex:12},{value:"Enter application details",paraId:38,tocIndex:12},{value:"Enter the domain of the final deployment (e.g., the NocoBase test address)",paraId:39,tocIndex:12},{value:"Add the authorized callback URI: ",paraId:40,tocIndex:12},{value:'domain + "/admin/settings/mail/oauth2"',paraId:40,tocIndex:12},{value:". Example: ",paraId:40,tocIndex:12},{value:"https://pr-1-mail.test.nocobase.com/admin/settings/mail/oauth2",paraId:40,tocIndex:12},{value:'Click "Create" to view the OAuth details',paraId:41,tocIndex:12},{value:"Copy the Client ID and Client Secret to the Email Configuration page",paraId:42,tocIndex:12},{value:'Click "Save" to complete the configuration',paraId:43,tocIndex:12},{value:"After completing the setup and testing, proceed with app publishing by verifying user permissions and submitting the app for verification.",paraId:44,tocIndex:13},{value:'Click the "OAuth consent screen" menu',paraId:45,tocIndex:13},{value:'Click the "EDIT APP" button, then click the "SAVE AND CONTINUE" button at the bottom',paraId:46,tocIndex:13},{value:'Click the "ADD OR REMOVE SCOPES" button to select user permissions',paraId:47,tocIndex:13},{value:'Enter "Gmail API" in the search field, then check the "Gmail API" (ensure the Scope value is "',paraId:48,tocIndex:13},{value:"https://mail.google.com/",paraId:48,tocIndex:13},{value:'")',paraId:48,tocIndex:13},{value:'Click the "UPDATE" button at the bottom to save',paraId:49,tocIndex:13},{value:'Click the "SAVE AND CONTINUE" button at the bottom of each page, then click the "BACK TO DASHBOARD" button to return to the control panel page',paraId:50,tocIndex:13},{value:'After clicking the "PUBLISH APP" button, a confirmation page will appear listing the content required for publishing. Then click the "CONFIRM" button',paraId:51,tocIndex:13},{value:'Back on the console page, you will see that the publication status is "In production"',paraId:52,tocIndex:13},{value:'Click the "PREPARE FOR VERIFICATION" button, fill in the required information, and click the "SAVE AND CONTINUE" button (the data in the image is for reference only)',paraId:53,tocIndex:13},{value:"Continue filling in the required information (the data in the image is for reference only)",paraId:54,tocIndex:13},{value:'Click the "SAVE AND CONTINUE" button',paraId:55,tocIndex:13},{value:'Click the "SUBMIT FOR VERIFICATION" button to submit for verification',paraId:56,tocIndex:13},{value:"Wait for approval results",paraId:57,tocIndex:13},{value:"If approval has not been granted, users can click the unsafe link to authorize login",paraId:58,tocIndex:13},{value:"Go to ",paraId:59,tocIndex:15},{value:"https://azure.microsoft.com/en-us/pricing/purchase-options/azure-account",paraId:59,tocIndex:15},{value:"Log in to your Microsoft account",paraId:60,tocIndex:15},{value:"Go to ",paraId:61,tocIndex:16},{value:"https://azure.microsoft.com/zh-cn/pricing/purchase-options/azure-account?icid=azurefreeaccount",paraId:61,tocIndex:16},{value:" and log in to your account",paraId:61,tocIndex:16},{value:"Fill in basic information and get a verification code",paraId:62,tocIndex:16},{value:"Fill in additional information and continue",paraId:63,tocIndex:16},{value:"Fill in credit card information (you can skip this step for now)",paraId:64,tocIndex:16},{value:'Click the top menu and select "Microsoft Entra ID"',paraId:65,tocIndex:17},{value:'Select "App registrations" on the left',paraId:66,tocIndex:17},{value:'Click "New registration" at the top',paraId:67,tocIndex:17},{value:"Fill in the information and submit",paraId:68,tocIndex:17},{value:"You can choose any name, refer to the options shown in the image for account types, and leave the Redirect URI blank for now",paraId:69,tocIndex:17},{value:"Get the Client ID",paraId:70,tocIndex:17},{value:'Open the "API permissions" menu on the right',paraId:71,tocIndex:18},{value:'Click the "Add a permission" button',paraId:72,tocIndex:18},{value:'Click "Microsoft Graph"',paraId:73,tocIndex:18},{value:"Search and add the following permissions, the final result should look like this",paraId:74,tocIndex:18},{value:'"email"',paraId:75,tocIndex:18},{value:'"offline_access"',paraId:75,tocIndex:18},{value:'"IMAP.AccessAsUser.All"',paraId:75,tocIndex:18},{value:'"SMTP.Send"',paraId:75,tocIndex:18},{value:'"offline_access"',paraId:75,tocIndex:18},{value:'"User.Read"',paraId:75,tocIndex:18},{value:" (By default)",paraId:75,tocIndex:18},{value:'Click "Certificates & secrets" on the left',paraId:76,tocIndex:19},{value:'Click the "New client secret" button',paraId:77,tocIndex:19},{value:"Fill in the description and expiration time, then click add",paraId:78,tocIndex:19},{value:"Get the Secret ID",paraId:79,tocIndex:19},{value:"Copy both the Client ID and Client Secret and fill them in the mail configuration page",paraId:80,tocIndex:19},{value:"Q: After Microsoft account authorization login, emails cannot be received normally.",paraId:81,tocIndex:20},{value:"A: Currently, only Outlook and Gmail accounts are supported for authorized login. Microsoft and Google accounts are not supported. For more information, please refer to: ",paraId:82,tocIndex:20},{value:"answers.microsoft.com",paraId:82,tocIndex:20},{value:"Tip",paraId:83,tocIndex:20},{value:': If you are unsure whether you have a "true" Outlook.com or Gmail account, try accessing Outlook.com or Gmail.com through the web to see if you can log in and send emails. If not, it means you may not have the corresponding email service, and you need to either sign up for it or use another email service.',paraId:83,tocIndex:20}]},881431:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The email manager plugin allows integration of Google and Microsoft email accounts into NocoBase for sending, receiving, viewing, managing emails, and more. Emails can also be integrated into any page or block.",paraId:0,tocIndex:1},{value:"After enabling the email plugin, click on the email icon at the top right to enter the email management page.",paraId:1,tocIndex:3},{value:'Click the "Account setting" button, open the overlay, and then click the "Link account" button to select the email account type you wish to link.',paraId:2,tocIndex:3},{value:"The browser will automatically open the corresponding email login page. Log in to your account and grant the necessary permissions.",paraId:3,tocIndex:3},{value:"Once the authorization is complete, the page will redirect back to the NocoBase website to link the account and sync data (the first sync may take some time, so please wait).",paraId:4,tocIndex:3},{value:"Once data sync is complete, the current page will automatically close and return to the original email page. You will see the account has been linked.",paraId:5,tocIndex:3},{value:"Click the overlay area to close the popup and see the email list.",paraId:6,tocIndex:3},{value:'Click "Delete" to remove the account and the linked email.',paraId:7,tocIndex:4},{value:"On the email management page, the left side is for filtering, and the right side displays the email list. By default, the inbox is shown when entering the page.",paraId:8,tocIndex:6},{value:"Emails with the same subject are grouped, and the number of related emails will be shown after the subject field. When some emails with the same subject meet the filtering criteria, the root email of the subject will be displayed, and the type of the root email will be marked next to the subject.",paraId:9,tocIndex:6},{value:"Unread email titles will be displayed in bold, and the unread email count will be marked next to the email icon at the top.",paraId:10,tocIndex:6},{value:'The current email sync interval is 5 minutes. To force sync, click the "Refresh" button.',paraId:11,tocIndex:7},{value:'The "Mark as read" and "Mark as unread" buttons allow you to batch update the read status of emails.',paraId:12,tocIndex:8},{value:'Click the "Write email" button at the top to open the email composition panel.',paraId:13,tocIndex:9},{value:"After filling in the required information, you can send the email. Attachments are supported up to 3MB.",paraId:14,tocIndex:9},{value:'Click the "View" button on the row to view the email details. There are two formats: one is a single email where you can directly see the detailed information.',paraId:15,tocIndex:10},{value:"The other is multiple emails with the same subject, which are displayed as a list by default. You can click to expand or collapse.",paraId:16,tocIndex:10},{value:'When you click to view the email details, the email status will be marked as read by default. You can click the "..." button on the right and select "Mark as unread" to revert it to unread.',paraId:17,tocIndex:10},{value:'After entering the email details, click the "Reply" button at the bottom to reply to the email. If there are multiple recipients, you can click "Reply all" to reply to everyone.',paraId:18,tocIndex:11},{value:'Click the "Forward" button at the bottom to forward the email to others.',paraId:19,tocIndex:12},{value:'In the configuration page, click the "Add block" button and select the "Mail messages" block to add.',paraId:20,tocIndex:14},{value:'Click the "Configure columns" button on the block to choose which fields to display. For detailed instructions, refer to the table field configuration.',paraId:21,tocIndex:15},{value:'Click the "Configure actions" button on the block to configure the top buttons. The final action will correspond to the email management actions.',paraId:22,tocIndex:16},{value:'The "Send email" button can be configured with default content.',paraId:23,tocIndex:16},{value:'Click the configuration on the right side of the table, select "Set the data scope," and configure the email data filter.',paraId:24,tocIndex:17},{value:'Add the "Write email" button in the table action bar.',paraId:25,tocIndex:19},{value:"Enter the button configuration menu to edit the button name.",paraId:26,tocIndex:19},{value:'Enter the button configuration menu, then select "Mail default value."',paraId:27,tocIndex:20},{value:"Set the default recipient as the email from the current row data.",paraId:28,tocIndex:20},{value:'Click the "Write email" button to see that the default recipient has already been filled in.',paraId:29,tocIndex:20},{value:"If your email account has been authorized but you want to delete or reauthorize it, follow the steps below:",paraId:30,tocIndex:21},{value:"Google Email",paraId:31},{value:"Open ",paraId:32,tocIndex:22},{value:"https://myaccount.google.com/u/0/connections",paraId:32,tocIndex:22},{value:" and log in.",paraId:32,tocIndex:22},{value:'Click the corresponding app, then click "Remove."',paraId:33,tocIndex:22},{value:"Microsoft Email",paraId:31},{value:"Open ",paraId:34,tocIndex:23},{value:"https://account.microsoft.com/",paraId:34,tocIndex:23},{value:" and log in.",paraId:34,tocIndex:23},{value:'Click the "Apps and services that can access your data" button.',paraId:35,tocIndex:23},{value:'Click "Edit" and remove it.',paraId:36,tocIndex:23}]},488336:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is used to embed NocoBase pages into other websites or applications.",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin and needs to be uploaded and activated through the plugin manager.",paraId:1,tocIndex:2},{value:`After activating the interface configuration, click "Copy embedded link" in the page's configuration menu (top right corner).`,paraId:2,tocIndex:3},{value:"After clicking, you will get a link that can be opened separately, for example, ",paraId:3,tocIndex:3},{value:"https://xxx.com/embed/qs087rz4o2b",paraId:3,tocIndex:3},{value:".",paraId:3,tocIndex:3},{value:"If you want to embed NocoBase pages into other websites or applications, user authentication is required, and the ",paraId:4,tocIndex:3},{value:"token",paraId:4,tocIndex:3},{value:" needs to be appended to the link, for example, ",paraId:4,tocIndex:3},{value:"https://xxx.com/embed/qs087rz4o2b?token=xxx",paraId:4,tocIndex:3},{value:". For detailed instructions on user authentication, please refer to ",paraId:4,tocIndex:3},{value:"User Authentication",paraId:5,tocIndex:3},{value:".",paraId:4,tocIndex:3}]},144629:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Centralized configuration and management of environment variables and secrets for sensitive data storage, configuration data reuse, and environment configuration isolation.",paraId:0,tocIndex:1},{value:".env",paraId:1},{value:"Feature",paraId:2,tocIndex:2},{value:".env",paraId:2,tocIndex:2},{value:" File",paraId:2,tocIndex:2},{value:"Dynamic Configuration Environment Variables",paraId:2,tocIndex:2},{value:"Storage Location",paraId:2,tocIndex:2},{value:"Stored in the ",paraId:2,tocIndex:2},{value:".env",paraId:2,tocIndex:2},{value:" file in the project root directory",paraId:2,tocIndex:2},{value:"Stored in the ",paraId:2,tocIndex:2},{value:"environmentVariables",paraId:2,tocIndex:2},{value:" table in the database",paraId:2,tocIndex:2},{value:"Loading Method",paraId:2,tocIndex:2},{value:"Loaded into ",paraId:2,tocIndex:2},{value:"process.env",paraId:2,tocIndex:2},{value:" using tools like ",paraId:2,tocIndex:2},{value:"dotenv",paraId:2,tocIndex:2},{value:" during application startup",paraId:2,tocIndex:2},{value:"Dynamically read and loaded into ",paraId:2,tocIndex:2},{value:"app.environment",paraId:2,tocIndex:2},{value:" during application startup",paraId:2,tocIndex:2},{value:"Modification Method",paraId:2,tocIndex:2},{value:"Requires direct file editing, and the application needs to be restarted for changes to take effect",paraId:2,tocIndex:2},{value:"Supports runtime modification, changes take effect immediately after reloading the application configuration",paraId:2,tocIndex:2},{value:"Environment Isolation",paraId:2,tocIndex:2},{value:"Each environment (development, testing, production) requires separate maintenance of ",paraId:2,tocIndex:2},{value:".env",paraId:2,tocIndex:2},{value:" files",paraId:2,tocIndex:2},{value:"Each environment (development, testing, production) requires separate maintenance of data in the ",paraId:2,tocIndex:2},{value:"environmentVariables",paraId:2,tocIndex:2},{value:" table",paraId:2,tocIndex:2},{value:"Applicable Scenarios",paraId:2,tocIndex:2},{value:"Suitable for fixed static configurations, such as main database information for the application",paraId:2,tocIndex:2},{value:"Suitable for dynamic configurations that require frequent adjustments or are tied to business logic, such as external databases, file storage information, etc.",paraId:2,tocIndex:2},{value:"Built-in plugin, no separate installation required.",paraId:3,tocIndex:3},{value:"For example, if multiple places in the workflow require email nodes and SMTP configuration, the common SMTP configuration can be stored in environment variables.",paraId:4,tocIndex:5},{value:"Storage of various external database configuration information, cloud file storage keys, etc.",paraId:5,tocIndex:6},{value:"In different environments such as development, testing, and production, independent configuration management strategies are used to ensure that the configurations and data of each environment do not interfere with each other. Each environment has its own independent settings, variables, and resources, which avoids conflicts between development, testing, and production environments and ensures that the system runs as expected in each environment.",paraId:6,tocIndex:7},{value:"For example, the configuration for file storage services may differ between development and production environments, as shown below:",paraId:7,tocIndex:7},{value:"Development Environment",paraId:8,tocIndex:7},{value:`FILE_STORAGE_OSS_BASE_URL=dev-storage.nocobase.com
FILE_STORAGE_OSS_BUCKET=dev-storage
`,paraId:9,tocIndex:7},{value:"Production Environment",paraId:10,tocIndex:7},{value:`FILE_STORAGE_OSS_BASE_URL=prod-storage.nocobase.com
FILE_STORAGE_OSS_BUCKET=prod-storage
`,paraId:11,tocIndex:7},{value:"Supports single and batch addition",paraId:12,tocIndex:9},{value:"Supports plaintext and encrypted storage",paraId:12,tocIndex:9},{value:"Single Addition",paraId:13,tocIndex:9},{value:"Batch Addition",paraId:14,tocIndex:9},{value:"After modifying or deleting environment variables, a prompt to restart the application will appear at the top. Changes to environment variables will only take effect after the application is restarted.",paraId:15,tocIndex:11},{value:"Encrypted data for environment variables uses AES symmetric encryption. The PRIVATE KEY for encryption and decryption is stored in the storage directory. Please keep it safe; if lost or overwritten, the encrypted data cannot be decrypted.",paraId:16,tocIndex:12},{value:`./storage/environment-variables/<app-name>/aes_key.dat
`,paraId:17,tocIndex:12},{value:"Not adapted",paraId:18,tocIndex:32},{value:"Not adapted",paraId:19,tocIndex:35}]},233042:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Supports attachments in URL format.",paraId:0,tocIndex:1},{value:"This plugin is a commercial plugin.",paraId:1,tocIndex:2}]},590611:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To be added.",paraId:0,tocIndex:3}]},795904:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Mask Field Component allows you to display field values in a masked format, which is particularly useful for handling sensitive information like passwords or credit card numbers.",paraId:0,tocIndex:1},{value:"This is a commercial plugin.",paraId:1,tocIndex:2},{value:"Field Component",paraId:2,tocIndex:3},{value:": Switch between the default field component and the mask field component.",paraId:3,tocIndex:3},{value:"Mask Settings: Configure mask rules and set permissions for the field.",paraId:3,tocIndex:3},{value:"******",paraId:4,tocIndex:6},{value:": Masks the data entirely with six asterisks.",paraId:4,tocIndex:6},{value:"***abc",paraId:4,tocIndex:6},{value:": Masks the data with three asterisks followed by the last three characters of the original data.",paraId:4,tocIndex:6},{value:"**ab**",paraId:4,tocIndex:6},{value:": Masks the data with two asterisks at both the beginning and end, revealing the middle two characters of the original data.",paraId:4,tocIndex:6},{value:"abc***",paraId:4,tocIndex:6},{value:": Masks the data by showing the first three characters followed by three asterisks.",paraId:4,tocIndex:6},{value:"If the predefined mask rules don't meet your needs, you can select ",paraId:5,tocIndex:7},{value:"Custom",paraId:5,tocIndex:7},{value:` to define your own mask rules.
The syntax for custom mask rules is as follows:`,paraId:5,tocIndex:7},{value:"*",paraId:6,tocIndex:7},{value:" represents a placeholder, and the mask will display a specified number of ",paraId:6,tocIndex:7},{value:"*",paraId:6,tocIndex:7},{value:".",paraId:6,tocIndex:7},{value:"All other characters will display as they appear in the original data.",paraId:6,tocIndex:7},{value:"Examples:",paraId:7,tocIndex:7},{value:"a*a*a*",paraId:8,tocIndex:7},{value:": Masks the original data ",paraId:8,tocIndex:7},{value:"123456",paraId:8,tocIndex:7},{value:" as ",paraId:8,tocIndex:7},{value:"1*3*5*",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"a****a",paraId:8,tocIndex:7},{value:": Masks the original data ",paraId:8,tocIndex:7},{value:"123456789",paraId:8,tocIndex:7},{value:" as ",paraId:8,tocIndex:7},{value:"1****9",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"ab***abc",paraId:8,tocIndex:7},{value:": Masks the original data ",paraId:8,tocIndex:7},{value:"asdfghjkl",paraId:8,tocIndex:7},{value:" as ",paraId:8,tocIndex:7},{value:"as***jkl",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"You can specify which user roles are permitted to view the original, unmasked field values. By default, only the root user has this permission.",paraId:9,tocIndex:8},{value:"When the field is in edit mode, the original value is always visible, regardless of role settings.",paraId:10}]},579310:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Sensitive business data, such as customer phone numbers, email addresses, and card numbers, can be encrypted to ensure privacy. Once encrypted, this data is securely stored in the database as ciphertext.",paraId:0,tocIndex:1},{value:"Losing the ",paraId:1},{value:"ENCRYPTION_FIELD_KEY",paraId:1},{value:" will make it impossible to decrypt the data.",paraId:1},{value:"To enable the encryption feature, you must set up the ",paraId:2},{value:"ENCRYPTION_FIELD_KEY",paraId:2},{value:" environment variable, which acts as the encryption key. This key must be exactly 32 characters long, for example:",paraId:2},{value:`ENCRYPTION_FIELD_KEY='2%&glK;<UA}eMxJVc53-4G(rTi0vg@J]'
`,paraId:3},{value:"Once a field is encrypted, it only supports the following filtering operations: equals, not equals, exists, and does not exist.",paraId:4,tocIndex:4},{value:"To be added.",paraId:5,tocIndex:5}]},186929:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To be added.",paraId:0,tocIndex:3}]},49862:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This feature allows you to use array fields in a data Collection to store multiple unique keys from the target table, thereby creating a many-to-many relationship between the two tables. For instance, consider the entities Articles and Tags. An article can be linked to multiple tags, with the article table storing the IDs of the corresponding records from the tags table in an array field.",paraId:0,tocIndex:1},{value:"Whenever possible, it's recommended to use a junction Collection to establish a standard ",paraId:1},{value:"many-to-many",paraId:2},{value:" relationship instead of relying on this method.",paraId:1},{value:"Currently, only PostgreSQL supports filtering source Collection data using fields from the target table for many-to-many relationships established with array fields. For example, in the scenario above, you can filter articles based on other fields in the tags table, such as the title.",paraId:1},{value:"The source Collection, where the current field resides.",paraId:3,tocIndex:4},{value:"The target Collection with which the relationship is established.",paraId:4,tocIndex:5},{value:"The array field in the source Collection that stores the target key from the target table.",paraId:5,tocIndex:6},{value:"The corresponding relationships for array field types are as follows:",paraId:6,tocIndex:6},{value:"NocoBase",paraId:7,tocIndex:6},{value:"PostgreSQL",paraId:7,tocIndex:6},{value:"MySQL",paraId:7,tocIndex:6},{value:"SQLite",paraId:7,tocIndex:6},{value:"set",paraId:7,tocIndex:6},{value:"array",paraId:7,tocIndex:6},{value:"JSON",paraId:7,tocIndex:6},{value:"JSON",paraId:7,tocIndex:6},{value:"The field in the target Collection that corresponds to the values stored in the source table's array field. This field must be unique.",paraId:8,tocIndex:7}]},624625:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Coming soon.",paraId:0,tocIndex:3}]},987929:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To be added",paraId:0,tocIndex:3}]},831837:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},155849:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Sort fields are used to sort records in the collection, supporting group first then sort (sort1).",paraId:0,tocIndex:1},{value:"Since the sort field is a field in the current collection, when sorting by group, it does not support the same record being divided into multiple groups.",paraId:1},{value:"Built-in plugin, no separate installation required.",paraId:2,tocIndex:2},{value:"When creating sort fields, the sort values will be initialized:",paraId:3,tocIndex:4},{value:"If group sorting is not selected, initialization will be based on the primary key field and creation date field.",paraId:4,tocIndex:4},{value:"If group sorting is selected, the data will be grouped first, and then initialization will be based on the primary key field and creation date field.",paraId:4,tocIndex:4},{value:"When creating a field, if the sort value initialization fails, the sort field will not be created;",paraId:5},{value:"Within a certain range, if a record moves from position A to position B, the sort values of all records in the AB interval will change. If one fails, the move will fail, and the sort values of the related records will not change.",paraId:5},{value:"The sort1 field is not grouped",paraId:6,tocIndex:5},{value:"The sort fields of each record will be initialized based on the primary key field and creation date field.",paraId:7,tocIndex:5},{value:"At this time, all records in the collection will be grouped first (grouped by Class ID), and then the sort field (sort2) will be initialized. The initial values of each record are:",paraId:8,tocIndex:6},{value:"Sort fields are mainly used for drag-and-drop sorting of various block records. The blocks currently supporting drag-and-drop sorting include tables and boards.",paraId:9,tocIndex:7},{value:"When the same sort field is used for drag-and-drop sorting, mixed use of multiple blocks may disrupt the existing order;",paraId:10},{value:`The field for table drag-and-drop sorting cannot choose a sort field with a grouping rule;
`,paraId:10},{value:"Exception: In a one-to-many relationship table block, the foreign key can serve as a group;",paraId:11},{value:"Currently, only the board block supports group drag-and-drop sorting.",paraId:10},{value:"Table block",paraId:12,tocIndex:8},{value:"Relationship table block",paraId:13,tocIndex:8},{value:"In a one-to-many relationship block",paraId:14},{value:"If an ungrouped sort field is selected, all records may participate in the sorting;",paraId:15},{value:"If it is first grouped based on the foreign key and then sorted, the sorting rule will only affect the data within the current group.",paraId:15},{value:"The final effect is consistent, but the number of records participating in sorting is different, for more explanation, see [Sorting Rule Explanation](#Sorting Rule Explanation)",paraId:16},{value:"Suppose there is a set of data",paraId:17,tocIndex:11},{value:`[1,2,3,4,5,6,7,8,9]
`,paraId:18,tocIndex:11},{value:"When an element, suppose 5, moves forward to position 3, at this time, only the sequence numbers 3,4,5 have changed, 5 occupies the position of 3, and 3,4 each move back one position.",paraId:19,tocIndex:11},{value:`[1,2,5,3,4,6,7,8,9]
`,paraId:20,tocIndex:11},{value:"At this time, continue to move 6 back to position 8, 6 occupies the position of 8, 7,8 each move forward one position.",paraId:21,tocIndex:11},{value:`[1,2,5,3,4,7,8,6,9]
`,paraId:22,tocIndex:11},{value:"When sorting by group, when a record moves to another group, the group where it belongs will also change. As shown in the example below:",paraId:23,tocIndex:12},{value:`A: [1,2,3,4]
B: [5,6,7,8]
`,paraId:24,tocIndex:12},{value:"When 1 moves to 6 (default behind), the group where 1 belongs will also change from A to B",paraId:25,tocIndex:12},{value:`A: [2,3,4]
B: [5,6,1,7,8]
`,paraId:26,tocIndex:12},{value:"For example, there is a set of data",paraId:27,tocIndex:13},{value:`[1,2,3,4,5,6,7,8,9]
`,paraId:28,tocIndex:13},{value:"The screen only shows",paraId:29,tocIndex:13},{value:`[1,5,9]
`,paraId:30,tocIndex:13},{value:"When 1 moves to position 9, the positions of the intervening 2,3,4,5,6,7,8 data will all change",paraId:31,tocIndex:13},{value:`[2,3,4,5,6,7,8,9,1]
`,paraId:32,tocIndex:13},{value:"The screen displays",paraId:33,tocIndex:13},{value:`[5,9,1]
`,paraId:34,tocIndex:13}]},416501:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"For uploaded files, the client UI can display different previews based on file types. The attachment field of file-manager uses a built-in browser-based (iframe) file preview capacity, supporting most file types (such as images, videos, audio, and PDFs) for direct preview in the browser. When a file type is not supported for browser preview or requires special interaction, additional preview components can be extended based on the file type.",paraId:0,tocIndex:1},{value:"For example, if you want to extend a carousel component for image files, you can use the following code:",paraId:1,tocIndex:2},{value:`import match from 'mime-match';
import { Plugin, attachmentFileTypes } from '@nocobase/client';

class MyPlugin extends Plugin {
  load() {
    attachmentFileTypes.add({
      match(file) {
        return match(file.mimetype, 'image/*');
      },
      Previewer({ index, list, onSwitchIndex }) {
        const onDownload = useCallback(
          (e) => {
            e.preventDefault();
            const file = list[index];
            saveAs(file.url, \`\${file.title}\${file.extname}\`);
          },
          [index, list],
        );
        return (
          <LightBox
            // discourageDownloads={true}
            mainSrc={list[index]?.url}
            nextSrc={list[(index + 1) % list.length]?.url}
            prevSrc={list[(index + list.length - 1) % list.length]?.url}
            onCloseRequest={() => onSwitchIndex(null)}
            onMovePrevRequest={() => onSwitchIndex((index + list.length - 1) % list.length)}
            onMoveNextRequest={() => onSwitchIndex((index + 1) % list.length)}
            imageTitle={list[index]?.title}
            toolbarButtons={[
              <button
                key={'preview-img'}
                style={{ fontSize: 22, background: 'none', lineHeight: 1 }}
                type="button"
                aria-label="Download"
                title="Download"
                className="ril-zoom-in ril__toolbarItemChild ril__builtinButton"
                onClick={onDownload}
              >
                <DownloadOutlined />
              </button>,
            ]}
          />
        );
      },
    });
  }
}
`,paraId:2,tocIndex:2},{value:"The ",paraId:3,tocIndex:2},{value:"attachmentFileTypes",paraId:3,tocIndex:2},{value:" is an entry object provided by the ",paraId:3,tocIndex:2},{value:"@nocobase/client",paraId:3,tocIndex:2},{value:" package for extending file types. You can use its ",paraId:3,tocIndex:2},{value:"add",paraId:3,tocIndex:2},{value:" method to extend a file type descriptor.",paraId:3,tocIndex:2},{value:"Each file type must implement a ",paraId:4,tocIndex:2},{value:"match()",paraId:4,tocIndex:2},{value:" method to check if the file type meets the requirements. In the example, the ",paraId:4,tocIndex:2},{value:"mime-match",paraId:4,tocIndex:2},{value:" package is used to check the file's ",paraId:4,tocIndex:2},{value:"mimetype",paraId:4,tocIndex:2},{value:" attribute. If it matches ",paraId:4,tocIndex:2},{value:"image/*",paraId:4,tocIndex:2},{value:", it is considered a file type that needs processing. If it does not match, it will fall back to the built-in type.",paraId:4,tocIndex:2},{value:"The ",paraId:5,tocIndex:2},{value:"Previewer",paraId:5,tocIndex:2},{value:" property on the type descriptor is the component used for previewing. When the file type matches, this component will be rendered for preview. It is generally recommended to use a modal component (like ",paraId:5,tocIndex:2},{value:"<Modal />",paraId:5,tocIndex:2},{value:") as the base container and place the preview and interactive content within that component to implement the preview functionality.",paraId:5,tocIndex:2},{value:`export interface FileModel {
  id: number;
  filename: string;
  path: string;
  title: string;
  url: string;
  extname: string;
  size: number;
  mimetype: string;
}

export interface PreviewerProps {
  index: number;
  list: FileModel[];
  onSwitchIndex(index): void;
}

export interface AttachmentFileType {
  match(file: any): boolean;
  Previewer?: React.ComponentType<PreviewerProps>;
}

export class AttachmentFileTypes {
  add(type: AttachmentFileType): void;
}
`,paraId:6,tocIndex:3},{value:"attachmentFileTypes",paraId:7},{value:"attachmentFileTypes",paraId:8,tocIndex:4},{value:" is a global instance which could be imported from ",paraId:8,tocIndex:4},{value:"@nocobase/client",paraId:8,tocIndex:4},{value:" package:",paraId:8,tocIndex:4},{value:`import { attachmentFileTypes } from '@nocobase/client';
`,paraId:9,tocIndex:4},{value:"attachmentFileTypes.add()",paraId:7},{value:"Register file type descriptor to the file type registry. The type of the descriptor is ",paraId:10,tocIndex:5},{value:"AttachmentFileType",paraId:10,tocIndex:5},{value:".",paraId:10,tocIndex:5},{value:"AttachmentFileType",paraId:7},{value:"match()",paraId:7},{value:"The match method of file type.",paraId:11,tocIndex:7},{value:"The argument ",paraId:12,tocIndex:7},{value:"file",paraId:12,tocIndex:7},{value:" is the uploaded file data object, including some properties could be used to check types.",paraId:12,tocIndex:7},{value:"mimetype",paraId:13,tocIndex:7},{value:": Mimetype",paraId:13,tocIndex:7},{value:"extname",paraId:13,tocIndex:7},{value:': Extension name of file, including "."',paraId:13,tocIndex:7},{value:"path",paraId:13,tocIndex:7},{value:": Relative path of the file storing",paraId:13,tocIndex:7},{value:"url",paraId:13,tocIndex:7},{value:": File URL",paraId:13,tocIndex:7},{value:"The return value type is ",paraId:14,tocIndex:7},{value:"boolean",paraId:14,tocIndex:7},{value:", means matched or not.",paraId:14,tocIndex:7},{value:"Previewer",paraId:7},{value:"Component used to preview file.",paraId:15,tocIndex:8},{value:"Props:",paraId:16,tocIndex:8},{value:"index",paraId:17,tocIndex:8},{value:": Index value in attachemnts list",paraId:17,tocIndex:8},{value:"list",paraId:17,tocIndex:8},{value:": Attachemnt list",paraId:17,tocIndex:8},{value:"onSwitchIndex",paraId:17,tocIndex:8},{value:": Method to switch preview index",paraId:17,tocIndex:8},{value:"For ",paraId:18,tocIndex:8},{value:"onSwitchIndex",paraId:18,tocIndex:8},{value:", any index value in the list could be used, to switch to other file. If ",paraId:18,tocIndex:8},{value:"null",paraId:18,tocIndex:8},{value:" is used as argument, the preview component will be closed.",paraId:18,tocIndex:8},{value:`onSwitchIndex(null);
`,paraId:19,tocIndex:8}]},994440:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The attachment field is a specialized relational field that connects directly to the file collection.",paraId:0,tocIndex:1},{value:"(Example to be added)",paraId:1,tocIndex:3}]},564555:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Files are collection records with a specific structure, the collection is known as file collection, which store the metadata of files and can be managed through the File Manager.",paraId:0,tocIndex:1},{value:"Creating File Collection",paraId:1,tocIndex:2},{value:"Preset Fields in File Collection",paraId:2,tocIndex:2},{value:"Using in Blocks",paraId:3,tocIndex:2},{value:"Association Field",paraId:4,tocIndex:2},{value:"Association Blocks",paraId:5,tocIndex:2}]},543021:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u9644\u4EF6\u5B57\u6BB5\u548C\u6587\u4EF6\u8868\u7684\u6587\u4EF6\u4E0A\u4F20\u5747\u652F\u6301\u901A\u8FC7 HTTP API \u8FDB\u884C\u5904\u7406\u3002\u6839\u636E\u9644\u4EF6\u6216\u6587\u4EF6\u8868\u4F7F\u7528\u7684\u5B58\u50A8\u5F15\u64CE\u4E0D\u540C\uFF0C\u5206\u522B\u6709\u4E0D\u540C\u7684\u8C03\u7528\u65B9\u5F0F\u3002",paraId:0,tocIndex:0},{value:"\u9488\u5BF9 S3\u3001OSS\u3001COS \u7B49\u9879\u76EE\u4E2D\u5185\u7F6E\u7684\u5F00\u6E90\u5B58\u50A8\u5F15\u64CE\uFF0CHTTP API \u4E0E\u7528\u6237\u754C\u9762\u4E0A\u4F20\u529F\u80FD\u8C03\u7528\u7684\u76F8\u540C\uFF0C\u6587\u4EF6\u5747\u901A\u8FC7\u670D\u52A1\u7AEF\u4E0A\u4F20\u3002\u8C03\u7528\u63A5\u53E3\u9700\u8981\u901A\u8FC7 ",paraId:1,tocIndex:1},{value:"Authorization",paraId:1,tocIndex:1},{value:" \u8BF7\u6C42\u5934\u4F20\u9012\u57FA\u4E8E\u7528\u6237\u767B\u5F55\u7684 JWT \u4EE4\u724C\uFF0C\u5426\u5219\u5C06\u88AB\u62D2\u7EDD\u8BBF\u95EE\u3002",paraId:1,tocIndex:1},{value:"\u901A\u8FC7\u5BF9\u9644\u4EF6\u8868\uFF08",paraId:2,tocIndex:2},{value:"attachments",paraId:2,tocIndex:2},{value:"\uFF09\u8D44\u6E90\u53D1\u8D77 ",paraId:2,tocIndex:2},{value:"create",paraId:2,tocIndex:2},{value:" \u64CD\u4F5C\uFF0C\u4EE5 POST \u5F62\u5F0F\u53D1\u9001\u8BF7\u6C42\uFF0C\u5E76\u901A\u8FC7 ",paraId:2,tocIndex:2},{value:"file",paraId:2,tocIndex:2},{value:" \u5B57\u6BB5\u4E0A\u4F20\u4E8C\u8FDB\u5236\u5185\u5BB9\u3002\u8C03\u7528\u540E\u6587\u4EF6\u4F1A\u88AB\u4E0A\u4F20\u81F3\u9ED8\u8BA4\u7684\u5B58\u50A8\u5F15\u64CE\u4E2D\u3002",paraId:2,tocIndex:2},{value:`curl -X POST\\
    -H "Authorization: Bearer <JWT>"\\
    -F "file=@<path/to/file>"\\
    "http://localhost:3000/api/attachments:create"
`,paraId:3,tocIndex:2},{value:"\u5982\u9700\u5C06\u6587\u4EF6\u4E0A\u4F20\u81F3\u4E0D\u540C\u7684\u5B58\u50A8\u5F15\u64CE\uFF0C\u53EF\u4EE5\u901A\u8FC7 ",paraId:4,tocIndex:2},{value:"attachmentField",paraId:4,tocIndex:2},{value:" \u53C2\u6570\u6307\u5B9A\u6240\u5C5E\u6570\u636E\u8868\u5B57\u6BB5\u5DF2\u914D\u7F6E\u7684\u5B58\u50A8\u5F15\u64CE\uFF08\u5982\u672A\u914D\u7F6E\uFF0C\u5219\u4E0A\u4F20\u81F3\u9ED8\u8BA4\u5B58\u50A8\u5F15\u64CE\uFF09\u3002",paraId:4,tocIndex:2},{value:`curl -X POST\\
    -H "Authorization: Bearer <JWT>"\\
    -F "file=@<path/to/file>"\\
    "http://localhost:3000/api/attachments:create?attachmentField=<collection_name>.<field_name>"
`,paraId:5,tocIndex:2},{value:"\u5BF9\u6587\u4EF6\u8868\u4E0A\u4F20\u5C06\u81EA\u52A8\u751F\u6210\u6587\u4EF6\u8BB0\u5F55\uFF0C\u901A\u8FC7\u5BF9\u6587\u4EF6\u8868\u8D44\u6E90\u53D1\u8D77 ",paraId:6,tocIndex:3},{value:"create",paraId:6,tocIndex:3},{value:" \u64CD\u4F5C\uFF0C\u4EE5 POST \u5F62\u5F0F\u53D1\u9001\u8BF7\u6C42\uFF0C\u5E76\u901A\u8FC7 ",paraId:6,tocIndex:3},{value:"file",paraId:6,tocIndex:3},{value:" \u5B57\u6BB5\u4E0A\u4F20\u4E8C\u8FDB\u5236\u5185\u5BB9\u3002",paraId:6,tocIndex:3},{value:`curl -X POST\\
    -H "Authorization: Bearer <JWT>"\\
    -F "file=@<path/to/file>"\\
    "http://localhost:3000/api/<file_collection_name>:create"
`,paraId:7,tocIndex:3},{value:"\u5BF9\u6587\u4EF6\u8868\u4E0A\u4F20\u65E0\u9700\u6307\u5B9A\u5B58\u50A8\u5F15\u64CE\uFF0C\u6587\u4EF6\u4F1A\u88AB\u4E0A\u4F20\u81F3\u8BE5\u8868\u914D\u7F6E\u7684\u5B58\u50A8\u5F15\u64CE\u4E2D\u3002",paraId:8,tocIndex:3},{value:"\u9488\u5BF9\u901A\u8FC7\u5546\u4E1A\u63D2\u4EF6 S3-Pro \u63D0\u4F9B\u7684 S3 \u517C\u5BB9\u6027\u7684\u5B58\u50A8\u5F15\u64CE\uFF0CHTTP API \u4E0A\u4F20\u9700\u8981\u5206\u4E3A\u51E0\u4E2A\u6B65\u9AA4\u8FDB\u884C\u8C03\u7528\u3002",paraId:9,tocIndex:4},{value:"\u83B7\u53D6\u5B58\u50A8\u5F15\u64CE\u4FE1\u606F",paraId:10,tocIndex:5},{value:"\u5BF9\u5B58\u50A8\u8868\uFF08",paraId:11,tocIndex:5},{value:"storages",paraId:11,tocIndex:5},{value:"\uFF09\u53D1\u8D77 ",paraId:11,tocIndex:5},{value:"getBasicInfo",paraId:11,tocIndex:5},{value:" \u64CD\u4F5C\uFF0C\u540C\u65F6\u643A\u5E26\u5B58\u50A8\u7A7A\u95F4\u6807\u8BC6\uFF08storage name\uFF09\uFF0C\u8BF7\u6C42\u5B58\u50A8\u5F15\u64CE\u7684\u914D\u7F6E\u4FE1\u606F",paraId:11,tocIndex:5},{value:`curl 'http://localhost:13000/api/storages:getBasicInfo/<storage_name>' \\
  -H 'Authorization: Bearer <JWT>'
`,paraId:12,tocIndex:5},{value:"\u8FD4\u56DE\u7684\u5B58\u50A8\u5F15\u64CE\u914D\u7F6E\u4FE1\u606F\u793A\u4F8B\uFF1A",paraId:13,tocIndex:5},{value:`{
  "id": 2,
  "title": "xxx",
  "name": "xxx",
  "type": "s3-compatible",
  "rules": { ... }
}
`,paraId:14,tocIndex:5},{value:"\u83B7\u53D6\u670D\u52A1\u5546\u7684\u9884\u7B7E\u540D\u4FE1\u606F",paraId:15,tocIndex:5},{value:"\u5BF9 ",paraId:16,tocIndex:5},{value:"fileStorageS3",paraId:16,tocIndex:5},{value:" \u8D44\u6E90\u53D1\u8D77 ",paraId:16,tocIndex:5},{value:"createPresignedUrl",paraId:16,tocIndex:5},{value:" \u64CD\u4F5C\uFF0C\u4EE5 POST \u5F62\u5F0F\u53D1\u9001\u8BF7\u6C42\uFF0C\u5E76\u5728 body \u4E2D\u643A\u5E26\u6587\u4EF6\u76F8\u5173\u4FE1\u606F\uFF0C\u83B7\u53D6\u5230\u9884\u7B7E\u540D\u4E0A\u4F20\u4FE1\u606F",paraId:16,tocIndex:5},{value:`curl 'http://localhost:13000/api/fileStorageS3:createPresignedUrl' \\
  -X POST \\
  -H 'Accept: application/json, text/plain, */*' \\
  -H 'Authorization: Bearer <JWT>' \\
  -H 'Content-Type: application/json' \\
  --data-raw '{"name":<name>,"size":<size>,"type":<type>,"storageId":<storageId>,"storageType":<storageType>}'
`,paraId:17,tocIndex:5},{value:"\u8BF4\u660E\uFF1A",paraId:18,tocIndex:5},{value:"name: \u6587\u4EF6\u540D",paraId:19,tocIndex:5},{value:"size: \u6587\u4EF6\u5927\u5C0F\uFF08\u4EE5 bytes \u4E3A\u5355\u4F4D\uFF09",paraId:19,tocIndex:5},{value:"type: \u6587\u4EF6\u7684 MIME \u7C7B\u578B\uFF0C\u53EF\u4EE5\u53C2\u8003\uFF1A",paraId:19,tocIndex:5},{value:"\u5E38\u89C1 MIME \u7C7B\u578B",paraId:19,tocIndex:5},{value:"storageId: \u5B58\u50A8\u5F15\u64CE\u7684id\uFF08\u7B2C\u4E00\u6B65\u4E2D\u8FD4\u56DE\u7684 ",paraId:19,tocIndex:5},{value:"id",paraId:19,tocIndex:5},{value:" \u5B57\u6BB5\uFF09",paraId:19,tocIndex:5},{value:"storageType: \u5B58\u50A8\u5F15\u64CE\u7C7B\u578B\uFF08\u7B2C\u4E00\u6B65\u4E2D\u8FD4\u56DE\u7684 ",paraId:19,tocIndex:5},{value:"type",paraId:19,tocIndex:5},{value:" \u5B57\u6BB5\uFF09",paraId:19,tocIndex:5},{value:"\u793A\u4F8B\u8BF7\u6C42\u6570\u636E\uFF1A",paraId:20,tocIndex:5},{value:`--data-raw '{"name":"a.png","size":4405,"type":"image/png","storageId":2,"storageType":"s3-compatible"}'
`,paraId:21,tocIndex:5},{value:"\u83B7\u53D6\u5230\u7684\u9884\u7B7E\u540D\u4FE1\u606F\u6570\u636E\u7ED3\u6784\u5982\u4E0B",paraId:22,tocIndex:5},{value:`{
  "putUrl": "https://xxxxxxx",
  "fileInfo": {
    "key": "xxx",
    "title": "xxx",
    "filename": "xxx",
    "extname": ".png",
    "size": 4405,
    "mimetype": "image/png",
    "meta": {},
    "url": ""
  }
}
`,paraId:23,tocIndex:5},{value:"\u6587\u4EF6\u4E0A\u4F20",paraId:24,tocIndex:5},{value:"\u4F7F\u7528\u8FD4\u56DE\u7684 ",paraId:25,tocIndex:5},{value:"putUrl",paraId:25,tocIndex:5},{value:" \u53D1\u8D77 ",paraId:25,tocIndex:5},{value:"PUT",paraId:25,tocIndex:5},{value:" \u8BF7\u6C42\uFF0C\u5C06\u6587\u4EF6\u4F5C\u4E3A body \u4E0A\u4F20\u3002",paraId:25,tocIndex:5},{value:`curl '<putUrl>' \\
  -X 'PUT' \\
  -T <file_path>
`,paraId:26,tocIndex:5},{value:"\u8BF4\u660E\uFF1A",paraId:27,tocIndex:5},{value:"putUrl\uFF1A\u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:28,tocIndex:5},{value:"putUrl",paraId:28,tocIndex:5},{value:" \u5B57\u6BB5",paraId:28,tocIndex:5},{value:"file_path\uFF1A\u9700\u4E0A\u4F20\u7684\u672C\u5730\u6587\u4EF6\u8DEF\u5F84",paraId:28,tocIndex:5},{value:"\u793A\u4F8B\u8BF7\u6C42\u6570\u636E\uFF1A",paraId:29,tocIndex:5},{value:`curl 'https://xxxxxxx' \\
 -X 'PUT' \\
 -T /Users/Downloads/a.png
`,paraId:30,tocIndex:5},{value:"\u521B\u5EFA\u6587\u4EF6\u884C\u8BB0\u5F55",paraId:31,tocIndex:5},{value:"\u4E0A\u4F20\u6210\u529F\u540E\uFF0C\u901A\u8FC7\u5BF9\u9644\u4EF6\u8868\uFF08",paraId:32,tocIndex:5},{value:"attachments",paraId:32,tocIndex:5},{value:"\uFF09\u8D44\u6E90\u53D1\u8D77 ",paraId:32,tocIndex:5},{value:"create",paraId:32,tocIndex:5},{value:" \u64CD\u4F5C\uFF0C\u4EE5 POST \u5F62\u5F0F\u53D1\u9001\u8BF7\u6C42\uFF0C\u521B\u5EFA\u6587\u4EF6\u8BB0\u5F55\u3002",paraId:32,tocIndex:5},{value:`curl 'http://localhost:13000/api/attachments:create?attachmentField=<collection_name>.<field_name>' \\
  -X POST \\
  -H 'Accept: application/json, text/plain, */*' \\
  -H 'Authorization: Bearer <JWT>' \\
  -H 'Content-Type: application/json' \\
  --data-raw '{"title":<title>,"filename":<filename>,"extname":<extname>,"path":"","size":<size>,"url":"","mimetype":<mimetype>,"meta":<meta>,"storageId":<storageId>}'
`,paraId:33,tocIndex:5},{value:"data-raw \u4E2D\u4F9D\u8D56\u6570\u636E\u8BF4\u660E\uFF1A",paraId:34,tocIndex:5},{value:"title: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.title",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"filename: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.key",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"extname: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.extname",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"path: \u9ED8\u8BA4\u4E3A\u7A7A",paraId:35,tocIndex:5},{value:"size: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.size",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"url: \u9ED8\u8BA4\u4E3A\u7A7A",paraId:35,tocIndex:5},{value:"mimetype: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.mimetype",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"meta: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"fileInfo.meta",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"storageId: \u7B2C\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:35,tocIndex:5},{value:"id",paraId:35,tocIndex:5},{value:" \u5B57\u6BB5",paraId:35,tocIndex:5},{value:"\u793A\u4F8B\u8BF7\u6C42\u6570\u636E\uFF1A",paraId:36,tocIndex:5},{value:`  --data-raw '{"title":"ATT00001","filename":"ATT00001-8nuuxkuz4jn.png","extname":".png","path":"","size":4405,"url":"","mimetype":"image/png","meta":{},"storageId":2}'
`,paraId:37,tocIndex:5},{value:"\u524D\u4E09\u6B65\u64CD\u4F5C\u4E0E\u9644\u4EF6\u5B57\u6BB5\u4E0A\u4F20\u76F8\u540C\uFF0C\u4F46\u5728\u7B2C\u56DB\u6B65\u9700\u8981\u521B\u5EFA\u6587\u4EF6\u8BB0\u5F55\uFF0C\u901A\u8FC7\u5BF9\u6587\u4EF6\u8868\u8D44\u6E90\u53D1\u8D77 create \u64CD\u4F5C\uFF0C\u4EE5 POST \u5F62\u5F0F\u53D1\u9001\u8BF7\u6C42\uFF0C\u5E76\u901A\u8FC7 body \u4E0A\u4F20\u6587\u4EF6\u4FE1\u606F\u3002",paraId:38,tocIndex:6},{value:`curl 'http://localhost:13000/api/<file_collection_name>:create' \\
  -H 'Authorization: Bearer <JWT>' \\
  -H 'Content-Type: application/json' \\
  --data-raw '{"title":<title>,"filename":<filename>,"extname":<extname>,"path":"","size":<size>,"url":"","mimetype":<mimetype>,"meta":<meta>,"storageId":<storageId>}'
`,paraId:39,tocIndex:6},{value:"data-raw \u4E2D\u4F9D\u8D56\u6570\u636E\u8BF4\u660E\uFF1A",paraId:40,tocIndex:6},{value:"title: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.title",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"filename: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.key",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"extname: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.extname",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"path: \u9ED8\u8BA4\u4E3A\u7A7A",paraId:41,tocIndex:6},{value:"size: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.size",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"url: \u9ED8\u8BA4\u4E3A\u7A7A",paraId:41,tocIndex:6},{value:"mimetype: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.mimetype",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"meta: \u4E0A\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"fileInfo.meta",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"storageId: \u7B2C\u4E00\u6B65\u8FD4\u56DE\u7684 ",paraId:41,tocIndex:6},{value:"id",paraId:41,tocIndex:6},{value:" \u5B57\u6BB5",paraId:41,tocIndex:6},{value:"\u793A\u4F8B\u8BF7\u6C42\u6570\u636E\uFF1A",paraId:42,tocIndex:6},{value:`  --data-raw '{"title":"ATT00001","filename":"ATT00001-8nuuxkuz4jn.png","extname":".png","path":"","size":4405,"url":"","mimetype":"image/png","meta":{},"storageId":2}'
`,paraId:43,tocIndex:6}]},796867:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The File Manager plugin provides a file collection, attachment field, and file storage services for effectively managing files. Files are structured data table records known as file collection, which store file metadata and can be managed through the File Manager. Attachment fields are specific relational fields associated with the file collection. The plugin supports multiple storage methods, including local storage, Alibaba Cloud OSS, Amazon S3, and Tencent Cloud COS.",paraId:0,tocIndex:1},{value:"An attachments collection is built-in to store all files associated with attachment fields. Additionally, new file collections can be created to store specific files.",paraId:1,tocIndex:3},{value:"More usage information can be found in the file table introduction document",paraId:2},{value:'Attachment fields are specific relational fields related to the file collection, which can be created through "Attachment field" or configured through "Association field".',paraId:3,tocIndex:4},{value:"More usage information can be found in the attachment field introduction document",paraId:4},{value:"The file storage engine is used to save files to specific services, including local storage (saving to the server's hard drive), cloud storage, etc.",paraId:5,tocIndex:5},{value:"More usage information can be found in the file storage introduction document",paraId:6},{value:"Files can be uploaded through the HTTP API, refer to ",paraId:7,tocIndex:6},{value:"HTTP API",paraId:8,tocIndex:6},{value:".",paraId:7,tocIndex:6},{value:"Extend client file type",paraId:9,tocIndex:7}]},186409:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Storage engine based on Aliyun OSS, you need to prepare relevant accounts and permissions in advance.",paraId:0,tocIndex:0},{value:"Only the special parameters of the Aliyun OSS storage engine are introduced here. For common parameters, please refer to the ",paraId:1},{value:"Common Engine Parameters",paraId:2},{value:".",paraId:1},{value:"Specify the region of the OSS storage, for example: ",paraId:3,tocIndex:2},{value:"oss-cn-hangzhou",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"You can view the region information of the storage bucket in the ",paraId:4},{value:"Aliyun OSS console",paraId:4},{value:", and only need to take the prefix part of the region (without the complete domain name).",paraId:4},{value:"Fill in the ID of the Alibaba Cloud authorized access key.",paraId:5,tocIndex:3},{value:"Fill in the secret of the Alibaba Cloud authorized access key.",paraId:6,tocIndex:4},{value:"Fill in the name of the OSS bucket.",paraId:7,tocIndex:5}]},380067:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Documentation Pending",paraId:0}]},263801:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Currently, NocoBase supports the following built-in engine types:",paraId:0,tocIndex:1},{value:"Local Storage",paraId:1,tocIndex:1},{value:"Amazon S3",paraId:2,tocIndex:1},{value:"Alibaba Cloud OSS",paraId:3,tocIndex:1},{value:"Tencent Cloud COS",paraId:4,tocIndex:1},{value:"A local storage engine is automatically added during system installation and can be used directly. New engines can also be added or existing engine parameters can be edited.",paraId:5,tocIndex:1},{value:"In addition to specific parameters for different engine categories, the following are common parameters:",paraId:6,tocIndex:2},{value:"The name of the storage engine for human recognition.",paraId:7,tocIndex:3},{value:"The system name of the storage engine for system identifying. It must be unique in system-wide. If not provided, it will be generate randomly.",paraId:8,tocIndex:4},{value:'The prefix part of the URL address accessible to the file externally, which can be the access URL base of a CDN, for example: "',paraId:9,tocIndex:5},{value:"https://cdn.nocobase.com/app",paraId:9,tocIndex:5},{value:'" (without the trailing "',paraId:9,tocIndex:5},{value:"/",paraId:9,tocIndex:5},{value:'").',paraId:9,tocIndex:5},{value:'The relative path used when storing files. This part will also be automatically concatenated to the final URL when accessed. For example: "',paraId:10,tocIndex:6},{value:"user/avatar",paraId:10,tocIndex:6},{value:'" (without the leading or trailing "',paraId:10,tocIndex:6},{value:"/",paraId:10,tocIndex:6},{value:'").',paraId:10,tocIndex:6},{value:"The size limit for uploading files to this storage engine. Files larger than this setting will not be uploaded. The system maximum limit is 1GB.",paraId:11,tocIndex:7},{value:"When checked, it is set as the default storage engine for the system. Files uploaded in attachment fields or file collections without specifying a storage engine will be saved to the default storage engine. The default storage engine cannot be deleted.",paraId:12,tocIndex:8},{value:"When checked, uploaded files in the storage engine will be retained even when the data records in attachment fields or file collections are deleted. By default, files in the storage engine are deleted when records are deleted.",paraId:13,tocIndex:9},{value:"See local storage as an example:",paraId:14,tocIndex:9},{value:"After file upload, the final access path is composed of several parts:",paraId:15},{value:`<Base URL>/<Path>/<FileName><Extension>
`,paraId:16},{value:"For example: ",paraId:17},{value:"https://cdn.nocobase.com/app/user/avatar/20240529115151.png",paraId:17},{value:".",paraId:17}]},989070:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The uploaded files will be saved in a local directory on the server. Suitable for scenarios small scale or experimental usage, which the quantity of files is finite.",paraId:0,tocIndex:0},{value:"This section only covers the specific options for the local storage engine. For common parameters, please refer to the ",paraId:1},{value:"General Engine Parameters",paraId:2},{value:".",paraId:1},{value:'The path represents both the relative path of the file stored on the server and the URL access path. For example, "',paraId:3,tocIndex:2},{value:"user/avatar",paraId:3,tocIndex:2},{value:'" (without the leading and trailing "',paraId:3,tocIndex:2},{value:"/",paraId:3,tocIndex:2},{value:'") represents:',paraId:3,tocIndex:2},{value:"The relative path of the uploaded file stored on the server: ",paraId:4,tocIndex:2},{value:"/path/to/nocobase-app/storage/uploads/user/avatar",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:"The URL prefix for accessing the file: ",paraId:4,tocIndex:2},{value:"http://localhost:13000/storage/uploads/user/avatar",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2}]},795707:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Building on the file management plugin, this version adds support for file storage types compatible with the S3 protocol. Any object storage service supporting the S3 protocol can be seamlessly integrated, such as Amazon S3, Alibaba Cloud OSS, Tencent Cloud COS, MinIO, Cloudflare R2, etc., enhancing the compatibility and flexibility of storage services.",paraId:0,tocIndex:1},{value:"Client Upload:",paraId:1,tocIndex:2},{value:" Files are uploaded directly to the storage service without passing through the NocoBase server, enabling a more efficient and faster upload experience.",paraId:1,tocIndex:2},{value:"Private Access:",paraId:2,tocIndex:2},{value:" All file URLs are signed temporary authorization addresses, ensuring secure and time-limited access to files.",paraId:2,tocIndex:2},{value:"File Table Management:",paraId:3,tocIndex:3},{value:" Centrally manage and store all uploaded files, supporting various file types and storage methods for easy classification and retrieval.",paraId:3,tocIndex:3},{value:"Attachment Field Storage:",paraId:4,tocIndex:3},{value:" Store attachments uploaded via forms or records and associate them with specific data entries.",paraId:4,tocIndex:3},{value:"Enable the ",paraId:5,tocIndex:4},{value:"plugin-file-storage-s3-pro",paraId:5,tocIndex:4},{value:" plugin.",paraId:5,tocIndex:4},{value:'Navigate to "Setting -> FileManager" to access the file management settings.',paraId:6,tocIndex:4},{value:'Click the "Add new" button and select "S3 Pro".',paraId:7,tocIndex:4},{value:"In the pop-up window, you will see a detailed form to fill out. Refer to the following documentation to obtain the relevant parameters for your file service and correctly input them into the form.",paraId:8,tocIndex:4},{value:"Visit ",paraId:9,tocIndex:7},{value:"Amazon S3 Console",paraId:9,tocIndex:7},{value:".",paraId:9,tocIndex:7},{value:'Click the "Create bucket" button on the right-hand side.',paraId:10,tocIndex:7},{value:"Fill in the ",paraId:11,tocIndex:7},{value:"Bucket Name",paraId:11,tocIndex:7},{value:", leave other fields as default, scroll to the bottom, and click the ",paraId:11,tocIndex:7},{value:'"Create"',paraId:11,tocIndex:7},{value:" button to complete the process.",paraId:11,tocIndex:7},{value:"In the bucket list, find and click the newly created bucket to access its details.",paraId:12,tocIndex:8},{value:'Navigate to the "Permission" tab and scroll down to the CORS configuration section.',paraId:13,tocIndex:8},{value:"Enter the following configuration (customize as needed) and save.",paraId:14,tocIndex:8},{value:`[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "POST",
            "PUT"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "ExposeHeaders": [
            "ETag"
        ],
        "MaxAgeSeconds": 3000
    }
]
`,paraId:15,tocIndex:8},{value:'Click the "Security credentials" button in the top-right corner.',paraId:16,tocIndex:9},{value:'Scroll to the "Access Keys" section and click "Create Access Key."',paraId:17,tocIndex:9},{value:"Agree to the terms (IAM usage is recommended for production environments).",paraId:18,tocIndex:9},{value:"Save the displayed Access Key and Secret Access Key.",paraId:19,tocIndex:9},{value:"Use the retrieved ",paraId:20,tocIndex:10},{value:"AccessKey ID",paraId:20,tocIndex:10},{value:" and ",paraId:20,tocIndex:10},{value:"AccessKey Secret",paraId:20,tocIndex:10},{value:".",paraId:20,tocIndex:10},{value:"Visit the bucket's properties panel to find the ",paraId:21,tocIndex:10},{value:"Bucket Name",paraId:21,tocIndex:10},{value:" and ",paraId:21,tocIndex:10},{value:"Region",paraId:21,tocIndex:10},{value:".",paraId:21,tocIndex:10},{value:"For public file access, configure as follows:",paraId:22,tocIndex:11},{value:'In the Permissions panel, scroll to "Object Ownership," click "Edit," and enable ACLs.',paraId:23,tocIndex:11},{value:'Scroll to "Block public access," click "Edit," and allow ACL control.',paraId:24,tocIndex:11},{value:'Check "Public access" in NocoBase.',paraId:25,tocIndex:11},{value:"This configuration is optional and should be used when you need to optimize the image preview size or effect. ",paraId:26,tocIndex:12},{value:"Please note, this deployment may incur additional costs. For more details, refer to AWS's terms and pricing.",paraId:26,tocIndex:12},{value:"Visit ",paraId:27,tocIndex:12},{value:"Dynamic Image Transformation for Amazon CloudFront",paraId:27,tocIndex:12},{value:".",paraId:27,tocIndex:12},{value:"Click the ",paraId:28,tocIndex:12},{value:"Launch in the AWS Console",paraId:28,tocIndex:12},{value:` button at the bottom of the page to start the deployment.
`,paraId:28,tocIndex:12},{value:"Follow the prompts to complete the configuration. The following options need special attention:",paraId:29,tocIndex:12},{value:"When creating the stack, you need to specify the Amazon S3 bucket name that contains the source images. Please enter the bucket name you created earlier.",paraId:30,tocIndex:12},{value:'If you chose to deploy the demo UI, after deployment, you can use the UI to test the image processing functionality. In the AWS CloudFormation console, select your stack, go to the "Outputs" tab, find the value corresponding to the ',paraId:30,tocIndex:12},{value:"DemoUrl",paraId:30,tocIndex:12},{value:" key, and click the link to open the demo interface.",paraId:30,tocIndex:12},{value:"This solution uses the ",paraId:30,tocIndex:12},{value:"sharp",paraId:30,tocIndex:12},{value:" Node.js library for efficient image processing. You can download the source code from the GitHub repository and customize it as needed.",paraId:30,tocIndex:12},{value:"Once the configuration is complete, wait for the deployment status to change to ",paraId:31,tocIndex:12},{value:"CREATE_COMPLETE",paraId:31,tocIndex:12},{value:".",paraId:31,tocIndex:12},{value:"In the NocoBase configuration, please note the following:",paraId:32,tocIndex:12},{value:"Thumbnail rule",paraId:33,tocIndex:12},{value:": Fill in the image processing parameters, such as ",paraId:33,tocIndex:12},{value:"?width=100",paraId:33,tocIndex:12},{value:". For details, refer to the ",paraId:33,tocIndex:12},{value:"AWS documentation",paraId:33,tocIndex:12},{value:".",paraId:33,tocIndex:12},{value:"Access base URL",paraId:33,tocIndex:12},{value:": Enter the value from Outputs -> ApiEndpoint after deployment.",paraId:33,tocIndex:12},{value:"Full access URL style",paraId:33,tocIndex:12},{value:": Select ",paraId:33,tocIndex:12},{value:"Ignore",paraId:33,tocIndex:12},{value:" (as the bucket name has already been filled in the configuration, no further action is needed during access).",paraId:33,tocIndex:12},{value:"Open the ",paraId:34,tocIndex:15},{value:"OSS Console",paraId:34,tocIndex:15},{value:".",paraId:34,tocIndex:15},{value:'Select "Buckets" from the left menu and click "Create Bucket."',paraId:35,tocIndex:15},{value:'Fill in the bucket details and click "Create."',paraId:36,tocIndex:15},{value:"Bucket Name",paraId:37,tocIndex:15},{value:": Choose based on your business needs.",paraId:37,tocIndex:15},{value:"Region",paraId:37,tocIndex:15},{value:": Select the nearest region for your users.",paraId:37,tocIndex:15},{value:"Other settings can remain default or customized as needed.",paraId:37,tocIndex:15},{value:"Navigate to the bucket details page.",paraId:38,tocIndex:16},{value:'Click "Content Security -> CORS" in the menu.',paraId:39,tocIndex:16},{value:'Click "Create Rule," complete the fields, and click "OK."',paraId:40,tocIndex:16},{value:'Click "AccessKey" under your account avatar.',paraId:41,tocIndex:17},{value:"Create an AccessKey. For production, refer to the ",paraId:42,tocIndex:17},{value:"RAM AccessKey Guide",paraId:42,tocIndex:17},{value:".",paraId:42,tocIndex:17},{value:"Complete account verification.",paraId:43,tocIndex:17},{value:"Save the Access Key and Secret Access Key.",paraId:44,tocIndex:17},{value:"Use the retrieved ",paraId:45,tocIndex:18},{value:"AccessKey ID",paraId:45,tocIndex:18},{value:" and ",paraId:45,tocIndex:18},{value:"AccessKey Secret",paraId:45,tocIndex:18},{value:".",paraId:45,tocIndex:18},{value:"Access the bucket details to retrieve the ",paraId:46,tocIndex:18},{value:"Bucket Name",paraId:46,tocIndex:18},{value:".",paraId:46,tocIndex:18},{value:"Scroll down to find the ",paraId:47,tocIndex:18},{value:"Region",paraId:47,tocIndex:18},{value:" (omit ",paraId:47,tocIndex:18},{value:".aliyuncs.com",paraId:47,tocIndex:18},{value:").",paraId:47,tocIndex:18},{value:"Retrieve the ",paraId:48,tocIndex:18},{value:"Endpoint",paraId:48,tocIndex:18},{value:" and add ",paraId:48,tocIndex:18},{value:"https://",paraId:48,tocIndex:18},{value:" as a prefix.",paraId:48,tocIndex:18},{value:"This configuration is optional and should only be used when optimizing the image preview size or effect.",paraId:49,tocIndex:19},{value:"Fill in the relevant parameters for ",paraId:50,tocIndex:19},{value:"Thumbnail rule",paraId:50,tocIndex:19},{value:". For specific parameter settings, refer to ",paraId:50,tocIndex:19},{value:"Image Processing Parameters",paraId:50,tocIndex:19},{value:".",paraId:50,tocIndex:19},{value:"Keep the ",paraId:51,tocIndex:19},{value:"Full upload URL style",paraId:51,tocIndex:19},{value:" and ",paraId:51,tocIndex:19},{value:"Full access URL style",paraId:51,tocIndex:19},{value:" settings the same.",paraId:51,tocIndex:19},{value:"Click on the ",paraId:52,tocIndex:22},{value:"Buckets",paraId:52,tocIndex:22},{value:" menu on the left -> Click ",paraId:52,tocIndex:22},{value:"Create Bucket",paraId:52,tocIndex:22},{value:" to open the creation page.",paraId:52,tocIndex:22},{value:"Enter the Bucket name, then click the ",paraId:53,tocIndex:22},{value:"Save",paraId:53,tocIndex:22},{value:" button.",paraId:53,tocIndex:22},{value:"Navigate to ",paraId:54,tocIndex:23},{value:"Access Keys",paraId:54,tocIndex:23},{value:" -> Click the ",paraId:54,tocIndex:23},{value:"Create access key",paraId:54,tocIndex:23},{value:" button to open the creation page.",paraId:54,tocIndex:23},{value:"Click the ",paraId:55,tocIndex:23},{value:"Save",paraId:55,tocIndex:23},{value:" button.",paraId:55,tocIndex:23},{value:"Save the ",paraId:56,tocIndex:23},{value:"Access Key",paraId:56,tocIndex:23},{value:" and ",paraId:56,tocIndex:23},{value:"Secret Key",paraId:56,tocIndex:23},{value:" from the popup window for future configuration.",paraId:56,tocIndex:23},{value:"Go to the ",paraId:57,tocIndex:24},{value:"File Manager",paraId:57,tocIndex:24},{value:" page in NocoBase.",paraId:57,tocIndex:24},{value:"Click the ",paraId:58,tocIndex:24},{value:"Add new",paraId:58,tocIndex:24},{value:" button and select ",paraId:58,tocIndex:24},{value:"S3 Pro",paraId:58,tocIndex:24},{value:".",paraId:58,tocIndex:24},{value:"Configure the form as follows:",paraId:59,tocIndex:24},{value:"AccessKey ID",paraId:60,tocIndex:24},{value:" and ",paraId:60,tocIndex:24},{value:"AccessKey Secret",paraId:60,tocIndex:24},{value:": Use the values saved from the previous step.",paraId:60,tocIndex:24},{value:"Region",paraId:60,tocIndex:24},{value:": For private deployments of MinIO, the concept of a region does not apply. Set it to ",paraId:60,tocIndex:24},{value:'"auto"',paraId:60,tocIndex:24},{value:".",paraId:60,tocIndex:24},{value:"Endpoint",paraId:60,tocIndex:24},{value:": Enter the domain name or IP address of your deployed service.",paraId:60,tocIndex:24},{value:"Set ",paraId:60,tocIndex:24},{value:"Force path style",paraId:60,tocIndex:24},{value:" to ",paraId:60,tocIndex:24},{value:"Path-Style",paraId:60,tocIndex:24},{value:". The final file URL will be in the format:",paraId:60,tocIndex:24},{value:"https://{Endpoint}/{bucket-name}/{fileKey}",paraId:60,tocIndex:24},{value:".",paraId:60,tocIndex:24},{value:"Refer to the configurations above. The process is largely similar.",paraId:61,tocIndex:26},{value:"Refer to the configurations above. The process is largely similar.",paraId:62,tocIndex:28},{value:"Refer to the ",paraId:63,tocIndex:30},{value:"file-manager plugin documentation",paraId:63,tocIndex:30},{value:".",paraId:63,tocIndex:30}]},187107:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The storage engine based on Tencent Cloud COS, you need to prepare relevant accounts and permissions in advance.",paraId:0,tocIndex:0},{value:"This section only covers the specific options for the Tencent Cloud COS storage engine. For common parameters, please refer to ",paraId:1},{value:"Common Engine Parameters",paraId:2},{value:".",paraId:1},{value:"Fill in the region of the COS storage, for example: ",paraId:3,tocIndex:2},{value:"ap-chengdu",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"You can view the region information of the storage bucket in the ",paraId:4},{value:"Tencent Cloud COS Console",paraId:4},{value:", and only need to take the prefix part of the region (without the complete domain name).",paraId:4},{value:"Fill in the ID of the Tencent Cloud authorized access key.",paraId:5,tocIndex:3},{value:"Fill in the secret of the Tencent Cloud authorized access key.",paraId:6,tocIndex:4},{value:"Fill in the name of the COS bucket, for example: ",paraId:7,tocIndex:5},{value:"qing-cdn-1234189398",paraId:7,tocIndex:5},{value:".",paraId:7,tocIndex:5}]},806230:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.8.11+",paraId:0},{value:"The Office File Preview plugin allows users to preview Office-format files, such as Word, Excel, and PowerPoint, directly within the NocoBase application.",paraId:1},{value:`
It leverages Microsoft's public online service to embed the file content into a preview interface, enabling users to view documents directly in the browser without downloading or using Office applications.`,paraId:1},{value:"By default, this plugin is ",paraId:2,tocIndex:1},{value:"disabled",paraId:2,tocIndex:1},{value:". It can be enabled in the plugin manager and requires no additional configuration.",paraId:2,tocIndex:1},{value:"After successfully uploading an Office file (Word / Excel / PowerPoint) to a file field in a data table, you can click the file icon or link to preview its content in a popup or embedded interface.",paraId:3,tocIndex:1},{value:"This plugin uses Microsoft\u2019s public online service (Office Web Viewer) to render previews. The basic workflow is as follows:",paraId:4,tocIndex:2},{value:"The frontend generates a publicly accessible URL for the uploaded file (including signed URLs such as those from the S3-Pro plugin);",paraId:5,tocIndex:2},{value:"The plugin embeds the preview in an iframe using the following format:",paraId:6,tocIndex:2},{value:`https://view.officeapps.live.com/op/embed.aspx?src=<public file URL>
`,paraId:7,tocIndex:2},{value:"Microsoft\u2019s service fetches the file from the URL, renders it, and returns a previewable page.",paraId:8,tocIndex:2},{value:"Since this plugin depends on Microsoft\u2019s online service, ensure that your network connection is stable and that Microsoft services are accessible.",paraId:9,tocIndex:3},{value:"Microsoft will access the file URL you provide, and the file content may be temporarily cached on their servers for rendering. This introduces potential privacy concerns \u2014 if you're concerned about this, it's recommended not to use this plugin for sensitive documents",paraId:9,tocIndex:3},{value:"1",paraId:10,tocIndex:3},{value:".",paraId:9,tocIndex:3},{value:"Files must be accessible via a public URL to be previewed. Normally, files uploaded to NocoBase will have public access links automatically generated (including signed URLs from the S3-Pro plugin). However, if access permissions are restricted or the file is stored in an internal network, it cannot be previewed",paraId:9,tocIndex:3},{value:"2",paraId:11,tocIndex:3},{value:".",paraId:9,tocIndex:3},{value:"This service does not support authentication or private storage. For example, files that require login or are only accessible on an internal network will not work with the preview functionality.",paraId:9,tocIndex:3},{value:"After Microsoft retrieves the file, it may remain cached for a short period. Even if the source file is deleted, the preview might still be accessible for some time.",paraId:9,tocIndex:3},{value:"Recommended file size limits: Word and PowerPoint files should be no larger than 10\u202FMB, and Excel files no larger than 5\u202FMB for reliable preview performance",paraId:9,tocIndex:3},{value:"3",paraId:12,tocIndex:3},{value:".",paraId:9,tocIndex:3},{value:"There is no official public statement regarding commercial usage of this service. Please assess the risks before using it in commercial applications",paraId:9,tocIndex:3},{value:"4",paraId:13,tocIndex:3},{value:".",paraId:9,tocIndex:3},{value:"This plugin only supports previews for the following Office file formats, based on the file's MIME type:",paraId:14,tocIndex:4},{value:"Word Document:",paraId:15,tocIndex:4},{value:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",paraId:15,tocIndex:4},{value:"Excel Spreadsheet:",paraId:15,tocIndex:4},{value:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",paraId:15,tocIndex:4},{value:"PowerPoint Presentation:",paraId:15,tocIndex:4},{value:"application/vnd.openxmlformats-officedocument.presentationml.presentation",paraId:15,tocIndex:4},{value:"Other file formats will not be previewed by this plugin.",paraId:16,tocIndex:4},{value:"What is the status of view.officeapps.live.com?",paraId:17,tocIndex:5},{value:" ",paraId:17,tocIndex:5},{value:"\u21A9",paraId:18,tocIndex:5},{value:"Microsoft Q&A - Access denied or non-public files cannot be previewed",paraId:19,tocIndex:5},{value:" ",paraId:19,tocIndex:5},{value:"\u21A9",paraId:20,tocIndex:5},{value:"Microsoft Q&A - File size limits for Office Web Viewer",paraId:21,tocIndex:5},{value:" ",paraId:21,tocIndex:5},{value:"\u21A9",paraId:22,tocIndex:5},{value:"Microsoft Q&A - Commercial use of Office Web Viewer",paraId:23,tocIndex:5},{value:" ",paraId:23,tocIndex:5},{value:"\u21A9",paraId:24,tocIndex:5}]},185075:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},840446:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},372885:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},288076:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This is a tool similar to ER diagrams, which currently only supports the main database.",paraId:0,tocIndex:1},{value:"This preset plugin needs to be activated before it can be used.",paraId:1,tocIndex:2}]},164161:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'If you are first exposed to NocoBase, it is recommended that you start with "',paraId:0,tocIndex:0},{value:"Data Modeling - Overview",paraId:1,tocIndex:0},{value:'". In this chapter, you can understand the features of NocoBase data modeling;',paraId:0,tocIndex:0},{value:'Going further, you can add "',paraId:0,tocIndex:0},{value:"Pages",paraId:2,tocIndex:0},{value:'" and "',paraId:0,tocIndex:0},{value:"Blocks",paraId:3,tocIndex:0},{value:'" in the interface. You can choose suitable blocks to display the data in the data source;',paraId:0,tocIndex:0},{value:'Next, "',paraId:0,tocIndex:0},{value:"Configure Fields",paraId:4,tocIndex:0},{value:'" and "',paraId:0,tocIndex:0},{value:"Configure Actions",paraId:5,tocIndex:0},{value:'" for the data blocks. By this step, simple data processing procedures can be done;',paraId:0,tocIndex:0},{value:'If you want to orchestrate actions, you can check the "',paraId:0,tocIndex:0},{value:"Workflow",paraId:6,tocIndex:0},{value:'" chapter. The workflow provides various triggers and action nodes, which can satisfy your unlimited imagination for orchestrating operations;',paraId:0,tocIndex:0},{value:'Permissions need to be configured for actions. You can check "',paraId:0,tocIndex:0},{value:"Users and Permissions",paraId:7,tocIndex:0},{value:'". In addition to understanding how to configure action permissions, this chapter can also further understand the concept of "',paraId:0,tocIndex:0},{value:"Departments",paraId:8,tocIndex:0},{value:'", which includes the management of users, roles, and departments.',paraId:0,tocIndex:0},{value:'If you already have a ready-made IdP (Identity Provider), refer to the "',paraId:0,tocIndex:0},{value:"User Authentication",paraId:9,tocIndex:0},{value:'" chapter, which can help you understand how to access third-party user service providers;',paraId:0,tocIndex:0},{value:'You can enable multiple languages in "',paraId:0,tocIndex:0},{value:"System Settings",paraId:10,tocIndex:0},{value:'". If the translation of the language you use is incomplete, you can use "',paraId:0,tocIndex:0},{value:"Localization Management",paraId:11,tocIndex:0},{value:'" to translate, and you are also welcome to contribute translations to NocoBase;',paraId:0,tocIndex:0},{value:'"',paraId:0,tocIndex:0},{value:"Logs and Monitoring",paraId:12,tocIndex:0},{value:'" is an important tool for managing and maintaining NocoBase. It can help developers discover and solve problems in time, optimize system performance, ensure system security and stability, and improve system reliability and availability;',paraId:0,tocIndex:0},{value:'You can view all added plugins in the "',paraId:0,tocIndex:0},{value:"Plugin Manager",paraId:13,tocIndex:0},{value:'". Plugins need to be activated before they can be used. If the existing plugins cannot meet your needs, you can also "',paraId:0,tocIndex:0},{value:"Develop Plugins",paraId:14,tocIndex:0},{value:'" by yourself and then add them through the plugin manager.',paraId:0,tocIndex:0}]},55945:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase allows administrators to set up whitelists or blacklists for user access IPs to restrict unauthorized external network connections or block known malicious IP addresses, thereby reducing security risks. It also supports administrators in querying access denial logs to identify risky IPs.",paraId:0,tocIndex:1},{value:"Blacklist",paraId:1,tocIndex:3},{value:": When a user's access IP matches an IP in the list, the system will ",paraId:1,tocIndex:3},{value:"deny",paraId:1,tocIndex:3},{value:" access; unmatched IPs are ",paraId:1,tocIndex:3},{value:"allowed",paraId:1,tocIndex:3},{value:" by default.",paraId:1,tocIndex:3},{value:"Whitelist",paraId:1,tocIndex:3},{value:": When a user's access IP matches an IP in the list, the system will ",paraId:1,tocIndex:3},{value:"allow",paraId:1,tocIndex:3},{value:" access; unmatched IPs are ",paraId:1,tocIndex:3},{value:"denied",paraId:1,tocIndex:3},{value:" by default.",paraId:1,tocIndex:3},{value:"Used to define IP addresses that are allowed or denied access to the system. Its specific function depends on the selected IP filtering mode. Supports input of IP addresses or CIDR network segments, with multiple addresses separated by commas or line breaks.",paraId:2,tocIndex:4},{value:"After a user is denied access, the access IP is written to the system logs, and the corresponding log file can be downloaded for analysis.",paraId:3,tocIndex:5},{value:"Log Example:",paraId:4,tocIndex:5},{value:"Add known malicious IP addresses to prevent potential network attacks.",paraId:5,tocIndex:7},{value:"Regularly check and update the blacklist, removing invalid or no longer needed IP addresses.",paraId:5,tocIndex:7},{value:"Add trusted internal network IP addresses (such as office network segments) to ensure secure access to core systems.",paraId:6,tocIndex:8},{value:"Avoid including dynamically assigned IP addresses in the whitelist to prevent access interruptions.",paraId:6,tocIndex:8},{value:"Use CIDR network segments to simplify configuration, such as using 192.168.0.0/24 instead of adding individual IP addresses.",paraId:7,tocIndex:9},{value:"Regularly back up IP list configurations to quickly recover from misoperations or system failures.",paraId:7,tocIndex:9},{value:"Regularly monitor access logs to identify abnormal IPs and adjust the blacklist or whitelist promptly.",paraId:7,tocIndex:9}]},427332:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Localization Management plugin is designed to assist in managing and implementing the localization process for NocoBase. It translates NocoBase's menus, data tables, fields, and all plugins to adapt to the language and culture of a specific region.",paraId:0,tocIndex:1},{value:"This is a built-in plugin, so no additional installation is required.",paraId:1,tocIndex:2},{value:"After synchronization, it will list all the translatable entries for the current language.",paraId:2,tocIndex:6},{value:'After completing the translation, you need to click the "Publish" button to make the changes take effect.',paraId:3,tocIndex:7},{value:'Enable other languages in "System Settings," such as Simplified Chinese.',paraId:4,tocIndex:8},{value:"Switch to that language.",paraId:5,tocIndex:8},{value:"Synchronize the entries.",paraId:6,tocIndex:8},{value:"Translate and publish.",paraId:7,tocIndex:8}]},260852:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Logs are an important tool for us to locate system issues. NocoBase's server logs mainly include interface request logs and system operation logs, supporting configuration of log level, rolling strategy, size, printing format, and more. This document mainly introduces the related content of NocoBase server logs, as well as how to use the logging plugin to package and download server logs.",paraId:0,tocIndex:1},{value:"Log-related parameters such as log level, output method, and printing format can be configured through ",paraId:1,tocIndex:2},{value:"environment variables",paraId:2,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"NocoBase supports configuring four different log formats.",paraId:3,tocIndex:3},{value:"console",paraId:4},{value:"The default format in development environment, messages are highlighted in color.",paraId:5,tocIndex:4},{value:`2023-12-30 22:40:06 [info ] response                                     method=GET path=/api/uiSchemas:getJsonSchema/nocobase-admin-menu res={"status":200} action={"actionName":"getJsonSchema","resourceName":"uiSchemas","params":{"filterByTk":"nocobase-admin-menu","resourceName":"uiSchemas","resourceIndex":"nocobase-admin-menu","actionName":"getJsonSchema"}} userId=1 status=200 cost=5 app=main reqId=ccf4e3bd-beb0-4350-af6e-b1fc1d9b6c3f
2023-12-30 22:43:12 [debug] Database dialect: mysql                      module=application method=install app=main reqId=31ffa8b5-f377-456b-a295-0c8a28938228
2023-12-30 22:43:12 [warn ] app is installed                             module=application method=install app=main reqId=31ffa8b5-f377-456b-a295-0c8a28938228
`,paraId:6,tocIndex:4},{value:"json",paraId:4},{value:"The default format in production environment.",paraId:7,tocIndex:5},{value:`{
  "level": "info",
  "timestamp": "2023-12-26 22:04:56",
  "reqId": "7612ef42-58e8-4c35-bac2-2e6c9d8ec96e",
  "message": "response",
  "method": "POST",
  "path": "/api/authenticators:publicList",
  "res": { "status": 200 },
  "action": {
    "actionName": "publicList",
    "resourceName": "authenticators",
    "params": { "resourceName": "authenticators", "actionName": "publicList" }
  },
  "status": 200,
  "cost": 16
}
`,paraId:8,tocIndex:5},{value:"logfmt",paraId:4},{value:"Check out ",paraId:9,tocIndex:6},{value:"https://brandur.org/logfmt",paraId:9,tocIndex:6},{value:" for more information.",paraId:9,tocIndex:6},{value:`level=info timestamp=2023-12-21 14:18:02 reqId=8b59a40d-68ee-4c97-8001-71a47a92805a
message=response method=POST path=/api/authenticators:publicList res={"status":200}
action={"actionName":"publicList","resourceName":"authenticators","params":{"resourceName":"authenticators","actionName":"publicList"}}
userId=undefined status=200 cost=14
`,paraId:10,tocIndex:6},{value:"delimiter",paraId:4},{value:"Separated by delimiter ",paraId:11,tocIndex:7},{value:"|",paraId:11,tocIndex:7},{value:".",paraId:11,tocIndex:7},{value:`info|2023-12-26 22:07:09|13cd16f0-1568-418d-ac37-6771ee650e14|response|POST|/api/authenticators:publicList|{"status":200}|{"actionName":"publicList","resourceName":"authenticators","params":{"resourceName":"authenticators","actionName":"publicList"}}||200|25
`,paraId:12,tocIndex:7},{value:"The main directory structure of NocoBase log files is:",paraId:13,tocIndex:8},{value:"storage/logs",paraId:14,tocIndex:8},{value:` - Log output directory
`,paraId:14,tocIndex:8},{value:"main",paraId:15,tocIndex:8},{value:` - Main application name
`,paraId:15,tocIndex:8},{value:"request_YYYY-MM-DD.log",paraId:16,tocIndex:8},{value:" - Request log",paraId:16,tocIndex:8},{value:"system_YYYY-MM-DD.log",paraId:16,tocIndex:8},{value:" - System log",paraId:16,tocIndex:8},{value:"system_error_YYYY-MM-DD.log",paraId:16,tocIndex:8},{value:" - System error log",paraId:16,tocIndex:8},{value:"sql_YYYY-MM-DD.log",paraId:16,tocIndex:8},{value:" - SQL execution log",paraId:16,tocIndex:8},{value:"...",paraId:16,tocIndex:8},{value:"sub-app",paraId:15,tocIndex:8},{value:` - Sub-application name
`,paraId:15,tocIndex:8},{value:"request_YYYY-MM-DD.log",paraId:17,tocIndex:8},{value:"...",paraId:17,tocIndex:8},{value:"request_YYYY-MM-DD.log",paraId:18,tocIndex:10},{value:", interface request and response logs.",paraId:18,tocIndex:10},{value:"Field",paraId:19,tocIndex:10},{value:"Description",paraId:19,tocIndex:10},{value:"level",paraId:19,tocIndex:10},{value:"Log level",paraId:19,tocIndex:10},{value:"timestamp",paraId:19,tocIndex:10},{value:"Log print time ",paraId:19,tocIndex:10},{value:"YYYY-MM-DD hh:mm:ss",paraId:19,tocIndex:10},{value:"message",paraId:19,tocIndex:10},{value:"request",paraId:19,tocIndex:10},{value:" or ",paraId:19,tocIndex:10},{value:"response",paraId:19,tocIndex:10},{value:"userId",paraId:19,tocIndex:10},{value:"Only in ",paraId:19,tocIndex:10},{value:"response",paraId:19,tocIndex:10},{value:"method",paraId:19,tocIndex:10},{value:"Request method",paraId:19,tocIndex:10},{value:"path",paraId:19,tocIndex:10},{value:"Request path",paraId:19,tocIndex:10},{value:"req",paraId:19,tocIndex:10},{value:" / ",paraId:19,tocIndex:10},{value:"res",paraId:19,tocIndex:10},{value:"Request/Response content",paraId:19,tocIndex:10},{value:"action",paraId:19,tocIndex:10},{value:"Requested resources and parameters",paraId:19,tocIndex:10},{value:"status",paraId:19,tocIndex:10},{value:"Response status code",paraId:19,tocIndex:10},{value:"cost",paraId:19,tocIndex:10},{value:"Request time",paraId:19,tocIndex:10},{value:"app",paraId:19,tocIndex:10},{value:"Current application name",paraId:19,tocIndex:10},{value:"reqId",paraId:19,tocIndex:10},{value:"Request ID",paraId:19,tocIndex:10},{value:"reqId",paraId:20},{value:" will be carried to the front end via the ",paraId:20},{value:"X-Request-Id",paraId:20},{value:" response header.",paraId:20},{value:"system_YYYY-MM-DD.log",paraId:21,tocIndex:11},{value:", application, middleware, plugins, and other system operation logs, ",paraId:21,tocIndex:11},{value:"error",paraId:21,tocIndex:11},{value:" level logs will be printed separately to ",paraId:21,tocIndex:11},{value:"system_error_YYYY-MM-DD.log",paraId:21,tocIndex:11},{value:".",paraId:21,tocIndex:11},{value:"Field",paraId:22,tocIndex:11},{value:"Description",paraId:22,tocIndex:11},{value:"level",paraId:22,tocIndex:11},{value:"Log level",paraId:22,tocIndex:11},{value:"timestamp",paraId:22,tocIndex:11},{value:"Log print time ",paraId:22,tocIndex:11},{value:"YYYY-MM-DD hh:mm:ss",paraId:22,tocIndex:11},{value:"message",paraId:22,tocIndex:11},{value:"Log message",paraId:22,tocIndex:11},{value:"module",paraId:22,tocIndex:11},{value:"Module",paraId:22,tocIndex:11},{value:"submodule",paraId:22,tocIndex:11},{value:"Submodule",paraId:22,tocIndex:11},{value:"method",paraId:22,tocIndex:11},{value:"Called method",paraId:22,tocIndex:11},{value:"meta",paraId:22,tocIndex:11},{value:"Other related information, JSON format",paraId:22,tocIndex:11},{value:"app",paraId:22,tocIndex:11},{value:"Current application name",paraId:22,tocIndex:11},{value:"reqId",paraId:22,tocIndex:11},{value:"Request ID",paraId:22,tocIndex:11},{value:"sql_YYYY-MM-DD.log",paraId:23,tocIndex:12},{value:", database SQL execution logs. ",paraId:23,tocIndex:12},{value:"INSERT INTO",paraId:23,tocIndex:12},{value:" statements are limited to the first 2000 characters.",paraId:23,tocIndex:12},{value:"Field",paraId:24,tocIndex:12},{value:"Description",paraId:24,tocIndex:12},{value:"level",paraId:24,tocIndex:12},{value:"Log level",paraId:24,tocIndex:12},{value:"timestamp",paraId:24,tocIndex:12},{value:"Log print time ",paraId:24,tocIndex:12},{value:"YYYY-MM-DD hh:mm:ss",paraId:24,tocIndex:12},{value:"sql",paraId:24,tocIndex:12},{value:"SQL statement",paraId:24,tocIndex:12},{value:"app",paraId:24,tocIndex:12},{value:"Current application name",paraId:24,tocIndex:12},{value:"reqId",paraId:24,tocIndex:12},{value:"Request ID",paraId:24,tocIndex:12},{value:"Navigate to the log management page.",paraId:25},{value:"Select the log files you wish to download.",paraId:25},{value:"Click the download button.",paraId:25},{value:"Plugin Development - Server - Logging",paraId:26,tocIndex:14},{value:"API Reference - @nocobase/logger",paraId:27,tocIndex:14}]},97148:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Migration Manager helps you transfer application configurations from one environment to another. Its main focus is on migrating \u201Capplication configurations.\u201D If you need a complete data migration, we recommend using the \u201C",paraId:0,tocIndex:1},{value:"Backup Manager",paraId:1,tocIndex:1},{value:"\u201D to back up and restore your entire application.",paraId:0,tocIndex:1},{value:"The Migration Manager depends on the ",paraId:2,tocIndex:2},{value:"Backup Manager",paraId:3,tocIndex:2},{value:". Make sure that the Backup Manager plugin is already installed and activated. For more information, refer to ",paraId:2,tocIndex:2},{value:"Installing and Upgrading Commercial Plugins",paraId:4,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"The Migration Manager transfers tables and data from the primary database based on specified migration rules, moving them from one application instance to another. Note that it does not migrate data from external databases or sub-applications.",paraId:5,tocIndex:3},{value:"Migration Manager can migrate all tables in the primary database and supports five built-in rules:",paraId:6,tocIndex:5},{value:"Schema-only",paraId:7,tocIndex:5},{value:`
Only migrates the structure (schema) of tables\u2014no data is inserted or updated.`,paraId:7,tocIndex:5},{value:"Overwrite (clear and re-insert)",paraId:8,tocIndex:5},{value:`
Deletes all existing records from the target database table, then inserts the new data.`,paraId:8,tocIndex:5},{value:"Upsert (Insert or update)",paraId:9,tocIndex:5},{value:`
Checks whether each record exists (by primary key). If it does, it updates that record; if not, it inserts it.`,paraId:9,tocIndex:5},{value:"Insert-ignore",paraId:10,tocIndex:5},{value:`
Inserts new records, but if a record already exists (by primary key), the insertion is ignored (no updates occur).`,paraId:10,tocIndex:5},{value:"Skip",paraId:11,tocIndex:5},{value:`
Skips processing for the table entirely (no structure changes, no data migration).`,paraId:11,tocIndex:5},{value:"Additional notes:",paraId:12,tocIndex:5},{value:"\u201COverwrite,\u201D \u201CUpsert,\u201D and \u201CInsert-ignore\u201D all synchronize table structure changes as well.",paraId:13,tocIndex:5},{value:"If a table uses an auto-increment ID as its primary key, or if it has no primary key, neither \u201CUpsert\u201D nor \u201CInsert-ignore\u201D can be applied.",paraId:13,tocIndex:5},{value:"\u201CUpsert\u201D and \u201CInsert-ignore\u201D rely on the primary key to determine whether the record already exists.",paraId:13,tocIndex:5},{value:"You can configure the migration rules in the interface:",paraId:14,tocIndex:7},{value:"Enable independent rules:",paraId:15,tocIndex:7},{value:"Select which tables should be managed by these independent rules:",paraId:16,tocIndex:7},{value:"During execution, the system checks for environment variables (learn more about ",paraId:17,tocIndex:10},{value:"Environment Variables",paraId:18,tocIndex:10},{value:"):",paraId:17,tocIndex:10},{value:"If any required environment variables are missing, a prompt appears so you can add them before continuing:",paraId:19,tocIndex:10},{value:"Before any migration runs, the current application is automatically backed up. If the migration fails or the results are not as expected, you can roll back using the ",paraId:20,tocIndex:12},{value:"Backup Manager",paraId:21,tocIndex:12},{value:".",paraId:20,tocIndex:12}]},79416:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Provides the capability to configure mobile pages.",paraId:0,tocIndex:1},{value:"It's a pre-installed plugin that needs to be activated before use.",paraId:1,tocIndex:2}]},720699:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin facilitates the configuration of mobile pages, leveraging a core framework built on Ant Design Mobile. It offers a variety of extension points and supports the integration of specific desktop blocks.",paraId:0,tocIndex:1},{value:"The older ",paraId:1},{value:"plugin-mobile-client",paraId:1},{value:" has been deprecated. Starting from version v1.3, it is recommended to transition to ",paraId:1},{value:"plugin-mobile",paraId:1},{value:". These two plugins are incompatible, so the new version will necessitate a complete reconfiguration of mobile settings.",paraId:1},{value:"This plugin comes pre-installed but requires activation to function.",paraId:2,tocIndex:2},{value:"NocoBase provides a specialized UI configuration interface tailored for mobile use.",paraId:3,tocIndex:4},{value:"Supports the addition of two types: links and pages.",paraId:4,tocIndex:5},{value:"The following desktop blocks can currently be added:",paraId:5,tocIndex:6},{value:"On mobile devices, pop-up actions open as sub-pages with swipe-back functionality.",paraId:6,tocIndex:9},{value:`
  `,paraId:7},{value:"Filtering utilizes a ",paraId:8,tocIndex:10},{value:"Popup",paraId:8,tocIndex:10},{value:" interaction method.",paraId:8,tocIndex:10},{value:"You can configure menu access permissions just like on the desktop side, as shown below (the mobile plugin must be enabled first):",paraId:9,tocIndex:11},{value:"Currently supported extension points include:",paraId:10,tocIndex:12}]},404957:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Dynamically manage multiple applications without the need for separate deployments, with each application being an independent instance.",paraId:0,tocIndex:1},{value:'The multi-app management plugin does not provide the capability for user sharing. It can be integrated through the "',paraId:1},{value:"Authentication plugin",paraId:2},{value:'" or handled using the "',paraId:1},{value:"App Switching plugin",paraId:3},{value:'".',paraId:1},{value:"This is a preset plugin that needs to be activated before use.",paraId:4,tocIndex:2},{value:"Two starting methods are provided:",paraId:5,tocIndex:5},{value:"Start on first visit: The sub-application starts only when a user visits the sub-application's URL for the first time;",paraId:6,tocIndex:5},{value:"Start with the main application: When the main application starts, the sub-applications start as well, which increases the startup time of the main application.",paraId:6,tocIndex:5},{value:"Sub-applications can be accessed via subpaths ",paraId:7,tocIndex:6},{value:"/apps/:appName/admin/",paraId:7,tocIndex:6},{value:", for example:",paraId:7,tocIndex:6},{value:`http://localhost:13000/apps/a_7zkxoarusnx/admin/z45sjaukasd
`,paraId:8,tocIndex:6},{value:"Additionally, sub-applications can be configured with independent subdomains, which require domain resolution to the current IP. If nginx is used, the domain also needs to be added in the nginx configuration.",paraId:9,tocIndex:6},{value:`The list of sub-applications displayed in the current right drop-down menu is only a set of quick links. Users are not shared; sub-applications require login and can only be used by the main application's root account. Full application switching capabilities will be provided in the commercial plugin "`,paraId:10},{value:"App Switching",paraId:10},{value:'".',paraId:10}]},326997:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.7.0+",paraId:0},{value:"The ",paraId:1,tocIndex:1},{value:"Multi-keyword Filter",paraId:1,tocIndex:1},{value:" plugin adds powerful text filtering capabilities to the NocoBase platform, allowing you to filter using multiple keywords, greatly improving the flexibility and efficiency of data queries.",paraId:1,tocIndex:1},{value:"This plugin primarily provides two filter operators:",paraId:2,tocIndex:1},{value:"Equals any",paraId:3,tocIndex:1},{value:": Filters records that contain any of the specified keywords in the list",paraId:3,tocIndex:1},{value:"Not equals any",paraId:3,tocIndex:1},{value:": Filters records that do not contain any of the specified keywords in the list",paraId:3,tocIndex:1},{value:"These operators can be used with the following field types:",paraId:4,tocIndex:1},{value:"Single line text",paraId:5,tocIndex:1},{value:"Phone",paraId:5,tocIndex:1},{value:"Email",paraId:5,tocIndex:1},{value:"Integer",paraId:5,tocIndex:1},{value:"Number",paraId:5,tocIndex:1},{value:"Percent",paraId:5,tocIndex:1},{value:"UUID",paraId:5,tocIndex:1},{value:"Nano ID",paraId:5,tocIndex:1},{value:"Sequence",paraId:5,tocIndex:1},{value:"Need to filter based on multiple product codes, tags, or categories",paraId:6,tocIndex:2},{value:"Import large numbers of keywords from Excel files for batch filtering",paraId:6,tocIndex:2},{value:"Need to quickly find data records that meet multiple conditions",paraId:6,tocIndex:2},{value:`Fields in filter form blocks
`,paraId:7,tocIndex:3},{value:`Fields in filter buttons
`,paraId:7,tocIndex:3},{value:`Fields in data scope filtering
`,paraId:7,tocIndex:3},{value:`Fields in linkage rules
`,paraId:7,tocIndex:3},{value:'Using filter forms and single line text as an example, set the operator for the single line text field to "equals any" or "not equals any"',paraId:8,tocIndex:5},{value:"There are two ways to input keywords:",paraId:9,tocIndex:6},{value:"Directly enter keywords in the input box",paraId:10,tocIndex:7},{value:"Multiple keywords can be separated by line breaks",paraId:10,tocIndex:7},{value:"After entering, click the filter button to filter the data",paraId:10,tocIndex:7},{value:"Prepare an Excel file (supports .xlsx or .xls format) containing the keywords to import",paraId:11,tocIndex:8},{value:'Click the "Import Excel" button on the right side of the input box',paraId:11,tocIndex:8},{value:"Select and upload the Excel file",paraId:11,tocIndex:8},{value:"If Excel has only one column of data",paraId:12,tocIndex:8},{value:":",paraId:12,tocIndex:8},{value:"The system will automatically import all non-empty values from that column as keywords",paraId:13,tocIndex:8},{value:"If Excel contains multiple columns of data",paraId:14,tocIndex:8},{value:":",paraId:14,tocIndex:8},{value:"The system will display a column selection dialog",paraId:15,tocIndex:8},{value:"You can select one or multiple columns for import",paraId:15,tocIndex:8},{value:"Single column selection: All non-empty values in that column will be imported as keywords",paraId:15,tocIndex:8},{value:"Multiple column selection: Non-empty values from multiple columns will be merged as keywords, duplicates will be automatically removed",paraId:15,tocIndex:8},{value:'Click the "Confirm" button to complete the import',paraId:15,tocIndex:8},{value:"Equals any",paraId:16,tocIndex:9},{value:": Records where the field value matches any value in the keyword list will be displayed",paraId:16,tocIndex:9},{value:"Not equals any",paraId:16,tocIndex:9},{value:": Records where the field value does not match any value in the keyword list will be displayed",paraId:16,tocIndex:9},{value:'Click the "\xD7" button on a keyword tag to delete individual keywords, or click the "\xD7" on the right side of the input box to delete all keywords.',paraId:17,tocIndex:11},{value:"The plugin supports importing large numbers of keywords, but it's recommended to keep them within a reasonable range (such as hundreds) to avoid affecting query performance.",paraId:18,tocIndex:12},{value:"Excel files should contain at least one column of data",paraId:19,tocIndex:13},{value:"Empty values will be automatically filtered out",paraId:19,tocIndex:13},{value:"Duplicate values will be automatically removed",paraId:19,tocIndex:13},{value:"This plugin provides exact matching functionality.",paraId:20,tocIndex:14},{value:"Single line text",paraId:21,tocIndex:15},{value:"Phone",paraId:21,tocIndex:15},{value:"Email",paraId:21,tocIndex:15},{value:"Integer",paraId:21,tocIndex:15},{value:"Number",paraId:21,tocIndex:15},{value:"Percent",paraId:21,tocIndex:15},{value:"UUID",paraId:21,tocIndex:15},{value:"Nano ID",paraId:21,tocIndex:15},{value:"Formula",paraId:21,tocIndex:15},{value:"Sequence",paraId:21,tocIndex:15},{value:"Save commonly used keyword lists in Excel files for quick import when needed",paraId:22,tocIndex:16},{value:"When importing multiple columns, you can merge keywords from different columns",paraId:22,tocIndex:16},{value:'Use the "not equals any" operator to quickly exclude unwanted data',paraId:22,tocIndex:16},{value:"NocoBase version: 1.7.0 or higher",paraId:23,tocIndex:17},{value:"By using the multi-keyword filter plugin, you can manage and query data more efficiently, especially when dealing with large amounts of data and frequent multi-condition filtering scenarios. This plugin will significantly improve your work efficiency.",paraId:24,tocIndex:17}]},39346:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Send notifications through the email channel, currently supporting only the SMTP transmission method.",paraId:0,tocIndex:1},{value:"This is a built-in plugin that must be activated before use.",paraId:1,tocIndex:2},{value:"Currently, only the SMTP transmission method is supported.",paraId:2,tocIndex:4}]},728047:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Enables users to receive real-time message notifications directly within the NocoBase application.",paraId:0,tocIndex:1},{value:"This plugin is pre-installed, so no additional setup is required.",paraId:1,tocIndex:2},{value:`Go to the notification management section, click adding button and select In-app message.
`,paraId:2,tocIndex:3},{value:`Fill in the channel name and description, then click submit.
`,paraId:3,tocIndex:3},{value:"The new channel will now appear in the list.",paraId:4,tocIndex:3},{value:'To clarify the use of In-app message, here\u2019s an example for "Marketing Lead Follow-Up".',paraId:5,tocIndex:4},{value:"Imagine your team is running a major marketing campaign aimed at tracking responses and needs from potential clients. Using in-app messages, you can:",paraId:6,tocIndex:4},{value:"Set Up a Notification Channel:",paraId:7,tocIndex:4},{value:' Begin by creating a channel called "Marketing Clue" in notification management, making it easy for team members to identify its purpose.',paraId:7,tocIndex:4},{value:"Configure a Workflow:",paraId:8,tocIndex:4},{value:' Create a workflow that automatically triggers notifications whenever a new lead is generated. Add a notification node to this workflow, select the "Marketing Clue" channel, and customize the message content according to campaign needs. For example:',paraId:8,tocIndex:4},{value:"Receive Notifications in Real-Time:",paraId:9,tocIndex:4},{value:" Once the workflow triggers, all relevant team members will receive notifications instantly, allowing for quick responses.",paraId:9,tocIndex:4},{value:"Message Management and Tracking:",paraId:10,tocIndex:4},{value:' In-app messages are grouped by channel name, and you can filter messages by read or unread status to prioritize important information. Clicking "View" redirects you to a configured link, allowing you to manage tasks seamlessly.',paraId:10,tocIndex:4}]},295025:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"BaseNotificationChannel",paraId:0},{value:"This abstract class represents a base for different types of notification channels, defining essential interfaces for channel implementation. To add a new notification channel, you must extend this class and implement its methods.",paraId:1,tocIndex:2},{value:`export abstract class BaseNotificationChannel<Message = any> {
  constructor(protected app: Application) {}
  abstract send(params: {
    channel: ChannelOptions;
    message: Message;
  }): Promise<{ message: Message; status: 'success' | 'fail'; reason?: string }>;
}
`,paraId:2,tocIndex:2},{value:"PluginNotificationManagerServer",paraId:0},{value:"This server-side plugin serves as a notification management tool, providing methods for registering notification channel types and sending notifications.",paraId:3,tocIndex:3},{value:"registerChannelType()",paraId:0},{value:"This method registers a new channel type on the server side. Example usage is provided below.",paraId:4,tocIndex:4},{value:`import PluginNotificationManagerServer from '@nocobase/plugin-notification-manager';
import { Plugin } from '@nocobase/server';
import { ExampleServer } from './example-server';
export class PluginNotificationExampleServer extends Plugin {
  async load() {
    const notificationServer = this.pm.get(PluginNotificationManagerServer) as PluginNotificationManagerServer;
    notificationServer.registerChannelType({ type: 'example-sms', Channel: ExampleServer });
  }
}

export default PluginNotificationExampleServer;
`,paraId:5,tocIndex:4},{value:"registerChannelType({ type, Channel }: {type: string, Channel: BaseNotificationChannel })",paraId:6,tocIndex:5},{value:"send()",paraId:0},{value:"The ",paraId:7,tocIndex:6},{value:"send",paraId:7,tocIndex:6},{value:" method is used to dispatch notifications via a specified channel.",paraId:7,tocIndex:6},{value:`send('in-app-message', 
  message: [
    receivers: [1, 2, 3],
    receiverType: 'userId',
    content: 'In-app message test',
    title: 'In-app message test title'
  ],
  triggerFrom: 'workflow')

send('email', 
  message: [
    receivers: ['a@163.com', 'b@163.com'],
    receiverType: 'email',
    content: 'Email test',
    title: 'Email test title'
  ],
  triggerFrom: 'workflow')
`,paraId:8,tocIndex:6},{value:"send(sendConfig: {channelName: String, message: Object, receivers: ReceiversType, triggerFrom: String })",paraId:9,tocIndex:7},{value:"The ",paraId:10,tocIndex:7},{value:"receivers",paraId:10,tocIndex:7},{value:" field currently supports two formats: NocoBase user IDs",paraId:10,tocIndex:7},{value:"userId",paraId:10,tocIndex:7},{value:" or custom channel configurations",paraId:10,tocIndex:7},{value:"channel-self-defined",paraId:10,tocIndex:7},{value:".",paraId:10,tocIndex:7},{value:`type ReceiversType = 
  | { value: number[]; type: 'userId' }
  | { value: any; type: 'channel-self-defined'; channelType: string };
`,paraId:11,tocIndex:7},{value:"sendConfig",paraId:12,tocIndex:8},{value:"Property",paraId:13,tocIndex:8},{value:"Type",paraId:13,tocIndex:8},{value:"Description",paraId:13,tocIndex:8},{value:"channelName",paraId:13,tocIndex:8},{value:"string",paraId:13,tocIndex:8},{value:"Channel identifier",paraId:13,tocIndex:8},{value:"message",paraId:13,tocIndex:8},{value:"object",paraId:13,tocIndex:8},{value:"Message object",paraId:13,tocIndex:8},{value:"receivers",paraId:13,tocIndex:8},{value:"ReceiversType",paraId:13,tocIndex:8},{value:"Recipients",paraId:13,tocIndex:8},{value:"triggerFrom",paraId:13,tocIndex:8},{value:"string",paraId:13,tocIndex:8},{value:"Source of trigger",paraId:13,tocIndex:8},{value:"PluginNotificationManagerClient",paraId:0},{value:"channelTypes",paraId:0},{value:"The library of registered channel types.",paraId:14,tocIndex:11},{value:"channelTypes: Registry<registerTypeOptions>",paraId:15,tocIndex:12},{value:"registerChannelType()",paraId:0},{value:"Registers a client-side channel type.",paraId:16,tocIndex:13},{value:"registerChannelType(params: registerTypeOptions)",paraId:17,tocIndex:14},{value:`type registerTypeOptions = {
  title: string; // Display title for the channel
  type: string;  // Channel identifier
  components: {
    ChannelConfigForm?: ComponentType // Channel configuration form component;
    MessageConfigForm?: ComponentType<{ variableOptions: any }> // Message configuration form component;
    ContentConfigForm?: ComponentType<{ variableOptions: any }> // Content configuration form component (for message content only, excluding recipient configuration);
  };
  meta?: { // Metadata for channel configuration
    createable?: boolean // Whether new channels can be added;
    editable?: boolean   // Whether channel configuration is editable;
    deletable?: boolean  // Whether channel configuration is deletable;
  };
};

type RegisterChannelType = (params: ChannelType) => void
`,paraId:18,tocIndex:15}]},221346:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports the expansion of notification channel types, such as SMS notifications and app push notifications,etc.",paraId:0,tocIndex:0},{value:"The client channel configuration and message configuration interface are registered through the ",paraId:1,tocIndex:2},{value:"registerChannelType",paraId:1,tocIndex:2},{value:" method provided by the notification management plugin client:",paraId:1,tocIndex:2},{value:`import PluginNotificationManagerClient from '@nocobase/plugin-notification-manager/client';

class PluginNotificationExampleClient extends Plugin {
  async afterAdd() {}

  async beforeLoad() {}

  async load() {
    const notification = this.pm.get(PluginNotificationManagerClient);
    notification.registerChannelType({
      title: 'Example SMS', // Channel type name
      type: 'example-sms',  // Channel type identifier
      components: {
        ChannelConfigForm,   // Channel configuration form
        MessageConfigForm,   // Message configuration form
      },
    });
  }
}

export default PluginNotificationExampleClient;
`,paraId:2,tocIndex:2},{value:"The core of server development involves extending the ",paraId:3,tocIndex:4},{value:"BaseNotificationChannel",paraId:3,tocIndex:4},{value:" abstract class and implementing the ",paraId:3,tocIndex:4},{value:"send",paraId:3,tocIndex:4},{value:" method, which contains the business logic for sending notifications through the extended plugin.",paraId:3,tocIndex:4},{value:`import { BaseNotificationChannel } from '@nocobase/plugin-notification-manager';

export class ExampleServer extends BaseNotificationChannel {
  async send(args): Promise<any> {
    console.log('ExampleServer send', args);
    return { status: 'success', message: args.message };
  }
}
`,paraId:4,tocIndex:4},{value:"The ",paraId:5,tocIndex:5},{value:"registerChannelType",paraId:5,tocIndex:5},{value:" method of the notification server core should be called to register the server implementation class in the core:",paraId:5,tocIndex:5},{value:`import PluginNotificationManagerServer from '@nocobase/plugin-notification-manager';
import { Plugin } from '@nocobase/server';
import { ExampleServer } from './example-server';
export class PluginNotificationExampleServer extends Plugin {
  async load() {
    const notificationServer = this.pm.get(PluginNotificationManagerServer) as PluginNotificationManagerServer;
    notificationServer.registerChannelType({ type: 'example-sms', Channel: ExampleServer });
  }
}

export default PluginNotificationExampleServer;
`,paraId:6,tocIndex:5},{value:`Here is a sample notification extension to describe in detail how to develop an extension.
Suppose we want to add SMS notification to NocoBase using a platform's SMS gateway.`,paraId:7,tocIndex:6},{value:"Run the command to create the plugin ",paraId:8,tocIndex:7},{value:"yarn pm add @nocobase/plugin-notification-example",paraId:8,tocIndex:7},{value:"For the client, develop two form components: ",paraId:9,tocIndex:8},{value:"ChannelConfigForm",paraId:9,tocIndex:8},{value:" (Channel Configuration Form) and ",paraId:9,tocIndex:8},{value:"MessageConfigForm",paraId:9,tocIndex:8},{value:" (Message Configuration Form).",paraId:9,tocIndex:8},{value:"To send SMS messages, an API key and secret are required. Create a new file named ",paraId:10,tocIndex:9},{value:"ChannelConfigForm.tsx",paraId:10,tocIndex:9},{value:" in the ",paraId:10,tocIndex:9},{value:"src/client",paraId:10,tocIndex:9},{value:" directory:",paraId:10,tocIndex:9},{value:`import React from 'react';
import { SchemaComponent } from '@nocobase/client';
import useLocalTranslation from './useLocalTranslation';

const ChannelConfigForm = () => {
  const t = useLocalTranslation();
  return (
    <SchemaComponent
      scope={{ t }}
      schema={{
        type: 'object',
        properties: {
          apiKey: {
            'x-decorator': 'FormItem',
            type: 'string',
            title: '{{t("Transport")}}',
            'x-component': 'Input',
          },
          secret: {
            'x-decorator': 'FormItem',
            type: 'string',
            title: '{{t("Transport")}}',
            'x-component': 'Input',
          },
        },
      }}
    />
  );
};

export default ChannelConfigForm;
`,paraId:11,tocIndex:9},{value:"The message configuration form mainly includes the configuration for recipients (",paraId:12,tocIndex:10},{value:"receivers",paraId:12,tocIndex:10},{value:") and message content (",paraId:12,tocIndex:10},{value:"content",paraId:12,tocIndex:10},{value:"). Create a new file named ",paraId:12,tocIndex:10},{value:"MessageConfigForm.tsx",paraId:12,tocIndex:10},{value:" in the ",paraId:12,tocIndex:10},{value:"src/client",paraId:12,tocIndex:10},{value:" directory:",paraId:12,tocIndex:10},{value:`import React from 'react';
import { SchemaComponent } from '@nocobase/client';
import useLocalTranslation from './useLocalTranslation';

const MessageConfigForm = ({ variableOptions }) => {
  const { t } = useLocalTranslation();
  return (
    <SchemaComponent
      scope={{ t }}
      schema={{
        type: 'object',
        properties: {
          to: {
            type: 'array',
            required: true,
            title: \`{{t("Receivers")}}\`,
            'x-decorator': 'FormItem',
            'x-component': 'ArrayItems',
            items: {
              type: 'void',
              'x-component': 'Space',
              properties: {
                sort: {
                  type: 'void',
                  'x-decorator': 'FormItem',
                  'x-component': 'ArrayItems.SortHandle',
                },
                input: {
                  type: 'string',
                  'x-decorator': 'FormItem',
                  'x-component': 'Variable.Input',
                  'x-component-props': {
                    scope: variableOptions,
                    useTypedConstant: ['string'],
                    placeholder: \`{{t("Phone number")}}\`,
                  },
                },
                remove: {
                  type: 'void',
                  'x-decorator': 'FormItem',
                  'x-component': 'ArrayItems.Remove',
                },
              },
            },
            properties: {
              add: {
                type: 'void',
                title: \`{{t("Add phone number")}}\`,
                'x-component': 'ArrayItems.Addition',
              },
            },
          },
          content: {
            type: 'string',
            required: true,
            title: \`{{t("Content")}}\`,
            'x-decorator': 'FormItem',
            'x-component': 'Variable.RawTextArea',
            'x-component-props': {
              scope: variableOptions,
              placeholder: 'Hi,',
              autoSize: {
                minRows: 10,
              },
            },
          },
        },
      }}
    />
  );
};

export default MessageConfigForm
`,paraId:13,tocIndex:10},{value:'After developing the form configuration components, register them in the notification management core. Assume the platform name is "Example." Edit ',paraId:14,tocIndex:11},{value:"src/client/index.tsx",paraId:14,tocIndex:11},{value:" as follows:",paraId:14,tocIndex:11},{value:`import { Plugin } from '@nocobase/client';
import PluginNotificationManagerClient from '@nocobase/plugin-notification-manager/client';
import { tval } from '@nocobase/utils/client';
import ChannelConfigForm from './ChannelConfigForm';
import MessageConfigForm from './MessageConfigForm';

class PluginNotificationExampleClient extends Plugin {
  async afterAdd() {}

  async beforeLoad() {}

  async load() {
    const notification = this.pm.get(PluginNotificationManagerClient);
    notification.registerChannelType({
      title: tval('Example SMS', { ns: '@nocobase/plugin-notification-example' }),
      type: 'example-sms',
      components: {
        ChannelConfigForm,
        MessageConfigForm,
      },
    });
  }
}

export default PluginNotificationExampleClient;
`,paraId:15,tocIndex:11},{value:"At this point, the development of the client is complete",paraId:16,tocIndex:11},{value:"The core of server development involves extending the ",paraId:17,tocIndex:12},{value:"BaseNotificationChannel",paraId:17,tocIndex:12},{value:" abstract class and implementing the ",paraId:17,tocIndex:12},{value:"send",paraId:17,tocIndex:12},{value:" method. In the ",paraId:17,tocIndex:12},{value:"src/server",paraId:17,tocIndex:12},{value:" directory, add a file named ",paraId:17,tocIndex:12},{value:"example-server.ts",paraId:17,tocIndex:12},{value:":",paraId:17,tocIndex:12},{value:`import { BaseNotificationChannel } from '@nocobase/plugin-notification-manager';

export class ExampleServer extends BaseNotificationChannel {
  async send(args): Promise<any> {
    console.log('ExampleServer send', args);
    return { status: 'success', message: args.message };
  }
}
`,paraId:18,tocIndex:12},{value:"Next, register the server extension plugin by editing ",paraId:19,tocIndex:12},{value:"src/server/plugin.ts",paraId:19,tocIndex:12},{value:":",paraId:19,tocIndex:12},{value:`import PluginNotificationManagerServer from '@nocobase/plugin-notification-manager';
import { Plugin } from '@nocobase/server';
import { ExampleServer } from './example-server';
export class PluginNotificationExampleServer extends Plugin {
  async load() {
    const notificationServer = this.pm.get(PluginNotificationManagerServer) as PluginNotificationManagerServer;
    notificationServer.registerChannelType({ type: 'example-sms', Channel: ExampleServer });
  }
}

export default PluginNotificationExampleServer;
`,paraId:20,tocIndex:12},{value:"Run the registration command: ",paraId:21,tocIndex:13},{value:"yarn pm add @nocobase/plugin-notification-example",paraId:21,tocIndex:13},{value:"Run the enable command: ",paraId:21,tocIndex:13},{value:"yarn pm enable @nocobase/plugin-notification-example",paraId:21,tocIndex:13},{value:"Upon visiting the Notification management channel page, you can see that the ",paraId:22,tocIndex:14},{value:"Example SMS",paraId:22,tocIndex:14},{value:` channel has been enabled.
`,paraId:22,tocIndex:14},{value:`Add a sample channel.
`,paraId:23,tocIndex:14},{value:`Create a new workflow and configure the notification node.
`,paraId:24,tocIndex:14},{value:`Trigger the workflow execution to view the following information output in the console.
`,paraId:25,tocIndex:14}]},365442:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Notification Manager is a centralized service that integrates various notification channels, offering a unified interface for channel configuration, management of notifications, and log recording. It\u2019s also designed to be highly flexible, allowing for the expansion of additional channels.",paraId:0,tocIndex:1},{value:"Purple section: The Notification Manager provides a comprehensive service that includes channel configuration and log recording, with the option to expand to other notification channels.",paraId:1,tocIndex:1},{value:"Green section: In-App Message, a built-in channel, enables users to receive notifications directly within the application.",paraId:1,tocIndex:1},{value:"Red section: Email, an extendable channel, allows users to receive notifications through email.",paraId:1,tocIndex:1},{value:"The currently supported channels include:",paraId:2,tocIndex:2},{value:"In-App Message",paraId:3,tocIndex:2},{value:"Email",paraId:4,tocIndex:2},{value:" (built-in SMTP protocol)",paraId:5,tocIndex:2},{value:"For additional channels, refer to the ",paraId:6,tocIndex:2},{value:"Channel Expansion",paraId:7,tocIndex:2},{value:" documentation.",paraId:6,tocIndex:2},{value:"The system logs each notification's details and status, offering a valuable tool for both analysis and troubleshooting.",paraId:8,tocIndex:3}]},191977:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Set password rules, password expiration, and password login security policies for all users, and manage locked users.",paraId:0,tocIndex:1},{value:"Set the minimum length requirement for passwords, with a maximum length of 64.",paraId:1,tocIndex:3},{value:"The following options are supported:",paraId:2,tocIndex:4},{value:"Must contain letters and numbers",paraId:3,tocIndex:4},{value:"Must contain letters, numbers, and symbols",paraId:3,tocIndex:4},{value:"Must contain numbers, uppercase and lowercase letters",paraId:3,tocIndex:4},{value:"Must contain numbers, uppercase and lowercase letters, and symbols",paraId:3,tocIndex:4},{value:"Must contain at least 3 of the following: numbers, uppercase letters, lowercase letters, and special characters",paraId:3,tocIndex:4},{value:"No restrictions",paraId:3,tocIndex:4},{value:"Set whether the password can contain the current user's username.",paraId:4,tocIndex:5},{value:"Remember the number of recently used passwords by the user. Users cannot reuse these passwords when changing their password. 0 means no restriction, with a maximum count of 24.",paraId:5,tocIndex:6},{value:"The validity period of the user's password. After the password expires, the administrator must reset the password before the user can log in using it. If other login methods are configured, the user can log in using those methods.",paraId:6,tocIndex:8},{value:`Within 10 days of the user's password expiration, a reminder is sent each time the user logs in. By default, the reminder is sent via the "Password Expiration Reminder" internal message channel, which can be managed in the notification management section.`,paraId:7,tocIndex:9},{value:"Since password expiration may result in the inability to log in, including for administrator accounts, it is recommended to change passwords promptly and set up multiple accounts in the system that have the authority to modify user passwords.",paraId:8,tocIndex:10},{value:"Set limits on invalid password login attempts.",paraId:9,tocIndex:11},{value:"Set the maximum number of login attempts a user can make within a specified time interval.",paraId:10,tocIndex:12},{value:"Set the time interval (in seconds) for calculating the maximum number of invalid login attempts by a user.",paraId:11,tocIndex:13},{value:"Set the duration for which a user is locked out after exceeding the invalid password login limit (0 means no restriction). During the lockout period, the user is prohibited from accessing the system through any authentication method, including API keys. If manual unlocking is required, refer to ",paraId:12,tocIndex:14},{value:"User Lockout",paraId:13,tocIndex:14},{value:".",paraId:12,tocIndex:14},{value:"No restrictions on the number of invalid password attempts by users.",paraId:14,tocIndex:16},{value:"Example: A user can attempt to log in up to 5 times every 5 minutes.",paraId:15,tocIndex:17},{value:"Example: If a user makes 5 consecutive invalid password login attempts within 5 minutes, the user is locked out for 2 hours.",paraId:16,tocIndex:18},{value:"The number of invalid password login attempts and the time interval configuration are typically used to limit high-frequency password login attempts within a short period, preventing brute-force attacks.",paraId:17,tocIndex:19},{value:"Whether to lock the user after exceeding the limit should be considered based on actual usage scenarios. The lockout duration setting may be maliciously exploited, as attackers could intentionally enter incorrect passwords multiple times for a target account, forcing the account to be locked and rendering it unusable. This can be mitigated by combining IP restrictions, API rate limits, and other measures.",paraId:17,tocIndex:19},{value:"Since account lockout prevents access to the system, including administrator accounts, it is advisable to set up multiple accounts in the system that have the authority to unlock users.",paraId:17,tocIndex:19}]},714044:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Manage locked users and proactively lock users.",paraId:0,tocIndex:1},{value:"Users who are locked out due to exceeding the invalid password login limit can be unlocked by deleting the record.",paraId:1,tocIndex:2},{value:"Adding a user record allows you to proactively lock a user. Once a user is locked, they will be prohibited from accessing the system through any authentication method, including API keys.",paraId:2,tocIndex:3}]},994049:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"By clicking the plugin manager icon in the top right corner, you can access the plugin manager page. Here, you can view, install, enable, and disable plugins.",paraId:0,tocIndex:1},{value:"Plugins usually come with their own settings page. By clicking on the settings icon in the top right corner, you can see the menu of all plugin settings pages. By clicking on the relevant menu, you can set the corresponding plugin.",paraId:1,tocIndex:2}]},429624:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Share public forms externally to gather information from anonymous users.",paraId:0,tocIndex:1},{value:"This is a pre-installed plugin that must be activated before use.",paraId:1,tocIndex:2},{value:"Public Form List",paraId:2,tocIndex:3},{value:"Creating a Public Form",paraId:3,tocIndex:3},{value:"Configuring the Form",paraId:4,tocIndex:3},{value:"Public Form Settings",paraId:5,tocIndex:3},{value:"Viewing the Public Form",paraId:6,tocIndex:3},{value:"Password Protection",paraId:7,tocIndex:3},{value:"Submission Success Notification",paraId:8,tocIndex:3}]},261009:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In real-world applications, to ensure data security and application stability, multiple environments are typically deployed, such as a development environment, a pre-release environment, and a production environment. This document provides examples of two common no-code development processes and explains in detail how to implement release management in NocoBase.",paraId:0,tocIndex:1},{value:"Three plugins are essential for release management. Please ensure all of the following plugins are activated.",paraId:1,tocIndex:2},{value:"Built-in plugin, installed and activated by default.",paraId:2,tocIndex:3},{value:"Provides centralized configuration and management of environment variables and keys, used for sensitive data storage, reusable configuration data, environment-based isolation, etc. (",paraId:2,tocIndex:3},{value:"View Documentation",paraId:3,tocIndex:3},{value:").",paraId:2,tocIndex:3},{value:"Available only in the Professional edition or higher (",paraId:4,tocIndex:4},{value:"Learn more",paraId:4,tocIndex:4},{value:").",paraId:4,tocIndex:4},{value:"Supports backup and restoration, including scheduled backups, ensuring data security and quick recovery. (",paraId:4,tocIndex:4},{value:"View Documentation",paraId:5,tocIndex:4},{value:").",paraId:4,tocIndex:4},{value:"Available only in the Professional edition or higher (",paraId:6,tocIndex:5},{value:"Learn more",paraId:6,tocIndex:5},{value:").",paraId:6,tocIndex:5},{value:"Used to migrate application configurations from one application environment to another (",paraId:6,tocIndex:5},{value:"View Documentation",paraId:7,tocIndex:5},{value:").",paraId:6,tocIndex:5},{value:"This approach suits simple development processes. There is one development environment, one pre-release environment, and one production environment. Changes flow from the development environment to the pre-release environment and are finally deployed to the production environment. In this process, only the development environment can modify configurations\u2014neither the pre-release nor the production environment allows modifications.",paraId:8,tocIndex:7},{value:"When configuring migration rules, select ",paraId:9,tocIndex:7},{value:"\u201COverwrite\u201D",paraId:9,tocIndex:7},{value:" for built-in tables in the core and plugins if needed; for all others, you can keep the default settings if there are no special requirements.",paraId:9,tocIndex:7},{value:"This approach suits multi-person collaboration or complex projects. Several parallel development environments can be used independently, and all changes are merged into a single pre-release environment for testing and verification before being deployed to production. In this process, only the development environment can modify configurations\u2014neither the pre-release nor the production environment allows modifications.",paraId:10,tocIndex:8},{value:"When configuring migration rules, select ",paraId:11,tocIndex:8},{value:"\u201CInsert or Update\u201D",paraId:11,tocIndex:8},{value:" for built-in tables in the core and plugins if needed; for all others, you can keep the default settings if there are no special requirements.",paraId:11,tocIndex:8},{value:"Before executing a migration, the system automatically creates a backup of the current application. If the migration fails or the results are not as expected, you can roll back and restore via the ",paraId:12,tocIndex:9},{value:"Backup Manager",paraId:13,tocIndex:9},{value:".",paraId:12,tocIndex:9}]},83440:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The route manager is a tool for managing the routes of the main page of the system, supporting ",paraId:0,tocIndex:1},{value:"desktop",paraId:0,tocIndex:1},{value:" and ",paraId:0,tocIndex:1},{value:"mobile",paraId:0,tocIndex:1},{value:" endpoints. Routes created using the route manager will be synchronized to the menu (can be configured to not display in the menu). Conversely, menus added in the page menu will also be synchronized to the route manager list.",paraId:0,tocIndex:1},{value:"The system supports four types of routes:",paraId:1,tocIndex:3},{value:"Group (group): Used to manage routes by grouping them, and can include sub-routes",paraId:2,tocIndex:3},{value:"Page (page): System internal page",paraId:2,tocIndex:3},{value:"Tab (tab): Used to switch between tabs in a page",paraId:2,tocIndex:3},{value:"Link (link): Internal or external link, can directly jump to the configured link address",paraId:2,tocIndex:3},{value:'Click the "Add new" button in the upper right corner to create a new route:',paraId:3,tocIndex:4},{value:"Select the route type (Type)",paraId:4,tocIndex:4},{value:"Fill in the route title (Title)",paraId:4,tocIndex:4},{value:"Select the route icon (Icon)",paraId:4,tocIndex:4},{value:"Set whether to display in the menu (Show in menu)",paraId:4,tocIndex:4},{value:"Set whether to enable page tabs (Enable page tabs)",paraId:4,tocIndex:4},{value:"For page type, the system will automatically generate a unique route path (Path)",paraId:4,tocIndex:4},{value:"Each route entry supports the following Actions:",paraId:5,tocIndex:5},{value:"Add child: Add a sub-route",paraId:6,tocIndex:5},{value:"Edit: Edit the route configuration",paraId:6,tocIndex:5},{value:"View: View the route page",paraId:6,tocIndex:5},{value:"Delete: Delete the route",paraId:6,tocIndex:5},{value:"The top toolbar provides the following batch Action functions:",paraId:7,tocIndex:6},{value:"Refresh: Refresh the route list",paraId:8,tocIndex:6},{value:"Delete: Delete the selected route",paraId:8,tocIndex:6},{value:"Hide in menu: Hide the selected route in the menu",paraId:8,tocIndex:6},{value:"Show in menu: Show the selected route in the menu",paraId:8,tocIndex:6},{value:'Use the "Filter" function at the top to filter the route list.',paraId:9,tocIndex:7},{value:"Modifying route configurations will directly affect the navigation menu structure of the system. Please proceed with caution and ensure the correctness of the route configurations.",paraId:10}]},769887:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase focuses on the security of data and applications from functional design to system implementation. The platform has built-in multiple security functions such as user authentication, access control, and data encryption, and also allows flexible configuration of security policies according to actual needs. Whether it is protecting user data, managing access permissions, or isolating development and production environments, NocoBase provides practical tools and solutions. This guide aims to provide guidance for the secure use of NocoBase, helping users protect the security of data, applications, and the environment, ensuring the efficient use of system functions under the premise of user security.",paraId:0,tocIndex:0},{value:"User authentication is used to identify user identities, prevent users from entering the system without authorization, and ensure that user identities are not abused.",paraId:1,tocIndex:1},{value:"By default, NocoBase uses JWT (JSON Web Token) for authentication of server-side APIs. Users can set the Token key through the system environment variable ",paraId:2,tocIndex:2},{value:"APP_KEY",paraId:2,tocIndex:2},{value:". Please properly manage the application's Token key to prevent external leakage. Note that if ",paraId:2,tocIndex:2},{value:"APP_KEY",paraId:2,tocIndex:2},{value:" is modified, old Tokens will also become invalid.",paraId:2,tocIndex:2},{value:"NocoBase supports the setting of the following Token policies:",paraId:3,tocIndex:3},{value:"Configuration Item",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Session Validity",paraId:4,tocIndex:3},{value:"The maximum valid time for each user login. During the session validity, the Token will be automatically updated. After the timeout, the user is required to log in again.",paraId:4,tocIndex:3},{value:"Token Validity",paraId:4,tocIndex:3},{value:"The validity period of each issued API Token. After the Token expires, if it is within the session validity period and has not exceeded the refresh limit, the server will automatically issue a new Token to maintain the user session, otherwise the user is required to log in again. (Each Token can only be refreshed once)",paraId:4,tocIndex:3},{value:"Expired Token Refresh Limit",paraId:4,tocIndex:3},{value:"The maximum time limit allowed for refreshing a Token after it expires.",paraId:4,tocIndex:3},{value:"Usually, we recommend administrators:",paraId:5,tocIndex:3},{value:"Set a shorter Token validity period to limit the exposure time of the Token.",paraId:6,tocIndex:3},{value:"Set a reasonable session validity period, which is longer than the Token validity period but should not be too long, to balance user experience and security. Use the automatic Token refresh mechanism to ensure that active user sessions are not interrupted while reducing the risk of long-term sessions being abused.",paraId:6,tocIndex:3},{value:"Set a reasonable expired Token refresh limit so that the Token naturally expires when the user is inactive for a long time without issuing a new Token, reducing the risk of abuse of idle user sessions.",paraId:6,tocIndex:3},{value:"By default, user Tokens are stored in the browser's LocalStorage. After closing the browser page and opening it again, if the Token is still valid, the user does not need to log in again.",paraId:7,tocIndex:4},{value:"If you want users to log in again every time they enter the page, you can set the environment variable ",paraId:8,tocIndex:4},{value:"API_CLIENT_STORAGE_TYPE=sessionStorage",paraId:8,tocIndex:4},{value:" to save the user Token to the browser's SessionStorage, so as to achieve the purpose of users logging in again every time they open the page.",paraId:8,tocIndex:4},{value:"When NocoBase is initially installed, the application will initialize a root user. It is recommended that users modify the root user's information by setting system environment variables to avoid malicious exploitation.",paraId:9,tocIndex:5},{value:"INIT_ROOT_USERNAME",paraId:10,tocIndex:5},{value:" - root username",paraId:10,tocIndex:5},{value:"INIT_ROOT_EMAIL",paraId:10,tocIndex:5},{value:" - root user email",paraId:10,tocIndex:5},{value:"INIT_ROOT_PASSWORD",paraId:10,tocIndex:5},{value:" - root user password, please set a strong password.",paraId:10,tocIndex:5},{value:"During subsequent use of the system, it is recommended that users set up and use other administrator accounts, and avoid directly using the root user to operate the application.",paraId:11,tocIndex:5},{value:"Professional Edition and above",paraId:12,tocIndex:6},{value:"NocoBase supports setting password rules and password login attempt lock policies for all users to enhance the security of NocoBase applications that have password login enabled. You can refer to ",paraId:13,tocIndex:6},{value:"Password Policy",paraId:14,tocIndex:6},{value:" to understand each configuration item.",paraId:13,tocIndex:6},{value:"Configuration Item",paraId:15,tocIndex:7},{value:"Description",paraId:15,tocIndex:7},{value:"Password Length",paraId:15,tocIndex:7},{value:"The minimum password length requirement, the maximum length is 64.",paraId:15,tocIndex:7},{value:"Password Complexity",paraId:15,tocIndex:7},{value:"Set the complexity requirements for the password, the types of characters that must be included.",paraId:15,tocIndex:7},{value:"Can't Include Username in Password",paraId:15,tocIndex:7},{value:"Set whether the password can include the current user's username.",paraId:15,tocIndex:7},{value:"Remember Password History",paraId:15,tocIndex:7},{value:"Remember the number of passwords recently used by the user. The user cannot reuse them when changing the password.",paraId:15,tocIndex:7},{value:"Configuration Item",paraId:16,tocIndex:8},{value:"Description",paraId:16,tocIndex:8},{value:"Password Validity Period",paraId:16,tocIndex:8},{value:"The validity period of user passwords. Users must change their passwords before they expire in order to recalculate the validity period. If they do not change their passwords before they expire, they will not be able to log in with the old password and will need administrator assistance to reset it. ",paraId:16,tocIndex:8},{value:"If other login methods are configured, the user can log in using other methods.",paraId:16,tocIndex:8},{value:"Password Expiration Reminder Notification Channel",paraId:16,tocIndex:8},{value:"Within 10 days before the user's password expires, a reminder will be sent each time the user logs in.",paraId:16,tocIndex:8},{value:"Configuration Item",paraId:17,tocIndex:9},{value:"Description",paraId:17,tocIndex:9},{value:"Maximum Invalid Password Login Attempts",paraId:17,tocIndex:9},{value:"Set the maximum number of login attempts a user can try within a specified time interval.",paraId:17,tocIndex:9},{value:"Maximum Invalid Password Login Time Interval (seconds)",paraId:17,tocIndex:9},{value:"Set the time interval for calculating the user's maximum invalid login attempts, in seconds.",paraId:17,tocIndex:9},{value:"Lock Time (seconds)",paraId:17,tocIndex:9},{value:"Set the time to lock the user after the user exceeds the invalid password login limit (0 means no limit). ",paraId:17,tocIndex:9},{value:"During the period when the user is locked, it will be forbidden to access the system through any authentication method, including API keys.",paraId:17,tocIndex:9},{value:"Usually, we recommend:",paraId:18,tocIndex:9},{value:"Set strong password rules to reduce the risk of passwords being guessed by association or brute force.",paraId:19,tocIndex:9},{value:"Set a reasonable password validity period to force users to change their passwords regularly.",paraId:19,tocIndex:9},{value:"Combine the number of invalid password logins and time configuration to limit high-frequency password login attempts in a short time and prevent brute-force password cracking.",paraId:19,tocIndex:9},{value:"If the security requirements are strict, you can set a reasonable time for locking the user after exceeding the login limit. However, it should be noted that the lock time setting may be maliciously used. Attackers may intentionally enter the wrong password multiple times for target accounts, forcing the accounts to be locked and unable to be used normally. In actual use, you can combine IP restrictions, API frequency restrictions, and other means to prevent such attacks.",paraId:19,tocIndex:9},{value:"Change the default NocoBase root username, email, and password to prevent malicious use.",paraId:19,tocIndex:9},{value:"Since both password expiration or account locking will prevent access to the system, including administrator accounts, it is recommended to set up multiple accounts in the system that have permission to reset passwords and unlock users.",paraId:19,tocIndex:9},{value:"Professional Edition and above, included in the password policy plugin",paraId:20,tocIndex:10},{value:"Manage users who are locked out for exceeding the invalid password login limit. You can actively unlock them or actively add abnormal users to the lockout list. After a user is locked, they will be prohibited from accessing the system through any authentication method, including API keys.",paraId:21,tocIndex:10},{value:"NocoBase supports calling system APIs through API keys. Users can add API keys in the API Keys plugin configuration.",paraId:22,tocIndex:11},{value:"Please bind the correct role to the API key and ensure that the permissions associated with the role are properly configured.",paraId:23,tocIndex:11},{value:"Prevent API keys from being leaked during use.",paraId:23,tocIndex:11},{value:'Generally, we recommend that users set a validity period for API keys and avoid using the "Never expire" option.',paraId:23,tocIndex:11},{value:"If an API key is found to be abnormally used and may be at risk of leakage, users can delete the corresponding API key to invalidate it.",paraId:23,tocIndex:11},{value:"Commercial Plugin",paraId:24,tocIndex:12},{value:`NocoBase provides a rich set of SSO authentication plugins, supporting multiple mainstream protocols such as OIDC, SAML 2.0, LDAP, and CAS. At the same time, NocoBase also has a complete set of authentication method extension interfaces, which can support the rapid development and access of other authentication types. You can easily connect your existing IdP with NocoBase to centrally manage user identities on the IdP to enhance security.
`,paraId:25,tocIndex:12},{value:"Enterprise Edition",paraId:26,tocIndex:13},{value:"Two-factor authentication requires users to provide a second piece of valid information to prove their identity when logging in with a password, such as sending a one-time dynamic verification code to the user's trusted device, to verify the user's identity and ensure that the user's identity is not abused which reduces the risk of password leakage.",paraId:27,tocIndex:13},{value:"Enterprise Edition",paraId:28,tocIndex:14},{value:"NocoBase supports setting blacklists or whitelists for user access IPs.",paraId:29,tocIndex:14},{value:"In a strictly secure environment, you can set an IP whitelist to allow only specific IPs or IP ranges to access the system to restrict unauthorized external network connections and reduce security risks at the source.",paraId:30,tocIndex:14},{value:"Under public network access conditions, if the administrator discovers abnormal access, they can set an IP blacklist to block known malicious IP addresses or accesses from suspicious sources, reducing security threats such as malicious scanning and brute force cracking.",paraId:30,tocIndex:14},{value:"Log records are kept for rejected access requests.",paraId:30,tocIndex:14},{value:"By setting different roles in the system and setting corresponding permissions for roles, you can finely control the permissions of users to access resources. Administrators need to configure reasonably according to the needs of actual scenarios to reduce the risk of system resource leakage.",paraId:31,tocIndex:15},{value:"NocoBase controls the permissions of users to access resources by setting roles in the system, authorizing different roles, and binding users to corresponding roles. Each user can have multiple roles, and users can switch roles to operate resources from different perspectives. If the department plugin is installed, you can also bind roles and departments, so that users can have the roles bound on their respective departments.",paraId:32,tocIndex:16},{value:"System configuration permissions include the following settings:",paraId:33,tocIndex:17},{value:"Whether to allow the configuration interface",paraId:34,tocIndex:17},{value:"Whether to allow to install, enable, and disable plugins",paraId:34,tocIndex:17},{value:"Whether to allow to configure plugins",paraId:34,tocIndex:17},{value:"Whether to allow to clear the cache and restart the application",paraId:34,tocIndex:17},{value:"Configuration permissions for each plugin",paraId:34,tocIndex:17},{value:`Menu permissions are used to control the permission of users to enter different menu pages, including desktop and mobile.
`,paraId:35,tocIndex:18},{value:"NocoBase provides fine-grained control over the permissions of users to access data in the system, ensuring that different users can only access data related to their responsibilities, preventing overreach and data leakage.",paraId:36,tocIndex:19},{value:"Set the scope of data that users can operate. Note that the scope of data here is different from the scope of data configured in the block. The scope of data configured in the block is usually only used for front-end filtering of data. If you need to strictly control the permission of users to access data resources, you need to configure it here, which is controlled by the server.",paraId:37,tocIndex:22},{value:"During the data storage and backup process, NocoBase provides an effective mechanism to ensure data security.",paraId:38,tocIndex:23},{value:"NocoBase users' passwords are encrypted and stored using the scrypt algorithm, which can effectively resist large-scale hardware attacks.",paraId:39,tocIndex:24},{value:"When using third-party services in NocoBase, we recommend that you configure the third-party key information into environment variables and store them encrypted. This is convenient for configuration and use in different places and also enhances security. You can refer to the documentation for detailed usage methods.",paraId:40,tocIndex:25},{value:"By default, the key is encrypted using the AES-256-CBC algorithm. NocoBase will automatically generate a 32-bit encryption key and save it to storage/.data/environment/aes_key.dat. Users should properly keep the key file to prevent it from being stolen. If you need to migrate data, the key file needs to be migrated together.",paraId:41},{value:"If you need to store sensitive files, it is recommended to use a cloud storage service compatible with the S3 protocol and use the commercial plugin File storage: S3 (Pro) to enable private reading and writing of files. If you need to use it in the internal network environment, it is recommended to use storage applications that support private deployment and are compatible with the S3 protocol, such as MinIO.",paraId:42,tocIndex:26},{value:"To ensure the security of application data and avoid data loss, we recommend that you back up the database regularly.",paraId:43,tocIndex:27},{value:"Open-source edition can refer to ",paraId:44,tocIndex:27},{value:"https://www.nocobase.com/en/blog/nocobase-backup-restore",paraId:44,tocIndex:27},{value:" to back up with database tools. We also recommend that you properly keep backup files to prevent data leakage.",paraId:44,tocIndex:27},{value:"Professional and above editions can use the backup manager for backups. The backup manager provides the following features:",paraId:45,tocIndex:27},{value:"Scheduled automatic backup: Periodic automatic backups save time and manual operations, and data security is more secure.",paraId:46,tocIndex:27},{value:"Synchronize backup files to cloud storage: Isolate backup files from the application service itself to prevent the loss of backup files while the service is unavailable due to server failure.",paraId:46,tocIndex:27},{value:"Backup file encryption: Set a password for backup files to reduce the risk of data loss caused by backup file leakage.",paraId:46,tocIndex:27},{value:"Correctly deploying NocoBase and ensuring the security of the runtime environment is one of the keys to ensuring the security of NocoBase applications.",paraId:47,tocIndex:28},{value:"To prevent man-in-the-middle attacks, we recommend that you add an SSL/TLS certificate to your NocoBase application site to ensure the security of data during network transmission.",paraId:48,tocIndex:29},{value:"Enterprise Edition",paraId:49,tocIndex:30},{value:"In environments with more stringent data security requirements, NocoBase supports enabling API transport encryption to encrypt API request and response content, avoid clear text transmission, and increase the threshold for data cracking.",paraId:50,tocIndex:30},{value:"By default, NocoBase does not need to communicate with third-party services, and the NocoBase team will not collect any user information. It is only necessary to connect to the NocoBase server when performing the following two operations:",paraId:51,tocIndex:31},{value:"Automatically download commercial plugins through the NocoBase Service platform.",paraId:52,tocIndex:31},{value:"Online identity verification and application activation for commercial edition.",paraId:52,tocIndex:31},{value:"If you are willing to sacrifice a certain degree of convenience, these two operations also support offline completion and do not need to be directly connected to the NocoBase server.",paraId:53,tocIndex:31},{value:"NocoBase supports complete intranet deployment, refer to",paraId:54,tocIndex:31},{value:"https://www.nocobase.com/en/blog/load-docker-image",paraId:55,tocIndex:31},{value:"Upload plugins to the plugin directory to install and upgrade",paraId:56,tocIndex:31},{value:"Professional Edition and above",paraId:57,tocIndex:32},{value:"In actual use, we recommend enterprise users to isolate testing and production environments to ensure the security of application data and the runtime environment in the production environment. With the migration management plugin, you can migrate application data between different environments.",paraId:58,tocIndex:32},{value:"Enterprise Edition",paraId:59,tocIndex:34},{value:"NocoBase's audit log function records users' activity records in the system. By recording users' key operations and access behaviors, administrators can:",paraId:60,tocIndex:34},{value:"Check users' access information such as IP, device, and operation time to detect abnormal behaviors in time.",paraId:61,tocIndex:34},{value:"Trace the operation history of data resources in the system.",paraId:61,tocIndex:34},{value:"NocoBase provides multiple log types to help users understand the system's running status and behavior records, so that system problems can be identified and located in a timely manner, ensuring the system's security and controllability from different dimensions. The main types of logs include:",paraId:62,tocIndex:35},{value:"Request log: API request logs, including accessed URLs, HTTP methods, request parameters, response times, and status codes.",paraId:63,tocIndex:35},{value:"System log: Records application running events, including service startup, configuration changes, error messages, and key operations.",paraId:63,tocIndex:35},{value:"SQL log: Records database operation statements and their execution times, covering operations such as query, update, insert, and delete.",paraId:63,tocIndex:35},{value:"Workflow log: Execution log of the workflow, including execution time, running information, and error information.",paraId:63,tocIndex:35}]},634029:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To set the global information of the system, such as system name, main LOGO, enabled language, etc.",paraId:0,tocIndex:1}]},715105:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In "System Settings" by setting "Enabled Languages," you can adjust the global language environment of the system, with the first language being the default.',paraId:0},{value:"When multiple languages are enabled, users can set their language preferences in the user's personal center (top right corner).",paraId:1},{value:'If the language environment you are using is not translated, you can use the "',paraId:2},{value:"Localization Management",paraId:3},{value:'" plugin to perform translations.',paraId:2}]},786098:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is used to convert OpenTelemetry protocol (OTLP) data into Prometheus format and expose an interface for Prometheus to scrape metric data.",paraId:0,tocIndex:1},{value:"This is a commercial plugin. Please see ",paraId:1},{value:"NocoBase commercial version",paraId:1},{value:" for details.",paraId:1},{value:"Configure the environment variables before starting NocoBase.",paraId:2,tocIndex:4},{value:"Set to ",paraId:3,tocIndex:5},{value:"on",paraId:3,tocIndex:5},{value:".",paraId:3,tocIndex:5},{value:`TELEMETRY_ENABLED=on
`,paraId:4,tocIndex:5},{value:"Add ",paraId:5,tocIndex:6},{value:"prometheus",paraId:5,tocIndex:6},{value:".",paraId:5,tocIndex:6},{value:`TELEMETRY_METRIC_READER=prometheus
`,paraId:6,tocIndex:6},{value:"Whether to start a separate server.",paraId:7,tocIndex:7},{value:"off",paraId:8,tocIndex:7},{value:". The scraping interface is ",paraId:8,tocIndex:7},{value:"/api/prometheus:metrics",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"on",paraId:8,tocIndex:7},{value:". The scraping interface is ",paraId:8,tocIndex:7},{value:":port/metrics",paraId:8,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"The port for the separate server when activated. Default ",paraId:9,tocIndex:8},{value:"9464",paraId:9,tocIndex:8},{value:".",paraId:9,tocIndex:8},{value:"Environment Variables",paraId:10,tocIndex:9},{value:"Separate server",paraId:11,tocIndex:10},{value:`scrape_configs:
  - job_name: 'nocobase'
    static_configs:
      - targets: ['localhost:9464']
`,paraId:12,tocIndex:10},{value:"Internal API",paraId:13,tocIndex:10},{value:`scrape_configs:
  - job_name: 'nocobase'
    metrics_path: '/api/prometheus:metrics'
    static_configs:
      - targets: ['localhost:13001']
`,paraId:14,tocIndex:10}]},306479:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Handlebars is a popular templating engine that allows us to dynamically embed data into HTML using a simple template syntax.",paraId:0,tocIndex:1},{value:"In Handlebars, the basic syntax includes:",paraId:1,tocIndex:3},{value:"Interpolation expression ",paraId:2,tocIndex:3},{value:"{{variable}}",paraId:2,tocIndex:3},{value:" to output data.",paraId:2,tocIndex:3},{value:"Conditional expression ",paraId:2,tocIndex:3},{value:"{{#if condition}}...{{/if}}",paraId:2,tocIndex:3},{value:" for logical conditions.",paraId:2,tocIndex:3},{value:"Looping ",paraId:2,tocIndex:3},{value:"{{#each array}}...{{/each}}",paraId:2,tocIndex:3},{value:" to iterate over arrays.",paraId:2,tocIndex:3},{value:"For example, given the following data:",paraId:3,tocIndex:3},{value:`const context = {
  title: "Handlebars Template Example",
  items: ["Apple", "Banana", "Orange"]
};
`,paraId:4,tocIndex:3},{value:"With the following template:",paraId:5,tocIndex:3},{value:`<h1>{{title}}</h1>
<ul>
  {{#each items}}
    <li>{{this}}</li>
  {{/each}}
</ul>
`,paraId:6,tocIndex:3},{value:"The generated HTML will be:",paraId:7,tocIndex:3},{value:`<h1>Handlebars Template Example</h1>
<ul>
  <li>Apple</li>
  <li>Banana</li>
  <li>Orange</li>
</ul>
`,paraId:8,tocIndex:3},{value:"For more content refer to",paraId:9,tocIndex:3},{value:"Core",paraId:10,tocIndex:3},{value:"You can use comparison operators for conditional statements. Supported comparison functions include ",paraId:11,tocIndex:4},{value:"eq",paraId:11,tocIndex:4},{value:" (equals), ",paraId:11,tocIndex:4},{value:"ne",paraId:11,tocIndex:4},{value:" (not equals), ",paraId:11,tocIndex:4},{value:"gt",paraId:11,tocIndex:4},{value:" (greater than), ",paraId:11,tocIndex:4},{value:"lt",paraId:11,tocIndex:4},{value:" (less than), etc.",paraId:11,tocIndex:4},{value:`{{#if (eq 10 10)}}
  <p>Equal</p>
{{else}}
  <p>Not equal</p>
{{/if}}
`,paraId:12,tocIndex:4},{value:"Logical operators like ",paraId:13,tocIndex:4},{value:"and",paraId:13,tocIndex:4},{value:", ",paraId:13,tocIndex:4},{value:"or",paraId:13,tocIndex:4},{value:", ",paraId:13,tocIndex:4},{value:"not",paraId:13,tocIndex:4},{value:" can also be used:",paraId:13,tocIndex:4},{value:`{{#if (and true true)}}
  <p>Both are true!</p>
{{/if}}
`,paraId:14,tocIndex:4},{value:`{{#if (or false true)}}
  <p>One of them is true!</p>
{{/if}}
`,paraId:15,tocIndex:4},{value:"For more content, refer to",paraId:16,tocIndex:4},{value:"Comparison",paraId:17,tocIndex:4},{value:"You can perform simple mathematical operations in templates:",paraId:18,tocIndex:5},{value:`{{add 4 5}}  <!-- Output: 9 -->
{{minus 10 3}} <!-- Output: 7 -->
`,paraId:19,tocIndex:5},{value:"For more content refer to",paraId:20,tocIndex:5},{value:"Math",paraId:21,tocIndex:5},{value:`{{uppercase "hello world"}}
<!-- results in:  HELLO WORLD -->
{{ellipsis "foo bar baz", 7}}
<!-- results in:  'foo bar\u2026' -->
`,paraId:22,tocIndex:6},{value:"For more content, refer to",paraId:23,tocIndex:6},{value:"String",paraId:24,tocIndex:6},{value:`<p>{{dateFormat "2024-09-25" "YYYY"}}</p>  <!-- Output: 2024-09-25 -->
`,paraId:25,tocIndex:7},{value:"For more content refer to",paraId:26,tocIndex:7},{value:"Date",paraId:27,tocIndex:7},{value:`<p>First element: {{first items}}</p>  <!-- Output: First element: Apple -->
<p>Last element: {{last items}}</p>  <!-- Output: Last element: Orange -->
`,paraId:28,tocIndex:8},{value:"For more content, refer to",paraId:29,tocIndex:8},{value:"Array",paraId:30,tocIndex:8},{value:"Object",paraId:31,tocIndex:8},{value:"Category",paraId:32,tocIndex:9},{value:"Description",paraId:32,tocIndex:9},{value:"Core",paraId:33,tocIndex:9},{value:"Built-in Handlebars methods",paraId:32,tocIndex:9},{value:"Array",paraId:34,tocIndex:9},{value:"Methods for handling arrays",paraId:32,tocIndex:9},{value:"Comparison",paraId:35,tocIndex:9},{value:"Comparison operators and methods",paraId:32,tocIndex:9},{value:"Date",paraId:36,tocIndex:9},{value:"Methods for date and time",paraId:32,tocIndex:9},{value:"HTML",paraId:37,tocIndex:9},{value:"Methods for HTML document handling",paraId:32,tocIndex:9},{value:"I18n",paraId:38,tocIndex:9},{value:"Internationalization support",paraId:32,tocIndex:9},{value:"Math",paraId:39,tocIndex:9},{value:"Mathematical functions",paraId:32,tocIndex:9},{value:"Number",paraId:40,tocIndex:9},{value:"Number formatting and handling",paraId:32,tocIndex:9},{value:"Object",paraId:41,tocIndex:9},{value:"Methods for object handling",paraId:32,tocIndex:9},{value:"Path",paraId:42,tocIndex:9},{value:"Methods for path and filesystem",paraId:32,tocIndex:9},{value:"Regex",paraId:43,tocIndex:9},{value:"Regular expression methods",paraId:32,tocIndex:9},{value:"String",paraId:44,tocIndex:9},{value:"String manipulation methods",paraId:32,tocIndex:9},{value:"URL",paraId:45,tocIndex:9},{value:"URL parsing and building methods",paraId:32,tocIndex:9}]},175583:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In a JSON template, variables are represented in string format and must be enclosed in double quotes, such as {{xxxx}}. During the parsing process, each variable's value is converted to its appropriate type based on its actual content. Thus, while the variable itself is a string, the resulting parsed value may not necessarily remain a string.",paraId:0,tocIndex:1},{value:"The JSON template is as follows",paraId:1,tocIndex:2},{value:`{
  "key1": "{{current.key1}}",
  "key2": "{{current.key2}}",
  "key3": "{{current.key3}}",
  "key4": "{{current.key4}}",
  "key5": "{{current.key5}}",
  "key6": "{{current.key6}}",
  "key7": {
    "key1": "{{current.key1}}",
    "key2": "{{current.key2}}"
  },
  "key8": ["{{current.key1}}", "{{current.key3}}"],
  "key9": "{{current.key1}} - \\"{{current.key3}}\\" - {{current.key3}} - val9"
}
`,paraId:2,tocIndex:2},{value:"The current variables are as follows",paraId:3,tocIndex:2},{value:`{
  "key1": "val1",
  "key2": null,
  "key3": 3,
  "key4": {"k": "v"},
  "key5": [1, 2, 3],
  "key6": undefined
}
`,paraId:4,tocIndex:2},{value:"The parsed result will be",paraId:5,tocIndex:2},{value:`{
  "key1": "val1",
  "key2": null,
  "key3": 3,
  "key4": {"k": "v"},
  "key5": [1, 2, 3],
  "key7": {
    "key1": "val1",
    "key2": null
  },
  "key8": ["val1", 3],
  "key9": "val1 - \\"3\\" - 3 - val9"
}
`,paraId:6,tocIndex:2}]},235172:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},817726:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Note: The current theme feature is implemented based on antd 5.x version. It is recommended to read about the ",paraId:0,tocIndex:0},{value:"Customizing Theme",paraId:0,tocIndex:0},{value:" concept before proceeding with this document.",paraId:0,tocIndex:0},{value:"The plugin is essentially a tool for modifying the style of the entire front-end page. It currently supports editing global ",paraId:1,tocIndex:1},{value:"SeedToken",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"MapToken",paraId:1,tocIndex:1},{value:", and ",paraId:1,tocIndex:1},{value:"AliasToken",paraId:1,tocIndex:1},{value:", as well as enabling a ",paraId:1,tocIndex:1},{value:"switch",paraId:1,tocIndex:1},{value:" to Dark Mode and Compact Mode. In the future, it may support ",paraId:1,tocIndex:1},{value:"component-level",paraId:1,tocIndex:1},{value:" theme customization.",paraId:1,tocIndex:1},{value:"Firstly, update NocoBase to the latest version (v0.11.1 or above). Then, search for the ",paraId:2,tocIndex:3},{value:"Theme Editor",paraId:2,tocIndex:3},{value:" card in the ",paraId:2,tocIndex:3},{value:"Plugin Management",paraId:2,tocIndex:3},{value:" Page. Click on the Enable button at the bottom right of the card and wait for the page to refresh.",paraId:2,tocIndex:3},{value:"After enabling, click on the settings button at the bottom left of the card, and you will be redirected to the theme editing page. By default, there are four theme options: ",paraId:3,tocIndex:4},{value:"Default Theme",paraId:3,tocIndex:4},{value:", ",paraId:3,tocIndex:4},{value:"Dark Theme",paraId:3,tocIndex:4},{value:", ",paraId:3,tocIndex:4},{value:"Compact Theme",paraId:3,tocIndex:4},{value:", and ",paraId:3,tocIndex:4},{value:"Compact Dark Theme",paraId:3,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"Click the ",paraId:4,tocIndex:5},{value:"Add New Theme",paraId:4,tocIndex:5},{value:" button and choose ",paraId:4,tocIndex:5},{value:"Create a Brand New Theme",paraId:4,tocIndex:5},{value:". A Theme Editor will pop up on the right side of the page, allowing you to edit Colors, Sizes, Styles, and more. After editing, enter a theme name and click save to add the new theme.",paraId:4,tocIndex:5},{value:"You can move the mouse to the top right corner of the page, where you will see a theme switcher. Clicking on it allows you to switch to other themes, such as the newly added theme.",paraId:5,tocIndex:6},{value:"Click the ",paraId:6,tocIndex:7},{value:"Edit",paraId:6,tocIndex:7},{value:" button at the bottom left of the card. Similar to adding a new theme, a Theme Editor will pop up on the right side of the page. After editing, click save to complete the theme modification.",paraId:6,tocIndex:7},{value:"Newly added themes are by default available for users to switch to. If you do not want users to switch to a certain theme, you can turn off the ",paraId:7,tocIndex:8},{value:"User selectable",paraId:7,tocIndex:8},{value:" switch at the bottom right of the theme card, making it unavailable for users to choose.",paraId:7,tocIndex:8},{value:"Initially, the ",paraId:8,tocIndex:9},{value:"Default Theme",paraId:8,tocIndex:9},{value:" is set as the default. If you want to set a specific theme as the new default, switch on the ",paraId:8,tocIndex:9},{value:"Default Theme",paraId:8,tocIndex:9},{value:" toggle at the bottom right of the card. This will ensure that when users open the page for the first time, they will be presented with this theme.",paraId:8,tocIndex:9},{value:"Click on the Delete button below the card, then click on the confirmation button that pops up to remove the theme.",paraId:9,tocIndex:10}]},404863:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The Token Security Policy is a functional configuration designed to protect system security and enhance user experience. It includes three main configuration items: "Session Validity Period", "Token Validity Period", and "Expired Token Refresh Time Limit".',paraId:0,tocIndex:1},{value:"The configuration entry is located under Plugin Settings - Security - Token Policy:",paraId:1,tocIndex:2},{value:"Definition:",paraId:2,tocIndex:3},{value:"The Session Validity Period refers to the maximum duration that the system allows a user to maintain an active session after logging in.",paraId:3,tocIndex:3},{value:"Function:",paraId:4,tocIndex:3},{value:`Once the Session Validity Period is exceeded, the user will receive a 401 error response upon subsequent access to the system, and will then be redirected to the login page for re-authentication.
Example:
If the Session Validity Period is set to 8 hours, the session will expire 8 hours after the user logs in, assuming no additional interactions.`,paraId:5,tocIndex:3},{value:"Recommended Settings:",paraId:6,tocIndex:3},{value:"Short-term operation scenarios: Recommended 1-2 hours to enhance security.",paraId:7,tocIndex:3},{value:"Long-term work scenarios: Can be set to 8 hours to accommodate business needs.",paraId:7,tocIndex:3},{value:"Definition:",paraId:8,tocIndex:4},{value:"The Token Validity Period refers to the lifecycle of each Token issued by the system during the user's active session.",paraId:9,tocIndex:4},{value:"Function:",paraId:10,tocIndex:4},{value:`When a Token expires, the system will automatically issue a new Token to maintain the session activity.
Each expired Token is only allowed to be refreshed once.`,paraId:11,tocIndex:4},{value:"Recommended Settings:",paraId:12,tocIndex:4},{value:`For security reasons, it is recommended to set it between 15 to 30 minutes.
Adjustments can be made based on scenario requirements. For example:
High-security scenarios: The Token Validity Period can be shortened to 10 minutes or less.
Low-risk scenarios: The Token Validity Period can be appropriately extended to 1 hour.`,paraId:13,tocIndex:4},{value:"Definition:",paraId:14,tocIndex:5},{value:"The Expired Token Refresh Time Limit refers to the maximum time window allowed for a user to obtain a new Token through a refresh operation after the Token has expired.",paraId:15,tocIndex:5},{value:"Characteristics:",paraId:16,tocIndex:5},{value:`If the refresh time limit is exceeded, the user must log in again to obtain a new Token.
The refresh operation does not extend the Session Validity Period, it only regenerates the Token.`,paraId:17,tocIndex:5},{value:"Recommended Settings:",paraId:18,tocIndex:5},{value:"For security reasons, it is recommended to set it between 5 to 10 minutes.",paraId:19,tocIndex:5}]},376635:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Two-Factor Authentication (2FA) is an additional security measure used during application login. When 2FA is enabled, users are required to provide an extra form of authentication\u2014such as an OTP code, TOTP, etc.\u2014in addition to their password.",paraId:0,tocIndex:1},{value:"Currently, the 2FA process applies only to password-based logins. If your application has enabled SSO or other authentication methods, please use the multi-factor authentication (MFA) provided by the respective IdP.",paraId:1},{value:"After enabling the plugin, a 2FA configuration sub-page will be added to the Authenticator management page.",paraId:2,tocIndex:3},{value:'Administrators must check the "Enforce two-Factor authentication (2FA) for all users" option and select an available type of authenticator to bind. If no authenticators are available, please first create a new authenticator on the verification management page. See ',paraId:3,tocIndex:3},{value:"Verification",paraId:4,tocIndex:3},{value:" for details.",paraId:3,tocIndex:3},{value:"Once 2FA is enabled, when users log in using a password, they will enter the 2FA verification process.",paraId:5,tocIndex:4},{value:"If a user has not yet bound any of the specified authenticators, they will be prompted to bind one. Once the binding is successful, they can access the application.",paraId:6,tocIndex:4},{value:"If a user has already bound one of the specified authenticators, they will be required to verify their identity using the bound authenticator. Upon successful verification, they can access the application.",paraId:7,tocIndex:4},{value:"After logging in, users can bind additional authenticators on their personal verification page.",paraId:8,tocIndex:4}]},420902:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Document pending.",paraId:0}]},526750:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The After successful submission configuration allows users to customize the response behavior upon completion. Users can define custom success messages, select automatic or manual dismissal of success notifications, and choose whether to remain on the current page, return to the previous popup or page, or redirect to a specified route, depending on the requirements.",paraId:0,tocIndex:1},{value:"Stay on the current popup or page: After the operation is successful, the popup window or route is not closed",paraId:1,tocIndex:1},{value:"Return to the previous popup or page (default): Close the popup window after the operation is successful",paraId:1,tocIndex:1},{value:"Redirect to: After the operation succeeds, the route is switched to the specified route",paraId:1,tocIndex:1},{value:"v1.7.0+",paraId:2,tocIndex:1},{value:"Supports refreshing data blocks after a successful operation. Users can select the data blocks to refresh through a dropdown menu, with available options including data blocks on the current page and in popups. The refresh data blocks operation is executed immediately after the operation succeeds, ensuring users see the latest data state.",paraId:3,tocIndex:2},{value:'Open the "After Successful Submission" configuration popup.',paraId:4,tocIndex:3},{value:'In the "Refresh Data Blocks" option, select the data blocks that need to be refreshed.',paraId:4,tocIndex:3},{value:'Click the "OK" button to complete the configuration.',paraId:4,tocIndex:3},{value:"The ",paraId:5,tocIndex:4},{value:"Submit",paraId:5,tocIndex:4},{value:" button in the form supports dynamically passing variables from the response data after a successful submission, to be used in a route redirection.",paraId:5,tocIndex:4},{value:`You can pass the response record data as variables into the path.
For example: After successfully creating a record, you can redirect to the details page of that record.
`,paraId:6,tocIndex:4}]},916830:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Field values assignment allows you to preset values for fields before executing operations. This feature ensures that data is automatically populated when updating or creating records, eliminating the need for manual input. Common scenarios include bulk updating order statuses or automatically setting the delivery time to the current time when an order is delivered.",paraId:0,tocIndex:1},{value:"Only fields within the current table can be configured.",paraId:1,tocIndex:3},{value:"Different field types support various variable types, offering flexibility depending on the data you're working with.",paraId:2,tocIndex:5},{value:"For more information on variables, refer to the ",paraId:3,tocIndex:5},{value:"Variables",paraId:4,tocIndex:5},{value:" section.",paraId:3,tocIndex:5}]},40675:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Binding a workflow is a powerful way to automate data processing. By linking an operation to a workflow, you ensure that data flows seamlessly through business processes. It\u2019s important to note that workflows are triggered only after a successful data submission; if the operation fails, the workflow will not be activated.",paraId:0,tocIndex:1},{value:"The following operation buttons currently support workflow binding:",paraId:1,tocIndex:1},{value:'"Submit" and "Save" buttons for new forms.',paraId:2,tocIndex:1},{value:'"Submit" and "Save" buttons for update forms.',paraId:3,tocIndex:1},{value:'"Update Data" button in data rows (including tables, lists, kanban, etc.).',paraId:4,tocIndex:1},{value:"For more details, see ",paraId:5,tocIndex:1},{value:"Post-Action Events",paraId:6,tocIndex:1},{value:" in the workflow documentation.",paraId:5,tocIndex:1}]},61836:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The double confirmation configuration is used to confirm whether an action should be executed. When an action is clicked, a confirmation dialog will appear. The delete button is enabled by default to prevent accidental operations that could lead to data loss or irreversible results.",paraId:0,tocIndex:1},{value:"It supports custom content and titles for the double confirmation, as well as the ability to retrieve variables.",paraId:1,tocIndex:1}]},689434:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"You can customize the button's name, icon, and background color. You can choose from three color options: default, highlight, or red. When an icon is set, the button can display only the icon.",paraId:0,tocIndex:1}]},592100:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Action linkage rules allow users to dynamically control the attribute of actions (such as Visible, Enabled, Hidden, Disabled) based on specific conditions. By configuring these rules, users can link the behavior of action buttons with the current record, user role, or contextual data. Since version `v1.7.0-beta.19, all buttons support the configuration of linkage rules.",paraId:0,tocIndex:1},{value:"Note",paraId:1,tocIndex:1},{value:": Action linkage rules do not currently support direct linkage with form values. Therefore, it is not allow to perform conditional checks based on fields in the current form (i.e., current form variables are not supported). Currently, operation linkage rules support controlling the visibility, enablement, and disablement of actions based on other contextual data or system variables.",paraId:1,tocIndex:1},{value:"When conditions are met (by default, they pass without conditions), the action will be triggered. Constants and variables can be used in the condition evaluation.",paraId:2,tocIndex:2},{value:"Example: Only orders that are 'pending' can be edited.",paraId:3,tocIndex:3},{value:"Example 1: Disable the delete button for orders with a delivery date later than today.",paraId:4,tocIndex:5},{value:"Example 2: The bulk delete button on the order block table header is only available to the administrator role; other roles cannot perform this action.",paraId:5,tocIndex:5},{value:'Example: The "Add" button in the order details (association block) is enabled only when the order status is "Pending Payment." In other statuses, the button will be disabled.',paraId:6,tocIndex:6},{value:"For more information on variable content, refer to ",paraId:7,tocIndex:6},{value:"Variables",paraId:8,tocIndex:6},{value:".",paraId:7,tocIndex:6},{value:`Planned or In Progress
`,paraId:9,tocIndex:7},{value:"Operation linkage rules support for the current form",paraId:10,tocIndex:7},{value:"For more information on linkage rules, refer to ",paraId:11,tocIndex:7},{value:"Linkage Rules",paraId:12,tocIndex:7}]},790839:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"There are two ways to open a popup: using a drawer or dialog, with the drawer being the default. Drawers are ideal for managing large amounts of information and complex operations, while dialog boxes are better suited for straightforward content or quick actions. The popup can be closed by clicking on the overlay.",paraId:0,tocIndex:1},{value:"drawer",paraId:1,tocIndex:1},{value:"dialog",paraId:2,tocIndex:1}]},135367:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Popups are available in three sizes: Large, Middle, and Small, with Middle being the default. You can adjust the Popup size to match the content.",paraId:0,tocIndex:1}]},15185:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the UI, Actions are represented by buttons that trigger specific commands. These buttons can be directly placed on pages, within dialogs, or inside drawers, and they can also be combined with blocks. The current dynamic configuration options for Actions are primarily used when combined with blocks.",paraId:0,tocIndex:0},{value:"Unlike blocks and fields, the operation designer features only two icons:",paraId:1,tocIndex:2},{value:"Drag",paraId:2,tocIndex:2},{value:"Configuration actions",paraId:2,tocIndex:2},{value:'To reorder buttons, simply hold down the "Drag" icon in the button designer and rearrange the buttons as needed.',paraId:3,tocIndex:3}]},848998:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In NocoBase, operation permissions are mainly divided into two categories:",paraId:0,tocIndex:1},{value:"Collection Resource Permissions",paraId:1,tocIndex:1},{value:": Used to uniformly control the basic operation permissions such as Create, View, Update, and Delete for different roles. These permissions apply to the entire collection under the data source, ensuring that the corresponding operations for the collection are consistent across different pages or pop-ups.",paraId:1,tocIndex:1},{value:"Independent Operation Permissions",paraId:1,tocIndex:1},{value:": Used to fine-tune the control over specific operations for different roles, such as triggering workflows, custom requests, external links, etc. These permissions are for operation-level control, allowing different roles to perform specific operations without affecting the overall collection permission settings.",paraId:1,tocIndex:1},{value:"In NocoBase\u2019s permission system, collection operation permissions are generally classified based on CRUD (Create, Read, Update, Delete) operations to ensure consistency and standardization of permission management. For example:",paraId:2,tocIndex:2},{value:"Create Permission",paraId:3,tocIndex:2},{value:": Controls all actions related to creating data in the collection, such as adding or duplicating data. If a role has the create permission for the collection, the create and duplicate operations will be visible and available in all pages or pop-ups.",paraId:3,tocIndex:2},{value:"Delete Permission",paraId:4,tocIndex:2},{value:": Controls the deletion operation for the collection, including bulk deletion in collection blocks or single record deletion in detail blocks. Permissions remain consistent for all types of deletion actions.",paraId:4,tocIndex:2},{value:"Update Permission",paraId:5,tocIndex:2},{value:": Controls update-related operations, such as editing or modifying records.",paraId:5,tocIndex:2},{value:"View Permission",paraId:6,tocIndex:2},{value:": Controls the visibility of the data in the collection. The relevant data blocks (list, detail, etc.) will only be visible if the role has the view permission for the collection.",paraId:6,tocIndex:2},{value:"This generalized permission management method is suitable for standardized data permission control, ensuring that the same operations on the same collection across different pages, pop-ups, and blocks follow consistent permission rules, making it unified and maintainable.",paraId:7,tocIndex:2},{value:"Global permissions apply to all collections under the data source and are categorized by resource type as shown below:",paraId:8,tocIndex:3},{value:"Specific collection permissions override global permissions and allow more granular control over resource access for individual collections. These permissions are divided into two aspects:",paraId:9,tocIndex:4},{value:"Operation Permissions",paraId:10,tocIndex:4},{value:": These include add, view, edit, delete, export, and import operations. Permissions are configured according to data range dimensions:",paraId:10,tocIndex:4},{value:"All Data",paraId:11,tocIndex:4},{value:": Allows the user to perform operations on all records in the collection.",paraId:11,tocIndex:4},{value:"Own Data",paraId:11,tocIndex:4},{value:": Limits the user to performing operations only on the data they created.",paraId:11,tocIndex:4},{value:"Field Permissions",paraId:12,tocIndex:4},{value:": Field permissions allow configuration of access rights for each field in different operations. For example, some fields may be set to view-only mode and cannot be edited.",paraId:12,tocIndex:4},{value:"Note: This feature is supported starting from v1.6.0-beta.13.",paraId:13,tocIndex:5},{value:"Unlike unified operation permissions, independent operation permissions are applied specifically to individual operations. This allows the same operation to have different permission settings at different locations.",paraId:14,tocIndex:5},{value:"This permission model is ideal for personalized operations, such as:",paraId:15,tocIndex:5},{value:"Triggering Workflows",paraId:16,tocIndex:5},{value:": Workflow triggers might need to be called differently on different pages, and thus require independent permission configuration.",paraId:16,tocIndex:5},{value:"Custom Operations",paraId:16,tocIndex:5},{value:": Specific business logic operations that should be managed independently.",paraId:16,tocIndex:5},{value:"Pop-ups, Links, etc.",paraId:16,tocIndex:5},{value:": These operations can be individually configured for visibility and permissions.",paraId:16,tocIndex:5},{value:"Currently, the following operations support independent permission configuration:",paraId:17,tocIndex:5},{value:"Pop-ups (control visibility and operation permissions of pop-up operations)",paraId:18,tocIndex:5},{value:"Links (restrict whether roles can access external or internal links)",paraId:18,tocIndex:5},{value:"Triggering workflows (allow different workflows to be triggered on different pages)",paraId:18,tocIndex:5},{value:"Operations in the action panel (e.g., scan, pop-up operations, trigger workflows, external links)",paraId:18,tocIndex:5},{value:"Custom Requests (send requests to third-party services)",paraId:18,tocIndex:5},{value:"By configuring independent operation permissions, fine-grained control over the permissions of different roles is possible, making permission management more flexible.",paraId:19,tocIndex:5},{value:"If no roles are set, all roles are visible by default.",paraId:20,tocIndex:5},{value:"Configure Permissions",paraId:21}]},646627:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The add operation is used to add records to the current block's data table. By configuring the form block, you can enter new data records into the current block's data table.",paraId:0,tocIndex:1},{value:"Edit Button",paraId:1,tocIndex:2},{value:"Open Mode",paraId:2,tocIndex:2},{value:"Popup Size",paraId:3,tocIndex:2},{value:"Enable Sub-table (Inherited Table)",paraId:4,tocIndex:2}]},91505:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The "Add Record" feature allows users to seamlessly insert records into any data table as part of an operation.',paraId:0,tocIndex:1},{value:"Select the target data table and add a form block.",paraId:1,tocIndex:1},{value:'This functionality is currently designed for setting default field values in the "Add Record" operation within table blocks.',paraId:2,tocIndex:2},{value:'For example, the Order table and the Product table have a many-to-many relationship. In the Product table block, you can configure the "Add Record" operation to input data into the Order table.',paraId:3,tocIndex:2},{value:'In this case, set the default value of the "Product" relationship field in the Order table to "Table selected records".',paraId:4,tocIndex:2},{value:"Here's the complete operation:",paraId:5,tocIndex:2},{value:"Edit Button",paraId:6,tocIndex:3},{value:"Open Mode",paraId:7,tocIndex:3},{value:"Popup Size",paraId:8,tocIndex:3}]},767989:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The delete operation allows for the removal of data records. This can be done by configuring a row deletion button or utilizing the bulk action button for multiple records at once.",paraId:0,tocIndex:1},{value:"Edit Button",paraId:1,tocIndex:2},{value:"Secondary Confirmation",paraId:2,tocIndex:2},{value:"Refresh data after execution: Enabled by default, this option automatically refreshes the block data once the operation is successfully completed.",paraId:3,tocIndex:2}]},705545:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The edit function is part of the row actions, with the current record serving as its context. It opens in a popup window, allowing users to configure and customize various blocks as needed.",paraId:0,tocIndex:1},{value:"Configure data blocks according to your requirements.",paraId:1,tocIndex:1},{value:"Example: Editing is disabled for orders that have been received.",paraId:2,tocIndex:3},{value:"For more information, see ",paraId:3,tocIndex:3},{value:"Linkage Rule",paraId:4,tocIndex:3},{value:".",paraId:3,tocIndex:3},{value:"Edit Button",paraId:5,tocIndex:3},{value:": Customize the title, color, and icon of the edit button.",paraId:6,tocIndex:3},{value:"Open Mode",paraId:7,tocIndex:3},{value:": Choose between Pop-up or Drawer.",paraId:6,tocIndex:3},{value:"Popup Size",paraId:8,tocIndex:3},{value:": The default size is Middle (available sizes: Large/Middle/Small).",paraId:6,tocIndex:3}]},952197:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Filtering operations are commonly found within data blocks, allowing users to filter data by setting various conditions. It's essential to note that if a data block has a predefined data range, the filtering criteria will be combined with the range conditions to create the final filtering rules.",paraId:0,tocIndex:1},{value:"By default, all fields in the table are enabled, and only enabled fields can be selected from the condition field list.",paraId:1,tocIndex:3},{value:"Fields from related tables can also be used as filterable fields.",paraId:2,tocIndex:3},{value:"Edit Button",paraId:3,tocIndex:3}]},771930:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The link operation, which functions via route navigation, supports the passing of variables. The target page can dynamically adjust its content based on the provided data, making it configurable for use within data blocks.",paraId:0,tocIndex:1},{value:`Example: The author and article tables have a one-to-many relationship. In the author table, you can configure the "View posts" link operation. By clicking this link, the author's ID is passed as a parameter to the article table, allowing the target page to filter the articles based on the specified author's ID.`,paraId:1,tocIndex:4},{value:'When the "Open in new window" option is selected, the link will open in a new window.',paraId:2,tocIndex:5},{value:"Here is a complete configuration example:",paraId:3,tocIndex:5},{value:"Edit Button",paraId:4,tocIndex:5},{value:": Customize the button's title, color, and icon.",paraId:5,tocIndex:5},{value:"Linkage Rule",paraId:6,tocIndex:5},{value:": Dynamically control the button's state.",paraId:5,tocIndex:5}]},184157:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The custom pop-up feature functions much like the view and edit actions. It's part of the table's row buttons and uses the current record as its context. Users can set up multiple pop-up actions within the row operations of a table.",paraId:0,tocIndex:1},{value:"Configure blocks as needed in the pop-up window.",paraId:1,tocIndex:1},{value:"Edit Button",paraId:2,tocIndex:2},{value:": Customize the title, color, and icon of the edit button",paraId:3,tocIndex:2},{value:"Linkage Rule",paraId:4,tocIndex:2},{value:": Dynamically control the button\u2019s state (Visible/Disabled)",paraId:3,tocIndex:2},{value:"Open Mode",paraId:5,tocIndex:2},{value:": Pop-up/Drawer",paraId:3,tocIndex:2},{value:"Pop-up Size",paraId:6,tocIndex:2},{value:": The default size is Middle(Large/Middle/Small)",paraId:3,tocIndex:2}]},172381:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},971590:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The save data operation enables assigning values to fields through field assignment, which takes precedence over any values entered in the form. This operation can be paired with workflows to automate data processes seamlessly.",paraId:0,tocIndex:1},{value:"When field assignment is configured, the assigned value will override any input provided in the form for the same field, ensuring consistency and priority for the predefined value.",paraId:1,tocIndex:3},{value:"For more details, refer to ",paraId:2,tocIndex:3},{value:"Assign Field Values",paraId:3,tocIndex:3},{value:"Edit Button",paraId:4,tocIndex:3},{value:"Secondary Confirmation",paraId:5,tocIndex:3},{value:"After Successful Submission",paraId:6,tocIndex:3},{value:"Bind Workflow",paraId:7,tocIndex:3},{value:"Skip Required Validation",paraId:8,tocIndex:3},{value:"Refresh After Execution",paraId:8,tocIndex:3}]},176289:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The submission function is designed to save form data (unique to form blocks) and can be integrated with workflows to streamline data automation.",paraId:0,tocIndex:1},{value:"The submission operation for form blocks that only add new data supports configuring the save method.",paraId:1,tocIndex:3},{value:"Insert and create new records directly;",paraId:2,tocIndex:3},{value:"Insert only if the record doesn't exist (requires fields to determine the record\u2019s existence);",paraId:2,tocIndex:3},{value:"Insert if the record doesn't exist, otherwise update (requires fields to check for existing records).",paraId:2,tocIndex:3},{value:"The bound workflow will only be triggered once the data has been successfully submitted.",paraId:3,tocIndex:4},{value:"For further details, see ",paraId:4,tocIndex:4},{value:"Bind Workflows",paraId:5,tocIndex:4},{value:".",paraId:4,tocIndex:4},{value:"Edit Button",paraId:6,tocIndex:4},{value:"Secondary Confirmation",paraId:7,tocIndex:4}]},706740:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"According to the context type configured in the workflow, the configuration of action buttons in different blocks will also differ.",paraId:0},{value:"v.1.6.0+",paraId:1,tocIndex:1},{value:'In the action panel and other data blocks, you can add a "Trigger Workflow" button:',paraId:2,tocIndex:1},{value:'After added, bind the previously created workflow with context type set to "None", as an example of the button in the action panel:',paraId:3,tocIndex:1},{value:'Within any data block, you have the option to add a "Trigger Workflow" button to the action bar for individual rows of data, whether in forms, tables, or detail pages:',paraId:4,tocIndex:2},{value:"Once the button is added, you can link it to the workflow you previously created:",paraId:5,tocIndex:2},{value:"Afterward, simply clicking this button will initiate the custom action event:",paraId:6,tocIndex:2},{value:"v.1.6.0+",paraId:7,tocIndex:3},{value:'In the action bar of the table block, when adding a "Trigger Workflow" button, there will be an additional option to select the context type as "None" or "Multiple Records":',paraId:8,tocIndex:3},{value:'When selecting "None", it is a global event, and only workflows with context type set to "None" can be bound.',paraId:9,tocIndex:3},{value:'When selecting "Multiple Records", you can bind workflows of the multiple records type, which can be used for batch operations after selecting multiple records (currently only supported in tables). The available workflows are limited to those configured to match the collection of the current data block:',paraId:10,tocIndex:3},{value:"When clicking the button to trigger, you must have already selected some data rows in the table, otherwise the workflow will not be triggered:",paraId:11,tocIndex:3}]},803636:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom row operations enable data updates by configuring field assignments and setting precise update logic for each field.",paraId:0,tocIndex:1},{value:"Example: The button is hidden when the bill status is cancelled.",paraId:1,tocIndex:3},{value:"For more details, see ",paraId:2,tocIndex:3},{value:"Linkage Rule",paraId:3,tocIndex:3},{value:".",paraId:2,tocIndex:3},{value:"Example: Update the receipt time in the current record to reflect the current time.",paraId:4,tocIndex:4},{value:"For more information, refer to ",paraId:5,tocIndex:4},{value:"Assign Field Values",paraId:6,tocIndex:4},{value:".",paraId:5,tocIndex:4},{value:"Edit Button",paraId:7,tocIndex:4},{value:"Secondary Confirmation",paraId:8,tocIndex:4},{value:"After Successful Submission",paraId:9,tocIndex:4},{value:"Bind Workflows",paraId:10,tocIndex:4},{value:"Refresh the data after the execution",paraId:11,tocIndex:4}]},246090:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The "View" operation is a row-level button, utilizing the current record as its context. Displayed within a pop-up window, it offers users the ability to customize configuration blocks, enhancing flexibility in the interface.',paraId:0,tocIndex:1},{value:"Edit Button",paraId:1,tocIndex:2},{value:"Linkage Rule",paraId:2,tocIndex:2},{value:"Open Mode",paraId:3,tocIndex:2},{value:"Popup Size",paraId:4,tocIndex:2}]},329313:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Deleting a block from the current page is an irreversible action.",paraId:0,tocIndex:1}]},706906:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Block height settings in NocoBase accommodate three scenarios: default height, specified height, and full height. This feature is supported by most blocks, with the exception of Gantt chart blocks. For chart blocks, height is controlled through specific parameters.",paraId:0,tocIndex:1},{value:"Each block type handles default height uniquely. For instance, table and form blocks dynamically adjust their height to fit the content, while kanban blocks default to 70% of the viewport height.",paraId:1,tocIndex:2},{value:"Users have the flexibility to define the overall height of a block's outer frame. The block's internal components then automatically calculate and distribute the available space.",paraId:2,tocIndex:3},{value:"The full height mode, akin to specified height, automatically determines and allocates block height based on the window's visible area. This approach eliminates page-level scrollbars, confining them to the interior of individual blocks.",paraId:3,tocIndex:4},{value:"Height handling varies subtly across different block types:",paraId:4,tocIndex:4},{value:"Tables: Scrolling occurs within the tbody;",paraId:5,tocIndex:4},{value:"Forms/Details: The Grid area scrolls, excluding the operations section;",paraId:5,tocIndex:4},{value:"Lists/Grid Cards: The Grid area scrolls, excluding operations and pagination;",paraId:5,tocIndex:4},{value:"Kanban: Each column scrolls independently;",paraId:5,tocIndex:4},{value:"Maps and Calendars: Adapt to full height without scrollbars;",paraId:5,tocIndex:4},{value:"Iframes/Markdown: The block's outer frame height is fixed, with scrolling inside the block.",paraId:5,tocIndex:4}]},334338:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The version of NocoBase needs to be v1.3.34-beta or above.",paraId:0},{value:"Form components, such as form blocks, detail blocks, and list blocks, support layout settings. The layout options include vertical layout (where labels and input fields are arranged in separate rows) and horizontal layout (where labels and input fields are placed side by side). This flexible layout choice can optimize the user experience based on specific needs, ensuring that information input is both clear and efficient.",paraId:1,tocIndex:1},{value:"Subforms and subform (popup) also support layout configuration, with the default layout set to vertical.",paraId:2,tocIndex:2},{value:"Horizontal layout places labels and input fields side by side, making better use of space.",paraId:3,tocIndex:3},{value:"The main form uses a vertical layout, while the subform uses a horizontal layout.",paraId:4,tocIndex:3}]},120086:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Note",paraId:0,tocIndex:0},{value:": This feature is supported starting from v1.7.0-beta.24.",paraId:0,tocIndex:0},{value:"Block linkage rules allow users to dynamically control the visibility of blocks, enabling the management of element display at the block level. As containers for fields and action buttons, blocks enable users to flexibly control the visibility of the entire view from the block's perspective.",paraId:1,tocIndex:1},{value:"Note",paraId:2,tocIndex:1},{value:": Before executing the block linkage rules, the block's visibility must first pass through ",paraId:2,tocIndex:1},{value:"ACL permission checks",paraId:2,tocIndex:1},{value:". Only when the user has the corresponding access rights can the block linkage rule logic be applied. In other words, the block linkage rules take effect only after the ACL view permission requirements are met. Without any block linkage rules, the block is displayed by default.",paraId:2,tocIndex:1},{value:"Block linkage rules support controlling the display of blocks through global variables. For example, different roles may have view permissions for the same order collection, but the content they can view can be personalized and differentiated. By configuring the fields and actions  displayed in the block according to the role's permissions, flexible data display and action permissions control can be achieved.",paraId:3,tocIndex:2},{value:"Data Scope",paraId:4,tocIndex:3},{value:': Can only view orders with the status "Pending Shipment" and hide sensitive data such as payment information and discount customer data.',paraId:4,tocIndex:3},{value:"Actions",paraId:5,tocIndex:3},{value:":",paraId:5,tocIndex:3},{value:"View Order Details",paraId:6,tocIndex:3},{value:"Process Returns/Exchanges",paraId:6,tocIndex:3},{value:"Generate Refund Request",paraId:6,tocIndex:3},{value:"Viewable Fields",paraId:7,tocIndex:3},{value:": OrderNumber, OrderDate, OrderStatus, ShippingAddress (excluding sensitive fields like TotalAmount, Discount, Customers, etc.).",paraId:7,tocIndex:3},{value:"Data Scope",paraId:8,tocIndex:4},{value:': Can only view orders with the status "Paid" or "Refunding" and does not need to view product details or customer information.',paraId:8,tocIndex:4},{value:"Actions",paraId:9,tocIndex:4},{value:":",paraId:9,tocIndex:4},{value:"Audit Refund",paraId:10,tocIndex:4},{value:"Generate Invoice",paraId:10,tocIndex:4},{value:"Viewable Fields",paraId:11,tocIndex:4},{value:": OrderNumber, OrderDate, OrderStatus, ShippingAddress, TotalAmount (excluding sensitive fields like Items, Customers, etc.).",paraId:11,tocIndex:4},{value:'Blocks can also be controlled by variables in the context. For example, you can use "current record", "current form", or "current popup record" context variables to dynamically show blocks.',paraId:12,tocIndex:5},{value:'Example: The "Shipping Information" block will only be displayed when the order status is "Shipped".',paraId:13,tocIndex:5},{value:`Example: Configure Markdown to display tracking information in the details block.
`,paraId:14,tocIndex:6},{value:`
The Markdown information will only be displayed when the order status is "Shipped".
`,paraId:15,tocIndex:6},{value:`The effect is as follows:
`,paraId:16,tocIndex:6},{value:"For more details on linkage rules, refer to ",paraId:17,tocIndex:6},{value:"Linkage Rules",paraId:18,tocIndex:6},{value:".",paraId:17,tocIndex:6}]},116081:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom block title.",paraId:0,tocIndex:1}]},362760:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Connecting data blocks is a powerful feature that enables dynamic filtering linkage between different data components. At its core, this functionality involves establishing a relationship between two collections: a source collection (primary collection) and a target collection (foreign key collection). This connection facilitates seamless data filtering and interaction.",paraId:0,tocIndex:1},{value:"The options for connecting blocks are versatile, including:",paraId:1,tocIndex:1},{value:"Data blocks from the same collection on the current page or pop-up window",paraId:2,tocIndex:1},{value:"Blocks from different collections with foreign key constraints",paraId:2,tocIndex:1},{value:"Blocks from collections with inheritance relationships",paraId:2,tocIndex:1},{value:"Users can connect multiple blocks simultaneously, enhancing the flexibility of data interactions. Regardless of the chosen method, the underlying principle remains consistent: the source collection (actively connecting collection) supplies filter parameters to the target collection (connected collection), enabling precise data filtering and display.",paraId:3,tocIndex:1},{value:"Example: Creating a dynamic linkage between an order collection block and its corresponding order details block.",paraId:4,tocIndex:5},{value:`
 `,paraId:5},{value:`
      `,paraId:5},{value:`
 `,paraId:5},{value:"Example: Leveraging the many-to-one relationship between the order collection and customer collection to implement filtering linkage. This setup allows users to query order data for a specific customer by creating a connection between the customer collection block and the order collection block.",paraId:6,tocIndex:6},{value:`
 `,paraId:5},{value:`
      `,paraId:5},{value:`
 `,paraId:5}]},640484:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data scope is a powerful feature that allows users to define default filtering conditions for data blocks. This functionality enables users to dynamically adjust the scope of displayed data, tailoring it to their specific needs and enhancing the overall user experience.",paraId:0,tocIndex:1},{value:"Filter fields support selecting fields from the current table, as well as from related tables (up to three levels of relationships).",paraId:1,tocIndex:2},{value:'Different field types support various operators. For instance, text fields support operators such as "equals," "not equals," and "contains." Numeric fields allow for operators like "greater than" and "less than," while date fields offer options such as "within a range" or "before a specific date."',paraId:2,tocIndex:3},{value:'Example: Setting an Order "Status" to "Shipped".',paraId:3,tocIndex:4},{value:`
 `,paraId:4},{value:`
      `,paraId:4},{value:'Example: "Delivery Date" is earlier than "yesterday."',paraId:5,tocIndex:5},{value:`
      `,paraId:4},{value:"For more information about variables, refer to ",paraId:6,tocIndex:5},{value:"Variables",paraId:7,tocIndex:5},{value:".",paraId:6,tocIndex:5}]},50096:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Field linkage rules refer to the ability to dynamically adjust the attributes of fields in a form/detail block based on user actions. Currently, the blocks that support field linkage rules include:",paraId:0,tocIndex:1},{value:"Form Block",paraId:1,tocIndex:1},{value:"Detail Block",paraId:2,tocIndex:1},{value:"Sub-form",paraId:3,tocIndex:1},{value:" (requires v1.3.17-beta or higher)",paraId:4,tocIndex:1},{value:"Sub-table",paraId:5,tocIndex:1},{value:" (requires v1.3.17-beta or higher)",paraId:4,tocIndex:1},{value:"Form Block",paraId:6},{value:"In form blocks, linkage rules can dynamically adjust field attributes based on specific conditions:",paraId:7,tocIndex:3},{value:"Control Field Visibility/Hidden",paraId:8,tocIndex:3},{value:": Determine whether the current field is displayed based on the value of other fields.",paraId:8,tocIndex:3},{value:"Set Field as Required",paraId:8,tocIndex:3},{value:": Dynamically set a field as required or optional based on specific conditions.",paraId:8,tocIndex:3},{value:"Assign Values",paraId:8,tocIndex:3},{value:": Automatically assign values to fields based on conditions.",paraId:8,tocIndex:3},{value:"Configure Field Options",paraId:8,tocIndex:3},{value:": Dynamically update the available options in dropdowns based on other fields in the form.",paraId:8,tocIndex:3},{value:"Limit Date Scope for Datetime Fields",paraId:8,tocIndex:3},{value:": In dateTime fields, limit the selectable date scope based on the values of other fields.",paraId:8,tocIndex:3},{value:"Detail Block",paraId:6},{value:"In detail blocks, linkage rules are mainly used to dynamically control the visibility and hiding of fields in the detail block.",paraId:9,tocIndex:4},{value:'Example: When an order is checked as a supplementary order, the order status is automatically set to "Pending Review."',paraId:10,tocIndex:6},{value:'Example: When the order status is "Pending Payment", the order amount is required.',paraId:11,tocIndex:7},{value:'Example: The payment method is displayed only when the order status is "Pending Payment."',paraId:12,tocIndex:8},{value:"Note",paraId:13,tocIndex:9},{value:": This feature is supported starting from version ",paraId:13,tocIndex:9},{value:"v1.7.0-beta.2",paraId:13,tocIndex:9},{value:".",paraId:13,tocIndex:9},{value:"It supports dynamically configuring options for fields like ",paraId:14,tocIndex:9},{value:"select",paraId:14,tocIndex:9},{value:", ",paraId:14,tocIndex:9},{value:"radioGroup",paraId:14,tocIndex:9},{value:", ",paraId:14,tocIndex:9},{value:"multipleSelect",paraId:14,tocIndex:9},{value:", ",paraId:14,tocIndex:9},{value:"checkboxGroup",paraId:14,tocIndex:9},{value:", etc. The available options can be linked to the changes in other fields in the form.",paraId:14,tocIndex:9},{value:'Example: "Installment Payment" is available only when the order amount is greater than 10,000.',paraId:15,tocIndex:9},{value:"Linkage effect as shown below:",paraId:16,tocIndex:9},{value:`
      `,paraId:6},{value:"Note",paraId:17,tocIndex:10},{value:": This feature is supported starting from version ",paraId:17,tocIndex:10},{value:"v1.7.0-beta.2",paraId:17,tocIndex:10},{value:".",paraId:17,tocIndex:10},{value:"It supports dynamically configuring date scope for fields such as ",paraId:18,tocIndex:10},{value:"date",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"datetime",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"dateOnly",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"datetimeNoTz",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"unixTimestamp",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"createdAt",paraId:18,tocIndex:10},{value:", ",paraId:18,tocIndex:10},{value:"updatedAt",paraId:18,tocIndex:10},{value:", etc. The selectable date scope can automatically adjust based on changes in other fields in the form.",paraId:18,tocIndex:10},{value:"Example: After selecting the order date, the delivery date cannot be earlier than the order date.",paraId:19,tocIndex:10},{value:"Example: The delivery date cannot be earlier than today and cannot be later than the order deadline.",paraId:20,tocIndex:10},{value:"For more information on linkage rules, refer to ",paraId:21,tocIndex:10},{value:"Linkage Rules",paraId:22,tocIndex:10},{value:".",paraId:21,tocIndex:10}]},272972:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The default data loading method is "Load all data when filter criteria are empty." The "filter criteria" refers to the values in the ',paraId:0,tocIndex:1},{value:"Filter Block",paraId:0,tocIndex:1},{value:'. Another option is "Do not load data when filter criteria are empty."',paraId:0,tocIndex:1}]},287357:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Configuring sort rules allows you to define default sorting criteria for data blocks, ensuring that the information within each block is presented in a specific, predetermined order.",paraId:0,tocIndex:1},{value:"At present, the system only supports sorting based on fields within the current table.",paraId:1,tocIndex:2},{value:"This feature is ideal for complex sorting scenarios. For instance, you might want to first organize data by order status, and then arrange items within each status category according to their delivery time.",paraId:2,tocIndex:4}]},579190:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The detail block is used to display the value of each field for each data record in detail. It supports flexible field layouts and comes with various data operation features.",paraId:0,tocIndex:1},{value:`
      `,paraId:1},{value:"Example: Display only orders that have been shipped.",paraId:2,tocIndex:4},{value:"For more details, refer to ",paraId:3,tocIndex:4},{value:"Set Data Scope",paraId:4,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"For more details, refer to ",paraId:5,tocIndex:5},{value:"Sorting Rules",paraId:6,tocIndex:5},{value:".",paraId:5,tocIndex:5},{value:"Set Data Loading Mode",paraId:7,tocIndex:5},{value:"Save as Block Template",paraId:8,tocIndex:5},{value:"Linkage rules in detail blocks support dynamically setting field visibility.",paraId:9,tocIndex:6},{value:"Example: Hide the delivery date if the receiving date is earlier than the delivery date.",paraId:10,tocIndex:6},{value:"For more details, refer to ",paraId:11,tocIndex:6},{value:"Linkage Rules",paraId:12,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:'Example: Set the order detail block to "full-height" mode.',paraId:13,tocIndex:7},{value:"For more details, refer to ",paraId:14,tocIndex:7},{value:"Block Height",paraId:15,tocIndex:7},{value:".",paraId:14,tocIndex:7},{value:"![202404172",paraId:16,tocIndex:9}]},68380:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The form block is an essential block for building data input and editing interfaces. It is highly customizable and uses corresponding components based on the data model to display the required fields. Through linkage rules, the form block can dynamically display fields. Additionally, it can be combined with workflows to achieve automated process triggering and data processing, further enhancing work efficiency or implementing logical orchestration.",paraId:0,tocIndex:1},{value:`
      `,paraId:1},{value:"Control form field behavior through linkage rules.",paraId:2,tocIndex:4},{value:"For more information, refer to ",paraId:3,tocIndex:4},{value:"Linkage Rules",paraId:4,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"The purpose of the form data templates is to simplify the data entry process and improve efficiency. By filtering out a single piece or a group of records as a template from the data range, the selected target data template will be populated as the default values in the form.",paraId:5,tocIndex:5},{value:"Filter out a single piece or a group of records as template data.",paraId:6,tocIndex:5},{value:"Select the title field to identify the template data.",paraId:6,tocIndex:5},{value:"Check the template fields, and the selected fields will be automatically populated into the form.",paraId:6,tocIndex:5},{value:"Automatically parse the configured fields in the current form block as template fields.",paraId:7,tocIndex:6},{value:"If there are subsequent modifications to the form block fields (such as adjustments to association field components), you can reopen the template configuration and click the sync form button to ensure consistency between the form and the template.",paraId:7,tocIndex:6},{value:"Primary Key",paraId:8,tocIndex:7},{value:"Foreign Key",paraId:8,tocIndex:7},{value:"Fields disallowing duplicates",paraId:8,tocIndex:7},{value:"Sort fields",paraId:8,tocIndex:7},{value:"Sequence fields",paraId:8,tocIndex:7},{value:"Password",paraId:8,tocIndex:7},{value:"Created by",paraId:8,tocIndex:7},{value:"Created at",paraId:8,tocIndex:7},{value:"Last updated by",paraId:8,tocIndex:7},{value:"Last updated at",paraId:8,tocIndex:7},{value:"Regular fields and hasOne and hasMany relationship fields are copied.",paraId:9,tocIndex:8},{value:"belongsTo and belongsToMany relationship fields are referenced, and references may become copies. For example, after changing from select to sub-form, the relationship changes from reference to copy (after becoming a copy, all fields are optional).",paraId:9,tocIndex:8},{value:"Scenario Description: An e-commerce platform needs to frequently add new products, and these new products are similar or identical to existing products in many attributes.",paraId:10,tocIndex:9},{value:"Solution: Select an existing product as a template and use its attribute information as the form data template. When creating a new product, users can choose to apply this template, thus quickly copying the attribute information of the template product to the new product, improving the efficiency of entering new products.",paraId:11,tocIndex:9},{value:"Create a product promotion template",paraId:12,tocIndex:9},{value:"Create promotional products quickly",paraId:13,tocIndex:9},{value:`
      `,paraId:1},{value:"Edit Block Title",paraId:14,tocIndex:9},{value:"Save as Block Template",paraId:15,tocIndex:9},{value:"Fields in related tables are read-only in the form and are typically used in conjunction with relationship fields to display multiple field values of related data.",paraId:16,tocIndex:12},{value:`
      `,paraId:1},{value:"Form field configuration options can be found in ",paraId:17,tocIndex:12},{value:"Form Fields",paraId:18,tocIndex:12},{value:".",paraId:17,tocIndex:12},{value:"Submit",paraId:19,tocIndex:13},{value:"Save Data",paraId:20,tocIndex:13},{value:"Custom Request",paraId:21,tocIndex:13},{value:"Trigger workflow",paraId:22,tocIndex:13}]},327230:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Grid Card block offers a concise and visually appealing way to display summary information of data records. Designed for flexibility, it allows you to configure the number of columns based on screen size, ensuring a seamless user experience across all devices.",paraId:0,tocIndex:1},{value:`
      `,paraId:1},{value:`
      `,paraId:1},{value:"For a detailed guide, see ",paraId:2,tocIndex:4},{value:"Setting the Data Scope",paraId:3,tocIndex:4},{value:".",paraId:2,tocIndex:4},{value:"You can adjust the number of columns to fit different screen sizes, ensuring optimal display.",paraId:4,tocIndex:5},{value:"Example: Connecting data blocks and setting the appropriate data loading method.",paraId:5,tocIndex:6},{value:'The Orders table and Products table have a many-to-many relationship. The Orders Table block and Products Grid Card block can be linked to enable data filtering. In this setup, the grid block\u2019s data loading method is configured to load "After Filtering Data."',paraId:6,tocIndex:6},{value:'Example: Configure the Orders Grid Card block to display in "Full Height" mode for an expansive view.',paraId:7,tocIndex:7},{value:"For more details, refer to ",paraId:8,tocIndex:7},{value:"Block Height",paraId:9,tocIndex:7},{value:".",paraId:8,tocIndex:7},{value:"Setting Sorting Rules",paraId:10,tocIndex:7},{value:"Saving as a Block Template",paraId:11,tocIndex:7},{value:"For a comprehensive guide to field configuration options for the Grid Card block, see ",paraId:12,tocIndex:10},{value:"Detail Fields",paraId:13,tocIndex:10},{value:".",paraId:12,tocIndex:10},{value:"Filter",paraId:14,tocIndex:12},{value:"Add",paraId:15,tocIndex:12},{value:"Delete",paraId:16,tocIndex:12},{value:"Refresh",paraId:17,tocIndex:12},{value:"Import",paraId:18,tocIndex:12},{value:"Export",paraId:19,tocIndex:12},{value:"Edit",paraId:20,tocIndex:13},{value:"Delete",paraId:21,tocIndex:13},{value:"Pop-up",paraId:22,tocIndex:13},{value:"Update Record",paraId:23,tocIndex:13},{value:"Custom Request",paraId:24,tocIndex:13},{value:"Trigger Workflow",paraId:25,tocIndex:13}]},46462:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The list block displays data in a list format, suitable for scenarios such as task lists, news updates, product information, and other data presentation needs.",paraId:0,tocIndex:1},{value:`
      `,paraId:1},{value:'As shown in the image: The default filter selects orders with a "Refunded" status.',paraId:2,tocIndex:4},{value:"For more details, refer to ",paraId:3,tocIndex:4},{value:"Setting Data Scope",paraId:4,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"As shown in the image: Orders are sorted in descending order by order amount.",paraId:5,tocIndex:5},{value:"For more details, refer to ",paraId:6,tocIndex:5},{value:"Setting Sorting Rules",paraId:7,tocIndex:5},{value:".",paraId:6,tocIndex:5},{value:"Typically used in conjunction with the filter block to load data only when filtered.",paraId:8,tocIndex:6},{value:`
      `,paraId:1},{value:"For more details, refer to ",paraId:9,tocIndex:6},{value:"Setting Data Loading Method",paraId:10,tocIndex:6},{value:".",paraId:9,tocIndex:6},{value:'Example: Set the height of the order list block to "Full Height" mode.',paraId:11,tocIndex:7},{value:"For more details, refer to ",paraId:12,tocIndex:7},{value:"Block Height",paraId:13,tocIndex:7},{value:".",paraId:12,tocIndex:7},{value:"Edit Block Title",paraId:14,tocIndex:7},{value:"Save as Block Template",paraId:15,tocIndex:7},{value:"For more details on configuring list fields, refer to ",paraId:16,tocIndex:10},{value:"Detail Fields",paraId:17,tocIndex:10},{value:".",paraId:16,tocIndex:10},{value:"Filter",paraId:18,tocIndex:12},{value:"Add New",paraId:19,tocIndex:12},{value:"Refresh",paraId:20,tocIndex:12},{value:"Import",paraId:21,tocIndex:12},{value:"Export",paraId:22,tocIndex:12},{value:"View",paraId:23,tocIndex:13},{value:"Edit",paraId:24,tocIndex:13},{value:"Delete",paraId:25,tocIndex:13},{value:"Pop-Up",paraId:26,tocIndex:13},{value:"Update Record",paraId:27,tocIndex:13},{value:"Custom Request",paraId:28,tocIndex:13}]},924068:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The table block is one of the core data blocks built into NocoBase, displaying and managing structured data in table form. It features flexible configuration options for customizing table columns, column widths, sorting rules, data scope, and includes various built-in actions for configuration: filter, add new, duplicate, edit, delete, etc.",paraId:0,tocIndex:1},{value:`
 `,paraId:1},{value:`
      `,paraId:1},{value:'Example: Default filter for invoices with the "Shipped" status.',paraId:2,tocIndex:4},{value:"For more information, refer to ",paraId:3,tocIndex:4},{value:"Setting Data Scope",paraId:4,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"Example: Display invoices in reverse order by shipping date.",paraId:5,tocIndex:5},{value:"For more information, refer to ",paraId:6,tocIndex:5},{value:"Setting Sorting Rule",paraId:7,tocIndex:5},{value:".",paraId:6,tocIndex:5},{value:"Example: Connect the order table block with the order details block to achieve filter linkage.",paraId:8,tocIndex:6},{value:`
  `,paraId:1},{value:`
      `,paraId:1},{value:"For more information, refer to ",paraId:9,tocIndex:6},{value:"Connecting Data Blocks",paraId:10,tocIndex:6},{value:".",paraId:9,tocIndex:6},{value:"Edit Block Title",paraId:11,tocIndex:6},{value:"Set Data Loading Mode",paraId:12,tocIndex:6},{value:"Save as Block Template",paraId:13,tocIndex:6},{value:"Example: Lease order table inherits from the order table.",paraId:14,tocIndex:10},{value:"Configuration options for table column fields can be found in ",paraId:15,tocIndex:10},{value:"Table Column Fields",paraId:16,tocIndex:10},{value:".",paraId:15,tocIndex:10},{value:"Filter",paraId:17,tocIndex:12},{value:"Add",paraId:18,tocIndex:12},{value:"Delete",paraId:19,tocIndex:12},{value:"Refresh",paraId:20,tocIndex:12},{value:"Import",paraId:21,tocIndex:12},{value:"Export",paraId:22,tocIndex:12},{value:"Add record",paraId:23,tocIndex:12},{value:"Bulk Update",paraId:24,tocIndex:12},{value:"Bulk Edit",paraId:25,tocIndex:12},{value:"View",paraId:26,tocIndex:13},{value:"Edit",paraId:27,tocIndex:13},{value:"Duplicate",paraId:28,tocIndex:13},{value:"Delete",paraId:29,tocIndex:13},{value:"Popup",paraId:30,tocIndex:13},{value:"Update Record",paraId:31,tocIndex:13},{value:"Custom Request",paraId:32,tocIndex:13}]},874088:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Collapse filtering block needs to be used in connection with the data block to provide filtering capabilities for the data block. It supports selecting association fields and option fields as filtering fields, and displays them in a collapsible panel effect.",paraId:0,tocIndex:1},{value:"Example: Configure the order collapse block and order table block to achieve filter linkage.",paraId:1,tocIndex:2},{value:`
  `,paraId:2},{value:`
      `,paraId:2},{value:`
    `,paraId:2},{value:"Example: Connect the same data table block in the pop-up window to achieve filter linkage.",paraId:3,tocIndex:4},{value:`
  `,paraId:2},{value:`
      `,paraId:2},{value:`
    `,paraId:2},{value:"For more content, refer to ",paraId:4,tocIndex:4},{value:"Connecting Data Blocks",paraId:5,tocIndex:4},{value:"Edit Block Title",paraId:6,tocIndex:4},{value:"Save as Block Template",paraId:7,tocIndex:4},{value:"Only relational fields and option fields are supported as filter fields.",paraId:8,tocIndex:5}]},563066:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Form filter block can be connected with the data block. Once connected, it can provide filtering capabilities.",paraId:0,tocIndex:1},{value:`
  `,paraId:1},{value:`
      `,paraId:1},{value:`
    `,paraId:1},{value:"Example: The Form filter block connects to the details data block to implement linkage.",paraId:2,tocIndex:4},{value:`
  `,paraId:1},{value:`
      `,paraId:1},{value:`
    `,paraId:1},{value:"For more content, refer to ",paraId:3,tocIndex:4},{value:"Connect to Data Block",paraId:4,tocIndex:4},{value:"Edit Block Title",paraId:5,tocIndex:4},{value:"Linkage Rules",paraId:6,tocIndex:4},{value:"Save as Block Template",paraId:7,tocIndex:4},{value:'In version v1.3.14-beta and above, it supports configuring "many-to-many" and "one-to-many" relationship fields.',paraId:8,tocIndex:7},{value:"Supports using the fields of the related collections as filtering conditions",paraId:9,tocIndex:7},{value:'Example: The order collection has a many-to-one relationship field "Customer", filter the orders by customer name and phone number as filtering conditions',paraId:10,tocIndex:7},{value:"Like a normal ",paraId:11,tocIndex:8},{value:"Form Block",paraId:12,tocIndex:8},{value:", you can set default values for normal fields and relationship fields. ",paraId:11,tocIndex:8},{value:"When a field has a default value, a filtering operation will be automatically triggered at the first rendering of the page, so that the data block connected with it can display the matching data.",paraId:11,tocIndex:8},{value:'By default, clicking the "Reset" button will preserve the default values of the fields. If you want to clear the default values of the fields, you can open the configuration options and enable the "Clear Default Values" option.',paraId:13,tocIndex:10}]},38816:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Blocks are carriers of data and content. They can be placed in a Page, a Modal dialog, or a Drawer, and multiple blocks can be freely dragged and arranged.",paraId:0,tocIndex:0},{value:"Data Blocks: Used to display data from the data sources on the interface.",paraId:1,tocIndex:1},{value:"Filter Blocks: Used to use data from the data sources as filtering criteria for other data blocks.",paraId:1,tocIndex:1},{value:"Other Blocks: Used to contain specific or independent content such as workflow tasks, audit logs, Markdown, etc.",paraId:1,tocIndex:1},{value:"Blocks can be placed in a Page, Modal dialog, or Drawer.",paraId:2,tocIndex:2},{value:"Currently, the types of blocks in a page include: Data Blocks, Filter Blocks, and Other Blocks.",paraId:3,tocIndex:3},{value:"Popups come in two forms: Modals and Drawers, and, like pages, can also have blocks added to them. The difference is that blocks in popups are generally used for adding, editing, or viewing individual records. The types of blocks include Data Blocks and Other Blocks.",paraId:4,tocIndex:4},{value:"Every block has three small icons in the upper right corner, from left to right they are:",paraId:5,tocIndex:5},{value:"Drag Layout",paraId:6,tocIndex:5},{value:"Quick Add Block",paraId:6,tocIndex:5},{value:"Block Configuration",paraId:6,tocIndex:5},{value:'Simple blocks have all their configuration items concentrated in "Block Configuration," such as Markdown.',paraId:7,tocIndex:5},{value:'Complex data type blocks will also provide separate embedded "Configure Fields" and "Configure Actions".',paraId:8,tocIndex:5},{value:"Besides, there is also the potential for more nested possibilities, such as Chart Blocks.",paraId:9,tocIndex:5},{value:"Multiple blocks can adjust the layout by dragging.",paraId:10,tocIndex:6}]},402848:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Markdown blocks can be used without binding to a data source. They are defined using Markdown syntax and are suitable for displaying formatted text content.",paraId:0,tocIndex:1},{value:"Markdown blocks can be added within pages or pop-ups.",paraId:1,tocIndex:2},{value:"Inline Markdown blocks can also be added within form blocks and details blocks.",paraId:2,tocIndex:2},{value:"Use {{xxx}} for interpolation.",paraId:3,tocIndex:4},{value:"Support using rich syntax such as conditions and loops to dynamically generate HTML content.",paraId:4,tocIndex:5},{value:"For more information, refer to ",paraId:5,tocIndex:5},{value:"Handlebars template",paraId:6,tocIndex:5},{value:"Variables supported in Markdown vary depending on the location.",paraId:7,tocIndex:6},{value:"Markdown on the page supports common system variables, such as the current user, current role, date variables, etc.",paraId:8,tocIndex:6},{value:"Markdown in block row operation popups (or subpages) supports more data context variables, such as the current record, current popup record, etc.",paraId:9,tocIndex:6},{value:"For example, order/shipment (one-to-one).",paraId:10,tocIndex:7},{value:"Use the 'current popup record' variable in the detail operation popup's Markdown block to display the shipping number of the current order.",paraId:11,tocIndex:7},{value:"After configuring the 'Shipment' association field in the order table block, the Markdown block in the detail operation (using Handlebars) will be able to access and render the association data.",paraId:12,tocIndex:9},{value:"In addition to the difference in association data preloading, there are also syntax rule differences between the two templates. For example, when using variables with a to-many association, the retrieved data is usually an array. The two templates handle array-type data differently.",paraId:13,tocIndex:10},{value:"For example, order/product (many-to-many)",paraId:14,tocIndex:10},{value:"Use the 'current popup record' variable in the detail operation popup's Markdown block to display the names of the products associated with the current order (multiple items).",paraId:15,tocIndex:10},{value:"The related data to be used must be configured in the data block",paraId:16,tocIndex:12},{value:`
<ul>
  {{#each   $nPopupRecord.products }}
    <li>{{this.product_name}}</li>
  {{/each}}
</ul>
`,paraId:17,tocIndex:12},{value:"For more introductions to variables, check out the ",paraId:18,tocIndex:12},{value:"Edit UI / Variables",paraId:19,tocIndex:12},{value:" section.",paraId:18,tocIndex:12},{value:"Supported in version 1.7.6 and later.",paraId:20,tocIndex:13},{value:"Markdown content now supports localization. You can use the ",paraId:21,tocIndex:13},{value:"{{t 'xxx'}}",paraId:21,tocIndex:13},{value:" syntax to insert multilingual text (make sure the ",paraId:21,tocIndex:13},{value:"Localization",paraId:21,tocIndex:13},{value:" plugin is enabled), and configure the corresponding translations in the Localization Management panel.",paraId:21,tocIndex:13},{value:"Translations can be added and managed in the Localization panel. After configuring, don't forget to publish the changes.",paraId:22,tocIndex:13},{value:"Markdown also supports the configuration of QR codes, which can be used in combination with variables.",paraId:23,tocIndex:14},{value:`<qr-code value="https://www.nocobase.com/" type="svg"></qr-code>
`,paraId:24,tocIndex:14},{value:`Planned or in progress
`,paraId:25,tocIndex:15},{value:"Handlebars supports association data preloading.",paraId:26,tocIndex:15}]},811246:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the data details pop-up for a submitted item, an approval block can be configured to display the corresponding approval records and provide entry points for processing:",paraId:0,tocIndex:1},{value:"The approval block displays basic application information and approval history. The initiator can view the details of their submitted application within the pop-up. If retraction is enabled and the process is in the first approval node but has not yet been processed by any approver, the initiator can withdraw the application:",paraId:1,tocIndex:2},{value:"If the initiator withdraws the application, the withdrawal record will be displayed in the approval block. Clicking on it will reopen the application pop-up:",paraId:2,tocIndex:2},{value:"The pop-up content remains the same as before, allowing the initiator to make modifications and resubmit:",paraId:3,tocIndex:2},{value:'Approvers can also review the approval content through this block. In the processing history, if the logged-in user is one of the responsible persons for a node, a "View" button will appear in the details column. Clicking it will open the approval pop-up:',paraId:4,tocIndex:3},{value:"The pop-up will display the approver interface configured for that approval node, typically including the approval details and an action bar:",paraId:5,tocIndex:3},{value:"Approvers can perform actions such as approve, reject, or return within the pop-up. After an action is taken, a corresponding record will be generated in the processing history. If the action is a return, the initiator can modify the application and resubmit it:",paraId:6,tocIndex:3},{value:"Approving or rejecting will trigger the corresponding status based on the node's configured rules:",paraId:7,tocIndex:3},{value:"If transfer or additional sign-off operations are configured, approvers can also perform these operations in the processing interface. The transfer operation assigns the current approval node's processing responsibility to another user within a specified range:",paraId:8,tocIndex:3},{value:"After the transfer, the current approver will no longer be responsible for processing that approval node, and the transferred user will appear in the approver list:",paraId:9,tocIndex:3},{value:"The additional sign-off operation allows adding multiple users to the current approval node's processing list, selecting from a specified range:",paraId:10,tocIndex:3},{value:"If the node is configured for sequential processing by multiple users, the additional sign-off operation also requires specifying the processing order of the new users:",paraId:11,tocIndex:3},{value:`Before oneself: After submission, the current user's task status becomes "Pending," and the new approver will process it before the current user.`,paraId:12,tocIndex:3},{value:"After oneself: The current user processes first, and the new approver processes afterward.",paraId:12,tocIndex:3},{value:"After transfer or additional sign-off, the new approver's processing will also follow the approval rules configured in the node.",paraId:13,tocIndex:3},{value:'The approval plugin provides two global blocks for centralized management of certain approval processes: "Initiate Approval" and "Approval Todos":',paraId:14,tocIndex:4},{value:`The "Initiate Approval" block is designed from the initiator's perspective, allowing users to initiate new approvals from the block's action bar:`,paraId:15,tocIndex:4},{value:'If the approval trigger is configured to allow initiation and approval in both data blocks and the approval center, the corresponding approval process will appear in the drop-down menu under the "Initiate" button.',paraId:16,tocIndex:4},{value:"Users can also view the status of approvals they have initiated in the list:",paraId:17,tocIndex:4},{value:`Clicking "View" opens a pop-up similar to the approval block in data details, with the difference that the initiator's submission and approval history are displayed on separate tabs:`,paraId:18,tocIndex:4},{value:`The "Approval Todos" block is designed from the approver's perspective, allowing users to view pending approvals. Clicking the corresponding "View" button opens a processing pop-up, similar to the approval block in data details, with the distinction that the approver's processing form and approval history are displayed on separate tabs:`,paraId:19,tocIndex:4},{value:"If the approval has already been processed, the submitted content is displayed as is and cannot be modified.",paraId:20,tocIndex:4}]},815584:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To facilitate manual processing, a todo list should be added to the page. This list will display tasks that require attention, allowing relevant personnel to easily access and manage specific tasks within the manual node.",paraId:0,tocIndex:0},{value:'To add a todo list block, select "Workflow Todo" from the available blocks on the page:',paraId:1,tocIndex:1},{value:"Here is an example of a todo list block:",paraId:2,tocIndex:1},{value:"Personnel can click on the relevant todo task to open a pop-up window for manual processing:",paraId:3,tocIndex:2}]},130853:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's association field components are designed to help users better display and handle associated data. Regardless of the type of relationship, these components are flexible and universal. Users can select and configure these components according to specific needs.",paraId:0,tocIndex:1},{value:"All association fields whose target collection is not a file collection, the default component in the edit state is a drop-down selector. The drop-down option displays the value of the title field, which is suitable for quickly selecting associated data by displaying a key field information.",paraId:1,tocIndex:2},{value:"For more information, refer to ",paraId:2,tocIndex:2},{value:"Dropdown Selector",paraId:3,tocIndex:2},{value:"The record picker presents data in the form of a pop-up window. Users can configure relationship fields (including relationship's relationship fields) in the record selector, allowing for more accurate selection of associated data.",paraId:4,tocIndex:3},{value:"For more information, refer to ",paraId:5,tocIndex:3},{value:"Record Picker",paraId:6,tocIndex:3},{value:"The cascade selector is suitable for relationship fields where the target collection is a tree collection. It allows users to select data according to the hierarchical structure of the tree collection data. It is applicable to scenarios such as province-city-district, industry classification, product attributes, and other cascade selection scenarios.",paraId:7,tocIndex:4},{value:"For more information, refer to ",paraId:8,tocIndex:4},{value:"Cascade Selector",paraId:9,tocIndex:4},{value:"When dealing with more complex relationship data, using a dropdown selector or data selector can be inconvenient. In this case, users need to frequently open pop-up windows. For this scenario, a sub-form can be used. Users can directly maintain relationship fields on the current page or current pop-up, without repeatedly opening new pop-ups, making the operation process smoother. Multi-level relationships are presented in the form of nested forms.",paraId:10,tocIndex:5},{value:"For more information, refer to ",paraId:11,tocIndex:5},{value:"Sub-Form",paraId:12,tocIndex:5},{value:"When the relationship level is deep and there are many data fields, the sub-form layout may appear lengthy, making it difficult to effectively present the primary and secondary relationship of the form. For this scenario, you can use a sub-form (pop-up). Users can move some non-key or infrequently used relationship fields from the main form to an independent pop-up for filling out, making the main form more concise and clear.",paraId:13,tocIndex:6},{value:"The Sub-Form (Pop-up) not only simplifies the form layout, but also solves the problem of not being able to directly fill in relationship field data in the sub-table.",paraId:14,tocIndex:6},{value:"For more information, refer to ",paraId:15,tocIndex:6},{value:"Sub-Form (Pop-up)",paraId:16,tocIndex:6},{value:"The sub-table presents one-to-many or many-to-many relationship records in the form of a table. It provides a clear, structured way to display and manage associated data, supporting the creation of new data in batches or the selection of existing data for association.",paraId:17,tocIndex:7},{value:"For more information, refer to ",paraId:18,tocIndex:7},{value:"Sub-Table",paraId:19,tocIndex:7},{value:"The sub-detail are the corresponding components of the sub-form in reading mode, and the multi-level relational data is displayed in a nested form.",paraId:20,tocIndex:8},{value:"For more information, refer to ",paraId:21,tocIndex:8},{value:"Sub-Detail",paraId:22,tocIndex:8},{value:"The file manager is a relationship field component specifically for dealing with relationship target collections as file collections.",paraId:23,tocIndex:9},{value:"For more information, refer to ",paraId:24,tocIndex:9},{value:"File Manager",paraId:25,tocIndex:9},{value:"The title component is a relationship field component used in reading mode, displaying key information of associated data through the configuration of the title field.",paraId:26,tocIndex:10},{value:"For more information, refer to ",paraId:27,tocIndex:10},{value:"Title",paraId:28,tocIndex:10},{value:"The tag component is a relationship field component used in reading mode. Using the tag component in data presentation can better classify and identify relationship data. It needs to configure the title field and color field (selected from the target table fields).",paraId:29,tocIndex:11},{value:"For more information, refer to ",paraId:30,tocIndex:11},{value:"Tag",paraId:31,tocIndex:11}]},793923:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The data scope for relationship fields is similar to the data scope setting for blocks, allowing you to set default filtering criteria for relational data.",paraId:0,tocIndex:1},{value:"Example: Only products currently for sale can be selected as related items.",paraId:1,tocIndex:3},{value:"Example: Only products with a production date earlier than last month can be selected as related items.",paraId:2,tocIndex:4},{value:"For more information on variables, refer to ",paraId:3,tocIndex:4},{value:"Variables",paraId:4,tocIndex:4},{value:".",paraId:3,tocIndex:4},{value:"Relationship fields can be linked by setting the data scope.",paraId:5,tocIndex:5},{value:'Example: In the order form, there are many-to-many relationship fields "Products" and a many-to-one relationship field "Customers." The product table has a many-to-many relationship field "Customers." In the order form block, the selectable products are those associated with the customer selected in the current form.',paraId:6,tocIndex:5},{value:`
      `,paraId:7}]},767426:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Default values are the initial values for fields in a new state. You can set default values when configuring fields in a data table, or you can specify default values for fields in a new form block. These values can be constants or variables.",paraId:0,tocIndex:1},{value:"Most fields in new forms support setting default values.",paraId:1,tocIndex:4},{value:"Whether adding subforms in new or edit forms, the added sub-data will have default values.",paraId:2,tocIndex:5},{value:'Subform "Add new"',paraId:3,tocIndex:5},{value:'Subtable "Add new"',paraId:4,tocIndex:5},{value:"When editing existing data, if the data is empty, it will not be filled with default values; only newly added data will be filled with default values and will not be saved.",paraId:5,tocIndex:5},{value:'Default values are only available for "many-to-one" and "many-to-many" relationship types when using selector components (Select, RecordPicker).',paraId:6,tocIndex:6},{value:"Date variables;",paraId:7,tocIndex:8},{value:"Current user;",paraId:7,tocIndex:8},{value:"Current record (the concept only applies to existing data);",paraId:7,tocIndex:8},{value:"Current form (ideally, only fields in the form are listed);",paraId:7,tocIndex:8},{value:"Current object (concept for each row of data in a subform);",paraId:7,tocIndex:8},{value:'Form selected records (currently limited to the "Table Block + Add Record Form" combination);',paraId:7,tocIndex:8},{value:"For more information on variables, refer to ",paraId:8,tocIndex:8},{value:"Variables",paraId:9,tocIndex:8},{value:".",paraId:8,tocIndex:8},{value:"There are two types: non-relational field variables and relational field variables.",paraId:10,tocIndex:9},{value:"The variable object must be a collection record;",paraId:11,tocIndex:10},{value:"It must be from a table on the inheritance path, either the current table or a parent-child table;",paraId:11,tocIndex:10},{value:'The "Form selected records" variable is only available for "many-to-many" and "one-to-many/many-to-one" relationship fields;',paraId:11,tocIndex:10},{value:"For multiple levels, flatten and deduplicate the data",paraId:11,tocIndex:10},{value:`// Table selected records:
[{id:1},{id:2},{id:3},{id:4}]

// Table selected records/one-to-one:
[{one-to-one: {id:2}}, {one-to-one: {id:3}}, {one-to-one: {id:3}}]
// Flatten and deduplicate
[{id: 2}, {id: 3}]

// Table selected records/many-to-many:
[{many-to-many: [{id: 1}, {id:2}]}, {many-to-many: {[id:3}, {id:4}]}]
// Flatten
[{id:1},{id:2},{id:3},{id:4}]
`,paraId:12,tocIndex:10},{value:"The type must be consistent or compatible, such as strings being compatible with numbers, and all objects that provide a toString method;",paraId:13,tocIndex:11},{value:"JSON fields are special and can store any type of data;",paraId:13,tocIndex:11},{value:"Non-relational default value variables",paraId:14,tocIndex:12},{value:"When selecting fields with multiple levels, only one-to-one relationships are supported; many-to-many relationships are not supported;",paraId:15,tocIndex:12},{value:"JSON fields are special and may have fewer restrictions;",paraId:15,tocIndex:12},{value:"Relational default value variables",paraId:16,tocIndex:12},{value:"hasOne: only supports one-to-one relationships;",paraId:17,tocIndex:12},{value:"hasMany: supports both one-to-one (internally converted) and many-to-many relationships;",paraId:17,tocIndex:12},{value:"belongsToMany: supports both one-to-one (internally converted) and many-to-many relationships;",paraId:17,tocIndex:12},{value:"belongsTo: generally for one-to-one relationships, but when the parent relationship is hasMany, it also supports many-to-many (as hasMany/belongsTo is essentially a many-to-many relationship);",paraId:17,tocIndex:12},{value:"Model",paraId:18,tocIndex:14},{value:`When setting default value variables for a many-to-many relationship, if the variable has multiple records, the selected data will have multiple records, as shown below:
When the data table in the table block and the relationship field data table are the same.`,paraId:19,tocIndex:14},{value:"For example, in an A.B relationship, if b1 is associated with a1, it cannot be associated with a2. If b1 is associated with a2, it will disassociate from a1. In this case, the data is not shared, while default values operate on a shared mechanism (both can be associated), so one-to-one and one-to-many cannot have default values.",paraId:20,tocIndex:15},{value:"Because subforms and subtables focus on directly editing relationship data (including adding or removing), and relationship default values work on a shared mechanism where both can be associated but cannot modify the relationship data. Therefore, it is not suitable to provide default values in this scenario.",paraId:21,tocIndex:16},{value:"Additionally, subforms or subtables have subfields, so it would be unclear whether the default value is for rows or columns.",paraId:22,tocIndex:16},{value:"Considering this, it is more appropriate not to allow setting default values for any type of subform or subtable relationship.",paraId:23,tocIndex:16}]},642224:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This option controls whether field titles are displayed. It is enabled by default but allows you to disable it based on different layout requirements, hiding the title display when necessary.",paraId:0,tocIndex:1}]},994124:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Field descriptions are short descriptive text displayed in light gray below the field component, which can be used to help users understand the purpose of the field and the input requirements.",paraId:0,tocIndex:1}]},960720:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The field title refers to the name or label defined by the field, which can be personalized according to the needs of different blocks.",paraId:0,tocIndex:1}]},837204:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When a user hovers over a field, a tooltip with additional information or guidance appears. This tooltip typically provides details such as the field's purpose, input format, and any restrictions, helping users to better understand and utilize the field.",paraId:0,tocIndex:1}]},910566:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Supported in version 1.7.6 and above.",paraId:0,tocIndex:0},{value:"Text fields support the ",paraId:1,tocIndex:1},{value:"Scan Input",paraId:1,tocIndex:1},{value:" feature. When enabled, a scan button will appear on the right side of the input box. Clicking the button activates the scanning device, and the scanned result will be automatically filled into the field.",paraId:1,tocIndex:1},{value:"This feature is ideal for scenarios that require ",paraId:2,tocIndex:1},{value:"fast and accurate data entry",paraId:2,tocIndex:1},{value:", such as product codes or device serial numbers, and is commonly used on ",paraId:2,tocIndex:1},{value:"mobile devices",paraId:2,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"Automatic Input via Scanning",paraId:3,tocIndex:2},{value:`
Automatically fills the scanned data into the field, improving efficiency and reducing manual input errors.`,paraId:3,tocIndex:2},{value:"Manual Input Control",paraId:4,tocIndex:2},{value:`
Allows configuration of whether users can manually edit the field content, adaptable to different business needs.`,paraId:4,tocIndex:2}]},602618:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Certain fields support multiple components, allowing us to select the most appropriate one to display the field\u2019s value. For instance, the ",paraId:0,tocIndex:1},{value:"URL",paraId:0,tocIndex:1},{value:" component can be switched to a ",paraId:0,tocIndex:1},{value:"Preview",paraId:0,tocIndex:1},{value:" component.",paraId:0,tocIndex:1},{value:"If you need to expand more components, referring to ",paraId:1,tocIndex:1},{value:"Expand Value Field Components",paraId:2,tocIndex:1},{value:"\u3002",paraId:1,tocIndex:1}]},869535:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Number ",paraId:0,tocIndex:1},{value:"Format",paraId:0,tocIndex:1},{value:" is the process of visually enhancing and standardizing numerical fields (including formula fields) to make them more readable. This includes configuring options such as thousand separators, decimal precision, unit conversion, and scientific notation. By setting up numerical formatting, you can cater to the numerical expression preferences of different regions and industries.",paraId:0,tocIndex:1},{value:"This feature supports simple unit conversions, thousand separators, prefixes and suffixes, precision adjustments, and scientific notation.",paraId:1,tocIndex:2},{value:"Example: Formatting an order amount to include a currency symbol (such as the Chinese Yuan symbol \uFFE5), thousand separators (like commas or periods), and specific decimal precision to ensure the amount is clearly and easily understood.",paraId:2,tocIndex:2},{value:`
      `,paraId:3},{value:"Scientific notation in use.",paraId:4,tocIndex:2}]},813025:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Unlike blocks, field components offer three distinct Pattern, specifically for fields within forms. Switching between these modes adjusts the corresponding field configuration options.",paraId:0,tocIndex:1},{value:"Editable",paraId:1,tocIndex:1},{value:"Readonly (non-editable)",paraId:1,tocIndex:1},{value:"Easy-reading (view mode)",paraId:1,tocIndex:1}]},910381:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'"Required" is a fundamental rule in form validation. You can enable it directly within the field settings or dynamically configure it through form linkage rules.',paraId:0,tocIndex:1},{value:"You can directly designate a field as required, which is ideal for fields that must always be completed by users, such as username and password.",paraId:1,tocIndex:2},{value:"Required fields can be set conditionally using the form block's linkage rules.",paraId:2,tocIndex:3},{value:'Example: The shipping date field becomes required when the order status is marked as "shipped."',paraId:3,tocIndex:3},{value:`
      `,paraId:4}]},978627:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The field style linkage rules are an important tool to enhance user interaction. By dynamically configuring styles, it improves the visual effect of element and helps users quickly identify key information. The main style properties include:",paraId:0,tocIndex:1},{value:"color",paraId:1,tocIndex:1},{value:"background-color",paraId:1,tocIndex:1},{value:"text-align",paraId:1,tocIndex:1},{value:"font-size",paraId:1,tocIndex:1},{value:"font-weight",paraId:1,tocIndex:1},{value:"font-style",paraId:1,tocIndex:1},{value:"These are commonly used to highlight key information based on field status, indicate anomalies, or guide visually.",paraId:2,tocIndex:1},{value:"Example: Dynamically adjust the color of the order amount field based on the order amount. When the order amount exceeds 1000, set the color to green; when the order amount is less than or equal to 1000, set the color to red.",paraId:3,tocIndex:2},{value:"Rule 1",paraId:4,tocIndex:2},{value:": Set the condition to ",paraId:4,tocIndex:2},{value:"order amount greater than 10000",paraId:4,tocIndex:2},{value:", and the field color will be green.",paraId:4,tocIndex:2},{value:"Rule 2",paraId:5,tocIndex:2},{value:": Set the condition to ",paraId:5,tocIndex:2},{value:"order amount less than or equal to 1000",paraId:5,tocIndex:2},{value:", and the field color will be red.",paraId:5,tocIndex:2},{value:"For more details, refer to ",paraId:6,tocIndex:2},{value:"Linkage Rules",paraId:7,tocIndex:2},{value:".",paraId:6,tocIndex:2}]},74211:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The title field is a key element in relational field components, serving as the visible identifier of relational data within the user interface.",paraId:0,tocIndex:1},{value:"This setting applies across the entire application.",paraId:1,tocIndex:3},{value:"This setting is limited to the specific block, taking precedence over global settings.",paraId:2,tocIndex:4}]},529663:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Setting validation rules is crucial to ensure that user-entered data aligns with expected standards. While there are preset format validations, users also have the flexibility to define custom rules.",paraId:0,tocIndex:1},{value:"We provide several preset format validations for commonly used data types, including numerical values, ID numbers, email addresses, and phone numbers.",paraId:1,tocIndex:1},{value:"This feature allows for validating the minimum value of numerical data, with current support limited to constants.",paraId:2,tocIndex:2},{value:`
      `,paraId:3},{value:"Example: Create a custom regular expression to validate Singaporean phone numbers and configure the corresponding error messages.",paraId:4,tocIndex:3}]},260525:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Bulk edit form is a specialized form block designed for batch editing operations.",paraId:0,tocIndex:1},{value:"You can configure only the fields within the current table. There are three methods for updating fields:",paraId:1,tocIndex:2},{value:"No Update:",paraId:2,tocIndex:2},{value:" The field retains its original value after submission.",paraId:2,tocIndex:2},{value:"Modify To:",paraId:2,tocIndex:2},{value:" The field becomes required.",paraId:2,tocIndex:2},{value:"Clear:",paraId:2,tocIndex:2},{value:" The field's value is cleared after submission.",paraId:2,tocIndex:2},{value:"For relationship fields, you can flexibly switch between different field components.",paraId:3,tocIndex:2},{value:"Edit Field Title",paraId:4,tocIndex:3},{value:"Display Title",paraId:5,tocIndex:3},{value:"Edit Field Description",paraId:6,tocIndex:3},{value:"Edit Field Tooltip",paraId:7,tocIndex:3},{value:"Set Validation Rules",paraId:8,tocIndex:3}]},29531:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In detail blocks, list blocks, and grid blocks, the field configuration remains largely consistent, primarily focusing on how fields are presented in a reading view.",paraId:0,tocIndex:1},{value:"For more information, see ",paraId:1,tocIndex:3},{value:"Date Formatting",paraId:2,tocIndex:3},{value:".",paraId:1,tocIndex:3},{value:"This feature supports basic unit conversions, thousand separators, prefix and suffix customization, precision settings, and scientific notation.",paraId:3,tocIndex:4},{value:"For more details, see ",paraId:4,tocIndex:4},{value:"Number Formatting",paraId:5,tocIndex:4},{value:".",paraId:4,tocIndex:4},{value:"Edit Field Title",paraId:6,tocIndex:4},{value:"Display Title",paraId:7,tocIndex:4},{value:"Edit Field Description",paraId:8,tocIndex:4},{value:"Edit Field Tooltip",paraId:9,tocIndex:4},{value:"Certain fields allow for switching to different components. For instance, the ",paraId:10,tocIndex:5},{value:"URL",paraId:10,tocIndex:5},{value:" component can be changed to a ",paraId:10,tocIndex:5},{value:"Preview",paraId:10,tocIndex:5},{value:" component.",paraId:10,tocIndex:5},{value:"If you need to add more components, refer to ",paraId:11,tocIndex:5},{value:"Extending Field Value Components",paraId:12,tocIndex:5},{value:".",paraId:11,tocIndex:5}]},722829:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Collapse filter block exclusively supports the selection of relational fields and option fields as filter criteria.",paraId:0,tocIndex:1},{value:"Define the data scope for relational fields.",paraId:1,tocIndex:3},{value:"Example: Filtering out non-promotional products.",paraId:2,tocIndex:3},{value:"For additional information, refer to ",paraId:3,tocIndex:3},{value:"Setting the Data Scope",paraId:4,tocIndex:3},{value:".",paraId:3,tocIndex:3},{value:"For further details, refer to ",paraId:5,tocIndex:4},{value:"Title Field",paraId:6,tocIndex:4},{value:".",paraId:5,tocIndex:4},{value:"Default display (collapsed by default)",paraId:7,tocIndex:4},{value:"Define sorting rules (for relational data)",paraId:7,tocIndex:4},{value:"Customize the title",paraId:7,tocIndex:4}]},187874:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The filter form allows you to select fields from both the current table and related tables (including fields from associated relationships) to serve as filter criteria.",paraId:0,tocIndex:1},{value:"Example:",paraId:1,tocIndex:1},{value:" Suppose you want to filter orders using fields from a related table. The order table and the customer table have a one-to-many relationship. In this case, you can configure the customer's name and phone number fields from the customer table as filter criteria to help narrow down the orders.",paraId:1,tocIndex:1},{value:"Selecting the right operators for filtering is crucial to enhance accuracy and efficiency. For string-type fields, fuzzy matching is enabled by default.",paraId:2,tocIndex:3},{value:"Edit Field Title",paraId:3,tocIndex:3},{value:"Display Title",paraId:4,tocIndex:3},{value:"Edit Field Description",paraId:5,tocIndex:3},{value:"Edit Field Tooltip",paraId:6,tocIndex:3}]},706470:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Different types of fields in a form have different configuration options, allowing users to extend the configuration options through plugins to meet more personalized needs.",paraId:0,tocIndex:1},{value:"Displays fields related to associated tables (one-to-one or many-to-one relationship fields) as read-only.",paraId:1,tocIndex:1},{value:`
  `,paraId:2},{value:"Supports setting constants/variables as the default values for fields.",paraId:3,tocIndex:3},{value:"For more information, refer to ",paraId:4,tocIndex:3},{value:"Setting Default Values",paraId:5,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"For more information, refer to ",paraId:6,tocIndex:4},{value:"Setting Validation Rules",paraId:7,tocIndex:4},{value:".",paraId:6,tocIndex:4},{value:"For more information, refer to ",paraId:8,tocIndex:5},{value:"Required Fields",paraId:9,tocIndex:5},{value:".",paraId:8,tocIndex:5},{value:"Edit Field Title",paraId:10,tocIndex:5},{value:"Display Title",paraId:11,tocIndex:5},{value:"Edit Field Description",paraId:12,tocIndex:5},{value:"Edit Field Tooltip",paraId:13,tocIndex:5},{value:"Pattern",paraId:14,tocIndex:5},{value:"Some fields support switching to other components. For example, the ",paraId:15,tocIndex:6},{value:"URL",paraId:15,tocIndex:6},{value:" component can be switched to the ",paraId:15,tocIndex:6},{value:"Preview",paraId:15,tocIndex:6},{value:" component.",paraId:15,tocIndex:6},{value:"If you need to extend more components, refer to ",paraId:16,tocIndex:6},{value:"Extending Value Field Components",paraId:17,tocIndex:6},{value:".",paraId:16,tocIndex:6},{value:"In reading mode, the form can be styled.",paraId:18,tocIndex:7}]},508035:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Table fields offer a robust set of features beyond basic column width adjustment, field titles, and sorting. They provide enhanced display configurations for specialized fields such as date fields, relationship fields, and numerical fields, allowing for a more tailored and informative data presentation.",paraId:0,tocIndex:1},{value:"For comprehensive information on date formatting options, consult the ",paraId:1,tocIndex:3},{value:"Date Formatting",paraId:2,tocIndex:3},{value:" guide.",paraId:1,tocIndex:3},{value:"The numerical field formatting feature offers versatile options including:",paraId:3,tocIndex:4},{value:"Simple unit conversion",paraId:4,tocIndex:4},{value:"Thousands separators",paraId:4,tocIndex:4},{value:"Prefixes and suffixes",paraId:4,tocIndex:4},{value:"Precision control",paraId:4,tocIndex:4},{value:"Scientific notation",paraId:4,tocIndex:4},{value:"For an in-depth exploration of numerical formatting capabilities, refer to the ",paraId:5,tocIndex:4},{value:"Number Formatting",paraId:6,tocIndex:4},{value:" documentation.",paraId:5,tocIndex:4},{value:"The current sorting functionality allows for single-column sorting within the current page data. Note that sorting by relationship fields is not supported in this version.",paraId:7,tocIndex:5},{value:"Certain fields offer the flexibility to switch between different component types. For instance, the ",paraId:8,tocIndex:7},{value:"URL",paraId:8,tocIndex:7},{value:" component can be toggled to function as a ",paraId:8,tocIndex:7},{value:"Preview",paraId:8,tocIndex:7},{value:" component.",paraId:8,tocIndex:7},{value:"For developers looking to expand the range of available components, the ",paraId:9,tocIndex:7},{value:"Extending Value Field Components",paraId:10,tocIndex:7},{value:" guide provides valuable insights.",paraId:9,tocIndex:7},{value:"The styling feature enables dynamic configuration of column colors and background colors based on specified conditions. To illustrate this powerful functionality, let's walk through an example using a bank transaction details table:",paraId:11,tocIndex:8},{value:"Scenario: We want to visually differentiate between income (positive amounts) and expenses (negative amounts) in the transaction amount column.",paraId:12,tocIndex:8},{value:"Step-by-step guide:",paraId:13,tocIndex:8},{value:`Access the field settings for the transaction amount column and navigate to the Style option.
`,paraId:14,tocIndex:8},{value:"Create the first conditional rule: For positive transactions (income), set the field color to green.",paraId:15,tocIndex:8},{value:'Click "Add Linkage Rule"',paraId:16,tocIndex:8},{value:`Configure: When transaction amount > 0, apply green color
`,paraId:16,tocIndex:8},{value:"Establish the second conditional rule: For negative transactions (expenses), set the field color to red.",paraId:17,tocIndex:8},{value:'Click "Add Linkage Rule" again',paraId:18,tocIndex:8},{value:`Configure: When transaction amount < 0, apply red color
`,paraId:18,tocIndex:8},{value:`The result is a visually intuitive representation of financial data:
`,paraId:19,tocIndex:8}]},683268:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the UI, fields refer to components that serve as carriers for individual data units. Various types of data are represented through different field components. Fields must be attached to blocks and cannot function independently.",paraId:0,tocIndex:0},{value:'Fields are typically not used in isolation but rather as sub-elements within data-type blocks. These blocks generally include "configured columns," with the list of fields provided by the current data table.',paraId:1,tocIndex:1},{value:"Like blocks, field components feature three icons in the upper right corner:",paraId:2,tocIndex:2},{value:"Drag and Drop Layout",paraId:3,tocIndex:2},{value:"Quick Add Field",paraId:3,tocIndex:2},{value:"Field Parameter Configuration",paraId:3,tocIndex:2},{value:"You can customize the layout of fields within a block by dragging and rearranging them as needed.",paraId:4,tocIndex:3},{value:"Certain fields support switching between different components. For example, the ",paraId:5,tocIndex:4},{value:"URL",paraId:5,tocIndex:4},{value:" component can be switched to the ",paraId:5,tocIndex:4},{value:"Preview",paraId:5,tocIndex:4},{value:" component.",paraId:5,tocIndex:4},{value:"If you need to add more components, refer to ",paraId:6,tocIndex:4},{value:"Extending Value Field Components",paraId:7,tocIndex:4},{value:".",paraId:6,tocIndex:4}]},914562:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The cascading selector is tailored for relational fields where the target table follows a tree structure. It allows users to select data according to the hierarchical levels of the tree, with support for fuzzy search to streamline the selection process.",paraId:0,tocIndex:1},{value:"For one-to-one relationships, the cascading selector is configured for single selection.",paraId:1,tocIndex:2},{value:"For one-to-many relationships, the cascading selector enables multi-selection and supports drag-and-drop sorting for more intuitive organization.",paraId:2,tocIndex:2},{value:"Title Field",paraId:3,tocIndex:3},{value:": Defines the content displayed by the cascading component (title field) for easier identification.",paraId:4,tocIndex:3},{value:"Field Component",paraId:5,tocIndex:3},{value:": Offers the flexibility to switch to other relational field components, such as dropdown selectors, data pickers, and more.",paraId:6,tocIndex:3}]},97251:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The date field offers flexibility with customizable date and time formats to suit your needs.",paraId:0,tocIndex:1},{value:"Beyond the array of preset date and time formats, the system accommodates custom formats, allowing you to tailor the display to your specific preferences.",paraId:1,tocIndex:4}]},671358:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The File Manager is a sophisticated relational field component designed to manage relationships where the target table is a file table. This powerful tool streamlines file handling within your database structure.",paraId:0,tocIndex:1},{value:"Field Component",paraId:1,tocIndex:2},{value:": Seamlessly switch between various relational field components, including dropdown selections, data selectors, and more, to suit your specific needs.",paraId:2,tocIndex:2},{value:"Quick Upload: Enabled by default, this feature allows for effortless file association immediately upon upload, enhancing workflow efficiency.",paraId:2,tocIndex:2},{value:"Select File: Also enabled by default, this option provides the flexibility to associate previously uploaded files, leveraging existing resources within your system.",paraId:2,tocIndex:2}]},661320:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Sub-form offer an elegant solution for scenarios where relational data needs to be created before association. They present multi-level relational data in a clear, nested structure. Unlike data selectors and dropdown menus, subforms allow direct management of relational table fields within the current page block. Moreover, they ensure that relational data is submitted seamlessly alongside the main form.",paraId:0,tocIndex:1},{value:"Effortlessly display nested multi-level relationship fields, such as products and their associated inventory.",paraId:1,tocIndex:3},{value:"When activated, this feature allows users to add multiple records with a simple click of the + icon.",paraId:2,tocIndex:6},{value:"Field Component",paraId:3,tocIndex:7},{value:": Switch to other relationship field components, such as dropdown select, data selector, etc.",paraId:4,tocIndex:7},{value:"The version of NocoBase needs to be v1.3.17-beta or above.",paraId:5},{value:"For more information, refer to ",paraId:6},{value:"Linkage Rules",paraId:7}]},231540:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"Record picker",paraId:0,tocIndex:1},{value:", presented as a popup table selector, allows users to select existing data associations for the target table or add new data to the target table and then associate it.",paraId:0,tocIndex:1},{value:'The order table features a many-to-many relationship field called "Products".',paraId:1,tocIndex:1},{value:"Data that has already been selected will not appear in the table selector.",paraId:2,tocIndex:1},{value:`
  `,paraId:3},{value:"Within the table selector, users can further manage the relationship target table (add, delete, import, export, etc.).",paraId:4,tocIndex:1},{value:"This option enables users to add data to the target table and then select that newly added data.",paraId:5,tocIndex:3},{value:`
  `,paraId:3},{value:"This setting restricts multiple relationship data to allow associating only one piece of data.",paraId:6,tocIndex:4},{value:"For more information, refer to ",paraId:7,tocIndex:5},{value:"Title Field",paraId:8,tocIndex:5},{value:"Popup Size",paraId:9,tocIndex:5},{value:"Field Components",paraId:10,tocIndex:5}]},267873:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In complex relational tables with intricate hierarchies and numerous fields, effectively presenting data relationships within a sub-form layout can be challenging. The Sub-form (Popup) solution enhances this by presenting relational field sub-forms in a convenient popup format, simplifying data interaction and visualization.",paraId:0,tocIndex:1},{value:"The title field value is displayed dynamically outside the popup, providing real-time updates.",paraId:1,tocIndex:6},{value:"By default, multiple entries can be added or associated. When this option is disabled, only a single entry can be added or associated.",paraId:2,tocIndex:7},{value:"Field Component",paraId:3,tocIndex:8},{value:": Switch to other relationship field components, such as dropdown select, data selector, etc.",paraId:4,tocIndex:8},{value:"The version of NocoBase needs to be v1.3.17-beta or above.",paraId:5},{value:"For more information, refer to ",paraId:6},{value:"Linkage Rules",paraId:7}]},644399:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The selector offers a streamlined way to select or associate data within the target table, whether you're working with existing records or newly added entries. The dropdown options also support fuzzy search for easier navigation.",paraId:0,tocIndex:1},{value:"When new data is added to the target table, it will be automatically selected and linked upon form submission. This method is ideal for straightforward data scenarios, such as tagging.",paraId:1,tocIndex:4},{value:'For example, the order table contains a many-to-one relationship field called "Tag"',paraId:2,tocIndex:4},{value:`
      `,paraId:3},{value:"This option allows you to configure a new form in a popup window, making it suitable for more complex scenarios, such as product entries.",paraId:4,tocIndex:5},{value:'For instance, the order table includes a many-to-many relationship field named "Products."',paraId:5,tocIndex:5},{value:`
      `,paraId:3},{value:"Define the range of data that will appear in the dropdown list.",paraId:6,tocIndex:6},{value:"For more information, refer to ",paraId:7,tocIndex:6},{value:"Set Data Range",paraId:8,tocIndex:6},{value:".",paraId:7,tocIndex:6},{value:"Determine the order in which the dropdown options are displayed.",paraId:9,tocIndex:7},{value:"Example: Display in descending order based on the production date.",paraId:10,tocIndex:7},{value:"Limit the association in many-to-many relationship fields to a single data item.",paraId:11,tocIndex:8},{value:"For additional details, see ",paraId:12,tocIndex:9},{value:"Title Field",paraId:13,tocIndex:9},{value:".",paraId:12,tocIndex:9},{value:"Field Components",paraId:14,tocIndex:9}]},917083:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Sub-details serve as the dedicated components for sub-forms in reading mode. Unlike label and title components, sub-details provide the ability to display more extensive data from the current table and enable the configuration of related table data. This allows multi-level relational data to be presented clearly in a nested format.",paraId:0,tocIndex:1},{value:"This feature supports the nested display of multi-level relationship fields, such as Orders/Products/Inventory or Orders/Products/Suppliers.",paraId:1,tocIndex:3},{value:"You can adjust the display order for many-to-many relational data.",paraId:2,tocIndex:6},{value:"Field Component",paraId:3,tocIndex:7},{value:": Switch to other relationship field components, such as dropdown select, data selector, etc.",paraId:4,tocIndex:7},{value:"The version of NocoBase needs to be v1.3.17-beta or above.",paraId:5},{value:"For more information, refer to ",paraId:6},{value:"Linkage Rules",paraId:7}]},398926:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Sub table are ideal for managing many-to-many relationship fields. They support bulk creation of target table data with associations, or selecting from existing data for association.",paraId:0,tocIndex:1},{value:"Different field types in the sub table display distinct field components. Larger fields (such as rich text, JSON, and multi-line text) are edited via a floating pop-up window.",paraId:1,tocIndex:2},{value:"Relationship fields in the sub table:",paraId:2,tocIndex:2},{value:"Order (one-to-many) > Product (one-to-many) > Inventory.",paraId:3,tocIndex:2},{value:"By default, relationship field components are dropdown selectors (supporting data selectors or subforms via pop-up windows).",paraId:4,tocIndex:2},{value:"Supports drag-and-drop sorting.",paraId:5,tocIndex:2},{value:"Supports associating data from existing records.",paraId:6,tocIndex:4},{value:"Field Component",paraId:7,tocIndex:5},{value:": Switch to other relationship field components, such as dropdown select, data selector, etc.",paraId:8,tocIndex:5},{value:"The version of NocoBase needs to be v1.3.17-beta or above.",paraId:9},{value:"For more information, refer to ",paraId:10},{value:"Linkage Rules",paraId:11},{value:"The version of NocoBase needs to be v1.3.34-beta or above.",paraId:12}]},466334:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Tags serve as a display component within the relational field view mode, requiring you to configure both the title field and the color field.",paraId:0,tocIndex:1},{value:'In the order table, there is a many-to-one relational field labeled "Tags."',paraId:1,tocIndex:3},{value:'The tags table includes two fields: "Tag Name" and "Tag Color."',paraId:2,tocIndex:3},{value:"For further details, see ",paraId:3,tocIndex:6},{value:"Title Field",paraId:4,tocIndex:6},{value:".",paraId:3,tocIndex:6},{value:"Clicking on the link will open a popup window where you can configure the details of the current relational record or edit the form.",paraId:5,tocIndex:7},{value:"For further information, see ",paraId:6,tocIndex:7},{value:"Field Component",paraId:7,tocIndex:7},{value:".",paraId:6,tocIndex:7}]},891954:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In reading mode, the default component for relationship fields is the title component, which marks the current associated record by displaying the value of the title field.",paraId:0,tocIndex:1},{value:"Clicking will open a pop-up window, allowing you to customize the configuration block for data management.",paraId:1,tocIndex:3},{value:"For more details, see ",paraId:2,tocIndex:3},{value:"Field Components",paraId:3,tocIndex:3},{value:".",paraId:2,tocIndex:3}]},741492:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In NocoBase, linkage rules are a mechanism for controlling the interactive behavior of front-end interface elements. It allows users to adjust the display and behavior logic of blocks, fields, and actions based on different conditions, enabling flexible, low-code interactive experiences. This feature is constantly being refined and enhanced.",paraId:0,tocIndex:1},{value:"By configuring linkage rules, you can achieve the following:",paraId:1,tocIndex:1},{value:"Hide/show certain blocks based on the current user role, e.g., the admin can view full information blocks, while regular users can only see basic information blocks.",paraId:2,tocIndex:1},{value:"Automatically fill or reset other field values when a form selects a particular option.",paraId:2,tocIndex:1},{value:"Disable certain input fields when a form selects a particular option.",paraId:2,tocIndex:1},{value:"Dynamically set field background colors, font sizes, font weights, etc., and highlight fields when a condition is met.",paraId:2,tocIndex:1},{value:"Control whether actions are visible or clickable based on certain conditions.",paraId:2,tocIndex:1},{value:'The left-side variables in a condition are used to define the "object being judged" in the linkage rule, i.e., the condition will evaluate this variable\u2019s value to determine whether the linkage behavior should be triggered.',paraId:3,tocIndex:3},{value:"Available variables include:",paraId:4,tocIndex:3},{value:"Context variables, such as ",paraId:5,tocIndex:3},{value:"\u300CCurrent Form/xxx\u300D",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"\u300CCurrent Record/xxx\u300D",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"\u300CCurrent Popup Record/xxx\u300D",paraId:5,tocIndex:3},{value:", etc.;",paraId:5,tocIndex:3},{value:"System-wide variables, such as ",paraId:5,tocIndex:3},{value:"Current User",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"Current Role",paraId:5,tocIndex:3},{value:", etc., suitable for dynamically controlling based on user identity, permissions, etc.",paraId:5,tocIndex:3},{value:"\u2705 The available left-side variables are determined by the context of the block, so choose variables according to business needs:",paraId:6,tocIndex:3},{value:"Current User",paraId:7,tocIndex:3},{value:" the information of the currently logged-in user\uFF0Cincluding data from collection associated with the user;",paraId:7,tocIndex:3},{value:"Current Form",paraId:7,tocIndex:3},{value:"  the real-time input values in the form;",paraId:7,tocIndex:3},{value:"Current Record",paraId:7,tocIndex:3},{value:" the saved record values, such as row data in a table.",paraId:7,tocIndex:3},{value:"Operators are used to set the logical comparison between the left-side variable and the right-side value. Different types of left-side variables support different operators. Common operators include:",paraId:8,tocIndex:4},{value:"Text type",paraId:9,tocIndex:4},{value:": ",paraId:9,tocIndex:4},{value:"$includes",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$eq",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$ne",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$empty",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$notEmpty",paraId:9,tocIndex:4},{value:", etc.",paraId:9,tocIndex:4},{value:"Numeric type",paraId:9,tocIndex:4},{value:": ",paraId:9,tocIndex:4},{value:"$eq",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$gt",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$lt",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$gte",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$lte",paraId:9,tocIndex:4},{value:", etc.",paraId:9,tocIndex:4},{value:"Boolean type",paraId:9,tocIndex:4},{value:": ",paraId:9,tocIndex:4},{value:"$isTruly",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$isFalsy",paraId:9,tocIndex:4},{value:"Array type",paraId:9,tocIndex:4},{value:": ",paraId:9,tocIndex:4},{value:"$match",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$anyOf",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$empty",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"$notEmpty",paraId:9,tocIndex:4},{value:", etc.",paraId:9,tocIndex:4},{value:"\u2705 The system will automatically recommend the available operators based on the type of the left-side variable to ensure logical configuration.",paraId:10,tocIndex:4},{value:"The right-side value is used for comparison with the left-side variable, serving as the reference value for determining whether the condition is met.",paraId:11,tocIndex:5},{value:"Supported content includes:",paraId:12,tocIndex:5},{value:"Constant values: fixed numeric values, text, dates, etc.;",paraId:13,tocIndex:5},{value:"Context variables: other fields from the current form, current records, etc.;",paraId:13,tocIndex:5},{value:"System variables: such as the current user, current time, current role, etc.",paraId:13,tocIndex:5},{value:"\u2705 The system will adapt the input component for the right-side value based on the type of the left-side variable, such as:",paraId:14,tocIndex:5},{value:"If the left-side variable is a \u201Cselection field\u201D, a corresponding options selector will be displayed;",paraId:15,tocIndex:5},{value:"If the left-side variable is a \u201Cdate field\u201D, a date picker will be displayed;",paraId:15,tocIndex:5},{value:"If the left-side variable is a \u201Ctext field\u201D, a text input box will displayed.",paraId:15,tocIndex:5},{value:"\u{1F4A1} By flexibly using the right-side values (especially dynamic variables), you can build linkage logic based on the current user, current data state, and context environment, enabling a richer interactive experience.",paraId:16,tocIndex:5},{value:"When the condition in a rule is met (optional), the property modification actions below are automatically executed. If no condition is set, the rule is considered always met, and the property modification will be executed by default.",paraId:17,tocIndex:7},{value:"Multiple linkage rules can be configured for a block, action, or field. When multiple rules are met simultaneously, the system executes them in the order they are defined, with the last rule's result taking precedence. For example, Rule 1 disables a field, and Rule 2 makes it editable. If both conditions are met, the field will become editable according to Rule 2.",paraId:18,tocIndex:8},{value:"The execution order of multiple rules is crucial. Make sure to clarify their priorities and interrelationships to avoid rule conflicts.",paraId:19,tocIndex:8},{value:"Each rule can be managed with the following options:",paraId:20,tocIndex:9},{value:"Custom Naming: Set an easy-to-understand name for the rule for better management and recognition.",paraId:21,tocIndex:9},{value:"Sorting: Adjust the order of rules based on execution priority to ensure that the system processes them correctly.",paraId:21,tocIndex:9},{value:"Deletion: Remove rules that are no longer needed.",paraId:21,tocIndex:9},{value:"Enable/Disable: Temporarily disable a rule without deleting it. This is useful for situations where a rule needs to be paused temporarily.",paraId:21,tocIndex:9},{value:"Copy Rule: Create new rules by copying existing ones, avoiding redundant configuration.",paraId:21,tocIndex:9},{value:"In field assignment and condition configuration, both constants and variables are supported. The variable list varies depending on the block's location, and choosing and using variables wisely can help meet business requirements more flexibly. For more information about variables, refer to ",paraId:22,tocIndex:10},{value:"Variables",paraId:23,tocIndex:10},{value:".",paraId:22,tocIndex:10},{value:"Note",paraId:24,tocIndex:11},{value:": This feature ",paraId:24,tocIndex:11},{value:"is supported starting from v1.7.0-beta.24 versions",paraId:24,tocIndex:11},{value:"Block linkage rules allow dynamic control of block visibility based on system variables (such as the current user or role) or context variables (such as the current popup record). For example, an administrator can view the complete order information, while a customer service role can only view specific order data. Through block linkage rules, the corresponding block can be configured based on the role, with different fields,actions, and data scope set within the block. When the logged-in role matches the target role, the system will display the corresponding block.",paraId:25,tocIndex:11},{value:"\u{1F449} For more details, check: ",paraId:26,tocIndex:11},{value:"Block/Block Linkage Rules",paraId:27,tocIndex:11},{value:"Field linkage rules are used to dynamically adjust the properties of fields in a form or detail block. These mainly include:",paraId:28,tocIndex:12},{value:"Control the ",paraId:29,tocIndex:12},{value:"visibility",paraId:29,tocIndex:12},{value:" of fields",paraId:29,tocIndex:12},{value:"Set fields as ",paraId:29,tocIndex:12},{value:"required",paraId:29,tocIndex:12},{value:"Assign values",paraId:29,tocIndex:12},{value:"Configure the ",paraId:29,tocIndex:12},{value:"options",paraId:29,tocIndex:12},{value:" of option fields",paraId:29,tocIndex:12},{value:"Limit the ",paraId:29,tocIndex:12},{value:"Date scope",paraId:29,tocIndex:12},{value:" for time fields",paraId:29,tocIndex:12},{value:"\u{1F449} For more details, check: ",paraId:30,tocIndex:12},{value:"Block/Field Linkage Rules",paraId:31,tocIndex:12},{value:"Actions linkage rules currently support controlling operation behaviors (e.g., hide/disable) based on current record values and global variables.",paraId:32,tocIndex:13},{value:"\u{1F449} For more details, check: ",paraId:33,tocIndex:13},{value:"Operation/Linkage Rules",paraId:34,tocIndex:13},{value:"Field style linkage rules allow dynamically setting field style properties based on conditions, mainly including:",paraId:35,tocIndex:14},{value:"color",paraId:36,tocIndex:14},{value:"background-color",paraId:36,tocIndex:14},{value:"text-align",paraId:36,tocIndex:14},{value:"font-size",paraId:36,tocIndex:14},{value:"font-weight",paraId:36,tocIndex:14},{value:"font-style",paraId:36,tocIndex:14},{value:"These are commonly used to highlight key information based on field status, indicate anomalies, or provide visual guidance.",paraId:37,tocIndex:14},{value:"\u{1F449} For more details, check: ",paraId:38,tocIndex:14},{value:"Field/Style",paraId:39,tocIndex:14}]},148359:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Menus are used to organize pages and external links. In the default page layout template of NocoBase, the menu is located at the top and on the left side. Among them, the top is the primary menu, and the left side is for secondary and infinitely nested sub-menus.",paraId:0,tocIndex:0},{value:"NocoBase has three built-in types of menu items:",paraId:1,tocIndex:1},{value:"Group",paraId:2,tocIndex:1},{value:"Page",paraId:2,tocIndex:1},{value:"Link",paraId:2,tocIndex:1},{value:'"Group" is used to group menu items, which can be located at the top or on the left side. Within a group, you can continue to create sub-groups, meaning the menu can have an infinite hierarchy.',paraId:3,tocIndex:2},{value:"A page can serve as a container for blocks, housing a variety of blocks. (See ",paraId:4,tocIndex:3},{value:"Pages",paraId:5,tocIndex:3},{value:")",paraId:4,tocIndex:3},{value:"Links can redirect to third-party URLs. You can use variables in the URL and Search params.",paraId:6,tocIndex:4},{value:"After entering the interface configuration mode, there are two icons in the upper right corner of the menu item:",paraId:7,tocIndex:5},{value:"Drag to move",paraId:8,tocIndex:5},{value:"Menu item configuration",paraId:8,tocIndex:5},{value:"Edit: Includes the menu item's title, icon, etc.",paraId:9,tocIndex:6},{value:'Move to: In addition to dragging to move, you can also quickly move a menu item via "Move to", allowing you to move a menu item to the front, back, or inside of another menu item.',paraId:9,tocIndex:6},{value:"Insert before",paraId:9,tocIndex:6},{value:"Insert after",paraId:9,tocIndex:6},{value:"Insert inner (Only for group types)",paraId:9,tocIndex:6},{value:"Delete",paraId:9,tocIndex:6}]},254865:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's pages can act as containers for blocks. They are like a canvas where you can freely place a variety of blocks.",paraId:0,tocIndex:0},{value:"After creating a page through the ",paraId:1,tocIndex:1},{value:"menu",paraId:2,tocIndex:1},{value:", you can see that an empty page consists of the following two parts:",paraId:1,tocIndex:1},{value:`Header
`,paraId:3,tocIndex:1},{value:"Page title",paraId:4,tocIndex:1},{value:"Tabs",paraId:4,tocIndex:1},{value:"Block container",paraId:3,tocIndex:1},{value:"Hovering the mouse over the configuration icon at the top right of the page, you can see the page configuration options:",paraId:5,tocIndex:2},{value:"Configurable items include:",paraId:6,tocIndex:2},{value:"Enable page header: Controls whether to display the header;",paraId:7,tocIndex:2},{value:"Display page title: Whether to display the page title in the header;",paraId:7,tocIndex:2},{value:"Edit page title: The default page title is the menu item title, which can be customized;",paraId:7,tocIndex:2},{value:"Enable tabs: Off by default, enabling this option allows adding multiple tabs.",paraId:7,tocIndex:2},{value:"Typically, we need to enable the header area to display the page title and tabs. However, there are situations where we might not want to enable it, for instance, when creating a Dashboard page where a top-level menu can effectively reflect the content of the page. In this case, we can disable the header and only display the blocks within the page.",paraId:8,tocIndex:3},{value:`The default page title is the name of the menu item. By clicking "Edit Page Title," it can be modified. Just like with the header, sometimes we don't need to display the page title and only need to show the tabs, in which case you can disable the title.`,paraId:9,tocIndex:4},{value:"When the content of a page is too much, or it is appropriate to divide it into several independent parts, we can enable tabs. Each tab is an independent block container. As shown below, we added 3 tabs to the orders page to display all orders, completed orders, and refunded orders. By moving the mouse to the tab title, you can see the sort and configuration buttons at the top right corner.",paraId:10,tocIndex:5},{value:'Click "Add block" to add an unlimited number of blocks to the page (see the introduction of ',paraId:11,tocIndex:6},{value:"Blocks",paraId:12,tocIndex:6},{value:").",paraId:11,tocIndex:6},{value:"After adding several blocks, you can use the move button at the top right corner of each block to drag and arrange them freely, adjusting the layout to achieve the most suitable effect.",paraId:13,tocIndex:6}]},797470:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A popup window is a small window on the page, used to display some extended content within the current page. It can be presented in the form of a drawer or a dialog box, such as the details of a particular order or product, and can also be used for editing data. Popup operations play a very important role in the NocoBase interface configuration. Many blocks provide various popup operations, which can be used to add, view, edit data, etc. At the same time, various popup operations can be customized to adapt to various scenarios and needs.",paraId:0,tocIndex:1},{value:"In version v1.3.0-alpha and above, it supports opening as a ",paraId:1,tocIndex:2},{value:"page",paraId:2,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"Pop-ups come in two types: drawer and dialog. Configure the type and size of the pop-up during the configuration of actions.",paraId:3,tocIndex:2},{value:`
 `,paraId:4},{value:"The version of NocoBase needs to be v1.3.0-alpha or above.",paraId:5},{value:"The main scenarios of the popup window currently include:",paraId:6,tocIndex:6},{value:"Popup actions of the block, which can be used to add, view, edit the data of the block;",paraId:7,tocIndex:6},{value:"Popup actions of relationship data, which can be used to view and edit the extended information of relationship data.",paraId:7,tocIndex:6},{value:"The version of NocoBase needs to be v1.3.0-alpha or above.",paraId:8},{value:"If you want to share the data of a single record with others, you can directly copy the URL of the browser address bar after opening the popup window, and then share it with others. When others open this URL, the corresponding popup window will automatically pop up on the page.",paraId:9},{value:"The block added in the popup window can currently be used to add the following types of blocks.",paraId:10,tocIndex:10},{value:"The data in the popup window is divided into three dimensions:",paraId:11,tocIndex:10},{value:"Current record: used to display the current record;",paraId:12,tocIndex:10},{value:"Relationship record: used to display the relationship data related to the current record;",paraId:12,tocIndex:10},{value:"Other records: used to display data from other tables;",paraId:12,tocIndex:10},{value:"Example: Display the current order data.",paraId:13,tocIndex:11},{value:"Example: Display the product data associated with the current order.",paraId:14,tocIndex:12},{value:"Example: Configure the warehouse details block in the popup operation of the order table block.",paraId:15,tocIndex:13},{value:'Row action popup: Each popup has a "Current popup record" variable, representing the current row record.',paraId:16,tocIndex:14},{value:'Association field popup: Each popup has a "Current popup record" variable, representing the clicked relationship record.',paraId:16,tocIndex:14},{value:'The blocks in the popup can use the "Current popup record" variable, with the following use cases:',paraId:17,tocIndex:14},{value:"Configuring data scope for blocks",paraId:18,tocIndex:14},{value:"Configuring data scope for association fields",paraId:18,tocIndex:14},{value:"Configuring default values for fields (form for adding data)",paraId:18,tocIndex:14},{value:"Configuring linkage rules for actions",paraId:18,tocIndex:14},{value:"Assign field values configuration for form submit actions",paraId:18,tocIndex:14},{value:"For more content, refer to ",paraId:19,tocIndex:14},{value:"Variables",paraId:20,tocIndex:14}]},188503:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase employs a what-you-see-is-what-you-get (WYSIWYG) interface configuration mode. By clicking the UI Editor button, you can switch between the configuration mode and the usage mode.",paraId:0,tocIndex:1},{value:"Usage mode:",paraId:1,tocIndex:1},{value:"Configuration mode:",paraId:2,tocIndex:1},{value:"NocoBase includes a layout template with navigation areas on the top and left sides, and a content area on the right.",paraId:3,tocIndex:2},{value:"Upon entering the interface configuration mode, orange configurable items will appear on the interface. Typically, the entry point for each configurable element's options is located at the top right corner of that element. Almost all elements can be configured and reviewed in real-time on the interface, with the following as some examples:",paraId:4,tocIndex:3},{value:"Configuration items for the menu:",paraId:5,tocIndex:3},{value:"Configuration items for the page:",paraId:6,tocIndex:3},{value:"Configuration items for the block:",paraId:7,tocIndex:3},{value:"Configuration items for the action:",paraId:8,tocIndex:3},{value:"Configuration items for the table column:",paraId:9,tocIndex:3}]},909112:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Variables are a set of tokens used to identify a value in the current context. They can be used in scenarios such as configuration block data scope, field default values, linkage rules, workflows, etc.",paraId:0,tocIndex:1},{value:"Represents the data of the currently logged-in user.",paraId:1,tocIndex:3},{value:"Represents the role identifier (role name) of the currently logged-in user.",paraId:2,tocIndex:4},{value:"The value of the current form, only used in form blocks. It is used in the following scenarios:",paraId:3,tocIndex:5},{value:"Linkage rules of the current form",paraId:4,tocIndex:5},{value:"Default values for form fields (only valid when adding new data)",paraId:4,tocIndex:5},{value:"Data scope settings for association fields",paraId:4,tocIndex:5},{value:"Assign field values configuration for submit actions",paraId:4,tocIndex:5},{value:"Used to handle linkages between relationships, for example:",paraId:5,tocIndex:8},{value:"Currently only used for field configuration in subforms and subtables of form blocks, representing the value of each item:",paraId:6,tocIndex:10},{value:"Default values for subfields",paraId:7,tocIndex:10},{value:"Data scope for sub-association fields",paraId:7,tocIndex:10},{value:'Similar to the "Current object", it represents the parent object of the current object. Supported in NocoBase v1.3.34-beta and above.',paraId:8,tocIndex:13},{value:'A record refers to a row in a collection, with each row representing a record. The "Current record" variable is used in the "Row Action Linkage Rules" of display blocks.',paraId:9,tocIndex:14},{value:"Popup actions play a very important role in the NocoBase interface configuration.",paraId:10,tocIndex:16},{value:'Row action popup: Each popup has a "Current popup record" variable, representing the current row record.',paraId:11,tocIndex:16},{value:'Association field popup: Each popup has a "Current popup record" variable, representing the clicked relationship record.',paraId:11,tocIndex:16},{value:'The blocks in the popup can use the "Current popup record" variable, with the following use cases:',paraId:12,tocIndex:16},{value:"Configuring data scope for blocks",paraId:13,tocIndex:16},{value:"Configuring data scope for association fields",paraId:13,tocIndex:16},{value:"Configuring default values for fields (form for adding data)",paraId:13,tocIndex:16},{value:"Configuring linkage rules for actions",paraId:13,tocIndex:16},{value:"Assign field values configuration for form submit actions",paraId:13,tocIndex:16},{value:"Default values for form fields that are currently only used for the Add record action for a table block",paraId:14,tocIndex:22},{value:"Only used in association blocks, representing the source record of the association data.",paraId:15,tocIndex:24},{value:'"Parent record" is deprecated, it is recommended to use the equivalent "Current popup record" instead.',paraId:16},{value:"Date variables are dynamic placeholders for date that can be used across the system to define data scope filters in blocks, related field conditions, action linkage rules, and default values for date fields. Depending on the usage scenario, the parsing logic differs:",paraId:17,tocIndex:25},{value:"In ",paraId:18,tocIndex:25},{value:"assignment scenarios",paraId:18,tocIndex:25},{value:" (e.g., default value setting), variables resolve to a specific moment in time.",paraId:18,tocIndex:25},{value:"In ",paraId:18,tocIndex:25},{value:"filtering scenarios",paraId:18,tocIndex:25},{value:" (e.g., date conditions in data scope), variables resolve to a datetime scope to support flexible filtering.",paraId:18,tocIndex:25},{value:"Common use cases include:",paraId:19,tocIndex:26},{value:"Setting date field conditions in block data scope filters",paraId:20,tocIndex:26},{value:"Setting date conditions in related field data scope",paraId:20,tocIndex:26},{value:"Defining date conditions in action linkage rules",paraId:20,tocIndex:26},{value:"Supported Variables:",paraId:21,tocIndex:26},{value:"Current time",paraId:22,tocIndex:26},{value:"Yesterday",paraId:22,tocIndex:26},{value:"Today",paraId:22,tocIndex:26},{value:"Tomorrow",paraId:22,tocIndex:26},{value:"Last week",paraId:22,tocIndex:26},{value:"This week",paraId:22,tocIndex:26},{value:"Next week",paraId:22,tocIndex:26},{value:"Last month",paraId:22,tocIndex:26},{value:"This month",paraId:22,tocIndex:26},{value:"Next month",paraId:22,tocIndex:26},{value:"Last quarter",paraId:22,tocIndex:26},{value:"This quarter",paraId:22,tocIndex:26},{value:"Next quarter",paraId:22,tocIndex:26},{value:"Last year",paraId:22,tocIndex:26},{value:"This year",paraId:22,tocIndex:26},{value:"Next year",paraId:22,tocIndex:26},{value:"Last 7 days",paraId:22,tocIndex:26},{value:"Next 7 days",paraId:22,tocIndex:26},{value:"Last 30 days",paraId:22,tocIndex:26},{value:"Next 30 days",paraId:22,tocIndex:26},{value:"Last 90 days",paraId:22,tocIndex:26},{value:"Next 90 days",paraId:22,tocIndex:26},{value:"In assignment contexts, the same date variable will resolve differently depending on the type of the target date field. For example, when assigning the variable ",paraId:23,tocIndex:27},{value:"Today",paraId:23,tocIndex:27},{value:":",paraId:23,tocIndex:27},{value:"For ",paraId:24,tocIndex:27},{value:"Timestamp",paraId:24,tocIndex:27},{value:" and ",paraId:24,tocIndex:27},{value:"DateTime with timezone",paraId:24,tocIndex:27},{value:" fields: the variable resolves to a full UTC time string, such as ",paraId:24,tocIndex:27},{value:"2024-04-20T16:00:00.000Z",paraId:24,tocIndex:27},{value:", including timezone info. This is ideal for cross-timezone data synchronization.",paraId:24,tocIndex:27},{value:"For ",paraId:25,tocIndex:27},{value:"DateTime without timezone",paraId:25,tocIndex:27},{value:" fields: the variable resolves to a local time string, such as ",paraId:25,tocIndex:27},{value:"2025-04-21 00:00:00",paraId:25,tocIndex:27},{value:", with no timezone information, which is more suitable for local business logic.",paraId:25,tocIndex:27},{value:"For ",paraId:26,tocIndex:27},{value:"DateOnly",paraId:26,tocIndex:27},{value:" fields: the variable resolves to a pure date string, such as ",paraId:26,tocIndex:27},{value:"2025-04-21",paraId:26,tocIndex:27},{value:", containing only the year, month, and day.",paraId:26,tocIndex:27},{value:"The system intelligently parses the variable based on the field type to ensure correct formatting and prevent data errors or exceptions due to mismatches.",paraId:27,tocIndex:27},{value:"Common Assignment Use Cases:",paraId:28,tocIndex:27},{value:"Setting default values for date fields in form blocks",paraId:29,tocIndex:27},{value:"Setting ",paraId:29,tocIndex:27},{value:"value",paraId:29,tocIndex:27},{value:" property of date fields in linkage rules",paraId:29,tocIndex:27},{value:"Assigning values to date fields in form submission actions",paraId:29,tocIndex:27},{value:"Supported Variables:",paraId:30,tocIndex:27},{value:"Now",paraId:31,tocIndex:27},{value:"Yesterday",paraId:31,tocIndex:27},{value:"Today",paraId:31,tocIndex:27},{value:"Tomorrow",paraId:31,tocIndex:27},{value:"This variable represents the search parameters in the current page URL. This variable is only available when there is a query string in the page URL. It is more convenient to use it together with ",paraId:32,tocIndex:28},{value:"Link",paraId:33,tocIndex:28},{value:".",paraId:32,tocIndex:28},{value:"This variable's value is a string that serves as a credential for accessing the NocoBase API. It can be used to authenticate the user's identity.",paraId:34,tocIndex:29}]},270597:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase natively supports syncing user data to the ",paraId:0,tocIndex:1},{value:"User",paraId:0,tocIndex:1},{value:" and ",paraId:0,tocIndex:1},{value:"Department",paraId:0,tocIndex:1},{value:" tables. It also allows for extending the target resources for data synchronization to write data to other tables or perform custom processing as needed.",paraId:0,tocIndex:1},{value:"Full documentation is pending.",paraId:1},{value:`export abstract class UserDataResource {
  name: string;
  accepts: SyncAccept[];
  db: Database;
  logger: SystemLogger;

  constructor(db: Database, logger: SystemLogger) {
    this.db = db;
    this.logger = logger;
  }

  abstract update(
    record: OriginRecord,
    resourcePks: PrimaryKey[],
    matchKey?: string,
  ): Promise<RecordResourceChanged[]>;
  abstract create(
    record: OriginRecord,
    matchKey: string,
  ): Promise<RecordResourceChanged[]>;

  get syncRecordRepo() {
    return this.db.getRepository('userDataSyncRecords');
  }

  get syncRecordResourceRepo() {
    return this.db.getRepository('userDataSyncRecordsResources');
  }
}
`,paraId:2,tocIndex:2},{value:"registerResource(resource: UserDataResource, options?: ToposortOptions)",paraId:3,tocIndex:3},{value:`import { Plugin } from '@nocobase/server';
import PluginUserDataSyncServer from '@nocobase/plugin-user-data-sync';

class CustomUserResourcePluginServer extends Plugin {
  async load() {
    const userDataSyncPlugin = this.app.pm.get(PluginUserDataSyncServer);
    if (userDataSyncPlugin && userDataSyncPlugin.enabled) {
      userDataSyncPlugin.resourceManager.registerResource(new CustomDataSyncResource(this.db, this.app.logger));
    }
  }
}
`,paraId:4,tocIndex:3}]},961664:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase allows users to extend data source types for user data synchronization as needed.",paraId:0,tocIndex:1},{value:"The built-in user data synchronization plugin provides registration and management for data source types. To extend a data source type, inherit the ",paraId:1,tocIndex:3},{value:"SyncSource",paraId:1,tocIndex:3},{value:" abstract class provided by the plugin and implement the relevant standard interfaces.",paraId:1,tocIndex:3},{value:`import { SyncSource, UserData } from '@nocobase/plugin-user-data-sync';

class CustomSyncSource extends SyncSource {
  async pull(): Promise<UserData[]> {
    return [];
  }
}
`,paraId:2,tocIndex:3},{value:"The ",paraId:3,tocIndex:3},{value:"SyncSource",paraId:3,tocIndex:3},{value:" class includes an ",paraId:3,tocIndex:3},{value:"options",paraId:3,tocIndex:3},{value:" property to retrieve custom configurations for the data source.",paraId:3,tocIndex:3},{value:`import { SyncSource, UserData } from '@nocobase/plugin-user-data-sync';

class CustomSyncSource extends SyncSource {
  async pull(): Promise<UserData[]> {
    //...
    const { appid, secret } = this.options;
    //...
    return [];
  }
}
`,paraId:4,tocIndex:3},{value:"UserData",paraId:5},{value:"Field",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:"dataType",paraId:6,tocIndex:4},{value:"Data type, options are ",paraId:6,tocIndex:4},{value:"user",paraId:6,tocIndex:4},{value:" and ",paraId:6,tocIndex:4},{value:"department",paraId:6,tocIndex:4},{value:"uniqueKey",paraId:6,tocIndex:4},{value:"Unique identifier field",paraId:6,tocIndex:4},{value:"records",paraId:6,tocIndex:4},{value:"Data records",paraId:6,tocIndex:4},{value:"sourceName",paraId:6,tocIndex:4},{value:"Data source name",paraId:6,tocIndex:4},{value:"If ",paraId:7,tocIndex:4},{value:"dataType",paraId:7,tocIndex:4},{value:" is ",paraId:7,tocIndex:4},{value:"user",paraId:7,tocIndex:4},{value:", the ",paraId:7,tocIndex:4},{value:"records",paraId:7,tocIndex:4},{value:" field contains the following fields:",paraId:7,tocIndex:4},{value:"Field",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"id",paraId:8,tocIndex:4},{value:"User ID",paraId:8,tocIndex:4},{value:"nickname",paraId:8,tocIndex:4},{value:"User nickname",paraId:8,tocIndex:4},{value:"avatar",paraId:8,tocIndex:4},{value:"User avatar",paraId:8,tocIndex:4},{value:"email",paraId:8,tocIndex:4},{value:"Email",paraId:8,tocIndex:4},{value:"phone",paraId:8,tocIndex:4},{value:"Phone number",paraId:8,tocIndex:4},{value:"departments",paraId:8,tocIndex:4},{value:"Array of department IDs",paraId:8,tocIndex:4},{value:"If ",paraId:9,tocIndex:4},{value:"dataType",paraId:9,tocIndex:4},{value:" is ",paraId:9,tocIndex:4},{value:"department",paraId:9,tocIndex:4},{value:", the ",paraId:9,tocIndex:4},{value:"records",paraId:9,tocIndex:4},{value:" field contains the following fields:",paraId:9,tocIndex:4},{value:"Field",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"id",paraId:10,tocIndex:4},{value:"Department ID",paraId:10,tocIndex:4},{value:"name",paraId:10,tocIndex:4},{value:"Department name",paraId:10,tocIndex:4},{value:"parentId",paraId:10,tocIndex:4},{value:"Parent department ID",paraId:10,tocIndex:4},{value:`import { SyncSource, UserData } from '@nocobase/plugin-user-data-sync';

class CustomSyncSource extends SyncSource {
  async pull(): Promise<UserData[]> {
    // ...
    const ThirdClientApi = new ThirdClientApi(
      this.options.appid,
      this.options.secret,
    );
    const departments = await this.clientapi.getDepartments();
    const users = await this.clientapi.getUsers();
    // ...
    return [
      {
        dataType: 'department',
        uniqueKey: 'id',
        records: departments,
        sourceName: this.instance.name,
      },
      {
        dataType: 'user',
        uniqueKey: 'id',
        records: users,
        sourceName: this.instance.name,
      },
    ];
  }
}
`,paraId:11,tocIndex:5},{value:"The extended data source must be registered with the data management module.",paraId:12,tocIndex:6},{value:`import UserDataSyncPlugin from '@nocobase/plugin-user-data-sync';

class CustomSourcePlugin extends Plugin {
  async load() {
    const syncPlugin = this.app.pm.get(
      UserDataSyncPlugin,
    ) as UserDataSyncPlugin;
    if (syncPlugin) {
      syncPlugin.sourceManager.registerType('custom-source-type', {
        syncSource: CustomSyncSource,
        title: 'Custom Source',
      });
    }
  }
}
`,paraId:13,tocIndex:6},{value:"The client user interface registers data source types using the ",paraId:14,tocIndex:7},{value:"registerType",paraId:14,tocIndex:7},{value:" method provided by the user data synchronization plugin's client interface:",paraId:14,tocIndex:7},{value:`import SyncPlugin from '@nocobase/plugin-user-data-sync/client';

class CustomSourcePlugin extends Plugin {
  async load() {
    const sync = this.app.pm.get(SyncPlugin);
    sync.registerType(authType, {
      components: {
        AdminSettingsForm, // Backend management form
      },
    });
  }
}
`,paraId:15,tocIndex:7},{value:"The top section provides general data source configuration, while the bottom section allows for registration of custom configuration forms.",paraId:16,tocIndex:8}]},107069:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This feature allows you to register and manage user data synchronization sources. By default, an HTTP API is provided, but additional data sources can be supported through plugins. It supports syncing data to the ",paraId:0,tocIndex:1},{value:"Users",paraId:0,tocIndex:1},{value:" and ",paraId:0,tocIndex:1},{value:"Departments",paraId:0,tocIndex:1},{value:" tables by default, with the possibility to extend synchronization to other target resources using plugins.",paraId:0,tocIndex:1},{value:"This is a built-in plugin and does not require separate installation.",paraId:1,tocIndex:2},{value:"If no plugins providing user data synchronization sources are installed, user data can be synchronized using the HTTP API. Refer to ",paraId:2},{value:"Data Source - HTTP API",paraId:3},{value:".",paraId:2},{value:'Once you install a plugin that provides a user data synchronization source, you can add the corresponding data source. Only enabled data sources will display the "Sync" and "Task" buttons.',paraId:4,tocIndex:4},{value:"Example: WeCom (Enterprise WeChat)",paraId:5,tocIndex:4},{value:"Click the ",paraId:6,tocIndex:5},{value:"Sync",paraId:6,tocIndex:5},{value:" button to start synchronizing data.",paraId:6,tocIndex:5},{value:"Click the ",paraId:7,tocIndex:5},{value:"Task",paraId:7,tocIndex:5},{value:" button to view the synchronization status. After successful synchronization, you can view the data in the Users and Departments lists.",paraId:7,tocIndex:5},{value:"For failed synchronization tasks, you can click ",paraId:8,tocIndex:5},{value:"Retry",paraId:8,tocIndex:5},{value:".",paraId:8,tocIndex:5},{value:"In case of synchronization failures, you can troubleshoot the issue through system logs. Additionally, raw synchronization records are stored in the ",paraId:9,tocIndex:5},{value:"user-data-sync",paraId:9,tocIndex:5},{value:" directory under the application logs folder.",paraId:9,tocIndex:5}]},605391:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to ",paraId:0,tocIndex:1},{value:"API Keys",paraId:1,tocIndex:1},{value:". Ensure that the role associated with the API key has the necessary permissions to sync user data.",paraId:0,tocIndex:1},{value:`curl 'https://localhost:13000/api/userData:push' \\
  -H 'Authorization: Bearer <token>' \\
  --data-raw '{"dataType":"user","records":[]}' # See details of the request body below
`,paraId:2,tocIndex:3},{value:`POST /api/userData:push
`,paraId:3,tocIndex:4},{value:"Parameter",paraId:4,tocIndex:6},{value:"Type",paraId:4,tocIndex:6},{value:"Description",paraId:4,tocIndex:6},{value:"dataType",paraId:4,tocIndex:6},{value:"'user' | 'department'",paraId:4,tocIndex:6},{value:"Required. Type of data being pushed. Use ",paraId:4,tocIndex:6},{value:"user",paraId:4,tocIndex:6},{value:" for pushing user data.",paraId:4,tocIndex:6},{value:"matchKey",paraId:4,tocIndex:6},{value:"'username' | 'email' | 'phone'",paraId:4,tocIndex:6},{value:"Optional. Used to match existing system users based on the specified field.",paraId:4,tocIndex:6},{value:"records",paraId:4,tocIndex:6},{value:"UserRecord[]",paraId:4,tocIndex:6},{value:"Required. Array of user data records.",paraId:4,tocIndex:6},{value:"Parameter",paraId:5,tocIndex:7},{value:"Type",paraId:5,tocIndex:7},{value:"Description",paraId:5,tocIndex:7},{value:"uid",paraId:5,tocIndex:7},{value:"string",paraId:5,tocIndex:7},{value:"Required. Unique identifier for the source user data. Immutable for a user.",paraId:5,tocIndex:7},{value:"nickname",paraId:5,tocIndex:7},{value:"string",paraId:5,tocIndex:7},{value:"Optional. User's nickname.",paraId:5,tocIndex:7},{value:"username",paraId:5,tocIndex:7},{value:"string",paraId:5,tocIndex:7},{value:"Optional. Username.",paraId:5,tocIndex:7},{value:"email",paraId:5,tocIndex:7},{value:"string",paraId:5,tocIndex:7},{value:"Optional. User's email address.",paraId:5,tocIndex:7},{value:"phone",paraId:5,tocIndex:7},{value:"string",paraId:5,tocIndex:7},{value:"Optional. User's phone number.",paraId:5,tocIndex:7},{value:"departments",paraId:5,tocIndex:7},{value:"string[]",paraId:5,tocIndex:7},{value:"Optional. Array of department UIDs the user belongs to.",paraId:5,tocIndex:7},{value:"isDeleted",paraId:5,tocIndex:7},{value:"boolean",paraId:5,tocIndex:7},{value:"Optional. Indicates whether the record is deleted.",paraId:5,tocIndex:7},{value:"<field>",paraId:5,tocIndex:7},{value:"any",paraId:5,tocIndex:7},{value:"Optional. Custom fields in the user table.",paraId:5,tocIndex:7},{value:"Pushing department data requires the ",paraId:6},{value:"Departments",paraId:7},{value:" plugin to be installed and enabled.",paraId:6},{value:"Parameter",paraId:8,tocIndex:9},{value:"Type",paraId:8,tocIndex:9},{value:"Description",paraId:8,tocIndex:9},{value:"dataType",paraId:8,tocIndex:9},{value:"'user' | 'department'",paraId:8,tocIndex:9},{value:"Required. Type of data being pushed. Use ",paraId:8,tocIndex:9},{value:"department",paraId:8,tocIndex:9},{value:" for department data.",paraId:8,tocIndex:9},{value:"records",paraId:8,tocIndex:9},{value:"DepartmentRecord[]",paraId:8,tocIndex:9},{value:"Required. Array of department data records.",paraId:8,tocIndex:9},{value:"Parameter",paraId:9,tocIndex:10},{value:"Type",paraId:9,tocIndex:10},{value:"Description",paraId:9,tocIndex:10},{value:"uid",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Required. Unique identifier for the source department data. Immutable.",paraId:9,tocIndex:10},{value:"title",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Required. Department title.",paraId:9,tocIndex:10},{value:"parentUid",paraId:9,tocIndex:10},{value:"string",paraId:9,tocIndex:10},{value:"Optional. UID of the parent department.",paraId:9,tocIndex:10},{value:"isDeleted",paraId:9,tocIndex:10},{value:"boolean",paraId:9,tocIndex:10},{value:"Optional. Indicates whether the record is deleted.",paraId:9,tocIndex:10},{value:"<field>",paraId:9,tocIndex:10},{value:"any",paraId:9,tocIndex:10},{value:"Optional. Custom fields in the department table.",paraId:9,tocIndex:10},{value:"Data pushing is idempotent, ensuring consistent results with multiple pushes.",paraId:10},{value:"If a parent department is not yet created when pushing department data, it cannot be associated. Re-push the data after creating the parent department.",paraId:10},{value:"Similarly, if a department is not yet created when pushing user data, it cannot associate users with their departments. Push the department data first, then re-push the user data.",paraId:10}]},940794:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To be added.",paraId:0,tocIndex:3}]},227981:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To be added.",paraId:0,tocIndex:3}]},540340:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"https://static-docs.nocobase.com",paraId:0},{value:"The ",paraId:1,tocIndex:1},{value:"https://static-docs.nocobase.com",paraId:1,tocIndex:1},{value:" plugin provides a basic user model and a user management interface.",paraId:1,tocIndex:1},{value:"Built-in plugin, no separate installation required.",paraId:2,tocIndex:2},{value:"This plugin provides a user management interface in the configuration center. After application initialization, an undeletable super admin account will be added. The super admin has Root permissions and can access all resources.",paraId:3,tocIndex:4},{value:"In addition, you can also add various different blocks of the ",paraId:4,tocIndex:4},{value:"https://static-docs.nocobase.com",paraId:4,tocIndex:4},{value:" collection to manage ",paraId:4,tocIndex:4},{value:"https://static-docs.nocobase.com",paraId:4,tocIndex:4},{value:", such as table blocks:",paraId:4,tocIndex:4},{value:"The version of NocoBase needs to be v1.3.34-beta or above.",paraId:5},{value:"Configure whether to allow editing user profiles and changing user passwords (applies to all users).",paraId:6}]},264657:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The TOTP Authenticator allows users to bind any authenticator that complies with the TOTP (Time-based One-Time Password) specification (",paraId:0,tocIndex:1},{value:"RFC-6238",paraId:0,tocIndex:1},{value:"), and perform identity verification using a time-based one-time password (TOTP).",paraId:0,tocIndex:1},{value:"Navigate to the Verification Management page.",paraId:1,tocIndex:2},{value:"Add - TOTP Authenticator",paraId:2,tocIndex:2},{value:"Apart from a unique identifier and title, no additional configuration is required for the TOTP authenticator.",paraId:3,tocIndex:2},{value:"After adding the authenticator, users can bind the TOTP authenticator in their personal verification management area.",paraId:4,tocIndex:3},{value:"The plugin does not currently provide a recovery code mechanism. Once the TOTP authenticator is bound, users are advised to keep it secure. If the authenticator is accidentally lost, they can use an alternative verification method to verify their identity, unbind the authenticator, and then rebind it.",paraId:5},{value:"Unbinding the authenticator requires verification using the already bound verification method.",paraId:6,tocIndex:4}]},842598:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"verify()",paraId:0},{value:"onActionComplete()",paraId:0},{value:"getBoundInfo()",paraId:0},{value:"getPublicBoundInfo()",paraId:0},{value:"validateBoundInfo()",paraId:0},{value:"bind()",paraId:0},{value:"verificator",paraId:0},{value:"ctx",paraId:0},{value:"options",paraId:0},{value:"verify()",paraId:0},{value:"getBoundInfo()",paraId:0},{value:"expiresIn",paraId:0},{value:"verify()",paraId:0},{value:"bind()",paraId:0},{value:"onActionComplete()",paraId:0},{value:"registerVerificationType()",paraId:0},{value:"listTypes()",paraId:0},{value:"registerAction()",paraId:0},{value:"registerScene()",paraId:0},{value:"addSceneRule()",paraId:0},{value:"getVerificationTypesByScene()",paraId:0},{value:"getVerification()",paraId:0},{value:"getVerificator()",paraId:0},{value:"getVerificators()",paraId:0},{value:"getBoundInfo()",paraId:0},{value:"verify()",paraId:0},{value:"middleware()",paraId:0}]},389179:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},360674:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},35811:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Starting with ",paraId:0},{value:"1.6.0-alpha.30",paraId:0},{value:", the original \u201Cverification code\u201D feature has been upgraded to \u201CVerification Management\u201D, which supports managing and integrating various methods of user verification. Once users bind the corresponding verification method, they can perform identity verification when needed. This feature is planned to be stably supported beginning with version ",paraId:0},{value:"1.7.0",paraId:0},{value:".",paraId:0},{value:"The Verification Management Center supports managing and integrating various methods of user verification.",paraId:1,tocIndex:1},{value:" For example:",paraId:1,tocIndex:1},{value:"SMS Verification Code \u2013 Provided by the default verification plugin. Refer to: ",paraId:2,tocIndex:1},{value:"Auth: SMS",paraId:3,tocIndex:1},{value:"TOTP Authenticator \u2013 Refer to: ",paraId:2,tocIndex:1},{value:"Auth: TOTP Authenticator",paraId:4,tocIndex:1},{value:"Developers can also extend other types of verification via plugins. Refer to: ",paraId:5,tocIndex:1},{value:"Extending Verification Types",paraId:6,tocIndex:1},{value:"Users can perform identity verification when needed after binding the corresponding verification method.",paraId:7,tocIndex:1},{value:" For example:",paraId:7,tocIndex:1},{value:"SMS Verification Login \u2013 Refer to: ",paraId:8,tocIndex:1},{value:"Auth: SMS",paraId:9,tocIndex:1},{value:"Two-Factor Authentication (2FA) \u2013 Refer to: ",paraId:8,tocIndex:1},{value:"Auth: Two-Factor Authentication (2FA)",paraId:10,tocIndex:1},{value:"Secondary Verification for Risk Operations \u2013 Future support",paraId:8,tocIndex:1},{value:"Developers can also integrate identity verification into other necessary scenarios by extending plugins. Refer to: ",paraId:11,tocIndex:1},{value:"Extending Verification Scenarios",paraId:12,tocIndex:1},{value:"Differences and Relationships Between the Verification Module and the User Authentication Module:",paraId:13,tocIndex:1},{value:" The User Authentication Module is primarily responsible for identity authentication during user login, with processes such as SMS login and two-factor authentication relying on verifiers provided by the Verification Module; meanwhile, the Verification Module handles identity verification for various high-risk operations, with user login being one of those scenarios.",paraId:13,tocIndex:1}]},143626:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This article primarily explains how to extend the SMS provider functionality in the ",paraId:0,tocIndex:0},{value:"Auth: SMS",paraId:1,tocIndex:0},{value:" feature via a plugin.",paraId:0,tocIndex:0},{value:"When configuring the SMS verifier, after selecting an SMS provider type, a configuration form associated with that provider type will appear. This configuration form needs to be registered by the developer on the client side.",paraId:2,tocIndex:2},{value:`import { Plugin, SchemaComponent } from '@nocobase/client';
import PluginVerificationClient from '@nocobase/plugin-verification/client';
import React from 'react';

const CustomSMSProviderSettingsForm: React.FC = () => {
  return <SchemaComponent schema={{
    type: 'void',
    properties: {
      accessKeyId: {
        title: \`{{t("Access Key ID", { ns: "\${NAMESPACE}" })}}\`,
        type: 'string',
        'x-decorator': 'FormItem',
        'x-component': 'TextAreaWithGlobalScope',
        required: true,
      },
      accessKeySecret: {
        title: \`{{t("Access Key Secret", { ns: "\${NAMESPACE}" })}}\`,
        type: 'string',
        'x-decorator': 'FormItem',
        'x-component': 'TextAreaWithGlobalScope',
        'x-component-props': { password: true },
        required: true,
      },
    }
  }} />
}

class PluginCustomSMSProviderClient extends Plugin {
  async load() {
    const plugin = this.app.pm.get('verification') as PluginVerificationClient;
    plugin.smsOTPProviderManager.registerProvider('custom-sms-provider-name', {
      components: {
        AdminSettingsForm: CustomSMSProviderSettingsForm,
      },
    });
  }
}
`,paraId:3,tocIndex:2},{value:"The verification plugin has already encapsulated the process of creating one-time dynamic passwords (OTPs), so developers only need to implement the logic for sending messages to interact with the SMS provider.",paraId:4,tocIndex:4},{value:`class CustomSMSProvider extends SMSProvider {
  constructor(options) {
    super(options);
    // options is the configuration object from the client
    const options = this.options;
    // ...
  }

  async send(phoneNumber: string, data: { code: string }) {
    // ...
  }
}
`,paraId:5,tocIndex:4},{value:"Once the sending interface is implemented, it needs to be registered.",paraId:6,tocIndex:5},{value:`import { Plugin } from '@nocobase/server';
import PluginVerificationServer from '@nocobase/plugin-verification';
import { tval } from '@nocobase/utils';

class PluginCustomSMSProviderServer extends Plugin {
  async load() {
    const plugin = this.app.pm.get('verification') as PluginVerificationServer;
    // The name must correspond to the one used on the client
    plugin.smsOTPProviderManager.registerProvider('custom-sms-provider-name', {
      title: tval('Custom SMS provider', { ns: namespace }),
      provider: CustomSMSProvider,
    });
  }
}
`,paraId:7,tocIndex:5}]},792545:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The SMS verification code is a built-in verification type used to generate a one-time dynamic password (OTP) and send it to the user via SMS.",paraId:0,tocIndex:1},{value:"Navigate to the verification management page.",paraId:1,tocIndex:2},{value:"Click ",paraId:2,tocIndex:2},{value:"Add - SMS OTP",paraId:2,tocIndex:2},{value:"Currently, the supported SMS service providers are:",paraId:3,tocIndex:3},{value:"Aliyun Cloud SMS",paraId:4,tocIndex:3},{value:"Tencent Cloud SMS",paraId:4,tocIndex:3},{value:"Developers can also extend support for other SMS service providers in the form of plugins. See: ",paraId:5,tocIndex:3},{value:"Extending SMS Service Providers",paraId:6,tocIndex:3},{value:"After adding the verifier, users can bind a phone number in their personal verification management.",paraId:7,tocIndex:4},{value:"Once the binding is successful, the user can proceed with identity verification in scenarios that have bound the verifier.",paraId:8,tocIndex:4},{value:"To unbind a phone number, verification must be completed using the already bound verification method.",paraId:9,tocIndex:5}]},119858:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"WeCom",paraId:0,tocIndex:1},{value:" plugin allows users to log in to NocoBase using their WeCom accounts.",paraId:0,tocIndex:1},{value:"Log in to the WeCom admin console and create a custom WeCom application.",paraId:1,tocIndex:3},{value:"Click the app to enter its details page. Scroll down and click ",paraId:2,tocIndex:3},{value:'"WeCom Authorized Login"',paraId:2,tocIndex:3},{value:".",paraId:2,tocIndex:3},{value:"Set the authorized callback domain to the domain of the NocoBase application.",paraId:3,tocIndex:3},{value:"Return to the app's details page and click ",paraId:4,tocIndex:3},{value:'"Web Authorization and JS-SDK"',paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"Configure and verify the callback domain name for the app's OAuth 2.0 web authorization feature.",paraId:5,tocIndex:3},{value:"On the app's details page, click ",paraId:6,tocIndex:3},{value:'"Trusted Enterprise IPs"',paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:"Set the IP addresses of the NocoBase application.",paraId:7,tocIndex:3},{value:"In the WeCom admin console, go to ",paraId:8,tocIndex:4},{value:"My Enterprise",paraId:8,tocIndex:4},{value:" and copy the ",paraId:8,tocIndex:4},{value:'"Enterprise ID"',paraId:8,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"In the admin console, navigate to ",paraId:9,tocIndex:4},{value:"App Management",paraId:9,tocIndex:4},{value:". Access the details of the app created earlier and copy the AgentId and Secret.",paraId:9,tocIndex:4},{value:"Navigate to the user authentication plugin management page.",paraId:10,tocIndex:5},{value:"Add new - WeCom",paraId:11,tocIndex:5},{value:"Configuration Item",paraId:12,tocIndex:6},{value:"Description",paraId:12,tocIndex:6},{value:"Version Requirement",paraId:12,tocIndex:6},{value:"When a phone number does not match an existing user, ",paraId:12,tocIndex:6},{value:"should a new user be created automatically",paraId:12,tocIndex:6},{value:"Automatically create a new user if the phone number doesn't match an existing user.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"Company ID",paraId:12,tocIndex:6},{value:"Enterprise ID, obtained from the WeCom admin console.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"AgentId",paraId:12,tocIndex:6},{value:"Obtained from the custom app configuration in the WeCom admin console.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"Secret",paraId:12,tocIndex:6},{value:"Obtained from the custom app configuration in the WeCom admin console.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"Origin",paraId:12,tocIndex:6},{value:"The domain name of the current application.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"Workbench application redirect link",paraId:12,tocIndex:6},{value:"The application path to redirect to after successful login.",paraId:12,tocIndex:6},{value:"v1.4.0",paraId:12,tocIndex:6},{value:"Automatic login",paraId:12,tocIndex:6},{value:"Automatically log in when opening the app link in the WeCom browser. Only one authenticator can enable this.",paraId:12,tocIndex:6},{value:"v1.4.0",paraId:12,tocIndex:6},{value:"Workbench application homepage link",paraId:12,tocIndex:6},{value:"The homepage link of the workbench app.",paraId:12,tocIndex:6},{value:"-",paraId:12,tocIndex:6},{value:"For versions ",paraId:13},{value:"v1.4.0",paraId:13},{value:' and later, when enabling the "Automatic Login" option, the app homepage link can be simplified to: ',paraId:13},{value:"https://<url>/<path>",paraId:13},{value:". For example: ",paraId:13},{value:"https://example.nocobase.com/admin",paraId:13},{value:".",paraId:13},{value:"Separate configurations can be set for mobile and desktop, such as ",paraId:14},{value:"https://example.nocobase.com/m",paraId:14},{value:" for mobile and ",paraId:14},{value:"https://example.nocobase.com/admin",paraId:14},{value:" for desktop.",paraId:14},{value:"Access the WeCom admin console and paste the copied workbench application homepage link into the corresponding application's homepage field.",paraId:15},{value:"Visit the login page and click the button below the login form to initiate third-party login.",paraId:16,tocIndex:8},{value:"Due to restrictions on sensitive information like phone numbers in WeCom, authorization can only be completed within the WeCom client. For first-time logins, follow the steps below to complete the initial authorization within the WeCom client.",paraId:17},{value:"Open the WeCom client, navigate to the workbench, scroll to the bottom, and click the app to access the previously entered application homepage. This completes the first-time authorization and enables WeCom login within the NocoBase application.",paraId:18,tocIndex:9}]},193751:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"WeCom",paraId:0,tocIndex:1},{value:" plugin offers integration capabilities for Enterprise WeChat, including authentication methods, notification channels, and user data synchronization sources.",paraId:0,tocIndex:1},{value:"References:",paraId:1,tocIndex:1},{value:"Authentication: WeCom",paraId:2,tocIndex:1},{value:"Notification: WeCom",paraId:3,tocIndex:1},{value:"Synchronization Source: WeCom",paraId:4,tocIndex:1}]},135627:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"WeCom",paraId:0,tocIndex:1},{value:" plugin enables applications to send notification messages to WeCom users.",paraId:0,tocIndex:1},{value:"First, you need to add and configure a WeCom authenticator in NocoBase. Refer to ",paraId:1,tocIndex:2},{value:"User Authentication - WeCom",paraId:2,tocIndex:2},{value:". Only system users who have logged in via WeCom can receive system notifications through it.",paraId:1,tocIndex:2},{value:"Select the authenticator you just configured.",paraId:3,tocIndex:4},{value:"Select the configured WeCom notification channel. Three message types are supported: Text Card, Markdown, and Template Card.",paraId:4,tocIndex:5}]},305015:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The ",paraId:0,tocIndex:1},{value:"WeCom",paraId:0,tocIndex:1},{value:" plugin allows users to synchronize user and department data from WeCom.",paraId:0,tocIndex:1},{value:"First, you need to create a custom application in the WeCom admin panel and obtain the ",paraId:1,tocIndex:2},{value:"Corporate ID",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"AgentID",paraId:1,tocIndex:2},{value:", and ",paraId:1,tocIndex:2},{value:"Secret",paraId:1,tocIndex:2},{value:".",paraId:1,tocIndex:2},{value:"Refer to ",paraId:2,tocIndex:2},{value:"User Authentication - WeCom",paraId:3,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"Navigate to Users and Permissions > Synchronization > Add, and fill in the required information.",paraId:4,tocIndex:3},{value:"Go to the WeCom admin panel and navigate to Security and Management > Management Tools, then click Address Book Synchronization.",paraId:5,tocIndex:4},{value:"Follow the instructions as shown in the image and configure a trusted corporate IP address.",paraId:6,tocIndex:4},{value:"Once this is set up, you can proceed with user data synchronization.",paraId:7,tocIndex:4},{value:"To ensure that changes in user or department data on the WeCom side are promptly synchronized with the NocoBase application, further configuration is required.",paraId:8,tocIndex:5},{value:"After completing the previous setup steps, you can copy the address for the address book callback notifications.",paraId:9,tocIndex:5},{value:"Enter this address into the WeCom settings, and obtain the Token and EncodingAESKey to complete the NocoBase user synchronization data source configuration.",paraId:10,tocIndex:5}]},534674:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When configuring actions in local trigger mode, once the workflow setup is complete, you'll need to return to the user interface and link the workflow to the relevant form operation button in the corresponding data block.",paraId:0,tocIndex:0},{value:'The workflow associated with the "Submit" button (including the "Save record" button) will be triggered after the user submits the form and the data operation is completed.',paraId:1,tocIndex:0},{value:`To bind a workflow, simply select "Bind Workflows" from the button configuration menu to open the binding configuration dialog. Here, you can set up multiple workflows to be triggered. If none are configured, it indicates that no workflows will be triggered. For each workflow, you'll need to determine whether the trigger involves data from the entire form or data from a specific relational field within the form. Then, based on the selected data model, choose the form workflow that corresponds to the data model of the associated table.`,paraId:2,tocIndex:0},{value:"Ensure that the workflow is enabled before attempting to select it in the above interface.",paraId:3}]},735966:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Output:",paraId:0,tocIndex:0},{value:" Final Polished Translation",paraId:0,tocIndex:0},{value:"Here, we will walk through the process by adding a new operation.",paraId:1,tocIndex:0},{value:'Imagine a scenario involving a "Expenses applications." After an employee submits an expense reimbursement, the system needs to perform an automatic review of the amount and, if necessary, trigger a manual review for amounts exceeding a set limit. Only requests that pass these reviews will be approved and subsequently forwarded to the finance department for processing.',paraId:2,tocIndex:0},{value:'To start, we can create a "Expenses" collection with the following fields:',paraId:3,tocIndex:0},{value:"Project Name:",paraId:4,tocIndex:0},{value:" Single-line Text",paraId:4,tocIndex:0},{value:"Applicant:",paraId:4,tocIndex:0},{value:" Many-to-One (User)",paraId:4,tocIndex:0},{value:"Amount:",paraId:4,tocIndex:0},{value:" Numeric",paraId:4,tocIndex:0},{value:"Status:",paraId:4,tocIndex:0},{value:' Single Choice (Options: "Approved", "Processed")',paraId:4,tocIndex:0},{value:`Next, we'll create a workflow categorized as a "Post-action Event" and configure the trigger's data table model to point to the "Expenses" collection:`,paraId:5,tocIndex:0},{value:"Once the workflow is enabled, we can proceed with configuring the specific processing nodes.",paraId:6,tocIndex:0},{value:`Then, on the user interface, create a table block for the "Expenses" data table and add an "Add" button to the toolbar, ensuring the corresponding form fields are properly configured. In the settings for the form's "Submit" button, open the "Bind Workflow" configuration dialog, select the entire form's data as the context, and link it to the workflow we previously created:`,paraId:7,tocIndex:0},{value:"Once the form configuration is complete, return to the workflow to arrange the logic. For instance, if the reimbursement amount exceeds 500, the system will require an administrator's manual review; otherwise, it will automatically approve the request. Upon approval, a expenses record is generated and forwarded to finance for further processing (details omitted).",paraId:8,tocIndex:0},{value:"Setting aside the subsequent financial processing, this completes the configuration of the expenses application process. When an employee fills out and submits a expenses request, the system triggers the corresponding workflow. If the amount is under 500, a record is automatically created and awaits further action by finance. If the amount exceeds this threshold, the request undergoes a supervisor's review. Upon approval, the record is created and handed over to finance for processing.",paraId:9,tocIndex:0},{value:'This example workflow can also be applied to a standard "Submit" button, depending on whether the business scenario requires a record to be created before moving on to subsequent steps.',paraId:10,tocIndex:0}]},102001:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Post-action events can be triggered not only through user interface interactions but also via HTTP API calls, providing a flexible way to initiate workflows programmatically.",paraId:0,tocIndex:0},{value:"When triggering post-operation events through HTTP API calls, it's essential to ensure that the workflow is active and the data table configuration is correctly matched. If these conditions aren't met, the call may fail or produce errors.",paraId:1},{value:"For workflows associated with specific operation buttons, you can trigger them using the following method (illustrated here with the ",paraId:2},{value:"posts",paraId:2},{value:" table creation button):",paraId:2},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post."
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey"
`,paraId:3},{value:"In this example, the URL parameter ",paraId:4},{value:"triggerWorkflows",paraId:4},{value:" specifies the workflow key, with multiple workflows separated by commas if needed. You can obtain this key by hovering over the workflow name at the top of the workflow canvas:",paraId:4},{value:"Upon successful execution, this call will trigger the appropriate post-operation event for the ",paraId:5},{value:"posts",paraId:5},{value:" table.",paraId:5},{value:"Since external API calls require user authentication, the same credentials used for standard interface requests must be provided in HTTP API calls. This includes the ",paraId:6},{value:"Authorization",paraId:6},{value:" request header or ",paraId:6},{value:"token",paraId:6},{value:" parameter (obtained during login), and the ",paraId:6},{value:"X-Role",paraId:6},{value:" request header, which specifies the current user's role.",paraId:6},{value:"If you need to trigger an event related to a one-to-one relationship (currently unsupported for many-to-one relationships), you can use the ",paraId:7},{value:"!",paraId:7},{value:" symbol in the parameters to indicate the relationship field's trigger data:",paraId:7},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post.",
    "category": {
      "title": "Test category"
    }
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey!category"
`,paraId:8},{value:"Upon successful execution, this will trigger the corresponding post-operation event for the ",paraId:9},{value:"categories",paraId:9},{value:" table.",paraId:9},{value:"If the event is set up in global mode, there's no need to specify the workflow using the ",paraId:10},{value:"triggerWorkflows",paraId:10},{value:" URL parameter. Simply triggering the relevant data table operation will automatically initiate the associated workflow.",paraId:10}]},998266:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the system, all user-generated data changes are typically carried out through some form of operation, usually by clicking a button. This button could be a submit button on a form or an action button within a data block. Post-action events are designed to bind specific workflows to these button actions, ensuring that a particular process is triggered upon successful user interaction.",paraId:0},{value:'For instance, when adding or updating data, users can configure the "Bind Workflows" option on a button. Once the action is completed, the bound workflow will be triggered automatically.',paraId:1},{value:"From an implementation standpoint, since Post-action event processing occurs at the middleware level (using Koa middleware), even making an HTTP API call to NocoBase can trigger defined Post-action events.",paraId:2},{value:'The Post-action event was initially called "Form Event." In earlier versions, this feature was limited to form buttons. However, starting from version ',paraId:3},{value:"v0.20",paraId:3},{value:', it has also become available for operation buttons within more data blocks, leading to its renaming as "Post-action event."',paraId:3},{value:"The distinction between Post-action and Pre-action events lies in the timing of their triggers during the operation request and response cycle. One is triggered before the operation is processed, while the other is triggered afterward, as illustrated below:",paraId:4,tocIndex:2},{value:"Pre-action events are triggered before the operation is executed, meaning they occur before the request is processed. These events can be utilized to validate or manipulate the request data, and if the request is blocked, the operation will not proceed.",paraId:5,tocIndex:2},{value:"Conversely, Post-action events are triggered after the user's action has been successfully completed. At this stage, the data has already been submitted successfully, and the related processes can proceed based on the successful outcome.",paraId:6,tocIndex:2},{value:"Post-action events and table events have similarities in that both are triggered after data changes occur. However, their implementations differ. Post-action events are focused on the API level, whereas table events are concerned with changes in data within tables.",paraId:7,tocIndex:3},{value:"Table events are closer to the system's core. In some instances, a single event may trigger data changes that lead to another event, creating a chain reaction. This is particularly true when related table data is altered during operations on the current table, which can trigger events in associated tables.",paraId:8,tocIndex:3},{value:"Table events do not contain user-related information. In contrast, Post-action events are more closely linked to the user end, reflecting the results of user actions. The context of these processes will include user-related information, making them suitable for handling workflows resulting from user actions. In NocoBase's future design, more Post-action events may be added to expand the triggers available, so it is ",paraId:9,tocIndex:3},{value:"recommended to use Post-action events",paraId:9,tocIndex:3},{value:" for managing workflows stemming from data changes caused by user actions.",paraId:9,tocIndex:3},{value:"Another key difference is that Post-action events can be selectively bound to specific forms. If there are multiple forms, some can trigger the event upon submission, while others do not. On the other hand, table events are tied to data changes across the entire table and cannot be selectively bound.",paraId:10,tocIndex:3},{value:"This plugin is built-in and does not require installation.",paraId:11,tocIndex:4},{value:"The use of Post-action events is divided into several parts:",paraId:12,tocIndex:5},{value:"Trigger Configuration",paraId:13,tocIndex:5},{value:"Action Configuration",paraId:14,tocIndex:5},{value:"You can also refer to ",paraId:15,tocIndex:5},{value:"Examples",paraId:16,tocIndex:5},{value:" to understand their application in real-world scenarios.",paraId:15,tocIndex:5},{value:"If external system calls are necessary, please refer to ",paraId:17,tocIndex:5},{value:"External Calls",paraId:18,tocIndex:5},{value:".",paraId:17,tocIndex:5}]},36129:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'To create a workflow, begin by selecting "Post-action Event" as the type:',paraId:0,tocIndex:1},{value:'When setting up post-action events, you have the option to choose between "Synchronous" and "Asynchronous" execution modes:',paraId:1,tocIndex:2},{value:"Use the synchronous mode if the process needs to execute and provide feedback immediately after a user operation. For other scenarios, the default asynchronous mode is generally suitable. In asynchronous mode, the user operation completes instantly, and the workflow continues to execute in the background as part of a queued process.",paraId:2,tocIndex:2},{value:"To begin configuration, navigate to the workflow canvas and click on the trigger to open the settings window. The first step is to select the data table that you wish to bind:",paraId:3,tocIndex:3},{value:"Next, determine the trigger mode by choosing between Local Mode and Global Mode:",paraId:4,tocIndex:4},{value:"Local Mode",paraId:5,tocIndex:4},{value:": This mode triggers the workflow only on the action buttons that have been explicitly bound to it. If the workflow is not bound, clicking the button will not initiate the workflow. This mode is ideal when you want to tailor the workflow to specific forms or actions.",paraId:5,tocIndex:4},{value:"Global Mode",paraId:5,tocIndex:4},{value:": In this mode, the workflow is triggered by any action button configured within the data table, regardless of the form's origin, and does not require specific workflow binding.",paraId:5,tocIndex:4},{value:"In Local Mode, you can currently bind the following action buttons:",paraId:6,tocIndex:4},{value:'The "Submit" and "Save" buttons in new forms.',paraId:7,tocIndex:4},{value:'The "Submit" and "Save" buttons in update forms.',paraId:7,tocIndex:4},{value:'The "Update Data" button within data rows (such as in tables, lists, or kanban views).',paraId:7,tocIndex:4},{value:'When using Global Mode, you also need to specify the action type. The available options are "Create record action" and "Update record action." The workflow is triggered upon the successful completion of either operation.',paraId:8,tocIndex:5},{value:"If subsequent workflow steps require the use of related data from the trigger, you can select the relationship fields to preload:",paraId:9,tocIndex:6},{value:"These preloaded related data will then be readily accessible throughout the workflow after it is triggered.",paraId:10,tocIndex:6}]},499510:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is designed to execute aggregate function queries on specific data within a table that meets defined conditions, returning the relevant statistical outcomes. It is particularly useful for generating statistical data for reports.",paraId:0},{value:"The node operates using database aggregate functions and currently supports querying a single field within a single data table. The resulting statistics are stored within the node\u2019s output, making them available for subsequent nodes in the workflow.",paraId:1},{value:"This is a built-in plugin, so no installation steps are required.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus ("+") button within the process flow to add an "Aggregate Query" node:',paraId:3,tocIndex:3},{value:"This plugin supports five SQL aggregate functions: ",paraId:4,tocIndex:5},{value:"COUNT",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"SUM",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"AVG",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"MIN",paraId:4,tocIndex:5},{value:", and ",paraId:4,tocIndex:5},{value:"MAX",paraId:4,tocIndex:5},{value:". You can select any one of these functions to perform the aggregate query on your data.",paraId:4,tocIndex:5},{value:"There are two methods for selecting the target of the aggregate query. The first is to directly select the target data table and one of its fields. The second is to choose a related data table and field from the existing data objects in the workflow context to perform the aggregate query.",paraId:5,tocIndex:6},{value:"This feature corresponds to the ",paraId:6,tocIndex:7},{value:"DISTINCT",paraId:6,tocIndex:7},{value:" keyword in SQL. The distinct field must be the same as the selected data table field, and currently, different fields cannot be selected for the distinct and target fields.",paraId:6,tocIndex:7},{value:"You can apply filter conditions similar to those in a standard data table query, using the workflow\u2019s context variables.",paraId:7,tocIndex:8},{value:`The aggregate target "Collection Table Data" is quite intuitive, so let's illustrate the usage of the aggregate target as "Related Collection Table Data" with the example of "counting the total number of articles in a category after adding a new article to that category."`,paraId:8,tocIndex:9},{value:'First, create two data tables: "Posts" and "Categories." The "Posts" collection includes a many-to-one relationship field pointing to the "Categories" collection, and a reverse relationship field that allows one category to contain multiple articles:',paraId:9,tocIndex:9},{value:"Field Name",paraId:10,tocIndex:9},{value:"Type",paraId:10,tocIndex:9},{value:"Title",paraId:10,tocIndex:9},{value:"Single Line Text",paraId:10,tocIndex:9},{value:"Category",paraId:10,tocIndex:9},{value:"Many-to-One (Category)",paraId:10,tocIndex:9},{value:"Field Name",paraId:11,tocIndex:9},{value:"Type",paraId:11,tocIndex:9},{value:"Category Name",paraId:11,tocIndex:9},{value:"Single Line Text",paraId:11,tocIndex:9},{value:"Posts",paraId:11,tocIndex:9},{value:"One-to-Many (Articles)",paraId:11,tocIndex:9},{value:'Next, create a workflow triggered by an event in the data table, specifically when new data is added to the "Articles" table.',paraId:12,tocIndex:9},{value:"Then, add an aggregate query node with the following configuration:",paraId:13,tocIndex:9},{value:"Once the workflow is triggered, the aggregate query node will calculate the total number of articles within the category of the newly added article and save this count as the node\u2019s output.",paraId:14,tocIndex:9},{value:'If you need to access related data in a collection table event trigger, ensure you configure the relevant fields for "Preload associations" in the trigger; otherwise, these fields won\u2019t be selectable.',paraId:15}]},31390:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After configuring and activating an approval workflow, you can link it to the submit button of the relevant data table form. This setup allows users to automatically initiate the approval process when they submit the form:",paraId:0,tocIndex:0},{value:"Once the workflow is linked, users will trigger the approval process upon submitting the form.",paraId:1,tocIndex:0},{value:'The approval initiation button currently only supports the "Submit" (or "Save") button in "Add" or "Update" forms. It does not support the "Submit to Workflow" button (which can only be linked to "Post-action event").',paraId:2}]},509900:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the approval process, data is governed by the principle of transactional data immutability. Each submission generates a snapshot that is then tracked and circulated during the approval process. The flow of this process is as follows:",paraId:0,tocIndex:1},{value:'When actions such as "withdraw" or "return" are triggered within the process, the system preserves a snapshot of the data as it existed at that point within the same application document:',paraId:1,tocIndex:1},{value:"As illustrated above, every time data is withdrawn and then resubmitted, a new snapshot is saved for that particular submission process.",paraId:2,tocIndex:1},{value:"For the initiator, an application document's status field indicates the current stage of the approval process, typically reflecting the following states:",paraId:3,tocIndex:2},{value:"Status",paraId:4,tocIndex:2},{value:"Enum Value",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Draft",paraId:4,tocIndex:2},{value:"0",paraId:4,tocIndex:2},{value:"The applicant has temporarily saved the application form's data but has not yet officially submitted it to start the process.",paraId:4,tocIndex:2},{value:"Submitted",paraId:4,tocIndex:2},{value:"2",paraId:4,tocIndex:2},{value:"The application has been submitted and is awaiting approval. At this stage, no approver has yet processed it, and if allowed by the configuration, the initiator can still withdraw the application.",paraId:4,tocIndex:2},{value:"On going",paraId:4,tocIndex:2},{value:"3",paraId:4,tocIndex:2},{value:"The application has moved through at least one approval node, with at least one approver having submitted their decision. The initiator can no longer withdraw the application at this stage.",paraId:4,tocIndex:2},{value:"Returned",paraId:4,tocIndex:2},{value:"1",paraId:4,tocIndex:2},{value:"The application has been returned by one of the approvers, allowing the initiator to modify and resubmit it.",paraId:4,tocIndex:2},{value:"Approved",paraId:4,tocIndex:2},{value:"4",paraId:4,tocIndex:2},{value:"All approval nodes have been processed, and the application has been approved at each stage, marking the process as complete.",paraId:4,tocIndex:2},{value:"Rejected",paraId:4,tocIndex:2},{value:"-1",paraId:4,tocIndex:2},{value:"The application has been rejected at one of the approval nodes, thereby terminating the process.",paraId:4,tocIndex:2},{value:"The processing status of the approval node.",paraId:5,tocIndex:3},{value:"Status",paraId:6,tocIndex:3},{value:"Enum Value",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:"Assigned",paraId:6,tocIndex:3},{value:"null",paraId:6,tocIndex:3},{value:"The processing record for the corresponding approver has been created, but because the processing rule is configured as sequential, the current approver must wait for the previous approver to complete their task.",paraId:6,tocIndex:3},{value:"Pending",paraId:6,tocIndex:3},{value:"0",paraId:6,tocIndex:3},{value:"Waiting for the current approver to take action.",paraId:6,tocIndex:3},{value:"Returned",paraId:6,tocIndex:3},{value:"1",paraId:6,tocIndex:3},{value:"The current approver has returned the request.",paraId:6,tocIndex:3},{value:"Approved",paraId:6,tocIndex:3},{value:"2",paraId:6,tocIndex:3},{value:"The current approver has approved the request.",paraId:6,tocIndex:3},{value:"Rejected",paraId:6,tocIndex:3},{value:"-1",paraId:6,tocIndex:3},{value:"The current approver has rejected the request.",paraId:6,tocIndex:3},{value:"Not Processed",paraId:6,tocIndex:3},{value:"3",paraId:6,tocIndex:3},{value:"According to the node's processing rules, the final state has already been reached by other approvers, or the workflow is no longer valid, so the current approver does not need to process it.",paraId:6,tocIndex:3},{value:"For each approval node, a processing record is generated for each configured approver. Each record includes a status field that indicates the current approver\u2019s processing status. In addition to all the statuses listed for the approval node, the following additional statuses are included:",paraId:7,tocIndex:4},{value:"Status",paraId:8,tocIndex:4},{value:"Enum Value",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"Delegated",paraId:8,tocIndex:4},{value:"8",paraId:8,tocIndex:4},{value:"The approval task has been delegated to another assignee, do not need to be processed by current assignee.",paraId:8,tocIndex:4}]},323082:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the data details pop-up for a submitted item, an approval block can be configured to display the corresponding approval records and provide entry points for processing:",paraId:0,tocIndex:1},{value:"The approval block displays basic application information and approval history. The initiator can view the details of their submitted application within the pop-up. If retraction is enabled and the process is in the first approval node but has not yet been processed by any approver, the initiator can withdraw the application:",paraId:1,tocIndex:2},{value:"If the initiator withdraws the application, the withdrawal record will be displayed in the approval block. Clicking on it will reopen the application pop-up:",paraId:2,tocIndex:2},{value:"The pop-up content remains the same as before, allowing the initiator to make modifications and resubmit:",paraId:3,tocIndex:2},{value:'Approvers can also review the approval content through this block. In the processing history, if the logged-in user is one of the responsible persons for a node, a "View" button will appear in the details column. Clicking it will open the approval pop-up:',paraId:4,tocIndex:3},{value:"The pop-up will display the approver interface configured for that approval node, typically including the approval details and an action bar:",paraId:5,tocIndex:3},{value:"Approvers can perform actions such as approve, reject, or return within the pop-up. After an action is taken, a corresponding record will be generated in the processing history. If the action is a return, the initiator can modify the application and resubmit it:",paraId:6,tocIndex:3},{value:"Approving or rejecting will trigger the corresponding status based on the node's configured rules:",paraId:7,tocIndex:3},{value:"If transfer or additional sign-off operations are configured, approvers can also perform these operations in the processing interface. The transfer operation assigns the current approval node's processing responsibility to another user within a specified range:",paraId:8,tocIndex:3},{value:"After the transfer, the current approver will no longer be responsible for processing that approval node, and the transferred user will appear in the approver list:",paraId:9,tocIndex:3},{value:"The additional sign-off operation allows adding multiple users to the current approval node's processing list, selecting from a specified range:",paraId:10,tocIndex:3},{value:"If the node is configured for sequential processing by multiple users, the additional sign-off operation also requires specifying the processing order of the new users:",paraId:11,tocIndex:3},{value:`Before oneself: After submission, the current user's task status becomes "Pending," and the new approver will process it before the current user.`,paraId:12,tocIndex:3},{value:"After oneself: The current user processes first, and the new approver processes afterward.",paraId:12,tocIndex:3},{value:"After transfer or additional sign-off, the new approver's processing will also follow the approval rules configured in the node.",paraId:13,tocIndex:3},{value:'The approval plugin provides two global blocks for centralized management of certain approval processes: "Initiate Approval" and "Approval Todos":',paraId:14,tocIndex:4},{value:`The "Initiate Approval" block is designed from the initiator's perspective, allowing users to initiate new approvals from the block's action bar:`,paraId:15,tocIndex:4},{value:'If the approval trigger is configured to allow initiation and approval in both data blocks and the approval center, the corresponding approval process will appear in the drop-down menu under the "Initiate" button.',paraId:16,tocIndex:4},{value:"Users can also view the status of approvals they have initiated in the list:",paraId:17,tocIndex:4},{value:`Clicking "View" opens a pop-up similar to the approval block in data details, with the difference that the initiator's submission and approval history are displayed on separate tabs:`,paraId:18,tocIndex:4},{value:`The "Approval Todos" block is designed from the approver's perspective, allowing users to view pending approvals. Clicking the corresponding "View" button opens a processing pop-up, similar to the approval block in data details, with the distinction that the approver's processing form and approval history are displayed on separate tabs:`,paraId:19,tocIndex:4},{value:"If the approval has already been processed, the submitted content is displayed as is and cannot be modified.",paraId:20,tocIndex:4}]},330305:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"For approvals initiated from data blocks, you can trigger them using an API call (using the creation button for the ",paraId:0,tocIndex:2},{value:"posts",paraId:0,tocIndex:2},{value:" table as an example):",paraId:0,tocIndex:2},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post."
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey"
`,paraId:1,tocIndex:2},{value:"The URL parameter ",paraId:2,tocIndex:2},{value:"triggerWorkflows",paraId:2,tocIndex:2},{value:" is the key of the workflow, with multiple workflows separated by commas. You can find this key by hovering over the workflow name at the top of the workflow canvas:",paraId:2,tocIndex:2},{value:"Once the call is successful, the approval workflow for the ",paraId:3,tocIndex:2},{value:"posts",paraId:3,tocIndex:2},{value:" table will be triggered.",paraId:3,tocIndex:2},{value:"Because external calls also rely on user identity, HTTP API calls must include authentication details, just like standard interface requests. This includes the ",paraId:4},{value:"Authorization",paraId:4},{value:" header or the ",paraId:4},{value:"token",paraId:4},{value:" parameter (token obtained during login), as well as the ",paraId:4},{value:"X-Role",paraId:4},{value:" header (indicating the user\u2019s current role).",paraId:4},{value:"If you need to trigger an event related to a one-to-one relationship (note that one-to-many relationships are not yet supported), you can use ",paraId:5},{value:"!",paraId:5},{value:" in the parameters to specify the related field that should trigger the event:",paraId:5},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post.",
    "category": {
      "title": "Test category"
    }
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey!category"
`,paraId:6},{value:"When the call is successfully executed, the approval event for the ",paraId:7},{value:"categories",paraId:7},{value:" table will be triggered.",paraId:7},{value:"When triggering events via HTTP API calls, ensure that the workflow is enabled and that the data table configuration is correct; otherwise, the call may not be successful or may result in errors.",paraId:8},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "collectionName": "<collection name>",
    "workflowId": <workflow id>,
    "data": { "<field>": "<value>" },
    "status": <initial approval status>,
  }'
  "http://localhost:3000/api/approvals:create"
`,paraId:9,tocIndex:3},{value:"Parameters",paraId:10,tocIndex:3},{value:"collectionName",paraId:11,tocIndex:3},{value:": The name of the data collection where the approval is initiated, required.",paraId:11,tocIndex:3},{value:"workflowId",paraId:11,tocIndex:3},{value:": The ID of the workflow used to initiate the approval, required.",paraId:11,tocIndex:3},{value:"data",paraId:11,tocIndex:3},{value:": The fields of the data table record created when initiating the approval, required.",paraId:11,tocIndex:3},{value:"status",paraId:11,tocIndex:3},{value:`: The status of the record created when initiating the approval, required. Possible values include:
`,paraId:11,tocIndex:3},{value:"0",paraId:12,tocIndex:3},{value:": Draft, indicating that it is saved but not submitted for approval.",paraId:12,tocIndex:3},{value:"1",paraId:12,tocIndex:3},{value:": Submit for approval, indicating that the initiator submits the approval request and enters the approval process.",paraId:12,tocIndex:3},{value:"When an approval (or withdrawal) is in draft status, you can use the following API to save or submit it again:",paraId:13,tocIndex:4},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "data": { "<field>": "<value>" },
    "status": 2
  }'
  "http://localhost:3000/api/approvals:update/<approval id>"
`,paraId:14,tocIndex:4},{value:`curl -X GET -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' \\
  "http://localhost:3000/api/approvals:listMine"
`,paraId:15,tocIndex:5},{value:"The initiator can withdraw the current record that is under approval through the following interface:",paraId:16,tocIndex:6},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  "http://localhost:3000/api/approvals:withdraw/<approval id>"
`,paraId:17,tocIndex:6},{value:"Parameters",paraId:18,tocIndex:6},{value:"<approval id>",paraId:19,tocIndex:6},{value:": The ID of the approval record to be withdrawn, required.",paraId:19,tocIndex:6},{value:"Once the approval process enters the approval node, a task will be created for the current approver. The approver can complete the approval task through the interface or by calling the HTTP API.",paraId:20,tocIndex:8},{value:"The to-do tasks are the approval processing records. You can use the following API to get all approval processing records for the current user:",paraId:21,tocIndex:9},{value:`curl -X GET -H 'Authorization: Bearer <your token>' \\
  "http://localhost:3000/api/approvalRecords:listMine"
`,paraId:22,tocIndex:9},{value:`curl -X GET -H 'Authorization: Bearer <your token>' \\
  "http://localhost:3000/api/approvalRecords:get/<record id>"
`,paraId:23,tocIndex:10},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "status": 2,
    "comment": "Looks good to me.",
    "data": { "<field to modify>": "<value>" }
  }'
  "http://localhost:3000/api/approvalRecords:submit/<record id>"
`,paraId:24,tocIndex:11},{value:"Parameters",paraId:25,tocIndex:11},{value:"<record id>",paraId:26,tocIndex:11},{value:": The ID of the record to be approved or rejected, required.",paraId:26,tocIndex:11},{value:"status",paraId:26,tocIndex:11},{value:": The status of the approval process, ",paraId:26,tocIndex:11},{value:"2",paraId:26,tocIndex:11},{value:' for "approve", ',paraId:26,tocIndex:11},{value:"-1",paraId:26,tocIndex:11},{value:' for "reject", required.',paraId:26,tocIndex:11},{value:"comment",paraId:26,tocIndex:11},{value:": Optional comments regarding the approval process.",paraId:26,tocIndex:11},{value:"data",paraId:26,tocIndex:11},{value:": Optional modifications to the data table record at the current approval node (only effective if approved).",paraId:26,tocIndex:11},{value:"v1.9.0+",paraId:27,tocIndex:11},{value:'In version v1.9.0 and earlier, the return used the same interface as "approve" and "reject", with ',paraId:28,tocIndex:12},{value:'"status": 1',paraId:28,tocIndex:12},{value:" representing the return.",paraId:28,tocIndex:12},{value:"Starting from version v1.9.0, the return has a separate interface:",paraId:29,tocIndex:12},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "returnToNodeKey": "<node key>",
  }'
  "http://localhost:3000/api/approvalRecords:return/<record id>"
`,paraId:30,tocIndex:12},{value:"Parameters",paraId:31,tocIndex:12},{value:"<record id>",paraId:32,tocIndex:12},{value:": The ID of the record to be returned, required.",paraId:32,tocIndex:12},{value:"returnToNodeKey",paraId:32,tocIndex:12},{value:": Optional key for the target node to return to. If the node has a configured range of returnable nodes, this parameter can be used to specify which node to return to. If not configured, this parameter does not need a value, and the default is to return to the starting point, where the initiator resubmits.",paraId:32,tocIndex:12},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "assignee": <user id>,
  }'
  "http://localhost:3000/api/approvalRecords:delegate/<record id>"
`,paraId:33,tocIndex:13},{value:"Parameters",paraId:34,tocIndex:13},{value:"<record id>",paraId:35,tocIndex:13},{value:": The ID of the record to be delegated, required.",paraId:35,tocIndex:13},{value:"assignee",paraId:35,tocIndex:13},{value:": The user ID of the assignee, required.",paraId:35,tocIndex:13},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -d \\
  '{
    "assignees": [<user id>],
    "order": <order>,
  }'
  "http://localhost:3000/api/approvalRecords:add/<record id>"
`,paraId:36,tocIndex:14},{value:"Parameters",paraId:37,tocIndex:14},{value:"<record id>",paraId:38,tocIndex:14},{value:": The ID of the record to be added, required.",paraId:38,tocIndex:14},{value:"assignees",paraId:38,tocIndex:14},{value:": The user ID list of the assignees, required.",paraId:38,tocIndex:14},{value:"order",paraId:38,tocIndex:14},{value:": The order of the addition, ",paraId:38,tocIndex:14},{value:"-1",paraId:38,tocIndex:14},{value:' indicates before "me", ',paraId:38,tocIndex:14},{value:"1",paraId:38,tocIndex:14},{value:' indicates after "me".',paraId:38,tocIndex:14}]},732207:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'Approval processes are tailored specifically for workflows initiated and managed by individuals to determine the status of related data. Commonly employed in office automation and other scenarios requiring human decision-making, these processes include creating and managing workflows such as "Leave Requests," "Expense Reimbursement Approvals," and "Material Procurement Approvals."',paraId:0},{value:`The approval plugin offers a dedicated workflow type (trigger) known as "Approval (Event)" and a specialized "Approval" node. When paired with NocoBase's unique custom data tables and blocks, it enables the rapid and flexible creation and management of various approval scenarios.`,paraId:1},{value:"The approval process is organized into several key sections:",paraId:2,tocIndex:1},{value:"Trigger Configuration",paraId:3,tocIndex:1},{value:"Approval Node Configuration",paraId:4,tocIndex:1},{value:"Initiate Approval Configuration",paraId:5,tocIndex:1},{value:"Approval Relevant Blocks",paraId:6,tocIndex:1},{value:"Workflow task",paraId:7,tocIndex:1},{value:"For a deeper dive into these concepts, see ",paraId:8,tocIndex:1},{value:"Advanced",paraId:9,tocIndex:1},{value:".",paraId:8,tocIndex:1},{value:"To invoke this process from an external system, consult ",paraId:10,tocIndex:1},{value:"HTTP API",paraId:11,tocIndex:1},{value:".",paraId:10,tocIndex:1}]},437416:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In an approval workflow, a dedicated "Approval" node is required to configure the logic for approvers to handle (approve, reject, or return) the initiated approval request. This "Approval" node is exclusively used within approval workflows.',paraId:0,tocIndex:0},{value:'Difference from the general "Manual" node:',paraId:1},{value:' The general "Manual" node is versatile and can be used across various workflows for manual data input, decision-making on process continuation, and other scenarios. In contrast, the "Approval" Node is specialized for approval workflows and is not applicable in other types of workflows.',paraId:1},{value:'To create an "Approval" node, click the plus sign ("+") in the workflow. Then, select one of the available pass modes to configure the approval node:',paraId:2,tocIndex:1},{value:"There are two pass modes available:",paraId:3,tocIndex:2},{value:"Direct Pass Mode: This mode is ideal for simpler workflows, where the outcome at the approval node determines whether the process ends. If the request is not approved, the process exits immediately.",paraId:4,tocIndex:2},{value:"Branching Mode: This mode is typically used for more complex workflows. After the approval node produces a result, subsequent nodes can execute within the resulting branches.",paraId:5,tocIndex:2},{value:'If the node is configured with a "Return" operation, a "Return" branch will be created, and the process will forcibly exit after the return branch is completed.',paraId:6,tocIndex:2},{value:'Once this node is "approved," the process continues through both the pass branch and the subsequent workflow. Following a "reject" operation, the default setting allows the process to continue through the subsequent workflow, although you can configure the node to end the process after executing the rejection branch.',paraId:7,tocIndex:2},{value:"The pass mode cannot be modified once the node is created.",paraId:8},{value:"Approvers are the users responsible for the approval actions at the node. They can consist of one or more users, selected from a static list or a dynamic value specified by a variable.",paraId:9,tocIndex:3},{value:"When using a variable, only primary keys or foreign keys from user data in the context and node results can be selected. If the selected variable is an array (in cases of many-to-many relationships), each user in the array will be merged into the overall approver collection.",paraId:10,tocIndex:3},{value:"If there is only one approver (including cases where multiple variables are deduplicated), the approval will be handled solely by that user, regardless of the negotiation mode chosen.",paraId:11,tocIndex:4},{value:"For multiple approvers, the selected negotiation mode determines the handling method:",paraId:12,tocIndex:4},{value:"Or: The node passes with the approval of any one person; all must reject for the node to be rejected.",paraId:13,tocIndex:4},{value:"And: The node passes only if all approvers approve; a single rejection results in rejection.",paraId:13,tocIndex:4},{value:"Voting: The node passes if a majority (as specified) of approvers approve; otherwise, the node is rejected.",paraId:13,tocIndex:4},{value:"For the return operation, if any user in the approver collection opts for a return, the node will directly exit the workflow.",paraId:14,tocIndex:4},{value:"For multiple approvers, the processing order dictates the sequence of actions:",paraId:15,tocIndex:5},{value:"Parallelly: All approvers can act in any order, with no sequence required.",paraId:16,tocIndex:5},{value:"Sequentially: Approvers act in the order defined in the approver collection, where each subsequent user can only proceed after the previous one has submitted their decision.",paraId:16,tocIndex:5},{value:'Regardless of whether "Sequentially" processing is set, the results generated will follow the rules outlined in the "Negotiation Modes" section, with the node completing execution once the conditions are met.',paraId:17,tocIndex:5},{value:'When "Branch Mode" is set for "Pass Mode," you can opt to exit the workflow after the rejection branch is completed. If selected, a "\u2717" symbol will appear at the end of the rejection branch, indicating that no further nodes will be executed after this branch concludes:',paraId:18,tocIndex:6},{value:"The approver interface configuration provides the interface for approvers when the workflow reaches this node. Click the configuration button to open the settings window:",paraId:19,tocIndex:7},{value:"In this configuration window, you can add blocks such as approval submission details, operation bars, and custom prompt text:",paraId:20,tocIndex:7},{value:"The approval content details block includes the data submitted by the initiator. Similar to a standard data block, you can freely add field components from the data table and arrange them to organize the content that the approver needs to review:",paraId:21,tocIndex:8},{value:'The operation form block can include buttons supported by this node, such as "Approve," "Reject," "Return," "Reassign," and "Add Approver":',paraId:22,tocIndex:9},{value:"Besides, fields that can be modified by the approver can also be added to the operation form. These fields will be displayed in the operation form when the approver processes the approval. The approver can modify the values of these fields, and after submission, the data used for approval and the corresponding data snapshot in the approval process will be updated simultaneously.",paraId:23,tocIndex:9},{value:`Among the approval operation buttons, "Approve," "Reject," and "Return" are decisive actions. Once submitted, the approver's task at this node is completed. Additional fields to be filled out during submission, such as "Comments," can be added in the "Processing Configuration" pop-up for each button.`,paraId:24,tocIndex:10},{value:`"Reassign" and "Add Approver" are non-decisive operations used to dynamically adjust the approvers in the approval workflow. "Reassign" transfers the current user's approval task to another user, while "Add Approver" inserts an additional approver before or after the current approver, allowing the new approver to continue the approval process.`,paraId:25,tocIndex:11},{value:`After enabling the "Reassign" or "Add Approver" operation buttons, you need to set the "Assignable User Range" in the button's configuration menu to define the scope of users who can be assigned as new approvers:`,paraId:26,tocIndex:11},{value:"Similar to the node's original approver configuration, the assignable user range can be directly selected approvers or based on query conditions from the user table. The final result will be a merged collection, excluding users already in the approver collection.",paraId:27,tocIndex:11},{value:"If you enable or disable an operation button, or modify the assignable user range, ensure to save the node configuration after closing the interface configuration window. Otherwise, the changes to the operation button will not take effect.",paraId:28},{value:"After the approval is completed, the relevant status and data will be recorded in the node results and can be used as variables by subsequent nodes.",paraId:29,tocIndex:12},{value:"Represents the approval status of the entire request. The result is an enum value. See: ",paraId:30,tocIndex:13},{value:"Approval Processing Status",paraId:31,tocIndex:13},{value:".",paraId:30,tocIndex:13},{value:"If the approver modifies the approval content in the form, the modified data will be recorded in the node results for use by subsequent nodes. If you need to use relational fields, you must configure preloading for the relational fields in the trigger.",paraId:32,tocIndex:14},{value:"v1.8.0+",paraId:33,tocIndex:15},{value:"Approval processing records are an array containing the handling records of all approvers in the node. Each record includes the following fields:",paraId:34,tocIndex:15},{value:"Field",paraId:35,tocIndex:15},{value:"Type",paraId:35,tocIndex:15},{value:"Description",paraId:35,tocIndex:15},{value:"id",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"Unique identifier of the processing record",paraId:35,tocIndex:15},{value:"userId",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"User ID who handled the record",paraId:35,tocIndex:15},{value:"status",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"Processing status. See: ",paraId:35,tocIndex:15},{value:"Process Status of Individual Approver",paraId:36,tocIndex:15},{value:"comment",paraId:35,tocIndex:15},{value:"string",paraId:35,tocIndex:15},{value:"Comment made during processing",paraId:35,tocIndex:15},{value:"updatedAt",paraId:35,tocIndex:15},{value:"string",paraId:35,tocIndex:15},{value:"Last updated time of the processing record",paraId:35,tocIndex:15},{value:"You can use the fields as variables in subsequent nodes as needed.",paraId:37,tocIndex:15}]},105546:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Workflow tasks center provides a unified entry point for users to view and process tasks. Tasks initiated by the current user and tasks to be done can be accessed from task center button in the top toolbar. And from categories navigation in left side, user could view different types of tasks.",paraId:0,tocIndex:0}]},58378:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'To set up an approval workflow, start by selecting the "Approval" type during the workflow creation process:',paraId:0,tocIndex:1},{value:"Next, in the workflow configuration interface, click on the trigger to open a popup window for additional configuration options.",paraId:1,tocIndex:1},{value:"NocoBase\u2019s approval plugin is designed with flexibility in mind, allowing it to be integrated with any custom data collection. This means there\u2019s no need to repeatedly configure the data model for approval processes. Instead, you can reuse existing data collections. When configuring the trigger, the first step is to select a data table to determine which data entries will trigger the workflow upon creation or update:",paraId:2,tocIndex:2},{value:"After selecting the data table, bind the workflow to the submit button in the form used for creating or editing data within the chosen table:",paraId:3,tocIndex:2},{value:"Once the form is submitted, the corresponding approval workflow will be triggered. The submitted data will be saved in the specified data table and also snapshotted within the approval flow for future review by approvers.",paraId:4,tocIndex:2},{value:'If the approval process permits the initiator to withdraw the request, select the "Allowed to be withdrawn" option:',paraId:5,tocIndex:3},{value:"When this option is selected, the initiator can withdraw the approval request at any time before any approver has processed it. However, once any subsequent approval nodes have been processed, the approval can no longer be withdrawn.",paraId:6,tocIndex:3},{value:"Finally, you\u2019ll need to configure the form interface for the initiator. This interface is used when initiating an approval from the Approval Center block or when re-initiating after a withdrawal. Click the configuration button to open a popup window:",paraId:7,tocIndex:4},{value:"You can add a form based on the bound data table or include explanatory text (Markdown) to guide the initiator. A form is required; otherwise, the initiator will not be able to proceed upon entering this interface.",paraId:8,tocIndex:4},{value:"After adding the form block, you can configure the corresponding data table's field components and arrange them as needed to organize the content to be filled out, similar to the regular form configuration interface:",paraId:9,tocIndex:4},{value:"In addition to the submit button, you can also add a \u201CSave Draft\u201D button to support the temporary storage of data during the process:",paraId:10,tocIndex:4}]},855881:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.8.2+",paraId:0},{value:"The CC node is used to send certain contextual information from the workflow process to designated users for their awareness and reference. For example, during approval or other processes, relevant information can be copied to other participants so that they can stay informed of the progress.",paraId:1},{value:"You can configure multiple CC nodes in a workflow so that when the flow reaches these nodes, the corresponding information will be sent to specified recipients.",paraId:2},{value:'The copied content will appear under the "CC to Me" menu in the Task Center. Users can view all content copied to them here. Unread items are highlighted, and users can manually mark them as read after viewing.',paraId:3},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button in the flow to add a \u201CCC\u201D node:",paraId:4,tocIndex:2},{value:"In the node configuration panel, you can set the following parameters:",paraId:5,tocIndex:3},{value:"Recipients are the users who will receive the copied content. This can be one or more users. The source can be statically selected from the user list, dynamically specified using variables, or based on a query result from the user table.",paraId:6,tocIndex:4},{value:'Recipients need to view the copied content under the "CC to Me" menu in the Task Center. You can configure blocks using results from triggers or other nodes in the workflow context.',paraId:7,tocIndex:5},{value:"The task title is what appears in the Task Center. You can dynamically generate the title using variables from the workflow context.",paraId:8,tocIndex:6},{value:"Users can view and manage all content CCed to them in the Task Center, and filter by read/unread status.",paraId:9,tocIndex:7},{value:"After viewing, tasks can be marked as read. The unread count will update accordingly.",paraId:10,tocIndex:7}]},761509:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"According to the context type configured in the workflow, the configuration of action buttons in different blocks will also differ.",paraId:0,tocIndex:0},{value:"v.1.6.0+",paraId:1,tocIndex:1},{value:'In the action panel and other data blocks, you can add a "Trigger Workflow" button:',paraId:2,tocIndex:1},{value:'After added, bind the previously created workflow with context type set to "None", as an example of the button in the action panel:',paraId:3,tocIndex:1},{value:'Within any data block, you have the option to add a "Trigger Workflow" button to the action bar for individual rows of data, whether in forms, tables, or detail pages:',paraId:4,tocIndex:2},{value:"Once the button is added, you can link it to the workflow you previously created:",paraId:5,tocIndex:2},{value:"Afterward, simply clicking this button will initiate the custom action event:",paraId:6,tocIndex:2},{value:"v.1.6.0+",paraId:7,tocIndex:3},{value:'In the action bar of the table block, when adding a "Trigger Workflow" button, there will be an additional option to select the context type as "None" or "Multiple Records":',paraId:8,tocIndex:3},{value:'When selecting "None", it is a global event, and only workflows with context type set to "None" can be bound.',paraId:9,tocIndex:3},{value:'When selecting "Multiple Records", you can bind workflows of the multiple records type, which can be used for batch operations after selecting multiple records (currently only supported in tables). The available workflows are limited to those configured to match the collection of the current data block:',paraId:10,tocIndex:3},{value:"When clicking the button to trigger, you must have already selected some data rows in the table, otherwise the workflow will not be triggered:",paraId:11,tocIndex:3}]},223801:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Imagine we have a "Sample" collection. For samples marked as "Collected," a "Send to Testing" operation is needed. This operation first checks the sample's basic information, generates a "Testing" Record, and then updates the sample's status to "Testing". This entire process is too complex to be handled by simple "Create, Read, Update, Delete" button clicks. In such scenarios, custom operation events are the perfect solution.`,paraId:0,tocIndex:0},{value:'To start, create a "Sample" collection and a "Testing" collection, and input some basic test data into the Sample collection:',paraId:1,tocIndex:0},{value:`Next, you'll need to create a "Custom action Event" workflow. If you require immediate feedback during the operation, opt for the synchronous mode (bear in mind that synchronous mode doesn't support asynchronous nodes like human intervention):`,paraId:2,tocIndex:0},{value:'Within the trigger configuration, choose "Sample" as the collection:',paraId:3,tocIndex:0},{value:'Now, arrange the logic of the process according to your business needs. For instance, you might set it so that the "Send to Testing" operation is only allowed when the index parameter exceeds ',paraId:4,tocIndex:0},{value:"90",paraId:4,tocIndex:0},{value:"; otherwise, a relevant warning is provided:",paraId:4,tocIndex:0},{value:'The "',paraId:5},{value:"Response Message",paraId:6},{value:`" node can be utilized in synchronous custom operation events to send feedback messages to the client. This feature isn't available in asynchronous mode.`,paraId:5},{value:'After setting up and enabling the workflow, return to the table interface, and add a "Trigger Workflow" button in the operations column:',paraId:7},{value:"Next, in the button's configuration menu, select the option to bind the workflow, and open the configuration window:",paraId:8},{value:"Add the workflow that was previously enabled:",paraId:9},{value:'After submission, rename the button to reflect the action, like "Testing," and the configuration is complete.',paraId:10},{value:`To use the feature, select any sample data from the table and click the "Send to Testing" button to trigger the custom operation event. As per the pre-arranged logic, if the sample's index parameter is below 90, you'll see a warning message like this:`,paraId:11},{value:`If the index parameter is over 90, the process will proceed as expected, creating a "Testing Record" entry and updating the sample's status to "Testing":`,paraId:12},{value:"And there you have it\u2014a simple custom operation event. This approach can be similarly applied to other complex business operations, such as order processing or report submission, using custom operation events to achieve the desired results.",paraId:13}]},96231:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Custom action events can be triggered not only through user interface actions but also via HTTP API calls. Specifically, these events introduce a new operation type called ",paraId:0,tocIndex:0},{value:"trigger",paraId:0,tocIndex:0},{value:" for all collection operations, allowing workflows to be initiated through the NocoBase standard operation API.",paraId:0,tocIndex:0},{value:"For instance, a workflow typically triggered by a button can be invoked using the following command:",paraId:1,tocIndex:0},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' \\
  "http://localhost:3000/api/samples:trigger/<:id>?triggerWorkflows=workflowKey"
`,paraId:2,tocIndex:0},{value:"Since this operation targets a single data entry, when calling it for existing data, you must specify the ID of the data row by replacing the ",paraId:3,tocIndex:0},{value:"<:id>",paraId:3,tocIndex:0},{value:" portion of the URL.",paraId:3,tocIndex:0},{value:"When invoking the API for a form submission (such as adding or updating data), you can omit the ID for new entries but must provide the relevant data as the execution context:",paraId:4,tocIndex:0},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Sample 1",
    "indicator": 91
  }'
  "http://localhost:3000/api/samples:trigger?triggerWorkflows=workflowKey"
`,paraId:5,tocIndex:0},{value:"For updating a form, you need to include both the data row ID and the updated data:",paraId:6,tocIndex:0},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Sample 1",
    "indicator": 91
  }'
  "http://localhost:3000/api/samples:trigger/<:id>?triggerWorkflows=workflowKey"
`,paraId:7,tocIndex:0},{value:"If both the ID and data are provided, the specified data row will be loaded first, and then the provided data will overwrite the original row to generate the final trigger context.",paraId:8,tocIndex:0},{value:"If relational data is provided, it will also be overwritten. Take special care when handling relational data with Preload associations to avoid unintentionally altering related data.",paraId:9},{value:"Additionally, the URL parameter ",paraId:10},{value:"triggerWorkflows",paraId:10},{value:" designates the workflow key(s). Multiple workflows can be separated by commas. You can obtain this key by hovering over the workflow name at the top of the workflow canvas:",paraId:10},{value:"Once the call is successful, the custom operation event for the ",paraId:11},{value:"samples",paraId:11},{value:" table will be triggered.",paraId:11},{value:"Since external API calls also require user authentication, you must include authentication information in the request, similar to requests sent from the standard interface. This includes the ",paraId:12},{value:"Authorization",paraId:12},{value:" header or ",paraId:12},{value:"token",paraId:12},{value:" parameter (the token obtained after login) and the ",paraId:12},{value:"X-Role",paraId:12},{value:" header (the user's current role name).",paraId:12},{value:"If you need to trigger an event for a many-to-one data item (currently not supported for many-to-many relationships), you can specify the related field\u2019s trigger data using ",paraId:13},{value:"!",paraId:13},{value:" in the parameter:",paraId:13},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' \\
  "http://localhost:3000/api/posts:trigger/<:id>?triggerWorkflows=workflowKey!category"
`,paraId:14},{value:"After a successful call, the custom operation event for the corresponding ",paraId:15},{value:"categories",paraId:15},{value:" table will be triggered.",paraId:15},{value:"When triggering an event via HTTP API, ensure that the workflow is enabled and that the collection configuration is correct. Otherwise, the call may fail or result in errors.",paraId:16}]},849718:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`NocoBase provides built-in standard data operations like create, read, update, and delete. However, when these operations aren't sufficient to meet complex business requirements, custom action events within workflows can be utilized. These events can be linked to the "Trigger Workflow" button on page blocks, enabling you to perform custom data operations tailored to specific needs.`,paraId:0},{value:'The "Custom Action Event" evolved from the "Submit to Workflow" mode found in the "Post-Action Event" feature. As of version ',paraId:1},{value:"v1.0.0-alpha.7",paraId:1},{value:', it has been separated into its own event and renamed as "Custom Action Event."',paraId:1},{value:"Custom action events are used in several key areas:",paraId:2,tocIndex:1},{value:"Trigger Configuration",paraId:3,tocIndex:1},{value:"Action Configuration",paraId:4,tocIndex:1},{value:"For practical examples of how to use these events, refer to the ",paraId:5,tocIndex:1},{value:"Examples",paraId:6,tocIndex:1},{value:" section.",paraId:5,tocIndex:1},{value:"If integration with an external system is needed, consult the ",paraId:7,tocIndex:1},{value:"Http Api",paraId:8,tocIndex:1},{value:" guide.",paraId:7,tocIndex:1}]},785544:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'When setting up a workflow, begin by selecting "Custom action event":',paraId:0,tocIndex:1},{value:"v.1.6.0+",paraId:1,tocIndex:3},{value:"Different context types determine where the workflow can be bound to buttons in different blocks:",paraId:2,tocIndex:3},{value:"None: A global event that can be bound to action buttons in the action panel and other data blocks.",paraId:3,tocIndex:3},{value:"Single record: Can be bound to action buttons in data blocks such as table rows, forms, and details.",paraId:3,tocIndex:3},{value:"Multiple records: Can be bound to batch operation buttons in the table block.",paraId:3,tocIndex:3},{value:"When the context type is single record or multiple records, you'll need to choose the collection that will be associated with your data model:",paraId:4,tocIndex:4},{value:"If your workflow requires the use of related data from the triggered data row, you can select the necessary deep relationship fields here:",paraId:5,tocIndex:5},{value:"These fields will be automatically preloaded into the workflow's context once the event is triggered, making them available for use within the workflow.",paraId:6,tocIndex:5}]},302053:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Date Calculation node offers a set of nine powerful functions, enabling operations such as adding or subtracting time periods, formatting time strings, and converting duration units. Each function is designed with specific input and output value types, and can seamlessly integrate the results from other nodes as parameter variables. By chaining these functions through a calculation pipeline, you can achieve the desired output with precision.",paraId:0},{value:'To add a "Date Calculation" node in the workflow configuration interface, simply click the plus (\u201C+\u201D) button within the process:',paraId:1,tocIndex:2},{value:"Input values can be either variables or date constants. Variables might include data that triggers the workflow or results from upstream nodes. Constants can be any selected date.",paraId:2,tocIndex:4},{value:"The input value type determines how the input will be processed and is categorized into two types:",paraId:3,tocIndex:5},{value:"Date Type: This includes any input that can be converted into a date-time format, such as numeric timestamps or strings representing time.",paraId:4,tocIndex:5},{value:"Number Type: The input value type influences the selection of time calculation steps, so it\u2019s crucial to choose the correct type.",paraId:4,tocIndex:5},{value:"Each calculation step consists of a specific function and its parameter configuration. The pipeline design allows the output of one function to feed directly into the next, enabling a sequence of time calculations and conversions.",paraId:5,tocIndex:6},{value:"The output type after each step is fixed, which in turn determines the functions available for the next step. If the types are compatible, the calculation continues; if not, the result of the current step becomes the final output of the node.",paraId:6,tocIndex:6},{value:"Accepted Input Value Type: Date",paraId:7,tocIndex:8},{value:`Parameters:
`,paraId:7,tocIndex:8},{value:"The amount to add, which can be a numeric value or a variable from within the node.",paraId:8,tocIndex:8},{value:"The time unit (e.g., days, hours).",paraId:8,tocIndex:8},{value:"Output Value Type: Date",paraId:7,tocIndex:8},{value:"Example: If the input value is ",paraId:7,tocIndex:8},{value:"2024-7-15 00:00:00",paraId:7,tocIndex:8},{value:", the amount is ",paraId:7,tocIndex:8},{value:"1",paraId:7,tocIndex:8},{value:', and the unit is "days," the output will be ',paraId:7,tocIndex:8},{value:"2024-7-16 00:00:00",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"Accepted Input Value Type: Date",paraId:9,tocIndex:9},{value:`Parameters:
`,paraId:9,tocIndex:9},{value:"The amount to subtract, which can be a numeric value or a variable from within the node.",paraId:10,tocIndex:9},{value:"The time unit (e.g., days, hours).",paraId:10,tocIndex:9},{value:"Output Value Type: Date",paraId:9,tocIndex:9},{value:"Example: If the input value is ",paraId:9,tocIndex:9},{value:"2024-7-15 00:00:00",paraId:9,tocIndex:9},{value:", the amount is ",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:', and the unit is "days," the output will be ',paraId:9,tocIndex:9},{value:"2024-7-14 00:00:00",paraId:9,tocIndex:9},{value:".",paraId:9,tocIndex:9},{value:"Accepted Input Value Type: Date",paraId:11,tocIndex:10},{value:`Parameters:
`,paraId:11,tocIndex:10},{value:"The date for comparison, which can be a constant or a variable in the workflow context.",paraId:12,tocIndex:10},{value:"The time unit (e.g., days, hours).",paraId:12,tocIndex:10},{value:"Whether to take the absolute value.",paraId:12,tocIndex:10},{value:"Rounding options: retain decimals, round off, round up, or round down.",paraId:12,tocIndex:10},{value:"Output Value Type: Numeric",paraId:11,tocIndex:10},{value:"Example: If the input value is ",paraId:11,tocIndex:10},{value:"2024-7-15 00:00:00",paraId:11,tocIndex:10},{value:", and you compare it with ",paraId:11,tocIndex:10},{value:"2024-7-16 06:00:00",paraId:11,tocIndex:10},{value:', using "days" as the unit, without taking the absolute value and retaining decimals, the output will be ',paraId:11,tocIndex:10},{value:"-1.25",paraId:11,tocIndex:10},{value:".",paraId:11,tocIndex:10},{value:"If both absolute value and rounding are selected, the absolute value is applied first, followed by rounding.",paraId:13},{value:"Accepted Input Value Type: Date",paraId:14,tocIndex:11},{value:`Parameters:
`,paraId:14,tocIndex:11},{value:"The time unit (e.g., days, hours).",paraId:15,tocIndex:11},{value:"Output Value Type: Numeric",paraId:14,tocIndex:11},{value:"Example: If the input value is ",paraId:14,tocIndex:11},{value:"2024-7-15 00:00:00",paraId:14,tocIndex:11},{value:' and the unit is "days," the output will be ',paraId:14,tocIndex:11},{value:"15",paraId:14,tocIndex:11},{value:".",paraId:14,tocIndex:11},{value:"Accepted Input Value Type: Date",paraId:16,tocIndex:12},{value:`Parameters:
`,paraId:16,tocIndex:12},{value:"The time unit (e.g., days, hours).",paraId:17,tocIndex:12},{value:"Output Value Type: Date",paraId:16,tocIndex:12},{value:"Example: If the input value is ",paraId:16,tocIndex:12},{value:"2024-7-15 14:26:30",paraId:16,tocIndex:12},{value:' and the unit is "days," the output will be ',paraId:16,tocIndex:12},{value:"2024-7-15 00:00:00",paraId:16,tocIndex:12},{value:".",paraId:16,tocIndex:12},{value:"Accepted Input Value Type: Date",paraId:18,tocIndex:13},{value:`Parameters:
`,paraId:18,tocIndex:13},{value:"The time unit (e.g., days, hours).",paraId:19,tocIndex:13},{value:"Output Value Type: Date",paraId:18,tocIndex:13},{value:"Example: If the input value is ",paraId:18,tocIndex:13},{value:"2024-7-15 14:26:30",paraId:18,tocIndex:13},{value:' and the unit is "days," the output will be ',paraId:18,tocIndex:13},{value:"2024-7-15 23:59:59",paraId:18,tocIndex:13},{value:".",paraId:18,tocIndex:13},{value:"Accepted Input Value Type: Date",paraId:20,tocIndex:14},{value:"Parameters: None",paraId:20,tocIndex:14},{value:"Output Value Type: Boolean",paraId:20,tocIndex:14},{value:"Example: If the input value is ",paraId:20,tocIndex:14},{value:"2024-7-15 14:26:30",paraId:20,tocIndex:14},{value:", the output will be ",paraId:20,tocIndex:14},{value:"true",paraId:20,tocIndex:14},{value:".",paraId:20,tocIndex:14},{value:"Accepted Input Value Type: Date",paraId:21,tocIndex:15},{value:`Parameters:
`,paraId:21,tocIndex:15},{value:"The format, as specified in ",paraId:22,tocIndex:15},{value:"Day.js: Format",paraId:22,tocIndex:15},{value:".",paraId:22,tocIndex:15},{value:"Output Value Type: String",paraId:21,tocIndex:15},{value:"Example: If the input value is ",paraId:21,tocIndex:15},{value:"2024-7-15 14:26:30",paraId:21,tocIndex:15},{value:" and the format is ",paraId:21,tocIndex:15},{value:"the time is YYYY/MM/DD HH:mm:ss",paraId:21,tocIndex:15},{value:", the output will be ",paraId:21,tocIndex:15},{value:"the time is 2024/07/15 14:26:30",paraId:21,tocIndex:15},{value:".",paraId:21,tocIndex:15},{value:"Accepted Input Value Type: Numeric",paraId:23,tocIndex:16},{value:`Parameters:
`,paraId:23,tocIndex:16},{value:"The original time unit.",paraId:24,tocIndex:16},{value:"The target time unit.",paraId:24,tocIndex:16},{value:"Rounding options: retain decimals, round off, round up, or round down.",paraId:24,tocIndex:16},{value:"Output Value Type: Numeric",paraId:23,tocIndex:16},{value:"Example: If the input value is ",paraId:23,tocIndex:16},{value:"2",paraId:23,tocIndex:16},{value:', the original unit is "weeks," the target unit is "days," and no decimals are retained, the output will be ',paraId:23,tocIndex:16},{value:"14",paraId:23,tocIndex:16},{value:".",paraId:23,tocIndex:16},{value:"Imagine a promotional activity where you want to automatically set an end time for the promotion when a product is created. This end time would be the last day of the following week at 23:59:59. To achieve this, you can create two time functions and link them in a pipeline:",paraId:25,tocIndex:17},{value:"Calculate the date for the following week.",paraId:26,tocIndex:17},{value:"Adjust the date to the last day of that week at 23:59:59.",paraId:26,tocIndex:17},{value:"By doing this, you'll generate the desired time value, which can then be passed to the next node, such as a data table modification node, to set the promotion end time in the database.",paraId:27,tocIndex:17}]},917107:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The delay node allows you to introduce a pause within a workflow. Once the delay concludes, you can configure whether to proceed with the next step or terminate the workflow prematurely.",paraId:0},{value:'This node is often used in tandem with parallel branch nodes. By adding a delay node to one of the branches, you can effectively manage timeouts. For example, in a scenario where one branch requires manual processing while another includes a delay node, you can determine the outcome if the manual process exceeds the allotted time. Selecting "timeout failure" means that the manual process must be completed within the specified timeframe. On the other hand, choosing "timeout continuation" allows the workflow to bypass the manual process once the delay has elapsed.',paraId:1},{value:"This plugin is built-in and requires no installation.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus sign ("+") within the flow to add a "Delay" node:',paraId:3,tocIndex:3},{value:"You can specify the delay duration by entering a number and selecting a time unit. Supported units include seconds, minutes, hours, days, and weeks.",paraId:4,tocIndex:5},{value:'You can set the timeout status to either "Succeed and continue" or "Fail and Exit." The "Succeed and continue" option ensures that the workflow progresses to the next steps after the delay ends. Conversely, the "Fail and Exit" option terminates the workflow with a failure status once the delay concludes.',paraId:5,tocIndex:6},{value:'In a scenario where a work order must be addressed within a certain timeframe, you can add a manual node to one branch and a delay node to the other in parallel branches. If the manual process fails to respond within 10 minutes, the work order status will be updated to "Timeout Unprocessed."',paraId:6,tocIndex:7}]},386736:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Before utilizing dynamic expression operation nodes within a workflow, it's essential to first create an \u201CExpression\u201D template table using the data table management tool. This table serves as a repository for various expressions:",paraId:0,tocIndex:1},{value:"Following this, you can set up a table block and input several formula entries into the template table. Each row in the \u201CExpression\u201D template table can be viewed as a calculation rule designed for a specific data model within the table. You can utilize different fields from the data models of various tables as variables, crafting unique expressions as calculation rules. Moreover, you can leverage different calculation engines as needed.",paraId:1,tocIndex:2},{value:"Once the formulas are established, they need to be linked to the business data. Directly associating each row of business data with formula data can be tedious, so a common approach is to use a metadata table, similar to a classification table, to create a many-to-one (or one-to-one) relationship with the formula table. Then, the business data is associated with the classified metadata in a many-to-one relationship. This approach allows you to simply specify the relevant classified metadata when creating business data, making it easy to locate and utilize the corresponding formula data through the established association path.",paraId:2},{value:"As an example, consider creating a workflow triggered by a data table event. When an order is created, the trigger should preload the associated product data along with the product-related expression data:",paraId:3,tocIndex:3}]},289861:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Following the configuration steps outlined above, let's illustrate how to calculate the final price for different products by applying various Price Rules during the order placement process.",paraId:0,tocIndex:0},{value:"Set Up the Product Collection:",paraId:1,tocIndex:0},{value:`| Field Name     | Type                   |
| -------------- | ---------------------- |
| Product Name   | Text                   |
| Price | Number                 |
| Price Rule  | `,paraId:2,tocIndex:0},{value:"belongsTo",paraId:2,tocIndex:0},{value:" (Price Rule Collection) |",paraId:2,tocIndex:0},{value:"Set Up the Price Rule Collection (using the expression Collection template):",paraId:3,tocIndex:0},{value:`| Field Name      | Type                        |
| --------------- | --------------------------- |
| Rule Name       | Text                        |
| Collection      | Single Select (Data Collection)   |
| Calculation Engine | Single Select (mathjs/formulajs) |
| Expression      | Text                        |`,paraId:4,tocIndex:0},{value:"Input Price Rules:",paraId:5,tocIndex:0},{value:`| ID  | Name    | Collection | Calculation Engine | Expression                |
| --- |---------| ---------- | ------------------ | ------------------------- |
| 1   | 80% off | Product    | formula.js         | `,paraId:6,tocIndex:0},{value:"{{Product.Price}} * 0.8",paraId:6,tocIndex:0},{value:` |
| 2   | 90% off | Product    | formula.js         | `,paraId:6,tocIndex:0},{value:"{{Product.Price}} * 0.9",paraId:6,tocIndex:0},{value:" |",paraId:6,tocIndex:0},{value:"Create Products and Assign Price Rules:",paraId:7,tocIndex:0},{value:`| ID  | Product Name  | Price | Price Rule |
| --- | ------------- | ----- | ------------- |
| 1   | iPhone 14 Pro | 7999  | 2             |
| 2   | iPhone 13 Pro | 6999  | 1             |`,paraId:8,tocIndex:0},{value:"Set Up a Workflow Triggered by Order Creation:",paraId:9,tocIndex:0},{value:"Create a Dynamic Expression Calculation Node and Configure it Using Trigger Data/Product/Price Rule:",paraId:10,tocIndex:0},{value:"Set the variable data source to the product in the trigger data:",paraId:11,tocIndex:0},{value:"Add a Data Update Node to Update the Order Total Price with the Result from the Calculation Node:",paraId:12,tocIndex:0},{value:"Trigger the Workflow Upon Order Creation and Verify the Prices in the Order List:",paraId:13,tocIndex:0},{value:`| Order Product    | Price | Price Rule     | Total Price          |
| ---------------- | -------------- |----------------|----------------------|
| iPhone 14 Pro    | 7999           | Rule1: 90% off | 7999 * 0.9 = 7199.1 |
| iPhone 13 Pro    | 6999           | Rule2: 80% off | 6999 * 0.8 = 5599.2 |`,paraId:14,tocIndex:0},{value:"The final price displayed in the image below should match the calculated price in the Collection above:",paraId:15,tocIndex:0},{value:"Since the workflow operates asynchronously, the total price might not be immediately reflected in the Collection after the order is created. You may need to wait a moment before refreshing the page to see the updated total price.",paraId:16,tocIndex:0}]},470229:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Dynamic Calculation nodes stand out from Operator nodes by allowing diverse calculations based on data-associated expressions. While traditional formula fields are limited to applying a single fixed formula across all data rows, Dynamic calculation solve this limitation by enabling workflows to handle different calculation methods for varying data rows.",paraId:0},{value:"For example, different product categories in order data may require distinct statistical formulas to compute specific report data.",paraId:1},{value:"This plugin comes pre-installed and does not require any additional setup.",paraId:2,tocIndex:1},{value:"Using dynamic expressions involves several key sections:",paraId:3,tocIndex:2},{value:'"Expression" Template Table',paraId:4,tocIndex:2},{value:"Node",paraId:5,tocIndex:2},{value:"For practical examples, refer to the ",paraId:6,tocIndex:2},{value:"Examples",paraId:7,tocIndex:2},{value:" section.",paraId:6,tocIndex:2}]},479808:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Create a dynamic calculation node:",paraId:0,tocIndex:1},{value:"Unlike the expression options in a standard calculation node, dynamic expressions must be selected based on preloaded data rather than directly inputting the expression. Choose the preloaded product discount rule data from the trigger:",paraId:1,tocIndex:3},{value:"You also need to select the data row object from the table to be used as a variable in the expression. This can be chosen from the workflow context, where results have been preloaded or queried. The object must be a data row from the table associated with the expression data. In this case, select the product data:",paraId:2,tocIndex:4},{value:"Saving the node configuration completes the entire setup process.",paraId:3,tocIndex:4}]},894349:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The JavaScript node allows users to execute custom Node.js scripts within a workflow. These scripts can utilize upstream workflow variables as parameters and return values that subsequent nodes can use.",paraId:0},{value:"The script supports most Node.js features but has some differences from the native execution environment. See the ",paraId:1},{value:"Feature List",paraId:2},{value:" for details.",paraId:1},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button in the workflow to add a \u201CScript\u201D node:",paraId:3,tocIndex:2},{value:"Use parameters to pass variables or static values from the workflow context into the script, making them accessible in the script logic. ",paraId:4,tocIndex:4},{value:"name",paraId:4,tocIndex:4},{value:" represents the parameter name, which will serve as the variable name in the script. ",paraId:4,tocIndex:4},{value:"value",paraId:4,tocIndex:4},{value:" represents the parameter value, which can be a workflow variable or a constant.",paraId:4,tocIndex:4},{value:"The script content functions as a single function where you can write any JavaScript code supported by the Node.js environment. Use the ",paraId:5,tocIndex:5},{value:"return",paraId:5,tocIndex:5},{value:" statement to provide a value as the node's output, making it available as a variable for downstream nodes.",paraId:5,tocIndex:5},{value:"After writing the script, use the test button below the editor to open a test execution dialog. Populate parameters with static values for simulation. The dialog displays the return value and output (logs) after execution.",paraId:6,tocIndex:5},{value:"Set the timeout in milliseconds. A value of ",paraId:7,tocIndex:6},{value:"0",paraId:7,tocIndex:6},{value:" means no timeout.",paraId:7,tocIndex:6},{value:"If enabled, the workflow will continue even if the script encounters an error or timeout.",paraId:8,tocIndex:7},{value:"When a script fails, it will not return a value, and the node's output will contain the error message. If subsequent nodes use the result variable from this script node, handle it carefully.",paraId:9},{value:"The Node.js version matches the version used by the main application.",paraId:10,tocIndex:9},{value:"The script allows restricted use of modules, adhering to the CommonJS standard. Use the ",paraId:11,tocIndex:10},{value:"require()",paraId:11,tocIndex:10},{value:" directive to import modules in your code.",paraId:11,tocIndex:10},{value:"It supports Node.js native modules and modules installed in ",paraId:12,tocIndex:10},{value:"node_modules",paraId:12,tocIndex:10},{value:" (including dependencies used by NocoBase). To make modules available in the code, declare them in the application environment variable ",paraId:12,tocIndex:10},{value:"WORKFLOW_SCRIPT_MODULES",paraId:12,tocIndex:10},{value:". Separate multiple module names with commas, e.g.:",paraId:12,tocIndex:10},{value:`WORKFLOW_SCRIPT_MODULES=crypto,timers,lodash,dayjs
`,paraId:13,tocIndex:10},{value:"Modules not declared in ",paraId:14},{value:"WORKFLOW_SCRIPT_MODULES",paraId:14},{value:", including native Node.js modules or installed ",paraId:14},{value:"node_modules",paraId:14},{value:", ",paraId:14},{value:"cannot",paraId:14},{value:" be used in scripts. This strategy allows administrators to control the modules accessible to users, reducing the risk of excessive script permissions.",paraId:14},{value:"Global variables such as ",paraId:15,tocIndex:11},{value:"global",paraId:15,tocIndex:11},{value:", ",paraId:15,tocIndex:11},{value:"process",paraId:15,tocIndex:11},{value:", ",paraId:15,tocIndex:11},{value:"__dirname",paraId:15,tocIndex:11},{value:", and ",paraId:15,tocIndex:11},{value:"__filename",paraId:15,tocIndex:11},{value:" are ",paraId:15,tocIndex:11},{value:"not supported",paraId:15,tocIndex:11},{value:".",paraId:15,tocIndex:11},{value:`console.log(global); // will throw error: "global is not defined"
`,paraId:16,tocIndex:11},{value:"Parameters configured in the node are treated as global variables in the script and can be used directly. Only basic types such as ",paraId:17,tocIndex:12},{value:"boolean",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"number",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"string",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"object",paraId:17,tocIndex:12},{value:", and arrays are supported. ",paraId:17,tocIndex:12},{value:"Date",paraId:17,tocIndex:12},{value:" objects are converted to ISO-formatted strings when passed. Other complex types, such as custom class instances, cannot be directly passed.",paraId:17,tocIndex:12},{value:"Use the ",paraId:18,tocIndex:13},{value:"return",paraId:18,tocIndex:13},{value:" statement to return data of basic types (same as parameter rules) to the node as its output. If the code does not contain a ",paraId:18,tocIndex:13},{value:"return",paraId:18,tocIndex:13},{value:" statement, the node will have no output value.",paraId:18,tocIndex:13},{value:`return 123;
`,paraId:19,tocIndex:13},{value:"Supports",paraId:20,tocIndex:14},{value:" logging via ",paraId:20,tocIndex:14},{value:"console",paraId:20,tocIndex:14},{value:".",paraId:20,tocIndex:14},{value:`console.log('hello world!');
`,paraId:21,tocIndex:14},{value:"The script node\u2019s output will also be recorded in the corresponding workflow\u2019s log files.",paraId:22,tocIndex:14},{value:"Supports",paraId:23,tocIndex:15},{value:" asynchronous functions using ",paraId:23,tocIndex:15},{value:"async",paraId:23,tocIndex:15},{value:" and ",paraId:23,tocIndex:15},{value:"await",paraId:23,tocIndex:15},{value:". It also ",paraId:23,tocIndex:15},{value:"supports",paraId:23,tocIndex:15},{value:" the global ",paraId:23,tocIndex:15},{value:"Promise",paraId:23,tocIndex:15},{value:" object.",paraId:23,tocIndex:15},{value:`async function test() {
  return Promise.resolve(1);
}

const value = await test();
return value;
`,paraId:24,tocIndex:15},{value:"To use methods like ",paraId:25,tocIndex:16},{value:"setTimeout",paraId:25,tocIndex:16},{value:", ",paraId:25,tocIndex:16},{value:"setInterval",paraId:25,tocIndex:16},{value:", or ",paraId:25,tocIndex:16},{value:"setImmediate",paraId:25,tocIndex:16},{value:", import them from the Node.js ",paraId:25,tocIndex:16},{value:"timers",paraId:25,tocIndex:16},{value:" package.",paraId:25,tocIndex:16},{value:`const { setTimeout, setInterval, setImmediate, clearTimeout, clearInterval, clearImmediate } = require('timers');

async function sleep(time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

await sleep(1000);

return 123;
`,paraId:26,tocIndex:16}]},278996:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is designed to transform or calculate complex JSON data generated by various nodes, enabling subsequent nodes to effectively utilize this data. For instance, SQL operations and HTTP request nodes often return results in JSON format. The JSON calculation node allows you to transform this data into the specific values and variable formats required by later stages in the workflow.",paraId:0},{value:'To add a "JSON calculation" node in the workflow configuration interface, simply click the plus (\u201C+\u201D) button within the process:',paraId:1,tocIndex:2},{value:"JSON calculation nodes are generally positioned beneath other data nodes to facilitate parsing their output.",paraId:2},{value:"The JSON calculation node offers support for various parsing engines, each with its own unique syntax. You can select an engine based on your specific needs and preferences. Currently, three parsing engines are available:",paraId:3,tocIndex:4},{value:"JMESPath",paraId:4,tocIndex:4},{value:"JSONPath Plus",paraId:4,tocIndex:4},{value:"JSONata",paraId:4,tocIndex:4},{value:"The data source can be either the output of an upstream node or a data object within the process context. This is typically an unstructured data object, such as the results from an SQL node or an HTTP request node.",paraId:5,tocIndex:5},{value:"Data objects related to data tables are usually already structured through table configuration information and do not typically require parsing by a JSON calculation node.",paraId:6},{value:"You can create a custom parsing expression based on your specific needs and the parsing engine you\u2019ve selected.",paraId:7,tocIndex:6},{value:"Different parsing engines use different syntaxes; refer to the linked documentation for detailed information.",paraId:8},{value:"As of version ",paraId:9},{value:"v1.0.0-alpha.15",paraId:9},{value:", expressions now support the use of variables. These variables are pre-parsed before the specific engine executes, replacing the variables with the corresponding string values according to string template rules and merging them with other static elements in the expression. This feature is particularly valuable when dynamically constructing expressions, such as when parsing JSON content that requires dynamic keys.",paraId:9},{value:"When the parsed result is an object (or an array of objects), you can use properties mapping to convert the desired attributes into sub-variables for use by subsequent nodes.",paraId:10,tocIndex:7},{value:"For object (or array of objects) results, if you do not perform properties mapping, the entire object (or array of objects) will be stored as a single variable in the node's result, making it impossible to directly access the object's attribute values as individual variables.",paraId:11},{value:"Suppose you need to parse data from an SQL node that returns a set of order data:",paraId:12,tocIndex:8},{value:`[
  [
    {
      "id": 1,
      "products": [
        {
          "id": 1,
          "title": "Product 1",
          "price": 100,
          "quantity": 1
        },
        {
          "id": 2,
          "title": "Product 2",
          "price": 120,
          "quantity": 2
        }
      ]
    },
    {
      "id": 2,
      "products": [
        {
          "id": 3,
          "title": "Product 3",
          "price": 130,
          "quantity": 1
        },
        {
          "id": 4,
          "title": "Product 4",
          "price": 140,
          "quantity": 2
        }
      ]
    }
  ]
]
`,paraId:13,tocIndex:8},{value:"The outer array in the code above is intentional; it reflects the typical output of an SQL node. This is because the SQL node\u2019s result is a binary array, where the first element contains the query results and the second element contains metadata about the query.",paraId:14},{value:"If you need to parse and calculate the total price for each order and assemble this data into an object with the corresponding order ID, ready to update the order's total price, you would configure it as follows:",paraId:15},{value:"Select the JSONata parsing engine;",paraId:16},{value:"Choose the SQL node\u2019s result as the data source;",paraId:16},{value:"Use the JSONata expression ",paraId:16},{value:'$[0].{"id": id, "total": products.(price * quantity)}',paraId:16},{value:" for parsing;",paraId:16},{value:"Choose properties mapping to map ",paraId:16},{value:"id",paraId:16},{value:" and ",paraId:16},{value:"total",paraId:16},{value:" as sub-variables;",paraId:16},{value:"The final parsed result would look like this:",paraId:17},{value:`[
  {
    "id": 1,
    "total": 340
  },
  {
    "id": 2,
    "total": 410
  }
]
`,paraId:18},{value:"You can then iterate over the array of completed orders to update the total price of each order.",paraId:19}]},32681:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.6.0",paraId:0},{value:"This node is used to map complex JSON structures from upstream node results into variables for use in subsequent nodes. For example, after mapping the results from SQL operations or HTTP request nodes, you can access their properties in later nodes.",paraId:1},{value:"Unlike the JSON Calculation node, the JSON Variable Mapping node does not support custom expressions or rely on a third-party engine. It is solely used to map property values from a JSON structure, making it simpler to use.",paraId:2},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button within the process to add a ",paraId:3,tocIndex:2},{value:"JSON variable mapping",paraId:3,tocIndex:2},{value:" node:",paraId:3,tocIndex:2},{value:"The data source can be the result from an upstream node or a data object from the workflow context. It is typically an unstructured data object, such as the result from a SQL node or an HTTP request node.",paraId:4,tocIndex:4},{value:"Paste a sample data snippet and click the parse button to automatically generate a list of variables:",paraId:5,tocIndex:5},{value:"If there are variables in the auto-generated list that you do not need, you can click the delete button to remove them.",paraId:6,tocIndex:5},{value:"The sample data is not the final execution result; it is only used to help generate the variable list.",paraId:7},{value:"If this option is not checked, array contents will be mapped according to NocoBase Workflow\u2019s default variable handling method (refer to: ",paraId:8,tocIndex:6},{value:"Variables",paraId:9,tocIndex:6},{value:"). For example, given the following sample data:",paraId:8,tocIndex:6},{value:`{
  "a": 1,
  "b": [
    {
      "c": 2
    },
    {
      "c": 3
    }
  ]
}
`,paraId:10,tocIndex:6},{value:"The generated variable ",paraId:11,tocIndex:6},{value:"b.c",paraId:11,tocIndex:6},{value:" will represent the array ",paraId:11,tocIndex:6},{value:"[2, 3]",paraId:11,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:"If you check this option, array indexes will be included in the variable paths (e.g., ",paraId:12,tocIndex:6},{value:"b.0.c",paraId:12,tocIndex:6},{value:" and ",paraId:12,tocIndex:6},{value:"b.1.c",paraId:12,tocIndex:6},{value:").",paraId:12,tocIndex:6},{value:"When array indexes are included, ensure that the indexes in the input data are consistent; otherwise, parsing errors may occur.",paraId:13,tocIndex:6},{value:"In the configuration of subsequent nodes, you can use the variables generated by the JSON Variable Mapping node:",paraId:14,tocIndex:7},{value:"Even if the JSON structure is complex, after mapping you only need to select the variable corresponding to the desired path.",paraId:15,tocIndex:7}]},858660:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The loop functions in a manner akin to ",paraId:0},{value:"for",paraId:0},{value:", ",paraId:0},{value:"while",paraId:0},{value:", or ",paraId:0},{value:"forEach",paraId:0},{value:" constructs in programming languages. It\u2019s designed for situations where you need to repeat certain operations a specific number of times or iterate over a dataset (such as an array). The loop node is your go-to tool for such tasks.",paraId:0},{value:"This plugin comes pre-installed, so no additional setup is necessary.",paraId:1,tocIndex:1},{value:'In the workflow configuration interface, you can add a "Loop" node by clicking the plus sign ("+") in the process:',paraId:2,tocIndex:3},{value:"Once you create the loop node, an internal branch specifically for the loop is generated. You can then populate this branch with any number of nodes. These nodes will have access to not only the workflow context variables but also the local variables defined within the loop context\u2014such as the current data object or the iteration index (which starts at ",paraId:3,tocIndex:3},{value:"0",paraId:3,tocIndex:3},{value:"). These local variables are scoped exclusively to the loop. For nested loops, you can use variables specific to each loop level.",paraId:3,tocIndex:3},{value:"The loop node can handle various data types for the loop object, each in a different way:",paraId:4,tocIndex:5},{value:"Array",paraId:5,tocIndex:5},{value:": This is the most common use case. Typically, you'll select a workflow context variable, such as the results from a query node or preloaded data from a many-to-many relationship. If an array is selected, the loop node will iterate over each element, assigning the current element to a local variable within the loop context for each iteration.",paraId:5,tocIndex:5},{value:"Number",paraId:6,tocIndex:5},{value:": When the loop object is a number, it\u2019s treated as the number of iterations. The index within the local variable will match the loop object\u2019s value.",paraId:6,tocIndex:5},{value:"String",paraId:7,tocIndex:5},{value:": If the loop object is a string, the loop will iterate according to the string's length, processing each character by its index.",paraId:7,tocIndex:5},{value:"Others",paraId:8,tocIndex:5},{value:": Other data types (including objects) are treated as a single loop object, resulting in just one iteration\u2014typically not requiring a loop.",paraId:8,tocIndex:5},{value:"You can also input constants directly when working with numbers and strings. For instance, inputting ",paraId:9,tocIndex:5},{value:"5",paraId:9,tocIndex:5},{value:" (number type) will cause the loop to run 5 times, while inputting ",paraId:9,tocIndex:5},{value:"abc",paraId:9,tocIndex:5},{value:" (string type) will result in 3 iterations, processing ",paraId:9,tocIndex:5},{value:"a",paraId:9,tocIndex:5},{value:", ",paraId:9,tocIndex:5},{value:"b",paraId:9,tocIndex:5},{value:", and ",paraId:9,tocIndex:5},{value:"c",paraId:9,tocIndex:5},{value:" individually. The variable selection tool allows you to choose the type of constant you want to use.",paraId:9,tocIndex:5},{value:"From version ",paraId:10,tocIndex:6},{value:"v1.4.0-beta",paraId:10,tocIndex:6},{value:" on, loop condition options are added, and could be enabled in node configuration.",paraId:10,tocIndex:6},{value:"Condition",paraId:11,tocIndex:6},{value:"Similar to the configuration in a condition node, combination of conditions can be configured, and variables from the current loop, such as the loop item and loop index, can also be used.",paraId:12,tocIndex:6},{value:"Checkpoint",paraId:13,tocIndex:6},{value:"Similar to ",paraId:14,tocIndex:6},{value:"while",paraId:14,tocIndex:6},{value:" and ",paraId:14,tocIndex:6},{value:"do/while",paraId:14,tocIndex:6},{value:" in programming languages, conditions can be configured to be evaluated either before each loop iteration or after it ends. Post-condition evaluation can execute other nodes in the loop body first before performing the condition check.",paraId:14,tocIndex:6},{value:"When condition is not met",paraId:15,tocIndex:6},{value:"Similar to ",paraId:16,tocIndex:6},{value:"break",paraId:16,tocIndex:6},{value:" and ",paraId:16,tocIndex:6},{value:"continue",paraId:16,tocIndex:6},{value:" clause in programming languages, could be use to determine whether to break or continue the loop.",paraId:16,tocIndex:6},{value:"From version ",paraId:17,tocIndex:7},{value:"v1.4.0-beta",paraId:17,tocIndex:7},{value:" on, when an internal node in a loop fails to execute (due to unmet conditions, errors, etc.), the next step can be determined through this configuration. Three handling methods are supported:",paraId:17,tocIndex:7},{value:"Exit the process (default)",paraId:18,tocIndex:7},{value:"Exit the loop and continue the process",paraId:18,tocIndex:7},{value:"Continue to the next loop item",paraId:18,tocIndex:7},{value:"You can choose the appropriate method as needed.",paraId:19,tocIndex:7},{value:"Consider the following scenario: when placing an order, you need to check the inventory of each product in the order. If the inventory is sufficient, the stock is deducted; otherwise, the product in the order details is marked as invalid.",paraId:20,tocIndex:8},{value:"Create three collections: Product <-(1:m)-- Order Details --(m:1)-> Order , with the following data model:",paraId:21,tocIndex:8},{value:"Field Name",paraId:22,tocIndex:8},{value:"Field Type",paraId:22,tocIndex:8},{value:"Order Details",paraId:22,tocIndex:8},{value:"Many-to-One (Details)",paraId:22,tocIndex:8},{value:"Total Price",paraId:22,tocIndex:8},{value:"Number",paraId:22,tocIndex:8},{value:"Field Name",paraId:23,tocIndex:8},{value:"Field Type",paraId:23,tocIndex:8},{value:"Product",paraId:23,tocIndex:8},{value:"One-to-Many (Product)",paraId:23,tocIndex:8},{value:"Quantity",paraId:23,tocIndex:8},{value:"Number",paraId:23,tocIndex:8},{value:"Field Name",paraId:24,tocIndex:8},{value:"Field Type",paraId:24,tocIndex:8},{value:"Product Name",paraId:24,tocIndex:8},{value:"Single-line Text",paraId:24,tocIndex:8},{value:"Price",paraId:24,tocIndex:8},{value:"Number",paraId:24,tocIndex:8},{value:"Inventory",paraId:24,tocIndex:8},{value:"Integer",paraId:24,tocIndex:8},{value:'Create a workflow, selecting "Collection event" as the trigger, and choose the "Order" table with "Create record" as the trigger. Additionally, preload relationship data from the "Order Details" table and the Product Table under details:',paraId:25,tocIndex:8},{value:'Create a loop node, selecting the loop object as "Trigger Data / Order Details," which loops through each record in the order details table:',paraId:26,tocIndex:8},{value:'Inside the loop node, create a "Condition" node to check if the product inventory is sufficient:',paraId:27,tocIndex:8},{value:'If the inventory is sufficient, create a "Calculation" and an "Update record" node under the "Yes" branch to update the inventory after deduction:',paraId:28,tocIndex:8},{value:'If the inventory is insufficient, create an "Update record" node under the "No" branch to update the status of the order detail to "Invalid":',paraId:29,tocIndex:8},{value:"The complete process structure is illustrated below:",paraId:30,tocIndex:8},{value:"After configuration and activation of this workflow, every time a new order is created, the system will automatically check the inventory of each product in the order. If sufficient inventory is available, the stock will be deducted; otherwise, the product in the order details will be marked as invalid (helping to calculate the valid total order price).",paraId:31,tocIndex:8}]},302318:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To facilitate manual processing, a todo list should be added to the page. This list will display tasks that require attention, allowing relevant personnel to easily access and manage specific tasks within the manual node.",paraId:0,tocIndex:0},{value:'To add a todo list block, select "Workflow Todo" from the available blocks on the page:',paraId:1,tocIndex:1},{value:"Here is an example of a todo list block:",paraId:2,tocIndex:1},{value:"Personnel can click on the relevant todo task to open a pop-up window for manual processing:",paraId:3,tocIndex:2}]},684619:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'Imagine a scenario where a regular user submits an article. Before this article can be published, it must be reviewed and approved by an administrator. If the article does not pass this review process, it will remain in draft form, unpublished. This entire workflow can be implemented using an "Update Form" node within a manual process.',paraId:0,tocIndex:1},{value:'To start, create a workflow that is triggered by the action "Add Article" and then add a manual node to it:',paraId:1,tocIndex:1},{value:`
  `,paraId:2},{value:"Within this manual node, assign the responsibility to an administrator. Next, in the configuration interface, add a block that displays the details of the newly added article based on the trigger data:",paraId:3,tocIndex:1},{value:`
  `,paraId:2},{value:'Following this, add a block that utilizes the "Update Data Form" in the configuration interface. This block should be linked to the article table, allowing the administrator to decide whether the article should be approved. Once the form is added, a "Continue the process" button will be automatically generated, signaling approval if clicked. Additionally, you should add a "Terminate the process" button to handle cases where the article is rejected:',paraId:4,tocIndex:1},{value:`
  `,paraId:2},{value:"When the process continues, the status of the article will need to be updated. There are two primary ways to handle this. The first method involves displaying the article's status field directly within the form, giving the operator the choice. This method is particularly useful for scenarios where the form requires active input, such as providing feedback:",paraId:5,tocIndex:1},{value:`
  `,paraId:2},{value:`For a more streamlined process, you can instead configure the form's field values directly on the "Continue the process" button. Here, you would add a "Status" field with the value set to "Published," ensuring that once the operator clicks the button, the article will be automatically updated to a published status:`,paraId:6,tocIndex:1},{value:`
  `,paraId:2},{value:'Next, from the configuration menu at the top right of the form block, select the conditions that will filter the data to be updated. In this case, you would choose the "Article" table and set the filter condition as "ID equals Trigger Variables / Trigger Data / ID":',paraId:7,tocIndex:1},{value:`
  `,paraId:2},{value:"Finally, to enhance user-friendliness, you can customize the titles of the various blocks, the text on the buttons, and the placeholder text within the form fields:",paraId:8,tocIndex:1},{value:`
  `,paraId:2},{value:"After completing these steps, close the configuration panel and click the submit button to save the node configuration. Your workflow is now complete. Once this workflow is enabled, whenever a new article is added, it will automatically trigger the workflow. The administrator will then see this task in their to-do list. Upon clicking to view, the task details will be displayed:",paraId:9,tocIndex:1},{value:`
  `,paraId:2},{value:`
  `,paraId:2},{value:'Based on the article details, the administrator can then decide whether the article should be published. If approved, clicking the "Pass" button will update the article to a published status. If rejected, clicking the "Reject" button will ensure that the article remains in draft status.',paraId:10,tocIndex:1},{value:"Now, consider a scenario where an employee needs to request leave. This leave request must be approved by a supervisor before it can take effect, and the corresponding leave data for the employee will be adjusted accordingly. Regardless of whether the request is approved or rejected, a notification SMS will be sent to the employee using a request node (as detailed in the ",paraId:11,tocIndex:2},{value:"HTTP Request",paraId:12,tocIndex:2},{value:" section). This process can be efficiently managed using a custom form within a manual node.",paraId:11,tocIndex:2},{value:'Start by creating a workflow triggered by "Add Leave Request" and then add a manual node, similar to the article review process. However, in this case, the responsible person is the supervisor. Add a block based on the trigger data in the configuration interface to display the details of the newly submitted leave request. Then, add a block based on a custom form where the supervisor can decide whether to approve the request. This custom form should include fields for the approval status and reasons for rejection:',paraId:13,tocIndex:2},{value:`
  `,paraId:2},{value:`Unlike the article review process, because subsequent steps depend on the supervisor's decision, only a "Continue Process" button is configured here for submission purposes, omitting the "Terminate Process" button.`,paraId:14,tocIndex:2},{value:"Additionally, after the manual node, a condition node can be added to determine whether the supervisor approved the leave request. In the approved branch, you would add a data processing node to adjust the leave data, and after the branch ends, include a request node to send an SMS notification to the employee. This would complete the process as shown below:",paraId:15,tocIndex:2},{value:`
  `,paraId:2},{value:'The condition node should be configured with the following criteria: "',paraId:16,tocIndex:2},{value:"Node result / Supervisor / Process form / Approval",paraId:16,tocIndex:2},{value:" equals '",paraId:16,tocIndex:2},{value:"Approved",paraId:16,tocIndex:2},{value:`'":`,paraId:16,tocIndex:2},{value:`
  `,paraId:2},{value:"The data within the request node can be tailored using the corresponding form variables from the manual node, allowing for different SMS content based on whether the request was approved or rejected. With this configuration, the workflow is now complete. Once the workflow is activated, supervisors can manage leave requests directly from their to-do tasks, with actions similar to those in the article review process.",paraId:17,tocIndex:2}]},228872:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When a business process cannot be fully automated, a manual node can be implemented to transfer part of the decision-making authority to a human operator.",paraId:0},{value:"Upon reaching a manual node, the process will pause and generate a task for the assigned user. Based on the status selected by the user during submission, the process will either resume, remain on hold, or be terminated. This functionality is particularly valuable in scenarios requiring process approval.",paraId:1},{value:"This is a built-in plugin, requiring no installation.",paraId:2,tocIndex:1},{value:"The use of manual nodes is divided into two parts:",paraId:3,tocIndex:2},{value:"Node Configuration",paraId:4,tocIndex:2},{value:"ToDo Block",paraId:5,tocIndex:2},{value:"For further insight into practical applications, you can refer to the ",paraId:6,tocIndex:2},{value:"Examples",paraId:7,tocIndex:2},{value:" section.",paraId:6,tocIndex:2}]},575216:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button within the process to add a "Manual" node:',paraId:0,tocIndex:1},{value:"A manual node requires assigning a user who will be responsible for executing the pending task. You can add a list of pending tasks when setting up blocks on the page. Additionally, the content of each node's task pop-up window needs to be configured within the node\u2019s interface.",paraId:1,tocIndex:3},{value:"You can either select a specific user or use variables to choose the primary or foreign key of user data from the context.",paraId:2,tocIndex:3},{value:"At present, the assignee option for manual nodes does not support multi-user processing, though this feature is planned for future versions.",paraId:3},{value:"The interface setup for the to-do list is central to configuring the manual node. By clicking the \u201CConfigure\u201D button, you can open a separate pop-up window for configuration. This interface works like a regular page, allowing you to design it using a WYSIWYG (What You See Is What You Get) editor:",paraId:4,tocIndex:4},{value:"Tabs can be utilized to differentiate between various content types. For example, one tab might be used for approved form submissions, another for rejected submissions, or you might use them to display details of related data. These tabs can be configured freely according to your needs.",paraId:5,tocIndex:5},{value:"The blocks you can use primarily fall into two categories: Data Blocks and Form Blocks. In addition, Markdown blocks are available for informational prompts and other static content.",paraId:6,tocIndex:6},{value:"Data blocks allow you to display information from triggers or the results of any node processing, providing necessary context for the task assignee. For example, if the workflow is triggered by a form event, a data block can be created to show the details of the triggered data. This setup is similar to configuring details on a regular page, where you can select any fields from the triggered data for display:",paraId:7,tocIndex:7},{value:"Similarly, node data blocks can be configured to display data results from upstream nodes as reference information for the task assignee. For example, if an upstream calculation node generates results, these can be displayed as contextual data:",paraId:8,tocIndex:7},{value:"Since the workflow is in a non-executing state during interface configuration, data blocks won\u2019t display specific data. The relevant data will only appear in the to-do pop-up interface once the workflow is triggered and executed.",paraId:9},{value:"Form blocks are crucial in the to-do interface, as they determine whether the workflow continues. Failing to configure a form block will cause the workflow to halt. There are three types of form blocks available:",paraId:10,tocIndex:8},{value:"Custom Form",paraId:11,tocIndex:8},{value:"Create record form",paraId:11,tocIndex:8},{value:"Update record form",paraId:11,tocIndex:8},{value:"For Create record forms and Update record forms, you'll need to select the data table they are based on. When the assignee submits the form, the values entered will be used to add or update data in the selected table. The Custom Form allows you to create a temporary form not linked to any data table, with the submitted values available for use in subsequent nodes.",paraId:12,tocIndex:8},{value:"You can configure the form submission button with one of three options:",paraId:13,tocIndex:8},{value:"Continue the process",paraId:14,tocIndex:8},{value:"Terminate the process",paraId:14,tocIndex:8},{value:"Save temporarily",paraId:14,tocIndex:8},{value:'These three button options correspond to different node states in the workflow: "Complete," "Reject," or "Waiting." At least one of the first two options must be configured to determine how the workflow proceeds.',paraId:15,tocIndex:8},{value:'On the "Continue the process" button, you can configure specific values for form fields:',paraId:16,tocIndex:8},{value:'In the pop-up window, you can assign values to any field in the form. Once the form is submitted, these values will be used as the final values for those fields. This feature is particularly useful when reviewing data. You can configure multiple "Continue the process" buttons in the form, each setting different enumeration values for similar fields, allowing the workflow to continue with varying outcomes based on these values.',paraId:17,tocIndex:8}]},17774:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Parallel branch nodes enable the division of a process into multiple branches, each configurable with distinct nodes. Depending on the selected mode of the branch, the execution approach varies. When multiple operations need to be carried out simultaneously, the parallel branch node proves highly effective.",paraId:0,tocIndex:0},{value:"This feature is a built-in plugin, so no installation is necessary.",paraId:1,tocIndex:1},{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button to add a "Parallel Branch" node to the process:',paraId:2,tocIndex:3},{value:"Once a parallel branch node is added to the process, it will automatically create two sub-branches by default. You can add more branches by clicking the appropriate button. Each branch can include as many nodes as needed, and unnecessary branches can be removed by clicking the delete button at the start of the branch.",paraId:3,tocIndex:3},{value:"Parallel branch nodes offer three modes:",paraId:4,tocIndex:5},{value:"All succeeded",paraId:5,tocIndex:5},{value:': The process continues to execute nodes following the branches only if all branches succeed. If any branch terminates early\u2014whether due to failure, error, or any non-success state\u2014the entire parallel branch node terminates in that state. This is also referred to as "All Mode."',paraId:5,tocIndex:5},{value:"Any succeeded",paraId:5,tocIndex:5},{value:': The process will proceed to execute subsequent nodes once any branch succeeds. The entire parallel branch node will only terminate early if all branches fail or terminate prematurely, regardless of the reason. This is known as "Any Mode."',paraId:5,tocIndex:5},{value:"Any succeeded or failed",paraId:5,tocIndex:5},{value:': The process will continue executing subsequent nodes once any branch succeeds. However, if any branch fails, the entire parallel branch node will terminate early in that state. This is also known as "Race Mode."',paraId:5,tocIndex:5},{value:"In all modes, branches are executed sequentially from left to right. The process continues executing subsequent nodes or terminates early once the conditions of the selected mode are met.",paraId:6,tocIndex:5},{value:"Refer to the example provided in the ",paraId:7,tocIndex:6},{value:"Delay Node",paraId:8,tocIndex:6},{value:" section.",paraId:7,tocIndex:6}]},204834:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'If you set the trigger configuration to "Triggered only when a form bound to this workflow is submitted", you must return to the form interface and bind the workflow to the appropriate action button:',paraId:0,tocIndex:0},{value:'In the workflow binding configuration, select the relevant workflow. Typically, choosing "Entire Form Data" as the context for triggering data is sufficient:',paraId:1,tocIndex:0},{value:'Currently, buttons bound to pre-action events only support the "Submit" (or "Save"), "Update records," and "Delete" buttons in forms for new entries or updates. The "Trigger Workflow" button is not supported (this button can only be bound to post-action events).',paraId:2}]},191993:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Conditions for Interception",paraId:0,tocIndex:0},{value:'In "pre-action events," two specific conditions may cause the corresponding operation to be intercepted:',paraId:1,tocIndex:0},{value:'The process reaches an "End Process" node. As explained earlier, if the triggering data does not meet the conditions set in the "Condition" node, the process will follow the "No" branch, executing the "End Process" node. This causes the process to terminate, and the requested operation is intercepted.',paraId:2,tocIndex:0},{value:'Any node within the process fails to execute\u2014whether due to an error or other exceptional circumstances. In such cases, the process concludes with the corresponding status, and the operation is intercepted. For instance, if an "HTTP Request" is used to fetch external data and the request fails, the process ends in a failed state, simultaneously intercepting the corresponding operation request.',paraId:2,tocIndex:0},{value:"Once these interception conditions are met, the operation in question is halted entirely. For example, if an order submission is intercepted, no corresponding order data will be generated.",paraId:3,tocIndex:0},{value:"Parameters for Corresponding Operations",paraId:4,tocIndex:0},{value:'In "pre-action event" workflows, various data points are available as variables within the process, depending on the operation:',paraId:5,tocIndex:0},{value:"Operation Type \\ Variable",paraId:6,tocIndex:0},{value:'"User acted"',paraId:6,tocIndex:0},{value:'"Role of user acted"',paraId:6,tocIndex:0},{value:'Operation Parameter: "ID"',paraId:6,tocIndex:0},{value:'Parameter: "Values submitted"',paraId:6,tocIndex:0},{value:"Create a record",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"-",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"Update a record",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"Delete one or more records",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"\u2713",paraId:6,tocIndex:0},{value:"-",paraId:6,tocIndex:0},{value:'The variables "Trigger variables / Parameter / Values submitted" in pre-action events are not the actual data stored in the database but the parameters submitted with the operation. To retrieve actual database data, you must use the "Query record" node within the process.',paraId:7},{value:'Additionally, for delete operations, when dealing with a single record, the "ID" in the operation parameters is a simple value. For multiple records, however, the "ID" is an array.',paraId:8},{value:"Response Messages",paraId:9},{value:`Once the trigger is configured, you can define the relevant logic within the workflow. Typically, the "Condition" node's branching mechanism is used to decide whether to "End Process" based on specific business conditions, returning a pre-defined "Response Message":`,paraId:10},{value:"At this stage, the workflow configuration is complete. You can test it by submitting data that does not meet the configured conditions, triggering the interception logic. This will result in the return of a response message:",paraId:11},{value:"Response Message Status",paraId:12},{value:'If the "End Process" node is set to exit with a "Success" status and the process reaches this node, the operation request will still be intercepted. However, the returned response message will display a "Success" (instead of "Error") status:',paraId:13}]},46865:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Building on the basic instructions provided earlier, let's explore an example scenario of "Order Submission." In this scenario, we need to verify the stock levels of all products selected by the user at the time of order submission. If any product has insufficient stock, the order submission will be blocked, and a relevant notification will be displayed. The system will iterate through each product, and if all products have sufficient stock, the order data will be generated successfully.`,paraId:0,tocIndex:0},{value:`The other steps follow the same procedure outlined in the instructions. However, since an order may include multiple products, in addition to establishing a many-to-many relationship between "Order" <-- m:1 -- "Details" -- 1:m --> "Product" during data modeling, it's necessary to introduce a "Loop" node in the "Pre-Action Event" workflow. This loop will be used to check the stock level of each product:`,paraId:1,tocIndex:0},{value:'The loop object should be set to the "Details" array within the submitted order data:',paraId:2,tocIndex:0},{value:"Within the loop, a condition check node is employed to determine whether the stock of the current product is sufficient:",paraId:3,tocIndex:0},{value:"The other configurations remain consistent with those in the basic usage instructions. Upon order submission, if any product's stock is insufficient, the order will be blocked, and a corresponding notification will be returned. During testing, you can attempt to submit multiple products in one order, with one product having insufficient stock and another having sufficient stock. The response message you receive will look like this:",paraId:4,tocIndex:0},{value:`As illustrated, the response message does not flag the insufficient stock of the first product, "iPhone 15 Pro," but it does indicate the insufficient stock of the second product, "iPhone 14 Pro." This happens because the first product's stock was adequate, allowing the submission to proceed, while the second product's insufficient stock led to the order being blocked.`,paraId:5,tocIndex:0}]},74402:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The pre-operation event is integrated during the request processing phase, enabling it to be triggered via an HTTP API call.",paraId:0,tocIndex:0},{value:"For workflows that are locally bound to an action button, you can trigger them with the following command (using a button for the ",paraId:1,tocIndex:0},{value:"posts",paraId:1,tocIndex:0},{value:" table as an example):",paraId:1,tocIndex:0},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post."
  }'
  "http://localhost:3000/api/posts:create?triggerWorkflows=workflowKey"
`,paraId:2,tocIndex:0},{value:"The URL parameter ",paraId:3,tocIndex:0},{value:"triggerWorkflows",paraId:3,tocIndex:0},{value:" specifies the key of the workflow, with multiple workflows separated by commas. You can find this key by hovering your mouse over the workflow name at the top of the workflow canvas:",paraId:3,tocIndex:0},{value:"After executing the above command, the corresponding pre-operation event for the ",paraId:4,tocIndex:0},{value:"posts",paraId:4,tocIndex:0},{value:" table will be triggered. Once the associated workflow is processed synchronously, the data will be created and returned as usual.",paraId:4,tocIndex:0},{value:'If the configured workflow reaches an "End process," the request will be intercepted, and no data will be created, following the same logic as an interface operation. If the End Node status is set to failure, the response status code will be ',paraId:5,tocIndex:0},{value:"400",paraId:5,tocIndex:0},{value:"; if successful, it will be ",paraId:5,tocIndex:0},{value:"200",paraId:5,tocIndex:0},{value:".",paraId:5,tocIndex:0},{value:'If a "Response Message" node is configured before the End Node, the generated message will be included in the response. The error message structure is as follows:',paraId:6,tocIndex:0},{value:`{
  "errors": [
    {
      "message": "message from 'Response Message' node"
    }
  ]
}
`,paraId:7,tocIndex:0},{value:'When the "End Node" is configured as successful, the message structure is as follows:',paraId:8,tocIndex:0},{value:`{
  "messages": [
    {
      "message": "message from 'Response Message' node"
    }
  ]
}
`,paraId:9,tocIndex:0},{value:'Since multiple "Response Message" nodes can be added within the workflow, the returned message data structure is presented as an array.',paraId:10},{value:"If the pre-operation event is configured globally, there\u2019s no need to specify the corresponding workflow using the URL parameter ",paraId:11},{value:"triggerWorkflows",paraId:11},{value:" when calling the HTTP API. Simply calling the corresponding data table operation will automatically trigger it.",paraId:11},{value:`curl -X POST -H 'Authorization: Bearer <your token>' -H 'X-Role: <roleName>' -d \\
  '{
    "title": "Hello, world!",
    "content": "This is a test post."
  }'
  "http://localhost:3000/api/posts:create"
`,paraId:12},{value:"When triggering post-operation events via an HTTP API call, ensure the workflow is enabled and that the data table configuration matches the expected setup. Otherwise, the call may fail or result in errors.",paraId:13}]},585094:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'The pre-operation event plugin introduces a powerful mechanism for intercepting form operation requests. This interception occurs after a form operation is submitted but before it\u2019s processed. If the process triggered includes an "End Process" node or if any other nodes fail to execute correctly (whether due to errors or incomplete execution), the form operation will be intercepted. Otherwise, the operation will proceed as planned. When paired with the "Response Message" node, this feature allows you to configure the process to return specific response messages to the client, offering clear and relevant prompts. Pre-operation events are ideal for business validation or logic checks, enabling the approval or interception of client-submitted requests for creating, updating, or deleting records.',paraId:0},{value:"Using pre-operation events involves several key steps:",paraId:1,tocIndex:1},{value:"Trigger Configuration",paraId:2,tocIndex:1},{value:"Operation Configuration",paraId:3,tocIndex:1},{value:"For a deeper understanding, you can explore ",paraId:4,tocIndex:1},{value:"Advanced Usage",paraId:5,tocIndex:1},{value:", and see how it\u2019s applied in real scenarios by reviewing the ",paraId:4,tocIndex:1},{value:"Examples",paraId:6,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"If you need to integrate with an external system, refer to ",paraId:7,tocIndex:1},{value:"External Call",paraId:8,tocIndex:1},{value:".",paraId:7,tocIndex:1}]},955228:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'When setting up a workflow, select "Pre-action event" as the event type:',paraId:0,tocIndex:1},{value:"The first step in configuring a trigger for intercepting workflows is to select the data table associated with the action:",paraId:1,tocIndex:2},{value:"Next, choose the intercept mode. You can either intercept only the action buttons linked to this workflow or intercept all selected actions for the data table (regardless of the form the action originates from and without needing to bind the corresponding workflow):",paraId:2,tocIndex:2},{value:'Currently, the supported action types include "Create," "Update," and "Delete." You can select multiple action types simultaneously.',paraId:3,tocIndex:3}]},193959:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When you need to interact with another web system, the HTTP Request node is your go-to tool. This node allows you to send an HTTP request to a specified address, complete with data in JSON or ",paraId:0},{value:"application/x-www-form-urlencoded",paraId:0},{value:" formats, facilitating seamless communication with external systems.",paraId:0},{value:"If you're already familiar with tools like Postman, mastering the HTTP Request node will be straightforward. However, unlike traditional tools, this node leverages context variables from the current workflow, making it a powerful addition to your business process integration.",paraId:1},{value:"This is a built-in plugin, so there's no need for installation.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button within your process to add an "HTTP Request" node:',paraId:3,tocIndex:3},{value:"Choose from the available HTTP request methods: ",paraId:4,tocIndex:5},{value:"GET",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"POST",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"PUT",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"PATCH",paraId:4,tocIndex:5},{value:", and ",paraId:4,tocIndex:5},{value:"DELETE",paraId:4,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:"Specify the URL of the HTTP service, including the protocol (",paraId:5,tocIndex:6},{value:"http://",paraId:5,tocIndex:6},{value:" or ",paraId:5,tocIndex:6},{value:"https://",paraId:5,tocIndex:6},{value:"). For security, ",paraId:5,tocIndex:6},{value:"https://",paraId:5,tocIndex:6},{value:" is recommended.",paraId:5,tocIndex:6},{value:"This defines the ",paraId:6,tocIndex:7},{value:"Content-Type",paraId:6,tocIndex:7},{value:" in the request header, see the options in the ",paraId:6,tocIndex:7},{value:"Request Body",paraId:7,tocIndex:7},{value:" section.",paraId:6,tocIndex:7},{value:"Set key-value pairs for the request headers, with values that can dynamically reference variables from the workflow context.",paraId:8,tocIndex:8},{value:"The ",paraId:9},{value:"Content-Type",paraId:9},{value:" header is predetermined by the request data format setting. Manual input here will not override this configuration.",paraId:9},{value:"Define key-value pairs for the query string. Values can dynamically utilize variables from the workflow context.",paraId:10,tocIndex:9},{value:"Depends on the ",paraId:11,tocIndex:10},{value:"Content-Type",paraId:11,tocIndex:10},{value:" option, different formats are supported.",paraId:11,tocIndex:10},{value:"application/json",paraId:12},{value:"Standard JSON format text is supported. Use the variable button in the upper-right corner of the text editor to insert context variables.",paraId:13,tocIndex:11},{value:"Ensure that variables within JSON are used as strings, for example: ",paraId:14},{value:'{ "a": "{{$context.data.a}}" }',paraId:14},{value:".",paraId:14},{value:"application/x-www-form-urlencoded",paraId:12},{value:"This format supports standard key-value pairs. The variable button in the text editor can also be used to insert context variables.",paraId:15,tocIndex:12},{value:"application/xml",paraId:12},{value:"Supports standard XML format text. Similar to JSON, you can use the variable button to insert context variables.",paraId:16,tocIndex:13},{value:"multipart/form-data",paraId:12},{value:"v1.8.0+",paraId:17,tocIndex:13},{value:"Supports key-value pairs of form data. When selecting a data type as a file object, you can upload files. Files can only be selected from existing file objects in the context, such as results from file collection queries or related data from associated file collection.",paraId:18,tocIndex:14},{value:"When selecting file data, ensure that the variable corresponds to a single file object, not a list of files (in many-to-one relationships, the relationship field's value will be an array).",paraId:19},{value:"Timeout Settings",paraId:20},{value:"If the request takes too long to respond, the timeout setting will cancel it, leading to the premature termination of the current workflow with a failure status.",paraId:21},{value:"Ignore Failure",paraId:22},{value:"The request node considers any HTTP status code between ",paraId:23},{value:"200",paraId:23},{value:" and ",paraId:23},{value:"299",paraId:23},{value:' as a success. Codes outside this range are deemed failures. If you select the "Ignore failed requests and continue workflow" option, the workflow will proceed with subsequent nodes, even if the request fails.',paraId:23},{value:"The HTTP request's response results can be parsed using the ",paraId:24,tocIndex:15},{value:"JSON Query",paraId:25,tocIndex:15},{value:" node, enabling further use in subsequent workflow nodes.",paraId:24,tocIndex:15},{value:"Starting from version ",paraId:26,tocIndex:15},{value:"v1.0.0-alpha.16",paraId:26,tocIndex:15},{value:", the request node\u2019s response includes three components that can be used as variables:",paraId:26,tocIndex:15},{value:"Status Code",paraId:27,tocIndex:15},{value:"Response Headers",paraId:27,tocIndex:15},{value:"Data",paraId:27,tocIndex:15},{value:"The response status code is a standard numerical HTTP status code, such as ",paraId:28,tocIndex:15},{value:"200",paraId:28,tocIndex:15},{value:" or ",paraId:28,tocIndex:15},{value:"403",paraId:28,tocIndex:15},{value:", as provided by the service.",paraId:28,tocIndex:15},{value:"Response headers are in JSON format, and the response data\u2014also in JSON\u2014must be parsed using the JSON node before being utilized.",paraId:29,tocIndex:15},{value:"For instance, you can configure the request node to interface with a cloud platform for sending notification SMS. Here\u2019s how you would set up the Alibaba Cloud SMS API (with parameters adapted according to the relevant documentation):",paraId:30,tocIndex:16},{value:"When the workflow triggers this node, it will call Alibaba Cloud\u2019s SMS API based on the configuration. If successful, a text message will be sent via the cloud SMS service.",paraId:31,tocIndex:16}]},541962:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Response Message node is designed to deliver custom messages to the client who initiates an operation within certain types of workflows.",paraId:0},{value:'This node currently can be used in the workflow types "Pre-Action Event" and "Custom Action Event (synchronous mode)".',paraId:1},{value:'Within the supported workflow types, you can insert a "Response Message" node at any point in the workflow. To do this, click the plus ("+") button within the workflow to add the "Response Message" node:',paraId:2,tocIndex:2},{value:"Throughout the entire request process, response messages are accumulated in an array. When the process reaches a Response Message node, the new message content is appended to this array. Upon the server sending the response content, all messages within the array are delivered together to the client.",paraId:3,tocIndex:2},{value:"The message content is structured as a template string, allowing the insertion of variables. You can customize the template's content in the node configuration as needed:",paraId:4,tocIndex:3},{value:'As the process executes and reaches this node, the template is parsed to generate the final message content. In the example configuration above, the variable "Scope variables / Loop all products / Loop target / Product / Title" will be replaced with specific values during the actual workflow, such as:',paraId:5,tocIndex:3},{value:`Insufficient stock for product "iPhone 14 Pro"
`,paraId:6,tocIndex:3},{value:"The status prompt of the response message is determined by the success or failure of the process execution. If any node in the process fails to execute, the entire process is considered a failure. In this case, the message content will be returned to the client with a failure status as a notification.",paraId:7,tocIndex:4},{value:'If you need to actively define a failure status within the process, you can use the "End Node" and configure it as a failure. When the process reaches this node, it will exit with a failure status, and the message will be returned to the client with a failure status.',paraId:8,tocIndex:4},{value:"If the entire process completes without any failure and reaches the end successfully, the message content will be returned to the client with a success status.",paraId:9,tocIndex:4},{value:"If multiple response message nodes are defined in the process, the content of the executed nodes will be appended to an array. When the process is completed, all message content will be returned to the client together as a notification.",paraId:10},{value:'In a "Pre-Action Event" workflow, a response message can be used to provide feedback to the client upon completion of the process. For further details, refer to ',paraId:11,tocIndex:6},{value:"Request Interception",paraId:12,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:`In synchronous mode within a "Post-Action Event" workflow, the response message is sent to the client after the process is completed. Unlike the "Pre-Action Event" workflow, where the result might vary, the message displayed here is always a "success" notification. This consistency occurs because the triggering operation has already been successfully executed, and the success of the linked workflow does not impact the original operation's result.`,paraId:13,tocIndex:7}]},451654:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In certain scenarios where the standard data table operation nodes fall short for more complex tasks, you can directly employ the SQL Action node to execute sophisticated SQL queries within the database.",paraId:0,tocIndex:0},{value:"Unlike executing SQL operations by connecting to the database externally, within the workflow, you can leverage variables from the workflow context as parameters within your SQL statements.",paraId:1,tocIndex:0},{value:"When using a ",paraId:2,tocIndex:2},{value:"SELECT",paraId:2,tocIndex:2},{value:" statement, the query results are stored in the node in Sequelize's JSON format. You can parse and utilize these results through the ",paraId:2,tocIndex:2},{value:"JSON-query",paraId:3,tocIndex:2},{value:" plugin.",paraId:2,tocIndex:2},{value:"No",paraId:4,tocIndex:3},{value:". SQL actions directly execute SQL commands on the database. Actions such as ",paraId:4,tocIndex:3},{value:"CREATE",paraId:4,tocIndex:3},{value:" / ",paraId:4,tocIndex:3},{value:"UPDATE",paraId:4,tocIndex:3},{value:" / ",paraId:4,tocIndex:3},{value:"DELETE",paraId:4,tocIndex:3},{value:" occur in the database, while table events are managed at the Node.js application layer (ORM processing). As a result, these operations do not trigger table events.",paraId:4,tocIndex:3},{value:"This plugin is built-in, so no installation is necessary.",paraId:5,tocIndex:4},{value:'In the workflow configuration interface, click the plus sign (\u201C+\u201D) within the flow to add an "SQL Action" node:',paraId:6,tocIndex:6},{value:"Select the data source for executing the SQL.",paraId:7,tocIndex:8},{value:"The data source must be of a database type, such as the main data source, PostgreSQL type, or any other data source compatible with Sequelize.",paraId:8,tocIndex:8},{value:"Edit the SQL statement. Currently, only one SQL statement is supported.",paraId:9,tocIndex:9},{value:"You can insert required variables by clicking the variable button in the upper right corner of the editor. Before execution, the variables will be replaced with their corresponding values in the text, and the final SQL statement will be sent to the database for querying.",paraId:10,tocIndex:9},{value:"Starting from ",paraId:11,tocIndex:10},{value:"v1.3.15-beta",paraId:11,tocIndex:10},{value:", the result of the SQL node execution is an array consisting purely of data. Prior to this version, the result was a Sequelize native structure that included query metadata (for more details, see: ",paraId:11,tocIndex:10},{value:"sequelize.query()",paraId:11,tocIndex:10},{value:").",paraId:11,tocIndex:10},{value:"For example, the following query:",paraId:12,tocIndex:10},{value:`select count(id) from posts;
`,paraId:13,tocIndex:10},{value:"Result before ",paraId:14,tocIndex:10},{value:"v1.3.15-beta",paraId:14,tocIndex:10},{value:":",paraId:14,tocIndex:10},{value:`[
    [
        { "count": 1 }
    ],
    {
        // meta
    }
]
`,paraId:15,tocIndex:10},{value:"Result after ",paraId:16,tocIndex:10},{value:"v1.3.15-beta",paraId:16,tocIndex:10},{value:":",paraId:16,tocIndex:10},{value:`[
    { "count": 1 }
]
`,paraId:17,tocIndex:10}]},521119:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to call other processes within a workflow, allowing the current process variables to serve as inputs for the subflow, and using the outputs of the subflow as variables in subsequent nodes of the current process.",paraId:0},{value:"The process of calling a subflow is illustrated in the diagram below:",paraId:1},{value:"Subflows can be used to reuse some common process logic, such as sending emails or SMS, or to break a complex process into multiple subflows for easier management and maintenance.",paraId:2},{value:"Essentially, workflows do not distinguish whether a process is a subflow or not; any workflow can be called by other processes and can call other processes. All workflows are equal, existing only in a caller and callee relationship.",paraId:3,tocIndex:1},{value:"Similarly, the use of subflows occurs in two locations:",paraId:4,tocIndex:1},{value:'In the main process: as the caller, invoking other workflows through the "Call Workflow" node.',paraId:5,tocIndex:1},{value:'In the subflow: as the callee, saving the variables that need to be output in the current process through the "Process Output" node, which can then be utilized by subsequent nodes in the workflow that calls the current process.',paraId:5,tocIndex:1},{value:'In the workflow configuration interface, click the plus ("+") button within the process to add a "Call Workflow" node:',paraId:6,tocIndex:3},{value:"Select the workflow to be called, which can be quickly found using the search box:",paraId:7,tocIndex:5},{value:"Workflows that are not enabled can still be called as subflows.",paraId:8},{value:"When the current workflow is in synchronous mode, only synchronous subflows can be called.",paraId:8},{value:"After selecting the workflow, you also need to configure the trigger variables as input data for the subflow. You can choose static data directly or select variables from the current process:",paraId:9,tocIndex:6},{value:"Different types of triggers require different variables, which can be configured on the form as needed.",paraId:10,tocIndex:6},{value:'In the called workflow, add a "Process Output" node:',paraId:11,tocIndex:8},{value:"Input or select variables as output values. Output values can be of any type, including constants such as strings, numbers, boolean values, dates, or custom JSON. They can also be other variables within the process.",paraId:12,tocIndex:10},{value:'If multiple "Process Output" nodes are added in the called workflow, the value will be output according to the last executed "Process Output" node when calling that workflow.',paraId:13},{value:"Returning to the main process, to use the subflow's output values in other nodes below the call workflow, the result of the call workflow node can be selected. If the subflow outputs a simple value, such as a string, number, boolean value, or date (date in UTC string format), it can be used directly. If it is a complex object (such as an object in a Collection), it must first be mapped through a JSON parsing node before its properties can be used; otherwise, it can only be used as the entire object.",paraId:14,tocIndex:11},{value:"If the subflow does not configure a process output node or does not output any value, then when using the result of the call workflow node in the main process, only a null value (",paraId:15,tocIndex:11},{value:"null",paraId:15,tocIndex:11},{value:") will be obtained.",paraId:15,tocIndex:11}]},553383:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In workflows, variables can be declared or assigned values to existing ones, typically to store temporary data during the process.",paraId:0},{value:'To add a "Variable" node in the workflow configuration interface, click the plus (\u201C+\u201D) button in the process:',paraId:1,tocIndex:2},{value:"Like programming variables, a variable node must first be declared before it can be used or assigned a value. When creating a variable node, you must choose its mode. There are two options:",paraId:2,tocIndex:4},{value:"Declare a new variable: This creates a new variable.",paraId:3,tocIndex:4},{value:"Assign value to an existing variable: This assigns a value to a previously declared variable, effectively updating its value.",paraId:3,tocIndex:4},{value:"If the node being created is the first variable node in the process, only the declare mode is available, as there are no pre-existing variables to assign values to.",paraId:4,tocIndex:4},{value:"When assigning a value to an existing variable, you\u2019ll need to select the target variable, which is the node where the variable was originally declared:",paraId:5,tocIndex:4},{value:"The value of a variable can be of any type\u2014such as a constant (e.g., strings, numbers, booleans, dates) or another variable within the workflow.",paraId:6,tocIndex:5},{value:"In declare mode, setting a variable value is equivalent to assigning it an initial value.",paraId:7,tocIndex:5},{value:"In assign mode, setting a variable value modifies the value of the target variable to the new value, which will be used in subsequent steps.",paraId:8,tocIndex:5},{value:'In nodes following the variable node, you can use the value of the variable by selecting it from the "Node result" group. For example, in a query node, the value of a variable can be used as a query condition:',paraId:9,tocIndex:6},{value:"Variable nodes are particularly useful in branches where new values need to be calculated or combined with existing values (similar to ",paraId:10,tocIndex:7},{value:"reduce",paraId:10,tocIndex:7},{value:" or ",paraId:10,tocIndex:7},{value:"concat",paraId:10,tocIndex:7},{value:" in programming). These values can then be used after the branch ends. The following example demonstrates how to create a concatenated recipient string using loop and variable nodes.",paraId:10,tocIndex:7},{value:'Start by creating a workflow triggered by a data table update. This workflow will be activated when "Article" data is updated, and it preloads the related "Authors" relational data (used to get recipients):',paraId:11,tocIndex:7},{value:"Next, create a variable node to store the recipient string:",paraId:12,tocIndex:7},{value:"Then, create a loop branch node to iterate over the authors of the article and concatenate their details into the recipient variable:",paraId:13,tocIndex:7},{value:"Within the loop branch, first create a Operator node to concatenate the current author with the stored author string:",paraId:14,tocIndex:7},{value:"After the Operator node, create another variable node in assign mode. Select the recipient variable node as the target, and set its value to the result of the Operator node:",paraId:15,tocIndex:7},{value:"When the loop branch ends, the recipient variable will store the concatenated recipient string of all the article's authors. You can then use an HTTP request node after the loop to call the email-sending interface, passing the recipient variable\u2019s value as the recipient parameter:",paraId:16,tocIndex:7},{value:"In this way, a simple bulk email function is implemented using loop and variable nodes.",paraId:17,tocIndex:7}]},383574:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Webhook trigger provides a system-generated URL for third-party systems to call via HTTP POST requests. This URL triggers workflow execution when specific events occur, such as payment callbacks or notifications.",paraId:0},{value:'Create a workflow, select "Webhook Event" as the workflow type:',paraId:1,tocIndex:2},{value:'The key difference between "Synchronous" and "Asynchronous" workflows lies in their response behavior. Synchronous workflows wait until the workflow execution is complete before returning a response. In contrast, asynchronous workflows immediately return a pre-configured response, then execute the workflow in the background.',paraId:2},{value:"The URL is automatically generated and tied to the workflow. Use the copy button to paste the URL into the third-party system.",paraId:3,tocIndex:4},{value:"HTTP requests must use the POST method. Other methods return a ",paraId:4,tocIndex:4},{value:"405",paraId:4,tocIndex:4},{value:" error.",paraId:4,tocIndex:4},{value:"Basic HTTP authentication is supported. By enabling this option and setting a username and password, you can secure the Webhook. The third-party system must include the username and password in the Webhook URL for authentication (Criteria Detail: ",paraId:5,tocIndex:5},{value:"MDN: HTTP authentication",paraId:5,tocIndex:5},{value:").",paraId:5,tocIndex:5},{value:"When the user name and password are set, the system checks whether the user name and password in the request match, and returns a ",paraId:6,tocIndex:5},{value:"401",paraId:6,tocIndex:5},{value:" error when no match is provided or no match is provided.",paraId:6,tocIndex:5},{value:"Data in HTTP requests must be parsed to make it usable in Workflow. Parsed data is available as variables in subsequent nodes.",paraId:7,tocIndex:6},{value:"Parsing an HTTP request is divided into three parts:",paraId:8,tocIndex:6},{value:"Request Headers",paraId:9,tocIndex:6},{value:"Headers are simple key-value pairs in string format. Specify the fields you need, such as ",paraId:10,tocIndex:6},{value:"Date",paraId:10,tocIndex:6},{value:" , ",paraId:10,tocIndex:6},{value:"X-Request-Id",paraId:10,tocIndex:6},{value:", etc.",paraId:10,tocIndex:6},{value:"Request Parameters",paraId:11,tocIndex:6},{value:"Request parameter is the URL of query parameters, such as ",paraId:12,tocIndex:6},{value:"http://localhost:13000/api/webhook:trigger/1hfmkioou0d? query=1",paraId:12,tocIndex:6},{value:"  'query' parameter. Paste the complete URL sample or query only the parameter part of the sample and click the parse button to automatically parse the key-value pairs.",paraId:12,tocIndex:6},{value:"Automatic parsing converts the parameter portion of the URL into a JSON structure, and generates a path based on the parameter hierarchy such as ",paraId:13,tocIndex:6},{value:"query[0]",paraId:13,tocIndex:6},{value:", ",paraId:13,tocIndex:6},{value:"query[0].a",paraId:13,tocIndex:6},{value:", etc. The path name can be manually modified if it does not meet the requirements, but usually does not need to be modified. Aliases are optional for displaying the name of a variable when used as a variable. At the same time, all parameter tables in the sample are generated. If there are unnecessary parameters, you can delete them.",paraId:13,tocIndex:6},{value:"Request Body",paraId:14,tocIndex:6},{value:"The request Body is the body of the HTTP request. Currently, only the request body in Content-Type format application/json is supported. You can directly configure the path to be parsed, or enter a JSON example and click the parse button for automatic parsing.",paraId:15,tocIndex:6},{value:"Automatic parsing JSON structure will be the key/value pair into paths, such as ",paraId:16,tocIndex:6},{value:'{" a ": 1," b ": {" c" : 2}}',paraId:16,tocIndex:6},{value:" generates ",paraId:16,tocIndex:6},{value:"a",paraId:16,tocIndex:6},{value:", ",paraId:16,tocIndex:6},{value:"b",paraId:16,tocIndex:6},{value:", ",paraId:16,tocIndex:6},{value:"b.c",paraId:16,tocIndex:6},{value:" path, etc. Aliases are optional for displaying the name of a variable when used as a variable. At the same time, all parameter tables in the sample are generated. If there are unnecessary parameters, you can delete them.",paraId:16,tocIndex:6},{value:"The response part of Webhook is configured differently in synchronous and asynchronous workflows. The asynchronous workflows are directly configured in the trigger. After receiving the Webhook request, the response configuration in the trigger is immediately returned to the third-party system before the workflow is executed. Synchronous workflows need to be handled in the process by adding response nodes as required by the business (Detail: [Response nodes](#response nodes)).",paraId:17,tocIndex:7},{value:"Typically, the response to an asynchronously triggered Webhook event has a status code of ",paraId:18,tocIndex:7},{value:"200",paraId:18,tocIndex:7},{value:" and a response body of ",paraId:18,tocIndex:7},{value:"ok",paraId:18,tocIndex:7},{value:". You can also customize the status code, response header, and response body of the response.",paraId:18,tocIndex:7},{value:"It is only supported for use in synchronous mode Webhook workflows for responses returned to third-party systems. For example, if there is an unexpected result (such as an error or failure) during the processing of a payment callback, the response node can return an error response to the third-party system so that some third-party systems can retry later according to the status.",paraId:19,tocIndex:8},{value:"In addition, the execution of the response node terminates the execution of the workflow, and subsequent nodes do not execute. If the entire workflow is not configured with a response node, the system will automatically respond according to the state of the process execution, returning ",paraId:20,tocIndex:8},{value:"200",paraId:20,tocIndex:8},{value:" for successful execution and ",paraId:20,tocIndex:8},{value:"500",paraId:20,tocIndex:8},{value:" for failed execution.",paraId:20,tocIndex:8},{value:'In the workflow configuration interface, click the plus sign ("+") button in the process to add the "Response" node:',paraId:21,tocIndex:9},{value:"Variables in the workflow context can be used in the response body.",paraId:22,tocIndex:10},{value:"In the Webhook workflow in synchronous mode, different responses can be returned according to different business conditions, as shown in the figure below:",paraId:23,tocIndex:11},{value:"Check whether a service status is satisfied through the conditional branch node. If yes, a success message is displayed. Otherwise, a failure message is displayed.",paraId:24,tocIndex:11}]},775201:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After each workflow is triggered, a corresponding execution plan will be created to track the process of this task. Each execution plan has a status value to indicate the current execution status, which can be viewed in the list and details of the execution history:",paraId:0,tocIndex:0},{value:'When all nodes in the main branch of the process are executed to the end of the process with a "Resolved" status, the entire execution plan will end with a "Resolved" status. When nodes in the main branch of the process appear in final status such as "failed", "error", "canceled" or "rejected", etc., the entire execution plan will be terminated early with the corresponding status. When nodes in the main branch of the process are in a "pending" status, the entire execution plan will be paused, but still display an "On going" status, until the waiting node is resumed and continues execution. Different node types have different ways of handling the "pending" status. For example, "Manual" nodes need to wait for manual processing, while "Delay" nodes need to wait until the time arrives to continue execution.',paraId:1,tocIndex:0},{value:"The status of the execution plan is as follows:",paraId:2,tocIndex:0},{value:"Status",paraId:3,tocIndex:0},{value:"Corresponds to the State of ",paraId:3,tocIndex:0},{value:" Last Executed Node of the Main Process",paraId:3,tocIndex:0},{value:"Explanation",paraId:3,tocIndex:0},{value:"Queueing",paraId:3,tocIndex:0},{value:"-",paraId:3,tocIndex:0},{value:"The process has been triggered and an execution plan has been generated, waiting in the queue for scheduling by the scheduler.",paraId:3,tocIndex:0},{value:"On going",paraId:3,tocIndex:0},{value:"Pending",paraId:3,tocIndex:0},{value:"The node requests a pause, waiting for further input or callback to continue.",paraId:3,tocIndex:0},{value:"Resolved",paraId:3,tocIndex:0},{value:"Resolved",paraId:3,tocIndex:0},{value:"No problems encountered, all nodes executed as expected one by one and completed.",paraId:3,tocIndex:0},{value:"Failed",paraId:3,tocIndex:0},{value:"Failed",paraId:3,tocIndex:0},{value:"Failed due to unmet the logic of node configurations.",paraId:3,tocIndex:0},{value:"Error",paraId:3,tocIndex:0},{value:"Error",paraId:3,tocIndex:0},{value:"The node encountered an uncaught program error and terminated early.",paraId:3,tocIndex:0},{value:"Canceled",paraId:3,tocIndex:0},{value:"Canceled",paraId:3,tocIndex:0},{value:"The waiting node was externally canceled from execution by the administrator, and terminated early.",paraId:3,tocIndex:0},{value:"Rejected",paraId:3,tocIndex:0},{value:"Rejected",paraId:3,tocIndex:0},{value:"In nodes requiring manual processing, it was rejected by user and no longer continued with subsequent processes.",paraId:3,tocIndex:0},{value:"In the examples of ",paraId:4,tocIndex:0},{value:"Quick S tart",paraId:5,tocIndex:0},{value:', we already know that checking the details of the execution history of a workflow can check whether all nodes in the execution are executed normally, and the status and result data of each executed node. In some advanced workflows and nodes, the executed results of the nodes may be multiple, such as the results of "Loop" nodes:',paraId:4,tocIndex:0},{value:'Workflow can be triggered concurrently, but executed one by one in queue, even if multiple workflows are triggered simultaneously, they will be executed sequentially, not in parallelly. So when the status shows "Queueing" it means that one of the workflows is executing and need to wait.',paraId:6},{value:'The "On going" status only indicates that the execution plan has started and is usually paused due to the pending status of some node, and does not mean that the execution plan preemptively occupies the execution resources at the head of the queue. Therefore, when there are "On going" execution plans, other "Queueing" execution plans can still be scheduled and executed.',paraId:7},{value:`The status of the execution plan is determined by each node. In an execution plan after a trigger, each executed node will produce a node status, and the status will determine whether the subsequent process continues to process. Usually, after a node is executed successfully, the next node will continue to execute until all nodes are executed in sequence, or interrupted. When encountering process control nodes, such as "Branch", "Loop", "Parallel" and "Delay", etc., the next node's execution flow will be determined according to the control node's configured conditions and the runtime context data.`,paraId:8,tocIndex:1},{value:"The possible status that may be produced after each node is executed are following:",paraId:9,tocIndex:1},{value:"Status",paraId:10,tocIndex:1},{value:"Is a Final status?",paraId:10,tocIndex:1},{value:"Will it Terminates Early?",paraId:10,tocIndex:1},{value:"Explanation",paraId:10,tocIndex:1},{value:"Pending",paraId:10,tocIndex:1},{value:"No",paraId:10,tocIndex:1},{value:"No",paraId:10,tocIndex:1},{value:"The node requests a pause, waiting for further input or callback to continue.",paraId:10,tocIndex:1},{value:"Resolved",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"No",paraId:10,tocIndex:1},{value:"No problems encountered, executed successfully, and continue to execute the next node until the end.",paraId:10,tocIndex:1},{value:"Failed",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"Failed due to unmet node configurations.",paraId:10,tocIndex:1},{value:"Error",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"The node encountered an uncaught program error and terminated early.",paraId:10,tocIndex:1},{value:"Canceled",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"The pending node was canceled externally by the administrator, and terminated early.",paraId:10,tocIndex:1},{value:"Rejected",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"Yes",paraId:10,tocIndex:1},{value:"In nodes requiring manual processing, it was rejected by user and no longer continued with subsequent processes.",paraId:10,tocIndex:1},{value:'Except for the "Pending" status, all other status are final status of node execution. Only when the final status is "Resolved" the process will continue to execute, otherwise the execution of the entire process will be terminated early. When a node is in a branch process ("Parallel branchs", "Condition", "Loop", etc.), the final status generated by the node will be taken over and processed by the node that opens the branch, and so on, determining the entire process flow.',paraId:11,tocIndex:1},{value:`For example, when we use a "Condition" node with the "continue when 'Yes'" mode, if the result is "false" during execution, the entire process execution will be terminated early and exited with a failed status, as shown in the figure below:`,paraId:12,tocIndex:1},{value:'All final status other than "Resolved" can be regarded as failures, but the reasons for failure will be different, by checking the results of the nodes to know more about the failure.',paraId:13}]},323538:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'Workflow execution is based on the trigger type selected when creating, and can be executed in "Asynchronously" or "Synchronously" mode. "Asynchronously" mode means that after a specific event is triggered, it will enter the execution queue and be executed one by one by the background scheduler, while "synchronously" mode will not enter the scheduling queue after triggering, and will start execution directly, and will immediately provide feedback after execution.',paraId:0,tocIndex:1},{value:"Collection event, post-action event, custom action event, schedule event and approval event will be executed asynchronously by default, while pre-action event will be executed synchronously by default. Among them, collection event, post-action event and custom action event support both modes, and you can choose when creating a workflow:",paraId:1,tocIndex:1},{value:'Synchronously mode workflow are limited by their mode and cannot use nodes that generate a "pending" status, such as "manual process" etc.',paraId:2},{value:"When workflows are triggered frequently, you can reduce interference and database storage pressure by configuring automatic deletion of historical executions.",paraId:3,tocIndex:2},{value:"Similarly, in the pop-up for creating and editing workflows, you can configure whether the corresponding process automatically deletes history:",paraId:4,tocIndex:2},{value:'Automatic deletion can be configured based on the status of the execution. In most cases, it is recommended to only select the "Succeeded" status, so that history of execution failures can be retained for subsequent troubleshooting.',paraId:5,tocIndex:2},{value:"It is recommended not to enable automatic deletion of history when debugging workflows, so that the execution logic of the workflows can be reviewed in history.",paraId:6,tocIndex:2},{value:"Deleting the history of workflows will not reduce the count of workflows already executed.",paraId:7}]},253018:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"After a configured workflow is triggered at least once, if you want to modify the configuration of the workflow or its nodes, you need to create a new version and then modify it, which also ensures that when reviewing execution history of workflows that have been triggered, they are not affected by future modifications.",paraId:0,tocIndex:0},{value:"On the configuration page of the workflow, you can view existing workflow versions in the version menu in the top right corner:",paraId:1,tocIndex:0},{value:'In the more operations ("...") menu on the right side, you can do "copy to new version" based on the current version being viewed:',paraId:2,tocIndex:0},{value:'After copying to a new version, click the "Enable"/"Disable" switch. After switching the corresponding version to the enabled status, the new workflow version will take effect.',paraId:3,tocIndex:0},{value:'If you need to use an old version again, switch one from the version menu, and then switch to the enabled status by clicking the "On"/"Off" switch again, then the current viewed version will take effect, and further triggers will run on the corresponding version of the workflow.',paraId:4,tocIndex:0},{value:'When need to disable a workflow, after clicking the "Enable"/"Disable" switch to the disabled status, the workflow will no longer be triggered.',paraId:5,tocIndex:0},{value:'Different from "Duplicate" a workflow in the workflow management list,"Copy to new version" will still be grouped in the same group of workflows, but can be distinguished by version. However, duplicating a workflow will be make a completely new workflow, unrelated to the previous versions of the workflow, and the execution count will also be reset to zero.',paraId:6}]},842282:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Just like variables in programming languages, ",paraId:0,tocIndex:1},{value:"variables",paraId:0,tocIndex:1},{value:" are important tools for connecting and organizing processes in workflow.",paraId:0,tocIndex:1},{value:"When each node is executed after the workflow is triggered, variables can be used in some configuration options, and the source of the variables is from data result of upstream node, including the following categories:",paraId:1,tocIndex:1},{value:"Trigger Context Data: In cases such as action triggers and collection triggers, single record object can be used by all nodes. The specific implementation may differ based on the individual trigger.",paraId:2,tocIndex:1},{value:"Upstream node data: When executing any node, the result data of the previously completed nodes.",paraId:2,tocIndex:1},{value:"Scope variables: When the node is in some special branch structures, scope variables specific to the corresponding branch can be used, such as in loop structures, where data objects for each round of the loop can be used.",paraId:2,tocIndex:1},{value:"System variables: Some built-in system parameters, such as the current time, etc.",paraId:2,tocIndex:1},{value:"We have used the function of variables many times in ",paraId:3,tocIndex:1},{value:"Quick Start",paraId:4,tocIndex:1},{value:", for example, in the calculation node, we can use variables to reference trigger context data for calculation:",paraId:3,tocIndex:1},{value:"In the update node, use trigger context data as the filtering condition variable, and refer to the result of the calculation node as the field value variable to update record:",paraId:5,tocIndex:1},{value:"The internal of a variable is a JSON structure, which can usually be used to access specific parts of the data according to the JSONPath. Because many variables are based on the data collection of NocoBase, association data will be composed as a tree-like structure of objects, such as selecting the value of a field of related data that is queried. In addition, when association data is a to-many structure, the variable may be an array.",paraId:6,tocIndex:2},{value:"Selecting a variable will most of the time require selecting the last layer value attribute, usually a simple data type such as number, string, etc. However, when there is an array in the variable hierarchy, the attributes at the end level will also be mapped to an array, and only when the corresponding node supports array can the array data be correctly processed. For example, in the calculation node, some calculation engines have functions specially designed for arrays, and in the loop node, the loop object can directly select an array.",paraId:7,tocIndex:2},{value:"For example, when a query node queries multiple data rows, the node result will be an array containing multiple rows of homogeneous data:",paraId:8,tocIndex:2},{value:`[
  {
    "id": 1,
    "title": "Title 1"
  },
  {
    "id": 2,
    "title": "Title 2"
  }
]
`,paraId:9,tocIndex:2},{value:"However, when it is used as a variable in subsequent nodes, if the selected variable is in the form of ",paraId:10,tocIndex:2},{value:"Node Result / Query Node / Title",paraId:10,tocIndex:2},{value:", it will be mapped to an flat array of corresponding field values:",paraId:10,tocIndex:2},{value:`["Title 1", "Title 2"]
`,paraId:11,tocIndex:2},{value:"If it is a multi-dimensional array (such as a many-to-many association fields), it will be a one-dimensional array after the corresponding field is flattened.",paraId:12,tocIndex:2},{value:"Retrieve the system time at the moment of execution based on the node where it is executed, the time zone is the time zone set by the server.",paraId:13,tocIndex:4},{value:`This can be used for configuring date field filter conditions in query, update, and delete nodes. It only supports "Is" comparisons, and the start and end points of the date range are based on the server's time zone settings.`,paraId:14,tocIndex:5}]},764135:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The API available in the server-side package is shown in the following code:",paraId:0,tocIndex:1},{value:`import PluginWorkflowServer, {
  Trigger,
  Instruction,
  EXECUTION_STATUS,
  JOB_STATUS,
} from '@nocobase/plugin-workflow';
`,paraId:1,tocIndex:1},{value:"PluginWorkflowServer",paraId:2},{value:"The Workflow Plugin class.",paraId:3,tocIndex:2},{value:"Typically, during an application's runtime, the Workflow Plugin instance can be retrieved by calling ",paraId:4,tocIndex:2},{value:"app.pm.get<PluginWorkflowServer>(PluginWorkflowServer)",paraId:4,tocIndex:2},{value:" from any location where the application instance ",paraId:4,tocIndex:2},{value:"app",paraId:4,tocIndex:2},{value:" is accessible (hereinafter referred to as ",paraId:4,tocIndex:2},{value:"plugin",paraId:4,tocIndex:2},{value:").",paraId:4,tocIndex:2},{value:"registerTrigger()",paraId:2},{value:"Registers a new trigger type.",paraId:5,tocIndex:3},{value:"Signature",paraId:6,tocIndex:3},{value:"registerTrigger(type: string, trigger: typeof Trigger | Trigger)",paraId:7,tocIndex:3},{value:"Parameters",paraId:8,tocIndex:3},{value:"Parameter",paraId:9,tocIndex:3},{value:"Type",paraId:9,tocIndex:3},{value:"Description",paraId:9,tocIndex:3},{value:"type",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"Trigger type identifier",paraId:9,tocIndex:3},{value:"trigger",paraId:9,tocIndex:3},{value:"typeof Trigger | Trigger",paraId:9,tocIndex:3},{value:"Trigger type or instance",paraId:9,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:`import PluginWorkflowServer, { Trigger } from '@nocobase/plugin-workflow';

function handler(this: MyTrigger, workflow: WorkflowModel, message: string) {
  // trigger workflow
  this.workflow.trigger(workflow, { data: message.data });
}

class MyTrigger extends Trigger {
  messageHandlers: Map<number, WorkflowModel> = new Map();
  on(workflow: WorkflowModel) {
    const messageHandler = handler.bind(this, workflow);
    // listen for some event to trigger workflow
    process.on(
      'message',
      this.messageHandlers.set(workflow.id, messageHandler),
    );
  }

  off(workflow: WorkflowModel) {
    const messageHandler = this.messageHandlers.get(workflow.id);
    // remove listener
    process.off('message', messageHandler);
  }
}

export default class MyPlugin extends Plugin {
  load() {
    // get workflow plugin instance
    const workflowPlugin =
      this.app.pm.get<PluginWorkflowServer>(PluginWorkflowServer);

    // register trigger
    workflowPlugin.registerTrigger('myTrigger', MyTrigger);
  }
}
`,paraId:11,tocIndex:3},{value:"registerInstruction()",paraId:2},{value:"Registers a new node type.",paraId:12,tocIndex:4},{value:"Signature",paraId:13,tocIndex:4},{value:"registerInstruction(type: string, instruction: typeof Instruction | Instruction)",paraId:14,tocIndex:4},{value:"Parameters",paraId:15,tocIndex:4},{value:"Parameter",paraId:16,tocIndex:4},{value:"Type",paraId:16,tocIndex:4},{value:"Description",paraId:16,tocIndex:4},{value:"type",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:"Instruction type identifier",paraId:16,tocIndex:4},{value:"instruction",paraId:16,tocIndex:4},{value:"typeof Instruction | Instruction",paraId:16,tocIndex:4},{value:"Instruction type or instance",paraId:16,tocIndex:4},{value:"Example",paraId:17,tocIndex:4},{value:`import PluginWorkflowServer, { Instruction, JOB_STATUS } from '@nocobase/plugin-workflow';

class LogInstruction extends Instruction {
  run(node, input, processor) {
    console.log('my instruction runs!');
    return {
      status: JOB_STATUS.RESOLVED,
    };
  }
};

export default class MyPlugin extends Plugin {
  load() {
    // get workflow plugin instance
    const workflowPlugin = this.app.pm.get<PluginWorkflowServer>(PluginWorkflowServer);

    // register instruction
    workflowPlugin.registerInstruction('log', LogInstruction);
  }
}
`,paraId:18,tocIndex:4},{value:"trigger()",paraId:2},{value:"Triggers a specific workflow. This is mainly used within custom triggers to activate the corresponding workflow when a specific custom event is detected.",paraId:19,tocIndex:5},{value:"Signature",paraId:20,tocIndex:5},{value:"trigger(workflow: Workflow, context: any)",paraId:21,tocIndex:5},{value:"Parameters",paraId:22,tocIndex:5},{value:"Parameter",paraId:23,tocIndex:5},{value:"Type",paraId:23,tocIndex:5},{value:"Description",paraId:23,tocIndex:5},{value:"workflow",paraId:23,tocIndex:5},{value:"WorkflowModel",paraId:23,tocIndex:5},{value:"The workflow object to be triggered",paraId:23,tocIndex:5},{value:"context",paraId:23,tocIndex:5},{value:"object",paraId:23,tocIndex:5},{value:"The context data provided when triggering",paraId:23,tocIndex:5},{value:"context",paraId:24},{value:" is currently a required parameter; the workflow will not trigger without it.",paraId:24},{value:"Example",paraId:25},{value:`import { Trigger } from '@nocobase/plugin-workflow';

class MyTrigger extends Trigger {
  timer: NodeJS.Timeout;

  on(workflow) {
    // register event
    this.timer = setInterval(() => {
      // trigger workflow
      this.plugin.trigger(workflow, { date: new Date() });
    }, workflow.config.interval ?? 60000);
  }
}
`,paraId:26},{value:"resume()",paraId:2},{value:"Resumes the execution of a paused workflow at a specific node task.",paraId:27,tocIndex:6},{value:"Only workflows in the ",paraId:28,tocIndex:6},{value:"EXECUTION_STATUS.STARTED",paraId:28,tocIndex:6},{value:" state can be resumed.",paraId:28,tocIndex:6},{value:"Only node tasks in the ",paraId:28,tocIndex:6},{value:"JOB_STATUS.PENDING",paraId:28,tocIndex:6},{value:" state can be resumed.",paraId:28,tocIndex:6},{value:"Signature",paraId:29,tocIndex:6},{value:"resume(job: JobModel)",paraId:30,tocIndex:6},{value:"Parameters",paraId:31,tocIndex:6},{value:"Parameter",paraId:32,tocIndex:6},{value:"Type",paraId:32,tocIndex:6},{value:"Description",paraId:32,tocIndex:6},{value:"job",paraId:32,tocIndex:6},{value:"JobModel",paraId:32,tocIndex:6},{value:"The updated task object",paraId:32,tocIndex:6},{value:"The task object passed in is usually the updated object and typically has the ",paraId:33},{value:"status",paraId:33},{value:" updated to a value other than ",paraId:33},{value:"JOB_STATUS.PENDING",paraId:33},{value:"; otherwise, it will remain paused.",paraId:33},{value:"Example",paraId:34},{value:"See ",paraId:35},{value:"source code",paraId:35},{value:".",paraId:35},{value:"Trigger",paraId:2},{value:"Base class for triggers, used to extend custom trigger types.",paraId:36,tocIndex:7},{value:"Parameter",paraId:37,tocIndex:7},{value:"Type",paraId:37,tocIndex:7},{value:"Description",paraId:37,tocIndex:7},{value:"constructor",paraId:37,tocIndex:7},{value:"(public readonly workflow: PluginWorkflowServer): Trigger",paraId:37,tocIndex:7},{value:"Constructor",paraId:37,tocIndex:7},{value:"on?",paraId:37,tocIndex:7},{value:"(workflow: WorkflowModel): void",paraId:37,tocIndex:7},{value:"Event handler when workflow is started",paraId:37,tocIndex:7},{value:"off?",paraId:37,tocIndex:7},{value:"(workflow: WorkflowModel): void",paraId:37,tocIndex:7},{value:"Event handler when workflow is stopped",paraId:37,tocIndex:7},{value:"on",paraId:38,tocIndex:7},{value:"/",paraId:38,tocIndex:7},{value:"off",paraId:38,tocIndex:7},{value:" are used to register/unregister event listeners when the workflow is enabled/disabled. The passed parameter is the workflow instance corresponding to the trigger, which can be processed according to the configuration. For certain trigger types that already listen to events globally, these methods may not need to be implemented. For example, in a timed trigger, a timer can be registered in ",paraId:38,tocIndex:7},{value:"on",paraId:38,tocIndex:7},{value:" and unregistered in ",paraId:38,tocIndex:7},{value:"off",paraId:38,tocIndex:7},{value:".",paraId:38,tocIndex:7},{value:"Instruction",paraId:2},{value:"Base class for instruction types, used to extend custom instruction types.",paraId:39,tocIndex:8},{value:"Parameter",paraId:40,tocIndex:8},{value:"Type",paraId:40,tocIndex:8},{value:"Description",paraId:40,tocIndex:8},{value:"constructor",paraId:40,tocIndex:8},{value:"(public readonly workflow: PluginWorkflowServer): Instruction",paraId:40,tocIndex:8},{value:"Constructor",paraId:40,tocIndex:8},{value:"run",paraId:40,tocIndex:8},{value:"Runner",paraId:40,tocIndex:8},{value:"Execution logic when entering the node for the first time",paraId:40,tocIndex:8},{value:"resume?",paraId:40,tocIndex:8},{value:"Runner",paraId:40,tocIndex:8},{value:"Execution logic when resuming after an interruption",paraId:40,tocIndex:8},{value:"getScope?",paraId:40,tocIndex:8},{value:"(node: FlowNodeModel, data: any, processor: Processor): any",paraId:40,tocIndex:8},{value:"Provides local variables generated by the branch node",paraId:40,tocIndex:8},{value:"Related Types",paraId:41,tocIndex:8},{value:`export type Job =
  | {
      status: JOB_STATUS[keyof JOB_STATUS];
      result?: unknown;
      [key: string]: unknown;
    }
  | JobModel
  | null;

export type InstructionResult = Job | Promise<Job>;

export type Runner = (
  node: FlowNodeModel,
  input: JobModel,
  processor: Processor,
) => InstructionResult;

export class Instruction {
  run: Runner;
  resume?: Runner;
}
`,paraId:42,tocIndex:8},{value:"getScope",paraId:43,tocIndex:8},{value:" can be referred to in the ",paraId:43,tocIndex:8},{value:"loop node implementation",paraId:43,tocIndex:8},{value:", which is used to provide local variables for the branch.",paraId:43,tocIndex:8},{value:"EXECUTION_STATUS",paraId:2},{value:"A table of constants representing the status of workflow execution plans, used to indicate the current status of the execution plan.",paraId:44,tocIndex:9},{value:"Constant Name",paraId:45,tocIndex:9},{value:"Meaning",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.QUEUEING",paraId:45,tocIndex:9},{value:"Queueing",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.STARTED",paraId:45,tocIndex:9},{value:"In Progress",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.RESOLVED",paraId:45,tocIndex:9},{value:"Successfully Completed",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.FAILED",paraId:45,tocIndex:9},{value:"Failed",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.ERROR",paraId:45,tocIndex:9},{value:"Execution Error",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.ABORTED",paraId:45,tocIndex:9},{value:"Aborted",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.CANCELED",paraId:45,tocIndex:9},{value:"Canceled",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.REJECTED",paraId:45,tocIndex:9},{value:"Rejected",paraId:45,tocIndex:9},{value:"EXECUTION_STATUS.RETRY_NEEDED",paraId:45,tocIndex:9},{value:"Retry Needed",paraId:45,tocIndex:9},{value:"Apart from the first three, all other statuses represent failure states, but they can indicate different reasons for failure.",paraId:46,tocIndex:9},{value:"JOB_STATUS",paraId:2},{value:"A table of constants representing the status of workflow node tasks, used to indicate the current status of the node task. The status generated by the node also affects the status of the entire execution plan.",paraId:47,tocIndex:10},{value:"Constant Name",paraId:48,tocIndex:10},{value:"Meaning",paraId:48,tocIndex:10},{value:"JOB_STATUS.PENDING",paraId:48,tocIndex:10},{value:"Pending: The node has been reached, but the instruction requires suspension",paraId:48,tocIndex:10},{value:"JOB_STATUS.RESOLVED",paraId:48,tocIndex:10},{value:"Successfully Completed",paraId:48,tocIndex:10},{value:"JOB_STATUS.FAILED",paraId:48,tocIndex:10},{value:"Failed: The node execution did not meet the configured conditions",paraId:48,tocIndex:10},{value:"JOB_STATUS.ERROR",paraId:48,tocIndex:10},{value:"Error: An uncaught error occurred during node execution",paraId:48,tocIndex:10},{value:"JOB_STATUS.ABORTED",paraId:48,tocIndex:10},{value:"Aborted: The node was terminated by other logic after suspension",paraId:48,tocIndex:10},{value:"JOB_STATUS.CANCELED",paraId:48,tocIndex:10},{value:"Canceled: The node was manually canceled after suspension",paraId:48,tocIndex:10},{value:"JOB_STATUS.REJECTED",paraId:48,tocIndex:10},{value:"Rejected: The node was manually rejected after suspension",paraId:48,tocIndex:10},{value:"JOB_STATUS.RETRY_NEEDED",paraId:48,tocIndex:10},{value:"Retry Needed",paraId:48,tocIndex:10},{value:"The API available in the client-side package is shown in the following code:",paraId:49,tocIndex:11},{value:`import PluginWorkflowClient, {
  Trigger,
  Instruction,
} from '@nocobase/plugin-workflow/client';


`,paraId:50,tocIndex:11},{value:"PluginWorkflowClient",paraId:2},{value:"registerTrigger()",paraId:2},{value:"Registers the configuration panel corresponding to the trigger type.",paraId:51,tocIndex:13},{value:"Signature",paraId:52,tocIndex:13},{value:"registerTrigger(type: string, trigger: typeof Trigger | Trigger): void",paraId:53,tocIndex:13},{value:"Parameters",paraId:54,tocIndex:13},{value:"Parameter",paraId:55,tocIndex:13},{value:"Type",paraId:55,tocIndex:13},{value:"Description",paraId:55,tocIndex:13},{value:"type",paraId:55,tocIndex:13},{value:"string",paraId:55,tocIndex:13},{value:"Trigger type identifier, consistent with the identifier used during registration",paraId:55,tocIndex:13},{value:"trigger",paraId:55,tocIndex:13},{value:"typeof Trigger | Trigger",paraId:55,tocIndex:13},{value:"Trigger type or instance",paraId:55,tocIndex:13},{value:"registerInstruction()",paraId:2},{value:"Registers the configuration panel corresponding to the node type.",paraId:56,tocIndex:14},{value:"Signature",paraId:57,tocIndex:14},{value:"registerInstruction(type: string, instruction: typeof Instruction | Instruction): void",paraId:58,tocIndex:14},{value:"Parameters",paraId:59,tocIndex:14},{value:"Parameter",paraId:60,tocIndex:14},{value:"Type",paraId:60,tocIndex:14},{value:"Description",paraId:60,tocIndex:14},{value:"type",paraId:60,tocIndex:14},{value:"string",paraId:60,tocIndex:14},{value:"Node type identifier, consistent with the identifier used during registration",paraId:60,tocIndex:14},{value:"instruction",paraId:60,tocIndex:14},{value:"typeof Instruction | Instruction",paraId:60,tocIndex:14},{value:"Node type or instance",paraId:60,tocIndex:14},{value:"registerInstructionGroup()",paraId:2},{value:"\u6CE8\u518C\u8282\u70B9\u7C7B\u578B\u5206\u7EC4\u3002NocoBase \u9ED8\u8BA4\u63D0\u4F9B 4 \u4E2A\u8282\u70B9\u7C7B\u578B\u5206\u7EC4\uFF1A",paraId:61,tocIndex:15},{value:"'control'",paraId:62,tocIndex:15},{value:"\uFF1A\u63A7\u5236\u7C7B",paraId:62,tocIndex:15},{value:"'collection'",paraId:62,tocIndex:15},{value:"\uFF1A\u6570\u636E\u8868\u64CD\u4F5C\u7C7B",paraId:62,tocIndex:15},{value:"'manual'",paraId:62,tocIndex:15},{value:"\uFF1A\u4EBA\u5DE5\u5904\u7406\u7C7B",paraId:62,tocIndex:15},{value:"'extended'",paraId:62,tocIndex:15},{value:"\uFF1A\u5176\u4ED6\u6269\u5C55\u7C7B",paraId:62,tocIndex:15},{value:"\u5982\u679C\u9700\u8981\u6269\u5C55\u5176\u4ED6\u5206\u7EC4\uFF0C\u53EF\u4EE5\u4F7F\u7528\u8BE5\u65B9\u6CD5\u6CE8\u518C\u3002",paraId:63,tocIndex:15},{value:"\u7B7E\u540D",paraId:64,tocIndex:15},{value:"registerInstructionGroup(type: string, group: { label: string }): void",paraId:65,tocIndex:15},{value:"\u53C2\u6570",paraId:66,tocIndex:15},{value:"\u53C2\u6570",paraId:67,tocIndex:15},{value:"\u7C7B\u578B",paraId:67,tocIndex:15},{value:"\u8BF4\u660E",paraId:67,tocIndex:15},{value:"type",paraId:67,tocIndex:15},{value:"string",paraId:67,tocIndex:15},{value:"\u8282\u70B9\u5206\u7EC4\u6807\u8BC6\uFF0C\u4E0E\u6CE8\u518C\u4F7F\u7528\u7684\u6807\u8BC6\u4E00\u81F4",paraId:67,tocIndex:15},{value:"group",paraId:67,tocIndex:15},{value:"{ label: string }",paraId:67,tocIndex:15},{value:"\u5206\u7EC4\u4FE1\u606F\uFF0C\u76EE\u524D\u4EC5\u5305\u542B\u6807\u9898",paraId:67,tocIndex:15},{value:"\u793A\u4F8B",paraId:68,tocIndex:15},{value:`export default class YourPluginClient extends Plugin {
  load() {
    const pluginWorkflow = this.app.pm.get(PluginWorkflowClient);

    pluginWorkflow.registerInstructionGroup('ai', { label: \`{{t("AI", { ns: "\${NAMESPACE}" })}}\` });
  }
}
`,paraId:69,tocIndex:15},{value:"Trigger",paraId:2},{value:"Base class for triggers, used to extend custom trigger types.",paraId:70,tocIndex:16},{value:"Parameter",paraId:71,tocIndex:16},{value:"Type",paraId:71,tocIndex:16},{value:"Description",paraId:71,tocIndex:16},{value:"title",paraId:71,tocIndex:16},{value:"string",paraId:71,tocIndex:16},{value:"Trigger type name",paraId:71,tocIndex:16},{value:"fieldset",paraId:71,tocIndex:16},{value:"{ [key: string]: ISchema }",paraId:71,tocIndex:16},{value:"Set of trigger configuration options",paraId:71,tocIndex:16},{value:"scope?",paraId:71,tocIndex:16},{value:"{ [key: string]: any }",paraId:71,tocIndex:16},{value:"Object set that may be used in the configuration schema",paraId:71,tocIndex:16},{value:"components?",paraId:71,tocIndex:16},{value:"{ [key: string]: React.FC }",paraId:71,tocIndex:16},{value:"Component set that may be used in the configuration schema",paraId:71,tocIndex:16},{value:"useVariables?",paraId:71,tocIndex:16},{value:"(config: any, options: UseVariableOptions) => VariableOptions",paraId:71,tocIndex:16},{value:"Value getter for trigger context data",paraId:71,tocIndex:16},{value:"If ",paraId:72,tocIndex:16},{value:"useVariables",paraId:72,tocIndex:16},{value:" is not set, it means that this type of trigger does not provide a value-fetching function, and the trigger's context data cannot be selected in the flow node.",paraId:72,tocIndex:16},{value:"Instruction",paraId:2},{value:"Base class for instructions, used to extend custom node types.",paraId:73,tocIndex:17},{value:"Parameter",paraId:74,tocIndex:17},{value:"Type",paraId:74,tocIndex:17},{value:"Description",paraId:74,tocIndex:17},{value:"group",paraId:74,tocIndex:17},{value:"string",paraId:74,tocIndex:17},{value:"Node type group identifier, currently optional: ",paraId:74,tocIndex:17},{value:"'control'",paraId:74,tocIndex:17},{value:"/",paraId:74,tocIndex:17},{value:"'collection'",paraId:74,tocIndex:17},{value:"/",paraId:74,tocIndex:17},{value:"'manual'",paraId:74,tocIndex:17},{value:"/",paraId:74,tocIndex:17},{value:"'extended'",paraId:74,tocIndex:17},{value:"fieldset",paraId:74,tocIndex:17},{value:"Record<string, ISchema>",paraId:74,tocIndex:17},{value:"Set of node configuration options",paraId:74,tocIndex:17},{value:"scope?",paraId:74,tocIndex:17},{value:"Record<string, Function>",paraId:74,tocIndex:17},{value:"Object set that may be used in the configuration schema",paraId:74,tocIndex:17},{value:"components?",paraId:74,tocIndex:17},{value:"Record<string, React.FC>",paraId:74,tocIndex:17},{value:"Component set that may be used in the configuration schema",paraId:74,tocIndex:17},{value:"Component?",paraId:74,tocIndex:17},{value:"React.FC",paraId:74,tocIndex:17},{value:"Custom rendering component for the node",paraId:74,tocIndex:17},{value:"useVariables?",paraId:74,tocIndex:17},{value:"(node, options: UseVariableOptions) => VariableOption",paraId:74,tocIndex:17},{value:"Method for providing node variable options",paraId:74,tocIndex:17},{value:"useScopeVariables?",paraId:74,tocIndex:17},{value:"(node, options?) => VariableOptions",paraId:74,tocIndex:17},{value:"Method for providing local variable options for the branch",paraId:74,tocIndex:17},{value:"useInitializers?",paraId:74,tocIndex:17},{value:"(node) => SchemaInitializerItemType",paraId:74,tocIndex:17},{value:"Method for providing initializer options for the node",paraId:74,tocIndex:17},{value:"isAvailable?",paraId:74,tocIndex:17},{value:"(ctx: NodeAvailableContext) => boolean",paraId:74,tocIndex:17},{value:"Method for determining whether the node is available in the current environment",paraId:74,tocIndex:17},{value:"Related Types",paraId:75,tocIndex:17},{value:`export type NodeAvailableContext = {
  workflow: object;
  upstream: object;
  branchIndex: number;
};
`,paraId:76,tocIndex:17},{value:"If ",paraId:77,tocIndex:17},{value:"useVariables",paraId:77,tocIndex:17},{value:" is not set, it means that this node type does not provide a value-fetching function, and the result data of this node type cannot be selected in the flow. If the result value is singular (non-selectable), a static content that expresses the corresponding information can be returned (refer to the ",paraId:77,tocIndex:17},{value:"calculation node source code",paraId:77,tocIndex:17},{value:"). If selection is required (e.g., a property in an Object), a custom selection component output can be provided (refer to the ",paraId:77,tocIndex:17},{value:"Create Data Node source code",paraId:77,tocIndex:17},{value:").",paraId:77,tocIndex:17},{value:"Component",paraId:77,tocIndex:17},{value:": Custom rendering component for the node, used when the default node rendering is not sufficient, allowing for complete customization of the node view. For example, to provide more operation buttons or other interactive elements for the start node of a branch type, this method should be used (refer to the ",paraId:77,tocIndex:17},{value:"Parallel Branch source code",paraId:77,tocIndex:17},{value:").",paraId:77,tocIndex:17},{value:"useInitializers",paraId:77,tocIndex:17},{value:": Used to provide methods for initialization blocks, for example, in a manual node, it can initialize relevant user blocks based on the upstream node. If this method is provided, it will be available during the initialization block in the manual node configuration interface (refer to the ",paraId:77,tocIndex:17},{value:"Create Data Node source code",paraId:77,tocIndex:17},{value:").",paraId:77,tocIndex:17},{value:"isAvailable",paraId:77,tocIndex:17},{value:": Mainly used to determine whether the node can be used (added) in the current environment. The current environment includes the current workflow, upstream nodes, and the current branch index.",paraId:77,tocIndex:17}]},559992:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"While the built-in features of workflows are robust, they may not cover every possible scenario. For instance, the default node types might not accommodate all the operations required in diverse business contexts. To address these gaps, we offer an extension framework for workflows, enabling you to expand trigger types and node functionalities. When the built-in features fall short, these extensions allow you to customize solutions using low-code techniques.",paraId:0,tocIndex:0},{value:"These extensions are categorized into two main areas:",paraId:1,tocIndex:0},{value:"Extend Trigger Types",paraId:2,tocIndex:0},{value:"Extend Node Types",paraId:3,tocIndex:0},{value:"API Reference",paraId:4,tocIndex:1}]},569599:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The type of a node essentially represents an operation command, with different commands corresponding to different operations performed during a workflow.",paraId:0,tocIndex:0},{value:"Similar to triggers, extending the type of a node involves both backend and frontend components. The backend is responsible for implementing the logic of registered commands, while the frontend provides the configuration interface for the parameters related to the node where the command resides.",paraId:1,tocIndex:0},{value:"The core of a command is a function, meaning the ",paraId:2,tocIndex:2},{value:"run",paraId:2,tocIndex:2},{value:" method in the command class must be implemented to execute the command's logic. This function can perform any necessary operations, such as database operations, file operations, or third-party API calls.",paraId:2,tocIndex:2},{value:"All commands must be derived from the ",paraId:3,tocIndex:2},{value:"Instruction",paraId:3,tocIndex:2},{value:" base class. The simplest command only needs to implement a ",paraId:3,tocIndex:2},{value:"run",paraId:3,tocIndex:2},{value:" function:",paraId:3,tocIndex:2},{value:`import { Instruction, JOB_STATUS } from '@nocobase/plugin-workflow';

export class MyInstruction extends Instruction {
  run(node, input, processor) {
    console.log('my instruction runs!');
    return {
      status: JOB_STATUS.RESOLVED,
    };
  }
}
`,paraId:4,tocIndex:2},{value:"Then, register this command with the workflow plugin:",paraId:5,tocIndex:2},{value:`export default class MyPlugin extends Plugin {
  load() {
    // get workflow plugin instance
    const workflowPlugin = this.app.getPlugin<WorkflowPlugin>(WorkflowPlugin);

    // register instruction
    workflowPlugin.registerInstruction('my-instruction', MyInstruction);
  }
}
`,paraId:6,tocIndex:2},{value:"The status value (",paraId:7,tocIndex:2},{value:"status",paraId:7,tocIndex:2},{value:") in the returned object of the command is mandatory and must be one of the values in the ",paraId:7,tocIndex:2},{value:"JOB_STATUS",paraId:7,tocIndex:2},{value:" constant. This value will determine the subsequent flow of the process after the node is executed. Generally, ",paraId:7,tocIndex:2},{value:"JOB_STATUS.RESOLVED",paraId:7,tocIndex:2},{value:" is used, indicating that the node has been successfully executed, and the subsequent nodes will continue to execute. If there are results that need to be saved early, you can also call the ",paraId:7,tocIndex:2},{value:"processor.saveJob",paraId:7,tocIndex:2},{value:" method and return the object generated by this method. The executor will generate an execution result record based on this object.",paraId:7,tocIndex:2},{value:"If there is a specific execution result, especially data intended for use by subsequent nodes, it can be returned through the ",paraId:8,tocIndex:3},{value:"result",paraId:8,tocIndex:3},{value:" attribute and saved in the node task object:",paraId:8,tocIndex:3},{value:`import { Instruction, JOB_STATUS } from '@nocobase/plugin-workflow';

export class RandomStringInstruction extends Instruction {
  run(node, input, processor) {
    // customized config from node
    const { digit = 1 } = node.config;
    const result = \`\${Math.round(10 ** digit * Math.random())}\`.padStart(
      digit,
      '0',
    );
    return {
      status: JOB_STATUS.RESOLVED,
      result,
    };
  }
};
`,paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"node.config",paraId:10,tocIndex:3},{value:" is the node's configuration item, which can be any required value and will be saved as a ",paraId:10,tocIndex:3},{value:"JSON",paraId:10,tocIndex:3},{value:" type field in the corresponding node record in the database.",paraId:10,tocIndex:3},{value:"If there may be exceptions during execution, they can be caught in advance and a failure status returned:",paraId:11,tocIndex:4},{value:`import { JOB_STATUS } from '@nocobase/plugin-workflow';

export const errorInstruction = {
  run(node, input, processor) {
    try {
      throw new Error('exception');
    } catch (error) {
      return {
        status: JOB_STATUS.ERROR,
        result: error,
      };
    }
  },
};
`,paraId:12,tocIndex:4},{value:"If predictable exceptions are not caught, the workflow engine will automatically catch and return an error status to avoid program crashes due to uncaught exceptions.",paraId:13,tocIndex:4},{value:"When it is necessary to control the flow or perform asynchronous (time-consuming) I/O operations, the ",paraId:14,tocIndex:5},{value:"run",paraId:14,tocIndex:5},{value:" method can return an object with a ",paraId:14,tocIndex:5},{value:"status",paraId:14,tocIndex:5},{value:" of ",paraId:14,tocIndex:5},{value:"JOB_STATUS.PENDING",paraId:14,tocIndex:5},{value:", indicating to the executor to wait (suspend) until some external asynchronous operation is completed, after which the workflow engine will be notified to continue execution. If a pending status is returned in the ",paraId:14,tocIndex:5},{value:"run",paraId:14,tocIndex:5},{value:" function, the command must implement the ",paraId:14,tocIndex:5},{value:"resume",paraId:14,tocIndex:5},{value:" method; otherwise, the workflow cannot resume.",paraId:14,tocIndex:5},{value:`import { Instruction, JOB_STATUS } from '@nocobase/plugin-workflow';

export class PayInstruction extends Instruction {
  async run(node, input, processor) {
    // job could be created first via processor
    const job = await processor.saveJob({
      status: JOB_STATUS.PENDING,
    });

    const { plugin } = processor;
    // do payment asynchronously
    paymentService.pay(node.config, (result) => {
      // notify processor to resume the job
      return plugin.resume(job.id, result);
    });

    // return created job instance
    return job;
  }

  resume(node, job, processor) {
    // check payment status
    job.set('status', job.result.status === 'ok' ? JOB_STATUS.RESOLVED : JOB_STATUS.REJECTED);
    return job;
  }
};
`,paraId:15,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"paymentService",paraId:16,tocIndex:5},{value:" refers to a payment service, and the workflow resumes the corresponding task after being triggered by a callback from the service, while the current process exits first. After that, the workflow engine creates a new processor, handing over the task to the node\u2019s ",paraId:16,tocIndex:5},{value:"resume",paraId:16,tocIndex:5},{value:" method to continue executing the previously suspended node.",paraId:16,tocIndex:5},{value:'The "asynchronous operations" mentioned here are not the same as ',paraId:17},{value:"async",paraId:17},{value:" functions in JavaScript but refer to interactions with other external systems where certain operations may not return immediately. For example, a payment service may require waiting for a subsequent notification to know the result.",paraId:17},{value:"The execution status of a node affects the success or failure of the entire process. Generally, in the absence of branches, a node failure will directly lead to the failure of the entire process. The most common scenario is that when a node is successfully executed, the next node in the node table continues until there are no more subsequent nodes, at which point the workflow completes with a successful status.",paraId:18,tocIndex:6},{value:"If a node returns a failure status during execution, the engine will handle it differently depending on the following two situations:",paraId:19,tocIndex:6},{value:"If the node that returns a failure status is in the main process and not within any branch process opened by an upstream node, the entire main process will be considered a failure, and the process will exit.",paraId:20,tocIndex:6},{value:"If the node that returns a failure status is within a branch process, the responsibility for determining the next state of the process is delegated to the node that opened the branch. The internal logic of that node will decide the subsequent state of the process, recursively tracing back to the main process.",paraId:21,tocIndex:6},{value:"Eventually, the final state of the entire process will be determined by the node in the main process. If the node in the main process returns a failure, the entire process ends with a failure status.",paraId:22,tocIndex:6},{value:'If any node returns a "pending" status after execution, the entire execution process will be temporarily suspended, waiting for an event defined by the corresponding node to resume the process. For example, in a ',paraId:23,tocIndex:6},{value:"manual node",paraId:24,tocIndex:6},{value:', the process pauses at this node with a "pending" status, waiting for manual intervention to decide whether to proceed. If the status input by the user is "approved," the subsequent nodes continue; otherwise, the failure logic is processed as described earlier.',paraId:23,tocIndex:6},{value:"For more command return statuses, refer to the ",paraId:25,tocIndex:6},{value:"Workflow API Reference",paraId:26,tocIndex:6},{value:" section.",paraId:25,tocIndex:6},{value:"In some special processes, it may be necessary to end the process directly within a certain node, which can be done by returning ",paraId:27,tocIndex:7},{value:"null",paraId:27,tocIndex:7},{value:". This indicates that the current process is exited, and the subsequent nodes will not continue to execute.",paraId:27,tocIndex:7},{value:"This situation is more common in flow control-type nodes, such as in the ",paraId:28,tocIndex:7},{value:"parallel branch node",paraId:29,tocIndex:7},{value:" (see ",paraId:28,tocIndex:7},{value:"code reference",paraId:28,tocIndex:7},{value:"). The current node process exits, but new processes are opened for each sub-branch and continue to execute.",paraId:28,tocIndex:7},{value:"Scheduling branch processes with extended nodes is complex and requires careful handling and thorough testing.",paraId:30,tocIndex:7},{value:"For a detailed definition of each parameter in defining node types, refer to the ",paraId:31,tocIndex:8},{value:"Workflow API Reference",paraId:32,tocIndex:8},{value:" section.",paraId:31,tocIndex:8},{value:"Similar to triggers, the configuration form of a command (node type) needs to be implemented on the frontend.",paraId:33,tocIndex:9},{value:"All commands must be derived from the ",paraId:34,tocIndex:10},{value:"Instruction",paraId:34,tocIndex:10},{value:" base class, with relevant properties and methods used to configure and utilize the node.",paraId:34,tocIndex:10},{value:"For example, we need to provide a configuration interface for the random number string type (",paraId:35,tocIndex:10},{value:"randomString",paraId:35,tocIndex:10},{value:") node defined on the backend. This node has a configuration item ",paraId:35,tocIndex:10},{value:"digit",paraId:35,tocIndex:10},{value:" representing the number of digits in the random number. In the configuration form, we use a number input box to accept user input.",paraId:35,tocIndex:10},{value:`import WorkflowPlugin, { Instruction, VariableOption } from '@nocobase/workflow/client';

class MyInstruction extends Instruction {
  title = 'Random number string';
  type = 'randomString';
  group = 'extended';
  fieldset = {
    'digit': {
      type: 'number',
      title: 'Digit',
      name: 'digit',
      'x-decorator': 'FormItem',
      'x-component': 'InputNumber',
      'x-component-props': {
        min: 1,
        max: 10,
      },
      default: 6,
    },
  };
  useVariables(node, options): VariableOption {
    return {
      value: node.key,
      label: node.title,
    };
  }
}

export default class MyPlugin extends Plugin {
  load() {
    // get workflow plugin instance
    const workflowPlugin = this.app.getPlugin<WorkflowPlugin>(WorkflowPlugin);

    // register instruction
    workflowPlugin.registerInstruction('log',

 LogInstruction);
  }
}
`,paraId:36,tocIndex:10},{value:"The node type identifier registered on the client side must be consistent with the one on the server side; otherwise, errors will occur.",paraId:37},{value:"Notice the ",paraId:38,tocIndex:11},{value:"useVariables",paraId:38,tocIndex:11},{value:" method in the example above. If the result of a node (",paraId:38,tocIndex:11},{value:"result",paraId:38,tocIndex:11},{value:" part) needs to be used as a variable by subsequent nodes, this method should be implemented in the derived command class, returning an object that conforms to the ",paraId:38,tocIndex:11},{value:"VariableOption",paraId:38,tocIndex:11},{value:" type. This object describes the structure of the node\u2019s run result, providing variable name mapping for selection and use in subsequent nodes.",paraId:38,tocIndex:11},{value:"The ",paraId:39,tocIndex:11},{value:"VariableOption",paraId:39,tocIndex:11},{value:" type is defined as follows:",paraId:39,tocIndex:11},{value:`export type VariableOption = {
  value?: string;
  label?: string;
  children?: VariableOption[] | null;
  [key: string]: any;
};
`,paraId:40,tocIndex:11},{value:"The core attribute is ",paraId:41,tocIndex:11},{value:"value",paraId:41,tocIndex:11},{value:", representing the segmented path value of the variable name, ",paraId:41,tocIndex:11},{value:"label",paraId:41,tocIndex:11},{value:" for displaying on the interface, and ",paraId:41,tocIndex:11},{value:"children",paraId:41,tocIndex:11},{value:" for representing a multi-level variable structure when the node\u2019s result is a deep object.",paraId:41,tocIndex:11},{value:"A usable variable is expressed internally in the system as a path template string separated by ",paraId:42,tocIndex:11},{value:".",paraId:42,tocIndex:11},{value:". For example, ",paraId:42,tocIndex:11},{value:"{{jobsMapByNodeKey.2dw92cdf.abc}}",paraId:42,tocIndex:11},{value:". Here, ",paraId:42,tocIndex:11},{value:"$jobsMapByNodeKey",paraId:42,tocIndex:11},{value:" represents the result set of all nodes (internally defined, no need to handle), ",paraId:42,tocIndex:11},{value:"2dw92cdf",paraId:42,tocIndex:11},{value:" is the node\u2019s ",paraId:42,tocIndex:11},{value:"key",paraId:42,tocIndex:11},{value:", and ",paraId:42,tocIndex:11},{value:"abc",paraId:42,tocIndex:11},{value:" is a custom attribute in the node\u2019s result object.",paraId:42,tocIndex:11},{value:"Additionally, since the node\u2019s result can also be a simple value, the first layer ",paraId:43,tocIndex:11},{value:"must",paraId:43,tocIndex:11},{value:" be the node's description:",paraId:43,tocIndex:11},{value:`{
  value: node.key,
  label: node.title,
}
`,paraId:44,tocIndex:11},{value:"That is, the first layer is the ",paraId:45,tocIndex:11},{value:"key",paraId:45,tocIndex:11},{value:" and title of the node. For example, in the calculation node's ",paraId:45,tocIndex:11},{value:"code reference",paraId:45,tocIndex:11},{value:", the options on the interface when using the result of the calculation node are as follows:",paraId:45,tocIndex:11},{value:"When the node result is a complex object, you can use ",paraId:46,tocIndex:11},{value:"children",paraId:46,tocIndex:11},{value:" to continue describing the deep-level attributes. For example, a custom command returns the following JSON data:",paraId:46,tocIndex:11},{value:`{
  "message": "ok",
  "data": {
    "id": 1,
    "name": "test",
  }
}
`,paraId:47,tocIndex:11},{value:"Then the ",paraId:48,tocIndex:11},{value:"useVariables",paraId:48,tocIndex:11},{value:" method can return:",paraId:48,tocIndex:11},{value:`useVariables(node, options): VariableOption {
  return {
    value: node.key,
    label: node.title,
    children: [
      {
        value: 'message',
        label: 'Message',
      },
      {
        value: 'data',
        label: 'Data',
        children: [
          {
            value: 'id',
            label: 'ID',
          },
          {
            value: 'name',
            label: 'Name',
          },
        ],
      },
    ],
  };
}
`,paraId:49,tocIndex:11},{value:"This way, the following interface can be used to select among the variables in subsequent nodes:",paraId:50,tocIndex:11},{value:"When a structure in the result is a deep object array, ",paraId:51},{value:"children",paraId:51},{value:' can also be used to describe the path, but it cannot contain array indices. This is because, in NocoBase workflow variable handling, the variable path description for object arrays is automatically flattened into an array of deep values, and array indices cannot be used to access a specific value. You can refer to the content in the "Workflow: Advanced Usage" section of [Advanced Variables](../manual/advanced#Using Variables).',paraId:51},{value:"By default, nodes can be added to workflows at will. However, in some cases, nodes may not be suitable for certain types of workflows or branches. In such cases, the ",paraId:52,tocIndex:12},{value:"isAvailable",paraId:52,tocIndex:12},{value:" method can be used to configure the availability of nodes:",paraId:52,tocIndex:12},{value:`// Type definition
export abstract class Instruction {
  isAvailable?(ctx: NodeAvailableContext): boolean;
}

export type NodeAvailableContext = {
  // instance of workflow plugin
  engine: WorkflowPlugin;
  // instance of current workflow
  workflow: object;
  // upstream node
  upstream: object;
  // node as branch start (branch index number)
  branchIndex: number;
};
`,paraId:53,tocIndex:12},{value:"The ",paraId:54,tocIndex:12},{value:"isAvailable",paraId:54,tocIndex:12},{value:" method returns ",paraId:54,tocIndex:12},{value:"true",paraId:54,tocIndex:12},{value:" when the node is available and ",paraId:54,tocIndex:12},{value:"false",paraId:54,tocIndex:12},{value:" when it is not. The ",paraId:54,tocIndex:12},{value:"ctx",paraId:54,tocIndex:12},{value:" parameter contains the context information of the current node, which can be used to determine whether the node is available.",paraId:54,tocIndex:12},{value:"In most cases, the ",paraId:55,tocIndex:12},{value:"isAvailable",paraId:55,tocIndex:12},{value:" method does not need to be implemented, and the node is available by default. The most common need for this configuration is when a node may be a high-cost operation and is not suitable for workflow in a synchronous process. In this case, the ",paraId:55,tocIndex:12},{value:"isAvailable",paraId:55,tocIndex:12},{value:" method can be used to restrict the use of the node. For example:",paraId:55,tocIndex:12},{value:`isAvailable({ engine, workflow, upstream, branchIndex }) {
  return !engine.isWorkflowSync(workflow);
}
`,paraId:56,tocIndex:12},{value:"For a detailed definition of each parameter in defining node types, refer to the ",paraId:57,tocIndex:13},{value:"Workflow API Reference",paraId:58,tocIndex:13},{value:" section.",paraId:57,tocIndex:13}]},396556:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Extend Trigger Types",paraId:0},{value:"Every workflow must be configured with a specific trigger that serves as the entry point for executing the process.",paraId:1,tocIndex:0},{value:"Trigger types typically correspond to specific system events. Throughout an application's lifecycle, any event that offers a subscription option can be defined as a trigger type. Examples include receiving requests, data table operations, or scheduled tasks.",paraId:2,tocIndex:0},{value:"Trigger types are registered in the plugin's trigger registry using unique string identifiers. The workflow plugin comes with several built-in triggers:",paraId:3,tocIndex:0},{value:"'collection'",paraId:4,tocIndex:0},{value:": Triggered by data table operations.",paraId:4,tocIndex:0},{value:"'schedule'",paraId:4,tocIndex:0},{value:": Triggered by scheduled tasks.",paraId:4,tocIndex:0},{value:"'action'",paraId:4,tocIndex:0},{value:": Triggered by post-operation events.",paraId:4,tocIndex:0},{value:"When extending trigger types, it's essential to ensure that each identifier is unique. The server side should handle the registration for subscribing and unsubscribing to triggers, while the client side should provide the corresponding configuration interface.",paraId:5,tocIndex:0},{value:"Server-Side Implementation",paraId:0},{value:"Any custom trigger should extend the ",paraId:6,tocIndex:1},{value:"Trigger",paraId:6,tocIndex:1},{value:" base class and implement the ",paraId:6,tocIndex:1},{value:"on",paraId:6,tocIndex:1},{value:" and ",paraId:6,tocIndex:1},{value:"off",paraId:6,tocIndex:1},{value:" methods, which manage the subscription and unsubscription to specific system events. The ",paraId:6,tocIndex:1},{value:"on",paraId:6,tocIndex:1},{value:" method must invoke ",paraId:6,tocIndex:1},{value:"this.workflow.trigger()",paraId:6,tocIndex:1},{value:" within the event callback to trigger the workflow. The ",paraId:6,tocIndex:1},{value:"off",paraId:6,tocIndex:1},{value:" method should ensure proper cleanup during unsubscription.",paraId:6,tocIndex:1},{value:"The ",paraId:7,tocIndex:1},{value:"this.workflow",paraId:7,tocIndex:1},{value:" property refers to the workflow plugin instance, passed into the ",paraId:7,tocIndex:1},{value:"Trigger",paraId:7,tocIndex:1},{value:" base class during construction.",paraId:7,tocIndex:1},{value:`import { Trigger } from '@nocobase/plugin-workflow';

class MyTrigger extends Trigger {
  timer: NodeJS.Timeout;

  on(workflow) {
    // Register event
    this.timer = setInterval(() => {
      // Trigger workflow
      this.workflow.trigger(workflow, { date: new Date() });
    }, workflow.config.interval ?? 60000);
  }

  off(workflow) {
    // Unregister event
    clearInterval(this.timer);
  }
}
`,paraId:8,tocIndex:1},{value:"Next, register the trigger instance with the workflow engine in the plugin that extends the workflow:",paraId:9,tocIndex:1},{value:`import WorkflowPlugin from '@nocobase/plugin-workflow';

export default class MyPlugin extends Plugin {
  load() {
    // Get workflow plugin instance
    const workflowPlugin = this.app.pm.get(WorkflowPlugin) as WorkflowPlugin;

    // Register trigger
    workflowPlugin.registerTrigger('interval', MyTrigger);
  }
}
`,paraId:10,tocIndex:1},{value:"Once the server is up and running, the ",paraId:11,tocIndex:1},{value:"'interval'",paraId:11,tocIndex:1},{value:" trigger type will be available for addition and execution.",paraId:11,tocIndex:1},{value:"Client-Side Configuration",paraId:0},{value:"On the client side, the primary task is to provide a configuration interface tailored to the specific settings required for each trigger type. Each trigger type should also be registered with the workflow plugin.",paraId:12,tocIndex:2},{value:"For instance, to configure the interval-based trigger mentioned earlier, define the ",paraId:13,tocIndex:2},{value:"interval",paraId:13,tocIndex:2},{value:" configuration field in the form interface:",paraId:13,tocIndex:2},{value:`import { Trigger } from '@nocobase/workflow/client';

class MyTrigger extends Trigger {
  title = 'Interval Timer Trigger';
  // Fields of trigger config
  fieldset = {
    interval: {
      type: 'number',
      title: 'Interval',
      name: 'config.interval',
      'x-decorator': 'FormItem',
      'x-component': 'InputNumber',
      default: 60000,
    },
  };
}
`,paraId:14,tocIndex:2},{value:"Then, register this trigger type with the workflow plugin instance in the extending plugin:",paraId:15,tocIndex:2},{value:`import { Plugin } from '@nocobase/client';
import WorkflowPlugin from '@nocobase/plugin-workflow/client';

import MyTrigger from './MyTrigger';

export default class extends Plugin {
  // Modify the app instance here if necessary
  async load() {
    const workflow = this.app.pm.get(WorkflowPlugin) as WorkflowPlugin;
    workflow.registerTrigger('interval', MyTrigger);
  }
}
`,paraId:16,tocIndex:2},{value:"Once registered, the new trigger type will appear in the workflow configuration interface.",paraId:17,tocIndex:2},{value:"Ensure that the trigger type identifier registered on the client side matches the one on the server side to avoid errors.",paraId:18},{value:"For further details on defining trigger types, refer to the ",paraId:19},{value:"Workflow API Reference",paraId:20},{value:" section.",paraId:19}]},227839:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Workflow plugin is a powerful tool commonly known as a Business Process Management (BPM) tool in the industry. It is used for designing and orchestration of business processes based on data models. By organizing the trigger conditions and flow nodes, it makes the business process running automatically.",paraId:0,tocIndex:1},{value:"In NocoBase applications, the Workflow plugin is designed for no-code scenarios, allowing users to orchestrate and process common business tasks through the UI. Therefore they can change the business processes in the system runtime dynamically.",paraId:1,tocIndex:1},{value:"Each workflow consists of a trigger and several nodes. Through the specific functionality of each node, the workflow describes the business logic that needs to be processed when the corresponding event occurs in the system. A typical workflow is illustrated in the following diagram:",paraId:2,tocIndex:1},{value:"The functionality of the above workflow is as follows: When a user submits an order form, the system automatically checks the inventory of the products in the order. If there is sufficient stock, the inventory will be deducted; otherwise, the order will be updated as invalid.",paraId:3,tocIndex:1},{value:"As a more general perspective, workflows in NocoBase applications can address the following scenarios:",paraId:4,tocIndex:1},{value:"Data automation processing",paraId:5,tocIndex:1},{value:": For example, automatically process data in a collection according to predefined workflows, such as calculating and updating associated data after a triggered event.",paraId:5,tocIndex:1},{value:"Human-involved business processes",paraId:5,tocIndex:1},{value:": When a business process cannot be fully automated, partial decision-making can be assigned to user through manual nodes, such as approval and review. After the results of processing are submitted by user, the subsequent processes continue.",paraId:5,tocIndex:1},{value:"Integration with external systems",paraId:5,tocIndex:1},{value:": API interfaces of external systems can be called through request nodes (or nodes that extend various types of third-party function calls) to achieve data interaction with external systems.",paraId:5,tocIndex:1},{value:"Workflow is a built-in plugin in NocoBase and does not require additional installation.",paraId:6,tocIndex:2},{value:"Quick start",paraId:7,tocIndex:3},{value:`Advanced understanding
`,paraId:8,tocIndex:3},{value:"Executions",paraId:9,tocIndex:3},{value:"Advanced Options",paraId:10,tocIndex:3},{value:"Variables",paraId:11,tocIndex:3},{value:"Revisions",paraId:12,tocIndex:3},{value:"Triggers",paraId:13,tocIndex:3},{value:"Nodes",paraId:14,tocIndex:3},{value:"Development Guide",paraId:15,tocIndex:3}]},259369:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is designed to execute aggregate function queries on specific data within a table that meets defined conditions, returning the relevant statistical outcomes. It is particularly useful for generating statistical data for reports.",paraId:0},{value:"The node operates using database aggregate functions and currently supports querying a single field within a single data table. The resulting statistics are stored within the node\u2019s output, making them available for subsequent nodes in the workflow.",paraId:1},{value:"This is a built-in plugin, so no installation steps are required.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus ("+") button within the process flow to add an "Aggregate Query" node:',paraId:3,tocIndex:3},{value:"This plugin supports five SQL aggregate functions: ",paraId:4,tocIndex:5},{value:"COUNT",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"SUM",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"AVG",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"MIN",paraId:4,tocIndex:5},{value:", and ",paraId:4,tocIndex:5},{value:"MAX",paraId:4,tocIndex:5},{value:". You can select any one of these functions to perform the aggregate query on your data.",paraId:4,tocIndex:5},{value:"There are two methods for selecting the target of the aggregate query. The first is to directly select the target data table and one of its fields. The second is to choose a related data table and field from the existing data objects in the workflow context to perform the aggregate query.",paraId:5,tocIndex:6},{value:"This feature corresponds to the ",paraId:6,tocIndex:7},{value:"DISTINCT",paraId:6,tocIndex:7},{value:" keyword in SQL. The distinct field must be the same as the selected data table field, and currently, different fields cannot be selected for the distinct and target fields.",paraId:6,tocIndex:7},{value:"You can apply filter conditions similar to those in a standard data table query, using the workflow\u2019s context variables.",paraId:7,tocIndex:8},{value:`The aggregate target "Collection Table Data" is quite intuitive, so let's illustrate the usage of the aggregate target as "Related Collection Table Data" with the example of "counting the total number of articles in a category after adding a new article to that category."`,paraId:8,tocIndex:9},{value:'First, create two data tables: "Posts" and "Categories." The "Posts" collection includes a many-to-one relationship field pointing to the "Categories" collection, and a reverse relationship field that allows one category to contain multiple articles:',paraId:9,tocIndex:9},{value:"Field Name",paraId:10,tocIndex:9},{value:"Type",paraId:10,tocIndex:9},{value:"Title",paraId:10,tocIndex:9},{value:"Single Line Text",paraId:10,tocIndex:9},{value:"Category",paraId:10,tocIndex:9},{value:"Many-to-One (Category)",paraId:10,tocIndex:9},{value:"Field Name",paraId:11,tocIndex:9},{value:"Type",paraId:11,tocIndex:9},{value:"Category Name",paraId:11,tocIndex:9},{value:"Single Line Text",paraId:11,tocIndex:9},{value:"Posts",paraId:11,tocIndex:9},{value:"One-to-Many (Articles)",paraId:11,tocIndex:9},{value:'Next, create a workflow triggered by an event in the data table, specifically when new data is added to the "Articles" table.',paraId:12,tocIndex:9},{value:"Then, add an aggregate query node with the following configuration:",paraId:13,tocIndex:9},{value:"Once the workflow is triggered, the aggregate query node will calculate the total number of articles within the category of the newly added article and save this count as the node\u2019s output.",paraId:14,tocIndex:9},{value:'If you need to access related data in a collection table event trigger, ensure you configure the relevant fields for "Preload associations" in the trigger; otherwise, these fields won\u2019t be selectable.',paraId:15}]},944125:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In an approval workflow, a dedicated "Approval" node is required to configure the logic for approvers to handle (approve, reject, or return) the initiated approval request. This "Approval" node is exclusively used within approval workflows.',paraId:0},{value:'Difference from the general "Manual" node:',paraId:1},{value:' The general "Manual" node is versatile and can be used across various workflows for manual data input, decision-making on process continuation, and other scenarios. In contrast, the "Approval" Node is specialized for approval workflows and is not applicable in other types of workflows.',paraId:1},{value:'To create an "Approval" node, click the plus sign ("+") in the workflow. Then, select one of the available pass modes to configure the approval node:',paraId:2,tocIndex:1},{value:"There are two pass modes available:",paraId:3,tocIndex:2},{value:"Direct Pass Mode: This mode is ideal for simpler workflows, where the outcome at the approval node determines whether the process ends. If the request is not approved, the process exits immediately.",paraId:4,tocIndex:2},{value:"Branching Mode: This mode is typically used for more complex workflows. After the approval node produces a result, subsequent nodes can execute within the resulting branches.",paraId:5,tocIndex:2},{value:'If the node is configured with a "Return" operation, a "Return" branch will be created, and the process will forcibly exit after the return branch is completed.',paraId:6,tocIndex:2},{value:'Once this node is "approved," the process continues through both the pass branch and the subsequent workflow. Following a "reject" operation, the default setting allows the process to continue through the subsequent workflow, although you can configure the node to end the process after executing the rejection branch.',paraId:7,tocIndex:2},{value:"The pass mode cannot be modified once the node is created.",paraId:8},{value:"Approvers are the users responsible for the approval actions at the node. They can consist of one or more users, selected from a static list or a dynamic value specified by a variable.",paraId:9,tocIndex:3},{value:"When using a variable, only primary keys or foreign keys from user data in the context and node results can be selected. If the selected variable is an array (in cases of many-to-many relationships), each user in the array will be merged into the overall approver collection.",paraId:10,tocIndex:3},{value:"If there is only one approver (including cases where multiple variables are deduplicated), the approval will be handled solely by that user, regardless of the negotiation mode chosen.",paraId:11,tocIndex:4},{value:"For multiple approvers, the selected negotiation mode determines the handling method:",paraId:12,tocIndex:4},{value:"Or: The node passes with the approval of any one person; all must reject for the node to be rejected.",paraId:13,tocIndex:4},{value:"And: The node passes only if all approvers approve; a single rejection results in rejection.",paraId:13,tocIndex:4},{value:"Voting: The node passes if a majority (as specified) of approvers approve; otherwise, the node is rejected.",paraId:13,tocIndex:4},{value:"For the return operation, if any user in the approver collection opts for a return, the node will directly exit the workflow.",paraId:14,tocIndex:4},{value:"For multiple approvers, the processing order dictates the sequence of actions:",paraId:15,tocIndex:5},{value:"Parallelly: All approvers can act in any order, with no sequence required.",paraId:16,tocIndex:5},{value:"Sequentially: Approvers act in the order defined in the approver collection, where each subsequent user can only proceed after the previous one has submitted their decision.",paraId:16,tocIndex:5},{value:'Regardless of whether "Sequentially" processing is set, the results generated will follow the rules outlined in the "Negotiation Modes" section, with the node completing execution once the conditions are met.',paraId:17,tocIndex:5},{value:'When "Branch Mode" is set for "Pass Mode," you can opt to exit the workflow after the rejection branch is completed. If selected, a "\u2717" symbol will appear at the end of the rejection branch, indicating that no further nodes will be executed after this branch concludes:',paraId:18,tocIndex:6},{value:"The approver interface configuration provides the interface for approvers when the workflow reaches this node. Click the configuration button to open the settings window:",paraId:19,tocIndex:7},{value:"In this configuration window, you can add blocks such as approval submission details, operation bars, and custom prompt text:",paraId:20,tocIndex:7},{value:"The approval content details block includes the data submitted by the initiator. Similar to a standard data block, you can freely add field components from the data table and arrange them to organize the content that the approver needs to review:",paraId:21,tocIndex:8},{value:'The operation form block can include buttons supported by this node, such as "Approve," "Reject," "Return," "Reassign," and "Add Approver":',paraId:22,tocIndex:9},{value:"Besides, fields that can be modified by the approver can also be added to the operation form. These fields will be displayed in the operation form when the approver processes the approval. The approver can modify the values of these fields, and after submission, the data used for approval and the corresponding data snapshot in the approval process will be updated simultaneously.",paraId:23,tocIndex:9},{value:`Among the approval operation buttons, "Approve," "Reject," and "Return" are decisive actions. Once submitted, the approver's task at this node is completed. Additional fields to be filled out during submission, such as "Comments," can be added in the "Processing Configuration" pop-up for each button.`,paraId:24,tocIndex:10},{value:`"Reassign" and "Add Approver" are non-decisive operations used to dynamically adjust the approvers in the approval workflow. "Reassign" transfers the current user's approval task to another user, while "Add Approver" inserts an additional approver before or after the current approver, allowing the new approver to continue the approval process.`,paraId:25,tocIndex:11},{value:`After enabling the "Reassign" or "Add Approver" operation buttons, you need to set the "Assignable User Range" in the button's configuration menu to define the scope of users who can be assigned as new approvers:`,paraId:26,tocIndex:11},{value:"Similar to the node's original approver configuration, the assignable user range can be directly selected approvers or based on query conditions from the user table. The final result will be a merged collection, excluding users already in the approver collection.",paraId:27,tocIndex:11},{value:"If you enable or disable an operation button, or modify the assignable user range, ensure to save the node configuration after closing the interface configuration window. Otherwise, the changes to the operation button will not take effect.",paraId:28},{value:"After the approval is completed, the relevant status and data will be recorded in the node results and can be used as variables by subsequent nodes.",paraId:29,tocIndex:12},{value:"Represents the approval status of the entire request. The result is an enum value. See: ",paraId:30,tocIndex:13},{value:"Approval Processing Status",paraId:31,tocIndex:13},{value:".",paraId:30,tocIndex:13},{value:"If the approver modifies the approval content in the form, the modified data will be recorded in the node results for use by subsequent nodes. If you need to use relational fields, you must configure preloading for the relational fields in the trigger.",paraId:32,tocIndex:14},{value:"v1.8.0+",paraId:33,tocIndex:15},{value:"Approval processing records are an array containing the handling records of all approvers in the node. Each record includes the following fields:",paraId:34,tocIndex:15},{value:"Field",paraId:35,tocIndex:15},{value:"Type",paraId:35,tocIndex:15},{value:"Description",paraId:35,tocIndex:15},{value:"id",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"Unique identifier of the processing record",paraId:35,tocIndex:15},{value:"userId",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"User ID who handled the record",paraId:35,tocIndex:15},{value:"status",paraId:35,tocIndex:15},{value:"number",paraId:35,tocIndex:15},{value:"Processing status. See: ",paraId:35,tocIndex:15},{value:"Process Status of Individual Approver",paraId:36,tocIndex:15},{value:"comment",paraId:35,tocIndex:15},{value:"string",paraId:35,tocIndex:15},{value:"Comment made during processing",paraId:35,tocIndex:15},{value:"updatedAt",paraId:35,tocIndex:15},{value:"string",paraId:35,tocIndex:15},{value:"Last updated time of the processing record",paraId:35,tocIndex:15},{value:"You can use the fields as variables in subsequent nodes as needed.",paraId:37,tocIndex:15},{value:"Except for node configuration, there are also some related contents about approval that can be further understood through the ",paraId:38,tocIndex:16},{value:"plugin documentation",paraId:39,tocIndex:16},{value:".",paraId:38,tocIndex:16}]},661040:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Although the calculation node does not control the flow of the process, it is an important function in the workflow. The calculation node can evaluate an expression, and the result will be stored in the corresponding node's result for later use by other nodes. It is a tool for calculating, processing, and transforming data. To some extent, it can replace the functionality of calling a function to compute a value in programming languages and assigning it to a variable.",paraId:0,tocIndex:0},{value:'In the workflow configuration UI, click the plus ("+") button in the flow to add a "Calculation" node:',paraId:1,tocIndex:1},{value:"The calculation engine specifies the syntax supported of the expression. Currently supported calculation engines include ",paraId:2,tocIndex:3},{value:"Math.js",paraId:2,tocIndex:3},{value:" and ",paraId:2,tocIndex:3},{value:"Formula.js",paraId:2,tocIndex:3},{value:", each of which has built-in support for a large number of common functions and methods for data manipulation. Specific usage can be found in their official documentation.",paraId:2,tocIndex:3},{value:"It's important to note that there is a difference in array indexing between the them. In Math.js, indexing starts from ",paraId:3},{value:"1",paraId:3},{value:", while in Formula.js, it starts from ",paraId:3},{value:"0",paraId:3},{value:".",paraId:3},{value:'Additionally, if simple string concatenation is needed, the "String Template" can be used directly. This engine will replace variables in the expression with their corresponding values and then return the concatenated string.',paraId:4},{value:"The expression is a string representation of a calculation formula, composed of variables, constants, operators, and supported functions. Variables from the workflow context can be used, such as results from preceding nodes of the calculation node or scope variables from loops.",paraId:5,tocIndex:4},{value:"If the expression input does not comply with the syntax, an error will be prompted in the node configuration. If a variable does not exist during execution or its type does not match, or if an undefined function is used, the calculation node will terminate prematurely with an error status.",paraId:6,tocIndex:4},{value:"Typically, an order may contain multiple items, each with different prices and quantities. The total price of the order requires calculating the sum of the products of prices and quantities for all items. You can use a calculation node to compute the total order price after loading the list of order details (a many-to-many relationship dataset):",paraId:7,tocIndex:6},{value:"Where the ",paraId:8,tocIndex:6},{value:"SUMPRODUCT",paraId:8,tocIndex:6},{value:" function from Formula.js calculates the sum of the products of two arrays of the same length, and then summing them up yields the total order price.",paraId:8,tocIndex:6}]},470362:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.8.2+",paraId:0},{value:"The CC node is used to send certain contextual information from the workflow process to designated users for their awareness and reference. For example, during approval or other processes, relevant information can be copied to other participants so that they can stay informed of the progress.",paraId:1},{value:"You can configure multiple CC nodes in a workflow so that when the flow reaches these nodes, the corresponding information will be sent to specified recipients.",paraId:2},{value:'The copied content will appear under the "CC to Me" menu in the Task Center. Users can view all content copied to them here. Unread items are highlighted, and users can manually mark them as read after viewing.',paraId:3},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button in the flow to add a \u201CCC\u201D node:",paraId:4,tocIndex:2},{value:"In the node configuration panel, you can set the following parameters:",paraId:5,tocIndex:3},{value:"Recipients are the users who will receive the copied content. This can be one or more users. The source can be statically selected from the user list, dynamically specified using variables, or based on a query result from the user table.",paraId:6,tocIndex:4},{value:'Recipients need to view the copied content under the "CC to Me" menu in the Task Center. You can configure blocks using results from triggers or other nodes in the workflow context.',paraId:7,tocIndex:5},{value:"The task title is what appears in the Task Center. You can dynamically generate the title using variables from the workflow context.",paraId:8,tocIndex:6},{value:"Users can view and manage all content CCed to them in the Task Center, and filter by read/unread status.",paraId:9,tocIndex:7},{value:"After viewing, tasks can be marked as read. The unread count will update accordingly.",paraId:10,tocIndex:7}]},612391:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Similar to the ",paraId:0,tocIndex:0},{value:"if",paraId:0,tocIndex:0},{value:" statement in programming languages, the condition node determines the direction of the subsequent flow based on the result of the configured condition.",paraId:0,tocIndex:0},{value:`There are two modes for condition: "Continue if 'true'" and "Continue if 'true' or 'false'". When creating the node, you need to choose one of these modes, and it cannot be changed in the node's configuration afterward.`,paraId:1,tocIndex:1},{value:`In the "Continue if 'true'" mode, when the result of the condition judgment is "true", workflow will continue to execute the subsequent nodes; otherwise, the flow will terminate and exit prematurely with a failed status.`,paraId:2,tocIndex:1},{value:'This mode is suitable for scenarios where the flow should not continue if the condition is not met. For example, when configuring a form button to submit an order which bound with a "Pre-action event", if there is insufficient stock for the items in the order, the process should not continue to generate the order but instead fail and exit.',paraId:3,tocIndex:1},{value:`In the "Continue if 'true' or 'false'" mode, the condition node will produce two branches of the flow, corresponding to the scenarios where the condition judgment results are "true" and "false". Each branch can have subsequent nodes configured separately. After either branch completes execution, it will automatically return back to the parent branch where the condition node is located and continue executing the subsequent nodes.`,paraId:4,tocIndex:1},{value:"This mode is suitable for scenarios where different operations need to be performed depending on whether the condition is met or not. For example, checking if a piece of data exists, and if it doesn't, inserting it; if it does, updating it.",paraId:5,tocIndex:1},{value:"Currently, three engines are supported:",paraId:6,tocIndex:3},{value:"Basic",paraId:7,tocIndex:3},{value:': Obtains logical results through simple binary calculations and grouping with "AND" and "OR".',paraId:7,tocIndex:3},{value:"Math.js",paraId:7,tocIndex:3},{value:": Computes logical results from expressions supported by the ",paraId:7,tocIndex:3},{value:"Math.js",paraId:7,tocIndex:3},{value:" engine.",paraId:7,tocIndex:3},{value:"Formula.js",paraId:7,tocIndex:3},{value:": Computes logical results from expressions supported by the ",paraId:7,tocIndex:3},{value:"Formula.js",paraId:7,tocIndex:3},{value:" engine.",paraId:7,tocIndex:3},{value:"All three calculations can use variables from the workflow context as operands for computation.",paraId:8,tocIndex:3}]},16755:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to add a new row of data to a specific collection.",paraId:0,tocIndex:0},{value:"The field values \u200B\u200Bof the new record can use variables from the workflow context. Assigning values to association fields can directly reference the corresponding data variables in the context, which can be objects or foreign key values. If variables are not used, you need to manually enter the values \u200B\u200Bof the foreign keys, and for multiple association fields, multiple foreign key values \u200B\u200Bneed to be separated by commas.",paraId:1,tocIndex:0},{value:'In the workflow configuration UI, click the plus ("+") button in the flow to add a "Create record" node:',paraId:2,tocIndex:1},{value:"Select the collection to which the new record will be added.",paraId:3,tocIndex:3},{value:"Assign values \u200B\u200Bto the fields of the collection. Variables from the workflow context can be used, or static values \u200B\u200Bcan be manually entered.",paraId:4,tocIndex:4},{value:'Record added by the create node in the workflow will not automatically handle fields such as "Creator" and "Last Modifier", and you need to configure the values \u200B\u200Bof these two fields according to the situation.',paraId:5},{value:"If the fields of the new record include association fields, and you want to use the corresponding related data in subsequent workflows, you can check the corresponding association fields in the preload configuration. In this way, after adding the new record, the corresponding association data will be automatically loaded and stored together in the result data of the node.",paraId:6,tocIndex:5},{value:'For example, when a record is added or updated in the "Posts" collection, it is required to automatically add a "Post Versions" row to record the change history of the post. This can be achieved using the create node:',paraId:7,tocIndex:6},{value:'With this configuration enabled, when data changes in the "Posts" collection, a "Post Version" row will be automatically added to record the change history of the article.',paraId:8,tocIndex:6}]},307371:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Date Calculation node offers a set of nine powerful functions, enabling operations such as adding or subtracting time periods, formatting time strings, and converting duration units. Each function is designed with specific input and output value types, and can seamlessly integrate the results from other nodes as parameter variables. By chaining these functions through a calculation pipeline, you can achieve the desired output with precision.",paraId:0},{value:'To add a "Date Calculation" node in the workflow configuration interface, simply click the plus (\u201C+\u201D) button within the process:',paraId:1,tocIndex:2},{value:"Input values can be either variables or date constants. Variables might include data that triggers the workflow or results from upstream nodes. Constants can be any selected date.",paraId:2,tocIndex:4},{value:"The input value type determines how the input will be processed and is categorized into two types:",paraId:3,tocIndex:5},{value:"Date Type: This includes any input that can be converted into a date-time format, such as numeric timestamps or strings representing time.",paraId:4,tocIndex:5},{value:"Number Type: The input value type influences the selection of time calculation steps, so it\u2019s crucial to choose the correct type.",paraId:4,tocIndex:5},{value:"Each calculation step consists of a specific function and its parameter configuration. The pipeline design allows the output of one function to feed directly into the next, enabling a sequence of time calculations and conversions.",paraId:5,tocIndex:6},{value:"The output type after each step is fixed, which in turn determines the functions available for the next step. If the types are compatible, the calculation continues; if not, the result of the current step becomes the final output of the node.",paraId:6,tocIndex:6},{value:"Accepted Input Value Type: Date",paraId:7,tocIndex:8},{value:`Parameters:
`,paraId:7,tocIndex:8},{value:"The amount to add, which can be a numeric value or a variable from within the node.",paraId:8,tocIndex:8},{value:"The time unit (e.g., days, hours).",paraId:8,tocIndex:8},{value:"Output Value Type: Date",paraId:7,tocIndex:8},{value:"Example: If the input value is ",paraId:7,tocIndex:8},{value:"2024-7-15 00:00:00",paraId:7,tocIndex:8},{value:", the amount is ",paraId:7,tocIndex:8},{value:"1",paraId:7,tocIndex:8},{value:', and the unit is "days," the output will be ',paraId:7,tocIndex:8},{value:"2024-7-16 00:00:00",paraId:7,tocIndex:8},{value:".",paraId:7,tocIndex:8},{value:"Accepted Input Value Type: Date",paraId:9,tocIndex:9},{value:`Parameters:
`,paraId:9,tocIndex:9},{value:"The amount to subtract, which can be a numeric value or a variable from within the node.",paraId:10,tocIndex:9},{value:"The time unit (e.g., days, hours).",paraId:10,tocIndex:9},{value:"Output Value Type: Date",paraId:9,tocIndex:9},{value:"Example: If the input value is ",paraId:9,tocIndex:9},{value:"2024-7-15 00:00:00",paraId:9,tocIndex:9},{value:", the amount is ",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:', and the unit is "days," the output will be ',paraId:9,tocIndex:9},{value:"2024-7-14 00:00:00",paraId:9,tocIndex:9},{value:".",paraId:9,tocIndex:9},{value:"Accepted Input Value Type: Date",paraId:11,tocIndex:10},{value:`Parameters:
`,paraId:11,tocIndex:10},{value:"The date for comparison, which can be a constant or a variable in the workflow context.",paraId:12,tocIndex:10},{value:"The time unit (e.g., days, hours).",paraId:12,tocIndex:10},{value:"Whether to take the absolute value.",paraId:12,tocIndex:10},{value:"Rounding options: retain decimals, round off, round up, or round down.",paraId:12,tocIndex:10},{value:"Output Value Type: Numeric",paraId:11,tocIndex:10},{value:"Example: If the input value is ",paraId:11,tocIndex:10},{value:"2024-7-15 00:00:00",paraId:11,tocIndex:10},{value:", and you compare it with ",paraId:11,tocIndex:10},{value:"2024-7-16 06:00:00",paraId:11,tocIndex:10},{value:', using "days" as the unit, without taking the absolute value and retaining decimals, the output will be ',paraId:11,tocIndex:10},{value:"-1.25",paraId:11,tocIndex:10},{value:".",paraId:11,tocIndex:10},{value:"If both absolute value and rounding are selected, the absolute value is applied first, followed by rounding.",paraId:13},{value:"Accepted Input Value Type: Date",paraId:14,tocIndex:11},{value:`Parameters:
`,paraId:14,tocIndex:11},{value:"The time unit (e.g., days, hours).",paraId:15,tocIndex:11},{value:"Output Value Type: Numeric",paraId:14,tocIndex:11},{value:"Example: If the input value is ",paraId:14,tocIndex:11},{value:"2024-7-15 00:00:00",paraId:14,tocIndex:11},{value:' and the unit is "days," the output will be ',paraId:14,tocIndex:11},{value:"15",paraId:14,tocIndex:11},{value:".",paraId:14,tocIndex:11},{value:"Accepted Input Value Type: Date",paraId:16,tocIndex:12},{value:`Parameters:
`,paraId:16,tocIndex:12},{value:"The time unit (e.g., days, hours).",paraId:17,tocIndex:12},{value:"Output Value Type: Date",paraId:16,tocIndex:12},{value:"Example: If the input value is ",paraId:16,tocIndex:12},{value:"2024-7-15 14:26:30",paraId:16,tocIndex:12},{value:' and the unit is "days," the output will be ',paraId:16,tocIndex:12},{value:"2024-7-15 00:00:00",paraId:16,tocIndex:12},{value:".",paraId:16,tocIndex:12},{value:"Accepted Input Value Type: Date",paraId:18,tocIndex:13},{value:`Parameters:
`,paraId:18,tocIndex:13},{value:"The time unit (e.g., days, hours).",paraId:19,tocIndex:13},{value:"Output Value Type: Date",paraId:18,tocIndex:13},{value:"Example: If the input value is ",paraId:18,tocIndex:13},{value:"2024-7-15 14:26:30",paraId:18,tocIndex:13},{value:' and the unit is "days," the output will be ',paraId:18,tocIndex:13},{value:"2024-7-15 23:59:59",paraId:18,tocIndex:13},{value:".",paraId:18,tocIndex:13},{value:"Accepted Input Value Type: Date",paraId:20,tocIndex:14},{value:"Parameters: None",paraId:20,tocIndex:14},{value:"Output Value Type: Boolean",paraId:20,tocIndex:14},{value:"Example: If the input value is ",paraId:20,tocIndex:14},{value:"2024-7-15 14:26:30",paraId:20,tocIndex:14},{value:", the output will be ",paraId:20,tocIndex:14},{value:"true",paraId:20,tocIndex:14},{value:".",paraId:20,tocIndex:14},{value:"Accepted Input Value Type: Date",paraId:21,tocIndex:15},{value:`Parameters:
`,paraId:21,tocIndex:15},{value:"The format, as specified in ",paraId:22,tocIndex:15},{value:"Day.js: Format",paraId:22,tocIndex:15},{value:".",paraId:22,tocIndex:15},{value:"Output Value Type: String",paraId:21,tocIndex:15},{value:"Example: If the input value is ",paraId:21,tocIndex:15},{value:"2024-7-15 14:26:30",paraId:21,tocIndex:15},{value:" and the format is ",paraId:21,tocIndex:15},{value:"the time is YYYY/MM/DD HH:mm:ss",paraId:21,tocIndex:15},{value:", the output will be ",paraId:21,tocIndex:15},{value:"the time is 2024/07/15 14:26:30",paraId:21,tocIndex:15},{value:".",paraId:21,tocIndex:15},{value:"Accepted Input Value Type: Numeric",paraId:23,tocIndex:16},{value:`Parameters:
`,paraId:23,tocIndex:16},{value:"The original time unit.",paraId:24,tocIndex:16},{value:"The target time unit.",paraId:24,tocIndex:16},{value:"Rounding options: retain decimals, round off, round up, or round down.",paraId:24,tocIndex:16},{value:"Output Value Type: Numeric",paraId:23,tocIndex:16},{value:"Example: If the input value is ",paraId:23,tocIndex:16},{value:"2",paraId:23,tocIndex:16},{value:', the original unit is "weeks," the target unit is "days," and no decimals are retained, the output will be ',paraId:23,tocIndex:16},{value:"14",paraId:23,tocIndex:16},{value:".",paraId:23,tocIndex:16},{value:"Imagine a promotional activity where you want to automatically set an end time for the promotion when a product is created. This end time would be the last day of the following week at 23:59:59. To achieve this, you can create two time functions and link them in a pipeline:",paraId:25,tocIndex:17},{value:"Calculate the date for the following week.",paraId:26,tocIndex:17},{value:"Adjust the date to the last day of that week at 23:59:59.",paraId:26,tocIndex:17},{value:"By doing this, you'll generate the desired time value, which can then be passed to the next node, such as a data table modification node, to set the promotion end time in the database.",paraId:27,tocIndex:17}]},316307:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The delay node allows you to introduce a pause within a workflow. Once the delay concludes, you can configure whether to proceed with the next step or terminate the workflow prematurely.",paraId:0},{value:'This node is often used in tandem with parallel branch nodes. By adding a delay node to one of the branches, you can effectively manage timeouts. For example, in a scenario where one branch requires manual processing while another includes a delay node, you can determine the outcome if the manual process exceeds the allotted time. Selecting "timeout failure" means that the manual process must be completed within the specified timeframe. On the other hand, choosing "timeout continuation" allows the workflow to bypass the manual process once the delay has elapsed.',paraId:1},{value:"This plugin is built-in and requires no installation.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus sign ("+") within the flow to add a "Delay" node:',paraId:3,tocIndex:3},{value:"You can specify the delay duration by entering a number and selecting a time unit. Supported units include seconds, minutes, hours, days, and weeks.",paraId:4,tocIndex:5},{value:'You can set the timeout status to either "Succeed and continue" or "Fail and Exit." The "Succeed and continue" option ensures that the workflow progresses to the next steps after the delay ends. Conversely, the "Fail and Exit" option terminates the workflow with a failure status once the delay concludes.',paraId:5,tocIndex:6},{value:'In a scenario where a work order must be addressed within a certain timeframe, you can add a manual node to one branch and a delay node to the other in parallel branches. If the manual process fails to respond within 10 minutes, the work order status will be updated to "Timeout Unprocessed."',paraId:6,tocIndex:7}]},984547:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to delete data from a specific collection that meets certain conditions.",paraId:0,tocIndex:0},{value:"The basic usage of the delete node is similar to the update node, except that the delete node does not require field assignments, only the selection of the collection and filter conditions are needed. The result of the delete node will return the number of rows deleted successfully, which can only be viewed in the execution history and cannot be used as a variable in subsequent nodes.",paraId:1,tocIndex:0},{value:"Currently, the delete node does not support deleting one by one, all deletions are performed in batches, so other events triggered by each data deletion will not be triggered.",paraId:2},{value:'In the workflow configuration interface, click the plus ("+") button in the flow to add a "Delete Record" node:',paraId:3,tocIndex:1},{value:"Select the collection from which data will be deleted.",paraId:4,tocIndex:3},{value:"Similar to the filter conditions used in regular collection queries, variables from the workflow context can be used.",paraId:5,tocIndex:4},{value:"For example, to regularly clean up invalid historical order data that has been canceled, you can use a delete node:",paraId:6,tocIndex:5},{value:"The workflow will be triggered periodically and execute to delete all invalid historical order data that has been canceled.",paraId:7,tocIndex:5}]},395610:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Create a dynamic calculation node:",paraId:0,tocIndex:1},{value:"Unlike the expression options in a standard calculation node, dynamic expressions must be selected based on preloaded data rather than directly inputting the expression. Choose the preloaded product discount rule data from the trigger:",paraId:1,tocIndex:3},{value:"You also need to select the data row object from the table to be used as a variable in the expression. This can be chosen from the workflow context, where results have been preloaded or queried. The object must be a data row from the table associated with the expression data. In this case, select the product data:",paraId:2,tocIndex:4},{value:"Saving the node configuration completes the entire setup process.",paraId:3,tocIndex:4},{value:"Except for node configuration, there are also some related contents about dynamic calculation that can be further understood through the ",paraId:4,tocIndex:5},{value:"plugin documentation",paraId:5,tocIndex:5},{value:".",paraId:4,tocIndex:5}]},634385:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When executed, this node will immediately end the current workflow execution and end it with the status as configured in the node. It is typically used for specific logic flow control, to exit the current workflow after meeting certain logical conditions, and not continue with subsequent processing. It can be compared to the ",paraId:0,tocIndex:0},{value:"return",paraId:0,tocIndex:0},{value:" instruction in programming languages, used to exit the currently executing function.",paraId:0,tocIndex:0},{value:'In the workflow configuration UI, click the plus ("+") button in the flow to add an "End Process" node:',paraId:1,tocIndex:1},{value:'The end status will affect the final status of the execution plan of the workflow. It can be configured as "Success" or "Failure". When the workflow reaches this node, it will immediately exit with the configured status.',paraId:2,tocIndex:3},{value:'When used in workflows of the "Pre-action" type, it will intercept the action requests. For more details, please refer to the ',paraId:3},{value:'"Pre-action" usage instructions',paraId:4},{value:".",paraId:3},{value:'Besides intercepting the action requests, the configuration of the end status will also affect the status of the feedback information in the "Response Message" in this type of workflow.',paraId:5}]},678268:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Nodes are the basic units of logical arrangement in a workflow. A workflow can contains any number of nodes, and each node type represents an instruction that determines the behavior of the node. The configuration of a node corresponds to the parameters of the instruction, which determining the operation data object or other content of its behavior.",paraId:0,tocIndex:0},{value:"Workflow triggers are not considered to be nodes but are displayed in the workflow diagram as entry nodes. They are different concepts from nodes. For details, please refer to the ",paraId:1},{value:"Triggers",paraId:2},{value:" section.",paraId:1},{value:"From a functional perspective, the nodes implemented so far are in four categories (a total of 25 types of nodes):",paraId:3},{value:`Flow Control
`,paraId:4},{value:"Condition",paraId:5},{value:"Delay",paraId:6},{value:" (provided by plugin @nocobase/plugin-workflow-deley)",paraId:7},{value:"End Process",paraId:8},{value:"Loop",paraId:9},{value:" (provided by plugin @nocobase/plugin-workflow-loop)",paraId:7},{value:"Parallel Branch",paraId:10},{value:" (provided by plugin @nocobase/plugin-workflow-parallel)",paraId:7},{value:"Variable",paraId:11},{value:" (provided by plugin @nocobase/plugin-workflow-variable)",paraId:7},{value:"Call Workflow",paraId:12},{value:" (provided by plugin @nocobase/plugin-workflow-subflow)",paraId:7},{value:"Output",paraId:13},{value:" (provided by plugin @nocobase/plugin-workflow-subflow)",paraId:7},{value:`Calculation
`,paraId:4},{value:"Calculation",paraId:14},{value:"Date Calculation",paraId:15},{value:" (provided by plugin @nocobase/plugin-workflow-date-calculation)",paraId:16},{value:"Dynamic Expression Calculation",paraId:17},{value:" (provided by plugin @nocobase/plugin-workflow-dynamic-calculation)",paraId:16},{value:"JSON Calculation",paraId:18},{value:" (provided by plugin @nocobase/plugin-workflow-json-query)",paraId:16},{value:"JSON Variable Mapping",paraId:19},{value:" (provided by plugin @nocobase/plugin-workflow-json-variable-mapping)",paraId:16},{value:`Data Table Operations
`,paraId:4},{value:"Create Record",paraId:20},{value:"Update Record",paraId:21},{value:"Delete Record",paraId:22},{value:"Query Record",paraId:23},{value:"Aggregate Query",paraId:24},{value:" (provided by plugin @nocobase/plugin-workflow-aggregate)",paraId:25},{value:"SQL Operation",paraId:26},{value:" (provided by plugin @nocobase/plugin-workflow-sql)",paraId:25},{value:`Manual Processing
`,paraId:4},{value:"Manual Processing",paraId:27},{value:" (provided by plugin @nocobase/plugin-workflow-manual)",paraId:28},{value:"Approval",paraId:29},{value:" (provided by plugin @nocobase/plugin-workflow-approval)",paraId:28},{value:"CC",paraId:30},{value:" (provided by plugin @nocobase/plugin-workflow-cc)",paraId:28},{value:`Other Extensions
`,paraId:4},{value:"JavaScript",paraId:31},{value:" (provided by plugin @nocobase/plugin-workflow-javascript)",paraId:32},{value:"HTTP Request",paraId:33},{value:" (provided by plugin @nocobase/plugin-workflow-request)",paraId:32},{value:"Response Message",paraId:34},{value:" (provided by plugin @nocobase/plugin-workflow-response-message)",paraId:32}]},493469:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The JavaScript node allows users to execute custom Node.js scripts within a workflow. These scripts can utilize upstream workflow variables as parameters and return values that subsequent nodes can use.",paraId:0},{value:"The script supports most Node.js features but has some differences from the native execution environment. See the ",paraId:1},{value:"Feature List",paraId:2},{value:" for details.",paraId:1},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button in the workflow to add a \u201CScript\u201D node:",paraId:3,tocIndex:2},{value:"Use parameters to pass variables or static values from the workflow context into the script, making them accessible in the script logic. ",paraId:4,tocIndex:4},{value:"name",paraId:4,tocIndex:4},{value:" represents the parameter name, which will serve as the variable name in the script. ",paraId:4,tocIndex:4},{value:"value",paraId:4,tocIndex:4},{value:" represents the parameter value, which can be a workflow variable or a constant.",paraId:4,tocIndex:4},{value:"The script content functions as a single function where you can write any JavaScript code supported by the Node.js environment. Use the ",paraId:5,tocIndex:5},{value:"return",paraId:5,tocIndex:5},{value:" statement to provide a value as the node's output, making it available as a variable for downstream nodes.",paraId:5,tocIndex:5},{value:"After writing the script, use the test button below the editor to open a test execution dialog. Populate parameters with static values for simulation. The dialog displays the return value and output (logs) after execution.",paraId:6,tocIndex:5},{value:"Set the timeout in milliseconds. A value of ",paraId:7,tocIndex:6},{value:"0",paraId:7,tocIndex:6},{value:" means no timeout.",paraId:7,tocIndex:6},{value:"If enabled, the workflow will continue even if the script encounters an error or timeout.",paraId:8,tocIndex:7},{value:"When a script fails, it will not return a value, and the node's output will contain the error message. If subsequent nodes use the result variable from this script node, handle it carefully.",paraId:9},{value:"The Node.js version matches the version used by the main application.",paraId:10,tocIndex:9},{value:"The script allows restricted use of modules, adhering to the CommonJS standard. Use the ",paraId:11,tocIndex:10},{value:"require()",paraId:11,tocIndex:10},{value:" directive to import modules in your code.",paraId:11,tocIndex:10},{value:"It supports Node.js native modules and modules installed in ",paraId:12,tocIndex:10},{value:"node_modules",paraId:12,tocIndex:10},{value:" (including dependencies used by NocoBase). To make modules available in the code, declare them in the application environment variable ",paraId:12,tocIndex:10},{value:"WORKFLOW_SCRIPT_MODULES",paraId:12,tocIndex:10},{value:". Separate multiple module names with commas, e.g.:",paraId:12,tocIndex:10},{value:`WORKFLOW_SCRIPT_MODULES=crypto,timers,lodash,dayjs
`,paraId:13,tocIndex:10},{value:"Modules not declared in ",paraId:14},{value:"WORKFLOW_SCRIPT_MODULES",paraId:14},{value:", including native Node.js modules or installed ",paraId:14},{value:"node_modules",paraId:14},{value:", ",paraId:14},{value:"cannot",paraId:14},{value:" be used in scripts. This strategy allows administrators to control the modules accessible to users, reducing the risk of excessive script permissions.",paraId:14},{value:"Global variables such as ",paraId:15,tocIndex:11},{value:"global",paraId:15,tocIndex:11},{value:", ",paraId:15,tocIndex:11},{value:"process",paraId:15,tocIndex:11},{value:", ",paraId:15,tocIndex:11},{value:"__dirname",paraId:15,tocIndex:11},{value:", and ",paraId:15,tocIndex:11},{value:"__filename",paraId:15,tocIndex:11},{value:" are ",paraId:15,tocIndex:11},{value:"not supported",paraId:15,tocIndex:11},{value:".",paraId:15,tocIndex:11},{value:`console.log(global); // will throw error: "global is not defined"
`,paraId:16,tocIndex:11},{value:"Parameters configured in the node are treated as global variables in the script and can be used directly. Only basic types such as ",paraId:17,tocIndex:12},{value:"boolean",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"number",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"string",paraId:17,tocIndex:12},{value:", ",paraId:17,tocIndex:12},{value:"object",paraId:17,tocIndex:12},{value:", and arrays are supported. ",paraId:17,tocIndex:12},{value:"Date",paraId:17,tocIndex:12},{value:" objects are converted to ISO-formatted strings when passed. Other complex types, such as custom class instances, cannot be directly passed.",paraId:17,tocIndex:12},{value:"Use the ",paraId:18,tocIndex:13},{value:"return",paraId:18,tocIndex:13},{value:" statement to return data of basic types (same as parameter rules) to the node as its output. If the code does not contain a ",paraId:18,tocIndex:13},{value:"return",paraId:18,tocIndex:13},{value:" statement, the node will have no output value.",paraId:18,tocIndex:13},{value:`return 123;
`,paraId:19,tocIndex:13},{value:"Supports",paraId:20,tocIndex:14},{value:" logging via ",paraId:20,tocIndex:14},{value:"console",paraId:20,tocIndex:14},{value:".",paraId:20,tocIndex:14},{value:`console.log('hello world!');
`,paraId:21,tocIndex:14},{value:"The script node\u2019s output will also be recorded in the corresponding workflow\u2019s log files.",paraId:22,tocIndex:14},{value:"Supports",paraId:23,tocIndex:15},{value:" asynchronous functions using ",paraId:23,tocIndex:15},{value:"async",paraId:23,tocIndex:15},{value:" and ",paraId:23,tocIndex:15},{value:"await",paraId:23,tocIndex:15},{value:". It also ",paraId:23,tocIndex:15},{value:"supports",paraId:23,tocIndex:15},{value:" the global ",paraId:23,tocIndex:15},{value:"Promise",paraId:23,tocIndex:15},{value:" object.",paraId:23,tocIndex:15},{value:`async function test() {
  return Promise.resolve(1);
}

const value = await test();
return value;
`,paraId:24,tocIndex:15},{value:"To use methods like ",paraId:25,tocIndex:16},{value:"setTimeout",paraId:25,tocIndex:16},{value:", ",paraId:25,tocIndex:16},{value:"setInterval",paraId:25,tocIndex:16},{value:", or ",paraId:25,tocIndex:16},{value:"setImmediate",paraId:25,tocIndex:16},{value:", import them from the Node.js ",paraId:25,tocIndex:16},{value:"timers",paraId:25,tocIndex:16},{value:" package.",paraId:25,tocIndex:16},{value:`const { setTimeout, setInterval, setImmediate, clearTimeout, clearInterval, clearImmediate } = require('timers');

async function sleep(time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

await sleep(1000);

return 123;
`,paraId:26,tocIndex:16}]},186863:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is designed to transform or calculate complex JSON data generated by various nodes, enabling subsequent nodes to effectively utilize this data. For instance, SQL operations and HTTP request nodes often return results in JSON format. The JSON calculation node allows you to transform this data into the specific values and variable formats required by later stages in the workflow.",paraId:0},{value:'To add a "JSON calculation" node in the workflow configuration interface, simply click the plus (\u201C+\u201D) button within the process:',paraId:1,tocIndex:2},{value:"JSON calculation nodes are generally positioned beneath other data nodes to facilitate parsing their output.",paraId:2},{value:"The JSON calculation node offers support for various parsing engines, each with its own unique syntax. You can select an engine based on your specific needs and preferences. Currently, three parsing engines are available:",paraId:3,tocIndex:4},{value:"JMESPath",paraId:4,tocIndex:4},{value:"JSONPath Plus",paraId:4,tocIndex:4},{value:"JSONata",paraId:4,tocIndex:4},{value:"The data source can be either the output of an upstream node or a data object within the process context. This is typically an unstructured data object, such as the results from an SQL node or an HTTP request node.",paraId:5,tocIndex:5},{value:"Data objects related to data tables are usually already structured through table configuration information and do not typically require parsing by a JSON calculation node.",paraId:6},{value:"You can create a custom parsing expression based on your specific needs and the parsing engine you\u2019ve selected.",paraId:7,tocIndex:6},{value:"Different parsing engines use different syntaxes; refer to the linked documentation for detailed information.",paraId:8},{value:"As of version ",paraId:9},{value:"v1.0.0-alpha.15",paraId:9},{value:", expressions now support the use of variables. These variables are pre-parsed before the specific engine executes, replacing the variables with the corresponding string values according to string template rules and merging them with other static elements in the expression. This feature is particularly valuable when dynamically constructing expressions, such as when parsing JSON content that requires dynamic keys.",paraId:9},{value:"When the parsed result is an object (or an array of objects), you can use properties mapping to convert the desired attributes into sub-variables for use by subsequent nodes.",paraId:10,tocIndex:7},{value:"For object (or array of objects) results, if you do not perform properties mapping, the entire object (or array of objects) will be stored as a single variable in the node's result, making it impossible to directly access the object's attribute values as individual variables.",paraId:11},{value:"Suppose you need to parse data from an SQL node that returns a set of order data:",paraId:12,tocIndex:8},{value:`[
  [
    {
      "id": 1,
      "products": [
        {
          "id": 1,
          "title": "Product 1",
          "price": 100,
          "quantity": 1
        },
        {
          "id": 2,
          "title": "Product 2",
          "price": 120,
          "quantity": 2
        }
      ]
    },
    {
      "id": 2,
      "products": [
        {
          "id": 3,
          "title": "Product 3",
          "price": 130,
          "quantity": 1
        },
        {
          "id": 4,
          "title": "Product 4",
          "price": 140,
          "quantity": 2
        }
      ]
    }
  ]
]
`,paraId:13,tocIndex:8},{value:"The outer array in the code above is intentional; it reflects the typical output of an SQL node. This is because the SQL node\u2019s result is a binary array, where the first element contains the query results and the second element contains metadata about the query.",paraId:14},{value:"If you need to parse and calculate the total price for each order and assemble this data into an object with the corresponding order ID, ready to update the order's total price, you would configure it as follows:",paraId:15},{value:"Select the JSONata parsing engine;",paraId:16},{value:"Choose the SQL node\u2019s result as the data source;",paraId:16},{value:"Use the JSONata expression ",paraId:16},{value:'$[0].{"id": id, "total": products.(price * quantity)}',paraId:16},{value:" for parsing;",paraId:16},{value:"Choose properties mapping to map ",paraId:16},{value:"id",paraId:16},{value:" and ",paraId:16},{value:"total",paraId:16},{value:" as sub-variables;",paraId:16},{value:"The final parsed result would look like this:",paraId:17},{value:`[
  {
    "id": 1,
    "total": 340
  },
  {
    "id": 2,
    "total": 410
  }
]
`,paraId:18},{value:"You can then iterate over the array of completed orders to update the total price of each order.",paraId:19}]},196718:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.6.0",paraId:0},{value:"This node is used to map complex JSON structures from upstream node results into variables for use in subsequent nodes. For example, after mapping the results from SQL operations or HTTP request nodes, you can access their properties in later nodes.",paraId:1},{value:"Unlike the JSON Calculation node, the JSON Variable Mapping node does not support custom expressions or rely on a third-party engine. It is solely used to map property values from a JSON structure, making it simpler to use.",paraId:2},{value:"In the workflow configuration interface, click the plus (\u201C+\u201D) button within the process to add a ",paraId:3,tocIndex:2},{value:"JSON variable mapping",paraId:3,tocIndex:2},{value:" node:",paraId:3,tocIndex:2},{value:"The data source can be the result from an upstream node or a data object from the workflow context. It is typically an unstructured data object, such as the result from a SQL node or an HTTP request node.",paraId:4,tocIndex:4},{value:"Paste a sample data snippet and click the parse button to automatically generate a list of variables:",paraId:5,tocIndex:5},{value:"If there are variables in the auto-generated list that you do not need, you can click the delete button to remove them.",paraId:6,tocIndex:5},{value:"The sample data is not the final execution result; it is only used to help generate the variable list.",paraId:7},{value:"If this option is not checked, array contents will be mapped according to NocoBase Workflow\u2019s default variable handling method (refer to: ",paraId:8,tocIndex:6},{value:"Variables",paraId:9,tocIndex:6},{value:"). For example, given the following sample data:",paraId:8,tocIndex:6},{value:`{
  "a": 1,
  "b": [
    {
      "c": 2
    },
    {
      "c": 3
    }
  ]
}
`,paraId:10,tocIndex:6},{value:"The generated variable ",paraId:11,tocIndex:6},{value:"b.c",paraId:11,tocIndex:6},{value:" will represent the array ",paraId:11,tocIndex:6},{value:"[2, 3]",paraId:11,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:"If you check this option, array indexes will be included in the variable paths (e.g., ",paraId:12,tocIndex:6},{value:"b.0.c",paraId:12,tocIndex:6},{value:" and ",paraId:12,tocIndex:6},{value:"b.1.c",paraId:12,tocIndex:6},{value:").",paraId:12,tocIndex:6},{value:"When array indexes are included, ensure that the indexes in the input data are consistent; otherwise, parsing errors may occur.",paraId:13,tocIndex:6},{value:"In the configuration of subsequent nodes, you can use the variables generated by the JSON Variable Mapping node:",paraId:14,tocIndex:7},{value:"Even if the JSON structure is complex, after mapping you only need to select the variable corresponding to the desired path.",paraId:15,tocIndex:7}]},355151:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The loop functions in a manner akin to ",paraId:0},{value:"for",paraId:0},{value:", ",paraId:0},{value:"while",paraId:0},{value:", or ",paraId:0},{value:"forEach",paraId:0},{value:" constructs in programming languages. It\u2019s designed for situations where you need to repeat certain operations a specific number of times or iterate over a dataset (such as an array). The loop node is your go-to tool for such tasks.",paraId:0},{value:"This plugin comes pre-installed, so no additional setup is necessary.",paraId:1,tocIndex:1},{value:'In the workflow configuration interface, you can add a "Loop" node by clicking the plus sign ("+") in the process:',paraId:2,tocIndex:3},{value:"Once you create the loop node, an internal branch specifically for the loop is generated. You can then populate this branch with any number of nodes. These nodes will have access to not only the workflow context variables but also the local variables defined within the loop context\u2014such as the current data object or the iteration index (which starts at ",paraId:3,tocIndex:3},{value:"0",paraId:3,tocIndex:3},{value:"). These local variables are scoped exclusively to the loop. For nested loops, you can use variables specific to each loop level.",paraId:3,tocIndex:3},{value:"The loop node can handle various data types for the loop object, each in a different way:",paraId:4,tocIndex:5},{value:"Array",paraId:5,tocIndex:5},{value:": This is the most common use case. Typically, you'll select a workflow context variable, such as the results from a query node or preloaded data from a many-to-many relationship. If an array is selected, the loop node will iterate over each element, assigning the current element to a local variable within the loop context for each iteration.",paraId:5,tocIndex:5},{value:"Number",paraId:6,tocIndex:5},{value:": When the loop object is a number, it\u2019s treated as the number of iterations. The index within the local variable will match the loop object\u2019s value.",paraId:6,tocIndex:5},{value:"String",paraId:7,tocIndex:5},{value:": If the loop object is a string, the loop will iterate according to the string's length, processing each character by its index.",paraId:7,tocIndex:5},{value:"Others",paraId:8,tocIndex:5},{value:": Other data types (including objects) are treated as a single loop object, resulting in just one iteration\u2014typically not requiring a loop.",paraId:8,tocIndex:5},{value:"You can also input constants directly when working with numbers and strings. For instance, inputting ",paraId:9,tocIndex:5},{value:"5",paraId:9,tocIndex:5},{value:" (number type) will cause the loop to run 5 times, while inputting ",paraId:9,tocIndex:5},{value:"abc",paraId:9,tocIndex:5},{value:" (string type) will result in 3 iterations, processing ",paraId:9,tocIndex:5},{value:"a",paraId:9,tocIndex:5},{value:", ",paraId:9,tocIndex:5},{value:"b",paraId:9,tocIndex:5},{value:", and ",paraId:9,tocIndex:5},{value:"c",paraId:9,tocIndex:5},{value:" individually. The variable selection tool allows you to choose the type of constant you want to use.",paraId:9,tocIndex:5},{value:"From version ",paraId:10,tocIndex:6},{value:"v1.4.0-beta",paraId:10,tocIndex:6},{value:" on, loop condition options are added, and could be enabled in node configuration.",paraId:10,tocIndex:6},{value:"Condition",paraId:11,tocIndex:6},{value:"Similar to the configuration in a condition node, combination of conditions can be configured, and variables from the current loop, such as the loop item and loop index, can also be used.",paraId:12,tocIndex:6},{value:"Checkpoint",paraId:13,tocIndex:6},{value:"Similar to ",paraId:14,tocIndex:6},{value:"while",paraId:14,tocIndex:6},{value:" and ",paraId:14,tocIndex:6},{value:"do/while",paraId:14,tocIndex:6},{value:" in programming languages, conditions can be configured to be evaluated either before each loop iteration or after it ends. Post-condition evaluation can execute other nodes in the loop body first before performing the condition check.",paraId:14,tocIndex:6},{value:"When condition is not met",paraId:15,tocIndex:6},{value:"Similar to ",paraId:16,tocIndex:6},{value:"break",paraId:16,tocIndex:6},{value:" and ",paraId:16,tocIndex:6},{value:"continue",paraId:16,tocIndex:6},{value:" clause in programming languages, could be use to determine whether to break or continue the loop.",paraId:16,tocIndex:6},{value:"From version ",paraId:17,tocIndex:7},{value:"v1.4.0-beta",paraId:17,tocIndex:7},{value:" on, when an internal node in a loop fails to execute (due to unmet conditions, errors, etc.), the next step can be determined through this configuration. Three handling methods are supported:",paraId:17,tocIndex:7},{value:"Exit the process (default)",paraId:18,tocIndex:7},{value:"Exit the loop and continue the process",paraId:18,tocIndex:7},{value:"Continue to the next loop item",paraId:18,tocIndex:7},{value:"You can choose the appropriate method as needed.",paraId:19,tocIndex:7},{value:"Consider the following scenario: when placing an order, you need to check the inventory of each product in the order. If the inventory is sufficient, the stock is deducted; otherwise, the product in the order details is marked as invalid.",paraId:20,tocIndex:8},{value:"Create three collections: Product <-(1:m)-- Order Details --(m:1)-> Order , with the following data model:",paraId:21,tocIndex:8},{value:"Field Name",paraId:22,tocIndex:8},{value:"Field Type",paraId:22,tocIndex:8},{value:"Order Details",paraId:22,tocIndex:8},{value:"Many-to-One (Details)",paraId:22,tocIndex:8},{value:"Total Price",paraId:22,tocIndex:8},{value:"Number",paraId:22,tocIndex:8},{value:"Field Name",paraId:23,tocIndex:8},{value:"Field Type",paraId:23,tocIndex:8},{value:"Product",paraId:23,tocIndex:8},{value:"One-to-Many (Product)",paraId:23,tocIndex:8},{value:"Quantity",paraId:23,tocIndex:8},{value:"Number",paraId:23,tocIndex:8},{value:"Field Name",paraId:24,tocIndex:8},{value:"Field Type",paraId:24,tocIndex:8},{value:"Product Name",paraId:24,tocIndex:8},{value:"Single-line Text",paraId:24,tocIndex:8},{value:"Price",paraId:24,tocIndex:8},{value:"Number",paraId:24,tocIndex:8},{value:"Inventory",paraId:24,tocIndex:8},{value:"Integer",paraId:24,tocIndex:8},{value:'Create a workflow, selecting "Collection event" as the trigger, and choose the "Order" table with "Create record" as the trigger. Additionally, preload relationship data from the "Order Details" table and the Product Table under details:',paraId:25,tocIndex:8},{value:'Create a loop node, selecting the loop object as "Trigger Data / Order Details," which loops through each record in the order details table:',paraId:26,tocIndex:8},{value:'Inside the loop node, create a "Condition" node to check if the product inventory is sufficient:',paraId:27,tocIndex:8},{value:'If the inventory is sufficient, create a "Calculation" and an "Update record" node under the "Yes" branch to update the inventory after deduction:',paraId:28,tocIndex:8},{value:'If the inventory is insufficient, create an "Update record" node under the "No" branch to update the status of the order detail to "Invalid":',paraId:29,tocIndex:8},{value:"The complete process structure is illustrated below:",paraId:30,tocIndex:8},{value:"After configuration and activation of this workflow, every time a new order is created, the system will automatically check the inventory of each product in the order. If sufficient inventory is available, the stock will be deducted; otherwise, the product in the order details will be marked as invalid (helping to calculate the valid total order price).",paraId:31,tocIndex:8}]},335314:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button within the process to add a "Manual" node:',paraId:0,tocIndex:1},{value:"A manual node requires assigning a user who will be responsible for executing the pending task. You can add a list of pending tasks when setting up blocks on the page. Additionally, the content of each node's task pop-up window needs to be configured within the node\u2019s interface.",paraId:1,tocIndex:3},{value:"You can either select a specific user or use variables to choose the primary or foreign key of user data from the context.",paraId:2,tocIndex:3},{value:"At present, the assignee option for manual nodes does not support multi-user processing, though this feature is planned for future versions.",paraId:3},{value:"The interface setup for the to-do list is central to configuring the manual node. By clicking the \u201CConfigure\u201D button, you can open a separate pop-up window for configuration. This interface works like a regular page, allowing you to design it using a WYSIWYG (What You See Is What You Get) editor:",paraId:4,tocIndex:4},{value:"Tabs can be utilized to differentiate between various content types. For example, one tab might be used for approved form submissions, another for rejected submissions, or you might use them to display details of related data. These tabs can be configured freely according to your needs.",paraId:5,tocIndex:5},{value:"The blocks you can use primarily fall into two categories: Data Blocks and Form Blocks. In addition, Markdown blocks are available for informational prompts and other static content.",paraId:6,tocIndex:6},{value:"Data blocks allow you to display information from triggers or the results of any node processing, providing necessary context for the task assignee. For example, if the workflow is triggered by a form event, a data block can be created to show the details of the triggered data. This setup is similar to configuring details on a regular page, where you can select any fields from the triggered data for display:",paraId:7,tocIndex:7},{value:"Similarly, node data blocks can be configured to display data results from upstream nodes as reference information for the task assignee. For example, if an upstream calculation node generates results, these can be displayed as contextual data:",paraId:8,tocIndex:7},{value:"Since the workflow is in a non-executing state during interface configuration, data blocks won\u2019t display specific data. The relevant data will only appear in the to-do pop-up interface once the workflow is triggered and executed.",paraId:9},{value:"Form blocks are crucial in the to-do interface, as they determine whether the workflow continues. Failing to configure a form block will cause the workflow to halt. There are three types of form blocks available:",paraId:10,tocIndex:8},{value:"Custom Form",paraId:11,tocIndex:8},{value:"Create record form",paraId:11,tocIndex:8},{value:"Update record form",paraId:11,tocIndex:8},{value:"For Create record forms and Update record forms, you'll need to select the data table they are based on. When the assignee submits the form, the values entered will be used to add or update data in the selected table. The Custom Form allows you to create a temporary form not linked to any data table, with the submitted values available for use in subsequent nodes.",paraId:12,tocIndex:8},{value:"You can configure the form submission button with one of three options:",paraId:13,tocIndex:8},{value:"Continue the process",paraId:14,tocIndex:8},{value:"Terminate the process",paraId:14,tocIndex:8},{value:"Save temporarily",paraId:14,tocIndex:8},{value:'These three button options correspond to different node states in the workflow: "Complete," "Reject," or "Waiting." At least one of the first two options must be configured to determine how the workflow proceeds.',paraId:15,tocIndex:8},{value:'On the "Continue the process" button, you can configure specific values for form fields:',paraId:16,tocIndex:8},{value:'In the pop-up window, you can assign values to any field in the form. Once the form is submitted, these values will be used as the final values for those fields. This feature is particularly useful when reviewing data. You can configure multiple "Continue the process" buttons in the form, each setting different enumeration values for similar fields, allowing the workflow to continue with varying outcomes based on these values.',paraId:17,tocIndex:8},{value:"Except for node configuration, there are also some related contents about manual process that can be further understood through the ",paraId:18,tocIndex:9},{value:"plugin documentation",paraId:19,tocIndex:9},{value:".",paraId:18,tocIndex:9}]},681941:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to ",paraId:0,tocIndex:0},{value:"Subprocess Plugin: Process Output",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0}]},497789:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Parallel branch nodes enable the division of a process into multiple branches, each configurable with distinct nodes. Depending on the selected mode of the branch, the execution approach varies. When multiple operations need to be carried out simultaneously, the parallel branch node proves highly effective.",paraId:0,tocIndex:0},{value:"This feature is a built-in plugin, so no installation is necessary.",paraId:1,tocIndex:1},{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button to add a "Parallel Branch" node to the process:',paraId:2,tocIndex:3},{value:"Once a parallel branch node is added to the process, it will automatically create two sub-branches by default. You can add more branches by clicking the appropriate button. Each branch can include as many nodes as needed, and unnecessary branches can be removed by clicking the delete button at the start of the branch.",paraId:3,tocIndex:3},{value:"Parallel branch nodes offer three modes:",paraId:4,tocIndex:5},{value:"All succeeded",paraId:5,tocIndex:5},{value:': The process continues to execute nodes following the branches only if all branches succeed. If any branch terminates early\u2014whether due to failure, error, or any non-success state\u2014the entire parallel branch node terminates in that state. This is also referred to as "All Mode."',paraId:5,tocIndex:5},{value:"Any succeeded",paraId:5,tocIndex:5},{value:': The process will proceed to execute subsequent nodes once any branch succeeds. The entire parallel branch node will only terminate early if all branches fail or terminate prematurely, regardless of the reason. This is known as "Any Mode."',paraId:5,tocIndex:5},{value:"Any succeeded or failed",paraId:5,tocIndex:5},{value:': The process will continue executing subsequent nodes once any branch succeeds. However, if any branch fails, the entire parallel branch node will terminate early in that state. This is also known as "Race Mode."',paraId:5,tocIndex:5},{value:"In all modes, branches are executed sequentially from left to right. The process continues executing subsequent nodes or terminates early once the conditions of the selected mode are met.",paraId:6,tocIndex:5},{value:"Refer to the example provided in the ",paraId:7,tocIndex:6},{value:"Delay Node",paraId:8,tocIndex:6},{value:" section.",paraId:7,tocIndex:6}]},342996:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to query and retrieve data records that meet certain conditions from a collection.",paraId:0,tocIndex:0},{value:"It can be configured to query single or multiple data records, and the query result can be used as a variable in subsequent nodes. When querying multiple data records, the query result is an array. When the query result is empty, you can choose whether to continue executing subsequent nodes.",paraId:1,tocIndex:0},{value:'In the workflow configuration UI, click the plus ("+") button in the workflow and add a "Query Record" node:',paraId:2,tocIndex:1},{value:"Select the collection to query record from.",paraId:3,tocIndex:3},{value:'There are two result types: "Single Data" and "Multiple record":',paraId:4,tocIndex:4},{value:"Single record: The result will be an object of the first matching record only, or null if no matched record.",paraId:5,tocIndex:4},{value:"Multiple records: The result will be an array containing matched records, or an empty one if no matching records. This can be used to be processed in a loop node.",paraId:5,tocIndex:4},{value:"Similar to the filter conditions when querying a normal collection, you can use context variables of the workflow.",paraId:6,tocIndex:5},{value:'When querying one or more data records, sorting rules can be used to control the desired results. For example, to query the latest data record, you can sort by the "Created at" field in descending order.',paraId:7,tocIndex:6},{value:'When the result set may be large, pagination can be used to control the number of query results. For example, to query the latest 10 data records, you can sort by the "Creation Time" field in descending order and then set pagination to 1 page with 10 data records.',paraId:8,tocIndex:7},{value:"In single result mode, if there are no data records that meet the conditions, the query result will be ",paraId:9,tocIndex:8},{value:"null",paraId:9,tocIndex:8},{value:"; in multiple result mode, it will be an empty array (",paraId:9,tocIndex:8},{value:"[]",paraId:9,tocIndex:8},{value:'). You can choose whether to check "Exit the workflow if the query result is empty". After checked, if the query result is empty, subsequent nodes will not be executed, and the workflow will exit prematurely with a failed status.',paraId:9,tocIndex:8}]},894628:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When you need to interact with another web system, the HTTP Request node is your go-to tool. This node allows you to send an HTTP request to a specified address, complete with data in JSON or ",paraId:0},{value:"application/x-www-form-urlencoded",paraId:0},{value:" formats, facilitating seamless communication with external systems.",paraId:0},{value:"If you're already familiar with tools like Postman, mastering the HTTP Request node will be straightforward. However, unlike traditional tools, this node leverages context variables from the current workflow, making it a powerful addition to your business process integration.",paraId:1},{value:"This is a built-in plugin, so there's no need for installation.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus (\u201C+\u201D) button within your process to add an "HTTP Request" node:',paraId:3,tocIndex:3},{value:"Choose from the available HTTP request methods: ",paraId:4,tocIndex:5},{value:"GET",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"POST",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"PUT",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"PATCH",paraId:4,tocIndex:5},{value:", and ",paraId:4,tocIndex:5},{value:"DELETE",paraId:4,tocIndex:5},{value:".",paraId:4,tocIndex:5},{value:"Specify the URL of the HTTP service, including the protocol (",paraId:5,tocIndex:6},{value:"http://",paraId:5,tocIndex:6},{value:" or ",paraId:5,tocIndex:6},{value:"https://",paraId:5,tocIndex:6},{value:"). For security, ",paraId:5,tocIndex:6},{value:"https://",paraId:5,tocIndex:6},{value:" is recommended.",paraId:5,tocIndex:6},{value:"This defines the ",paraId:6,tocIndex:7},{value:"Content-Type",paraId:6,tocIndex:7},{value:" in the request header, see the options in the ",paraId:6,tocIndex:7},{value:"Request Body",paraId:7,tocIndex:7},{value:" section.",paraId:6,tocIndex:7},{value:"Set key-value pairs for the request headers, with values that can dynamically reference variables from the workflow context.",paraId:8,tocIndex:8},{value:"The ",paraId:9},{value:"Content-Type",paraId:9},{value:" header is predetermined by the request data format setting. Manual input here will not override this configuration.",paraId:9},{value:"Define key-value pairs for the query string. Values can dynamically utilize variables from the workflow context.",paraId:10,tocIndex:9},{value:"Depends on the ",paraId:11,tocIndex:10},{value:"Content-Type",paraId:11,tocIndex:10},{value:" option, different formats are supported.",paraId:11,tocIndex:10},{value:"application/json",paraId:12},{value:"Standard JSON format text is supported. Use the variable button in the upper-right corner of the text editor to insert context variables.",paraId:13,tocIndex:11},{value:"Ensure that variables within JSON are used as strings, for example: ",paraId:14},{value:'{ "a": "{{$context.data.a}}" }',paraId:14},{value:".",paraId:14},{value:"application/x-www-form-urlencoded",paraId:12},{value:"This format supports standard key-value pairs. The variable button in the text editor can also be used to insert context variables.",paraId:15,tocIndex:12},{value:"application/xml",paraId:12},{value:"Supports standard XML format text. Similar to JSON, you can use the variable button to insert context variables.",paraId:16,tocIndex:13},{value:"multipart/form-data",paraId:12},{value:"v1.8.0+",paraId:17,tocIndex:13},{value:"Supports key-value pairs of form data. When selecting a data type as a file object, you can upload files. Files can only be selected from existing file objects in the context, such as results from file collection queries or related data from associated file collection.",paraId:18,tocIndex:14},{value:"When selecting file data, ensure that the variable corresponds to a single file object, not a list of files (in many-to-one relationships, the relationship field's value will be an array).",paraId:19},{value:"Timeout Settings",paraId:20},{value:"If the request takes too long to respond, the timeout setting will cancel it, leading to the premature termination of the current workflow with a failure status.",paraId:21},{value:"Ignore Failure",paraId:22},{value:"The request node considers any HTTP status code between ",paraId:23},{value:"200",paraId:23},{value:" and ",paraId:23},{value:"299",paraId:23},{value:' as a success. Codes outside this range are deemed failures. If you select the "Ignore failed requests and continue workflow" option, the workflow will proceed with subsequent nodes, even if the request fails.',paraId:23},{value:"The HTTP request's response results can be parsed using the ",paraId:24,tocIndex:15},{value:"JSON Query",paraId:25,tocIndex:15},{value:" node, enabling further use in subsequent workflow nodes.",paraId:24,tocIndex:15},{value:"Starting from version ",paraId:26,tocIndex:15},{value:"v1.0.0-alpha.16",paraId:26,tocIndex:15},{value:", the request node\u2019s response includes three components that can be used as variables:",paraId:26,tocIndex:15},{value:"Status Code",paraId:27,tocIndex:15},{value:"Response Headers",paraId:27,tocIndex:15},{value:"Data",paraId:27,tocIndex:15},{value:"The response status code is a standard numerical HTTP status code, such as ",paraId:28,tocIndex:15},{value:"200",paraId:28,tocIndex:15},{value:" or ",paraId:28,tocIndex:15},{value:"403",paraId:28,tocIndex:15},{value:", as provided by the service.",paraId:28,tocIndex:15},{value:"Response headers are in JSON format, and the response data\u2014also in JSON\u2014must be parsed using the JSON node before being utilized.",paraId:29,tocIndex:15},{value:"For instance, you can configure the request node to interface with a cloud platform for sending notification SMS. Here\u2019s how you would set up the Alibaba Cloud SMS API (with parameters adapted according to the relevant documentation):",paraId:30,tocIndex:16},{value:"When the workflow triggers this node, it will call Alibaba Cloud\u2019s SMS API based on the configuration. If successful, a text message will be sent via the cloud SMS service.",paraId:31,tocIndex:16}]},462777:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Response Message node is designed to deliver custom messages to the client who initiates an operation within certain types of workflows.",paraId:0},{value:'This node currently can be used in the workflow types "Pre-Action Event" and "Custom Action Event (synchronous mode)".',paraId:1},{value:'Within the supported workflow types, you can insert a "Response Message" node at any point in the workflow. To do this, click the plus ("+") button within the workflow to add the "Response Message" node:',paraId:2,tocIndex:2},{value:"Throughout the entire request process, response messages are accumulated in an array. When the process reaches a Response Message node, the new message content is appended to this array. Upon the server sending the response content, all messages within the array are delivered together to the client.",paraId:3,tocIndex:2},{value:"The message content is structured as a template string, allowing the insertion of variables. You can customize the template's content in the node configuration as needed:",paraId:4,tocIndex:3},{value:'As the process executes and reaches this node, the template is parsed to generate the final message content. In the example configuration above, the variable "Scope variables / Loop all products / Loop target / Product / Title" will be replaced with specific values during the actual workflow, such as:',paraId:5,tocIndex:3},{value:`Insufficient stock for product "iPhone 14 Pro"
`,paraId:6,tocIndex:3},{value:"The status prompt of the response message is determined by the success or failure of the process execution. If any node in the process fails to execute, the entire process is considered a failure. In this case, the message content will be returned to the client with a failure status as a notification.",paraId:7,tocIndex:4},{value:'If you need to actively define a failure status within the process, you can use the "End Node" and configure it as a failure. When the process reaches this node, it will exit with a failure status, and the message will be returned to the client with a failure status.',paraId:8,tocIndex:4},{value:"If the entire process completes without any failure and reaches the end successfully, the message content will be returned to the client with a success status.",paraId:9,tocIndex:4},{value:"If multiple response message nodes are defined in the process, the content of the executed nodes will be appended to an array. When the process is completed, all message content will be returned to the client together as a notification.",paraId:10},{value:'In a "Pre-Action Event" workflow, a response message can be used to provide feedback to the client upon completion of the process. For further details, refer to ',paraId:11,tocIndex:6},{value:"Request Interception",paraId:12,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:`In synchronous mode within a "Post-Action Event" workflow, the response message is sent to the client after the process is completed. Unlike the "Pre-Action Event" workflow, where the result might vary, the message displayed here is always a "success" notification. This consistency occurs because the triggering operation has already been successfully executed, and the success of the linked workflow does not impact the original operation's result.`,paraId:13,tocIndex:7}]},415915:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"HTTP Response node could be used in Webhook event (under synchronous mode) to return response to the third-party system.",paraId:0,tocIndex:0},{value:"See: ",paraId:1,tocIndex:0},{value:"Response",paraId:2,tocIndex:0},{value:"\u3002",paraId:1,tocIndex:0}]},504686:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In certain scenarios where the standard data table operation nodes fall short for more complex tasks, you can directly employ the SQL Action node to execute sophisticated SQL queries within the database.",paraId:0,tocIndex:0},{value:"Unlike executing SQL operations by connecting to the database externally, within the workflow, you can leverage variables from the workflow context as parameters within your SQL statements.",paraId:1,tocIndex:0},{value:"When using a ",paraId:2,tocIndex:2},{value:"SELECT",paraId:2,tocIndex:2},{value:" statement, the query results are stored in the node in Sequelize's JSON format. You can parse and utilize these results through the ",paraId:2,tocIndex:2},{value:"JSON-query",paraId:3,tocIndex:2},{value:" plugin.",paraId:2,tocIndex:2},{value:"No",paraId:4,tocIndex:3},{value:". SQL actions directly execute SQL commands on the database. Actions such as ",paraId:4,tocIndex:3},{value:"CREATE",paraId:4,tocIndex:3},{value:" / ",paraId:4,tocIndex:3},{value:"UPDATE",paraId:4,tocIndex:3},{value:" / ",paraId:4,tocIndex:3},{value:"DELETE",paraId:4,tocIndex:3},{value:" occur in the database, while table events are managed at the Node.js application layer (ORM processing). As a result, these operations do not trigger table events.",paraId:4,tocIndex:3},{value:"This plugin is built-in, so no installation is necessary.",paraId:5,tocIndex:4},{value:'In the workflow configuration interface, click the plus sign (\u201C+\u201D) within the flow to add an "SQL Action" node:',paraId:6,tocIndex:6},{value:"Select the data source for executing the SQL.",paraId:7,tocIndex:8},{value:"The data source must be of a database type, such as the main data source, PostgreSQL type, or any other data source compatible with Sequelize.",paraId:8,tocIndex:8},{value:"Edit the SQL statement. Currently, only one SQL statement is supported.",paraId:9,tocIndex:9},{value:"You can insert required variables by clicking the variable button in the upper right corner of the editor. Before execution, the variables will be replaced with their corresponding values in the text, and the final SQL statement will be sent to the database for querying.",paraId:10,tocIndex:9},{value:"Starting from ",paraId:11,tocIndex:10},{value:"v1.3.15-beta",paraId:11,tocIndex:10},{value:", the result of the SQL node execution is an array consisting purely of data. Prior to this version, the result was a Sequelize native structure that included query metadata (for more details, see: ",paraId:11,tocIndex:10},{value:"sequelize.query()",paraId:11,tocIndex:10},{value:").",paraId:11,tocIndex:10},{value:"For example, the following query:",paraId:12,tocIndex:10},{value:`select count(id) from posts;
`,paraId:13,tocIndex:10},{value:"Result before ",paraId:14,tocIndex:10},{value:"v1.3.15-beta",paraId:14,tocIndex:10},{value:":",paraId:14,tocIndex:10},{value:`[
    [
        { "count": 1 }
    ],
    {
        // meta
    }
]
`,paraId:15,tocIndex:10},{value:"Result after ",paraId:16,tocIndex:10},{value:"v1.3.15-beta",paraId:16,tocIndex:10},{value:":",paraId:16,tocIndex:10},{value:`[
    { "count": 1 }
]
`,paraId:17,tocIndex:10}]},81472:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to ",paraId:0,tocIndex:0},{value:"Subprocess Plugin: Call Workflow",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0}]},190375:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Used to update data records that meet certain conditions in a collection.",paraId:0,tocIndex:0},{value:'The collection and field assignment sections are the same as in the "Create Record" node. The main difference between "Update Record" node and "Create record" node is the filter conditions, and the need to select an update mode. In addition, the update node will return the number of rows of successfully updated data, which can only be viewed in the execution history and cannot be used as a variable in subsequent nodes.',paraId:1,tocIndex:0},{value:'In the workflow configuration UI, click the plus ("+") button in the workflow and add an "Update Record" node:',paraId:2,tocIndex:1},{value:"Select the collection to update record in.",paraId:3,tocIndex:3},{value:'There are "Batch" and "Individual" modes for updating. In batch mode, each record updating will not trigger the collection events; whereas, in individual mode, each record updating could trigger the collection events. However, there may be performance issues with individual updates, especially with large amounts of data, so use with caution. Typically, choose based on the target data to be updated and whether other workflow events need to be triggered. If updating a single data record based on a primary key, it is recommended to use individual updates; if updating multiple data records based on conditions, it is recommended to use batch updates.',paraId:4,tocIndex:4},{value:"Similar to the filter conditions when querying a normal collection, you can use context variables of the workflow.",paraId:5,tocIndex:5},{value:'Similar to the field assignment in the "Create Record" node, you can use variables from the workflow context or manually enter static values.',paraId:6,tocIndex:6},{value:'Note: The update node in the workflow does not automatically handle the "Last Modified By" data; you need to configure the value of this field based on the situation.',paraId:7,tocIndex:6},{value:'For example, when a "Post" created, the "Post Category" collection needs to be automatically updated with the "Post Count" field. This can be achieved using an update node:',paraId:8,tocIndex:7},{value:'When the workflow is triggered, the "Post Count" field in the "Post Category" collection will automatically be updated to the current post count +1.',paraId:9,tocIndex:7}]},257104:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In workflows, variables can be declared or assigned values to existing ones, typically to store temporary data during the process.",paraId:0},{value:'To add a "Variable" node in the workflow configuration interface, click the plus (\u201C+\u201D) button in the process:',paraId:1,tocIndex:2},{value:"Like programming variables, a variable node must first be declared before it can be used or assigned a value. When creating a variable node, you must choose its mode. There are two options:",paraId:2,tocIndex:4},{value:"Declare a new variable: This creates a new variable.",paraId:3,tocIndex:4},{value:"Assign value to an existing variable: This assigns a value to a previously declared variable, effectively updating its value.",paraId:3,tocIndex:4},{value:"If the node being created is the first variable node in the process, only the declare mode is available, as there are no pre-existing variables to assign values to.",paraId:4,tocIndex:4},{value:"When assigning a value to an existing variable, you\u2019ll need to select the target variable, which is the node where the variable was originally declared:",paraId:5,tocIndex:4},{value:"The value of a variable can be of any type\u2014such as a constant (e.g., strings, numbers, booleans, dates) or another variable within the workflow.",paraId:6,tocIndex:5},{value:"In declare mode, setting a variable value is equivalent to assigning it an initial value.",paraId:7,tocIndex:5},{value:"In assign mode, setting a variable value modifies the value of the target variable to the new value, which will be used in subsequent steps.",paraId:8,tocIndex:5},{value:'In nodes following the variable node, you can use the value of the variable by selecting it from the "Node result" group. For example, in a query node, the value of a variable can be used as a query condition:',paraId:9,tocIndex:6},{value:"Variable nodes are particularly useful in branches where new values need to be calculated or combined with existing values (similar to ",paraId:10,tocIndex:7},{value:"reduce",paraId:10,tocIndex:7},{value:" or ",paraId:10,tocIndex:7},{value:"concat",paraId:10,tocIndex:7},{value:" in programming). These values can then be used after the branch ends. The following example demonstrates how to create a concatenated recipient string using loop and variable nodes.",paraId:10,tocIndex:7},{value:'Start by creating a workflow triggered by a data table update. This workflow will be activated when "Article" data is updated, and it preloads the related "Authors" relational data (used to get recipients):',paraId:11,tocIndex:7},{value:"Next, create a variable node to store the recipient string:",paraId:12,tocIndex:7},{value:"Then, create a loop branch node to iterate over the authors of the article and concatenate their details into the recipient variable:",paraId:13,tocIndex:7},{value:"Within the loop branch, first create a Operator node to concatenate the current author with the stored author string:",paraId:14,tocIndex:7},{value:"After the Operator node, create another variable node in assign mode. Select the recipient variable node as the target, and set its value to the result of the Operator node:",paraId:15,tocIndex:7},{value:"When the loop branch ends, the recipient variable will store the concatenated recipient string of all the article's authors. You can then use an HTTP request node after the loop to call the email-sending interface, passing the recipient variable\u2019s value as the recipient parameter:",paraId:16,tocIndex:7},{value:"In this way, a simple bulk email function is implemented using loop and variable nodes.",paraId:17,tocIndex:7}]},781159:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This plugin is designed to execute aggregate function queries on specific data within a table that meets defined conditions, returning the relevant statistical outcomes. It is particularly useful for generating statistical data for reports.",paraId:0},{value:"The node operates using database aggregate functions and currently supports querying a single field within a single data table. The resulting statistics are stored within the node\u2019s output, making them available for subsequent nodes in the workflow.",paraId:1},{value:"This is a built-in plugin, so no installation steps are required.",paraId:2,tocIndex:1},{value:'In the workflow configuration interface, click the plus ("+") button within the process flow to add an "Aggregate Query" node:',paraId:3,tocIndex:3},{value:"This plugin supports five SQL aggregate functions: ",paraId:4,tocIndex:5},{value:"COUNT",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"SUM",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"AVG",paraId:4,tocIndex:5},{value:", ",paraId:4,tocIndex:5},{value:"MIN",paraId:4,tocIndex:5},{value:", and ",paraId:4,tocIndex:5},{value:"MAX",paraId:4,tocIndex:5},{value:". You can select any one of these functions to perform the aggregate query on your data.",paraId:4,tocIndex:5},{value:"There are two methods for selecting the target of the aggregate query. The first is to directly select the target data table and one of its fields. The second is to choose a related data table and field from the existing data objects in the workflow context to perform the aggregate query.",paraId:5,tocIndex:6},{value:"This feature corresponds to the ",paraId:6,tocIndex:7},{value:"DISTINCT",paraId:6,tocIndex:7},{value:" keyword in SQL. The distinct field must be the same as the selected data table field, and currently, different fields cannot be selected for the distinct and target fields.",paraId:6,tocIndex:7},{value:"You can apply filter conditions similar to those in a standard data table query, using the workflow\u2019s context variables.",paraId:7,tocIndex:8},{value:`The aggregate target "Collection Table Data" is quite intuitive, so let's illustrate the usage of the aggregate target as "Related Collection Table Data" with the example of "counting the total number of articles in a category after adding a new article to that category."`,paraId:8,tocIndex:9},{value:'First, create two data tables: "Posts" and "Categories." The "Posts" collection includes a many-to-one relationship field pointing to the "Categories" collection, and a reverse relationship field that allows one category to contain multiple articles:',paraId:9,tocIndex:9},{value:"Field Name",paraId:10,tocIndex:9},{value:"Type",paraId:10,tocIndex:9},{value:"Title",paraId:10,tocIndex:9},{value:"Single Line Text",paraId:10,tocIndex:9},{value:"Category",paraId:10,tocIndex:9},{value:"Many-to-One (Category)",paraId:10,tocIndex:9},{value:"Field Name",paraId:11,tocIndex:9},{value:"Type",paraId:11,tocIndex:9},{value:"Category Name",paraId:11,tocIndex:9},{value:"Single Line Text",paraId:11,tocIndex:9},{value:"Posts",paraId:11,tocIndex:9},{value:"One-to-Many (Articles)",paraId:11,tocIndex:9},{value:'Next, create a workflow triggered by an event in the data table, specifically when new data is added to the "Articles" table.',paraId:12,tocIndex:9},{value:"Then, add an aggregate query node with the following configuration:",paraId:13,tocIndex:9},{value:"Once the workflow is triggered, the aggregate query node will calculate the total number of articles within the category of the newly added article and save this count as the node\u2019s output.",paraId:14,tocIndex:9},{value:'If you need to access related data in a collection table event trigger, ensure you configure the relevant fields for "Preload associations" in the trigger; otherwise, these fields won\u2019t be selectable.',paraId:15}]},63652:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To configure a workflow, go to the management page of the Workflow plugin by accessing the plugin configuration menu in the top navigation bar:",paraId:0,tocIndex:1},{value:"The management page will display all the created workflows:",paraId:1,tocIndex:1},{value:'Click the "Add new" button to create a new workflow and select a collection event:',paraId:2,tocIndex:1},{value:'Click the "Configure" link in the list to enter the workflow configuration page:',paraId:3,tocIndex:1},{value:'Then, click on the trigger card to open the trigger configuration drawer. Select a previously created collection (e.g., "Posts") and choose the trigger condition "After record added", click the "Save" button to complete the trigger configuration:',paraId:4,tocIndex:1},{value:'Next, you can click the plus button in the workflow to add a node. For example, select an calculation node to concatenate the "Title" and "ID" fields of the trigger data:',paraId:5,tocIndex:1},{value:"Click on the node card to open the node configuration drawer. Use the ",paraId:6,tocIndex:1},{value:"CONCATENATE",paraId:6,tocIndex:1},{value:' function provided by Formula.js to concatenate the "Title" and "ID" fields, and insert the fields using the variable selector:',paraId:6,tocIndex:1},{value:'Then create an "Update record" node to save the result to the "Title" field:',paraId:7,tocIndex:1},{value:'Similarly, click on the card to open the configuration drawer of the "Update record" node. Select the "Posts" collection, choose the record ID from the trigger, select the "Title" field to update, and choose the result from the calculation node as the value to update:',paraId:8,tocIndex:1},{value:'Finally, click the "On/Off" switch in the top-right toolbar to switch the workflow to the enabled state. This allows the workflow to be triggered and executed.',paraId:9,tocIndex:1},{value:"Go back to the main pages and create an post using the its data block. Fill in the post title:",paraId:10,tocIndex:2},{value:'After submission and refreshing the block, you will see that the post title has been automatically updated to the form of "Post title + Post ID":',paraId:11,tocIndex:2},{value:"Since workflow triggered in collection will be executed asynchronously, you may not immediately see the updated record on the submission page. However, refreshing the page or block after a moment, updated content will show.",paraId:12},{value:"The workflow we triggered earlier has been successfully executed. We can go back to the workflow management page to view the corresponding execution history:",paraId:13,tocIndex:3},{value:'In the workflow list, you can see that there is one execution in the workflow history. Clicking the number link in the "Executed" column will open the execution history of the corresponding workflow:',paraId:14,tocIndex:3},{value:'Clicking the "View" link will take you to the details page of that particular execution. Here, you can see the execution status and result data of each node:',paraId:15,tocIndex:3},{value:"The context data of trigger and the result data of node can be viewed by clicking the status button in the top right corner of the corresponding card. For example, let's view the result data of an operation node:",paraId:16,tocIndex:3},{value:'You can see that the result data of the calculation node includes the computed title, which is the data updated by the subsequent "Update record" node.',paraId:17,tocIndex:3},{value:"Through the above steps, we have completed the configuration and triggering of a simple workflow, and have also been introduced to the following basic concepts:",paraId:18,tocIndex:4},{value:"Workflow",paraId:19,tocIndex:4},{value:": It defines the basic information of the workflow, including its name, trigger type, and On/Off status. Within a workflow, you can configure multiple nodes. It serves as the container for the process.",paraId:19,tocIndex:4},{value:"Trigger",paraId:19,tocIndex:4},{value:": Each workflow contains a trigger, which can be configured to specific conditions that triggers the workflow. It serves as the entry point of the workflow.",paraId:19,tocIndex:4},{value:"Node",paraId:19,tocIndex:4},{value:": A node is an instruction unit within the workflow that performs specific actions. Multiple nodes within a workflow are interconnected in an upstream and downstream relationship, forming a complete process flow.",paraId:19,tocIndex:4},{value:"Execution",paraId:19,tocIndex:4},{value:": The execution represents the specific objects that are executed after the workflow is triggered. It is also known as execution record or execution history, and it includes information such as the execution status and trigger context data. For each node, there is a corresponding execution result which includes the node's execution status and data.",paraId:19,tocIndex:4},{value:"For more in-depth usage, you can refer to the following resources:",paraId:20,tocIndex:4},{value:`advanced Understanding
`,paraId:21,tocIndex:4},{value:"Using Variables",paraId:22,tocIndex:4},{value:"Execution Plan (History)",paraId:23,tocIndex:4},{value:"Revisions",paraId:24,tocIndex:4},{value:"Advanced Options",paraId:25,tocIndex:4},{value:"Overview of Triggers",paraId:26,tocIndex:4},{value:"Overview of Nodes",paraId:27,tocIndex:4}]},640813:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'To set up an approval workflow, start by selecting the "Approval" type during the workflow creation process:',paraId:0,tocIndex:1},{value:"Next, in the workflow configuration interface, click on the trigger to open a popup window for additional configuration options.",paraId:1,tocIndex:1},{value:"NocoBase\u2019s approval plugin is designed with flexibility in mind, allowing it to be integrated with any custom data collection. This means there\u2019s no need to repeatedly configure the data model for approval processes. Instead, you can reuse existing data collections. When configuring the trigger, the first step is to select a data table to determine which data entries will trigger the workflow upon creation or update:",paraId:2,tocIndex:2},{value:"After selecting the data table, bind the workflow to the submit button in the form used for creating or editing data within the chosen table:",paraId:3,tocIndex:2},{value:"Once the form is submitted, the corresponding approval workflow will be triggered. The submitted data will be saved in the specified data table and also snapshotted within the approval flow for future review by approvers.",paraId:4,tocIndex:2},{value:'If the approval process permits the initiator to withdraw the request, select the "Allowed to be withdrawn" option:',paraId:5,tocIndex:3},{value:"When this option is selected, the initiator can withdraw the approval request at any time before any approver has processed it. However, once any subsequent approval nodes have been processed, the approval can no longer be withdrawn.",paraId:6,tocIndex:3},{value:"Finally, you\u2019ll need to configure the form interface for the initiator. This interface is used when initiating an approval from the Approval Center block or when re-initiating after a withdrawal. Click the configuration button to open a popup window:",paraId:7,tocIndex:4},{value:"You can add a form based on the bound data table or include explanatory text (Markdown) to guide the initiator. A form is required; otherwise, the initiator will not be able to proceed upon entering this interface.",paraId:8,tocIndex:4},{value:"After adding the form block, you can configure the corresponding data table's field components and arrange them as needed to organize the content to be filled out, similar to the regular form configuration interface:",paraId:9,tocIndex:4},{value:"In addition to the submit button, you can also add a \u201CSave Draft\u201D button to support the temporary storage of data during the process:",paraId:10,tocIndex:4},{value:"Except for trigger configuration, there are also some related contents about approval that can be further understood through the ",paraId:11,tocIndex:5},{value:"plugin documentation",paraId:12,tocIndex:5},{value:".",paraId:11,tocIndex:5}]},18290:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Trigger types of collection events will listen for adding, deleting and updating events of the collection. When an action on the record of collection occurs and meets the configured conditions, the corresponding workflow will be triggered. For example, reducing the inventory of goods after adding a new order, waiting for manual review after adding a comment, etc.",paraId:0,tocIndex:0},{value:"There are several types of changes to the collection:",paraId:1,tocIndex:1},{value:"After a record added.",paraId:2,tocIndex:1},{value:"After a record updated.",paraId:2,tocIndex:1},{value:"After a record added or updated.",paraId:2,tocIndex:1},{value:"After a record deleted.",paraId:2,tocIndex:1},{value:"You can choose the timing of the trigger according to the needs of the business. When change type selected that includes updating a record, you can also limit the fields that have changed. Only when the selected fields change will the trigger condition be satisfied. If none are selected, it means that all fields changing will trigger.",paraId:3,tocIndex:1},{value:"In more detail, conditions can be configured for each field of the triggered record. It only triggers when the conditions of the fields are met.",paraId:4,tocIndex:1},{value:"After the collection event is triggered, the source record of the event will be injected into the execution plan as trigger context data for subsequent nodes to use as variables. However, when subsequent nodes need to use the association fields of this record, preloading of the association fields needs to be configured first. The selected association fields will be injected into the context after triggering and can be selected and used by path.",paraId:5,tocIndex:1},{value:"Collection events do not support triggering on batch data action for now. For example, when adding article record and simultaneously adding multiple tag records of the article (many-to-many relationship data), only the workflow for adding the article will be triggered, and the workflows for adding multiple tags simultaneously will not be triggered. For associating or adding of many-to-many association records, the workflow of the intermediate collection will not be triggered either.",paraId:6,tocIndex:3},{value:"Data actions on collections through HTTP API calls to the application interface can also trigger corresponding events. However, if the data changes are not made through the NodoBase application but directly through database operations, the corresponding events will not be triggered. For example, the triggers in the database itself will not be associated with workflows in the application.",paraId:7,tocIndex:4},{value:"Also, using the SQL node to operate on the database is equivalent to directly operating on the database and will not trigger collection events.",paraId:8,tocIndex:4},{value:"from ",paraId:9,tocIndex:5},{value:"0.20",paraId:9,tocIndex:5},{value:", workflow started to support external data sources. If an external data source plugin is used and the collection event is configured for an external data source, as long as the data operation on this data source is completed within the application (user addition, update, and workflow data operations, etc.), the corresponding collection event can be triggered. However, if the data change is made through other systems or directly within the external database, the collection event will not be triggered.",paraId:9,tocIndex:5},{value:"Take an example scenario of calculating the total price and deducting inventory after adding an order.",paraId:10,tocIndex:6},{value:"First, we create the product collection and the order collection, and the data model is as follows:",paraId:11,tocIndex:6},{value:"Field Name",paraId:12,tocIndex:6},{value:"Field Type",paraId:12,tocIndex:6},{value:"Product Name",paraId:12,tocIndex:6},{value:"Single Line Text",paraId:12,tocIndex:6},{value:"Price",paraId:12,tocIndex:6},{value:"Number",paraId:12,tocIndex:6},{value:"Inventory",paraId:12,tocIndex:6},{value:"Integer",paraId:12,tocIndex:6},{value:"Field Name",paraId:13,tocIndex:6},{value:"Field Type",paraId:13,tocIndex:6},{value:"Order Number",paraId:13,tocIndex:6},{value:"Auto Number",paraId:13,tocIndex:6},{value:"Order Product",paraId:13,tocIndex:6},{value:"Many-to-One (Product)",paraId:13,tocIndex:6},{value:"Order Total Price",paraId:13,tocIndex:6},{value:"Number",paraId:13,tocIndex:6},{value:"And add basic product data:",paraId:14,tocIndex:6},{value:"Product Name",paraId:15,tocIndex:6},{value:"Price",paraId:15,tocIndex:6},{value:"Inventory",paraId:15,tocIndex:6},{value:"iPhone 14 Pro",paraId:15,tocIndex:6},{value:"7999",paraId:15,tocIndex:6},{value:"10",paraId:15,tocIndex:6},{value:"iPhone 13 Pro",paraId:15,tocIndex:6},{value:"5999",paraId:15,tocIndex:6},{value:"0",paraId:15,tocIndex:6},{value:"Then create a workflow based on the collection event of the order:",paraId:16,tocIndex:6},{value:"Several configuration items:",paraId:17,tocIndex:6},{value:'Data collection: Select the "Order" table.',paraId:18,tocIndex:6},{value:'Trigger on: Select "After Adding Data" trigger.',paraId:18,tocIndex:6},{value:"Condition: Leave it blank.",paraId:18,tocIndex:6},{value:'Preload associations: Check "Product".',paraId:18,tocIndex:6},{value:"Then configure other nodes based on the logic of the workflow, check if the product inventory is greater than 0, and deduct inventory if it is, otherwise delete the order as it is invalid:",paraId:19,tocIndex:6},{value:"The configuration of the nodes will be detailed in the documentation of the specific types.",paraId:20,tocIndex:6},{value:'Enable the workflow and test by adding an order through the UI. After placing an order for "iPhone 14 Pro", the inventory of the corresponding product will be reduced to 9. However, if an order is placed for "iPhone 13 Pro", the order will be deleted due to insufficient inventory.',paraId:21,tocIndex:6}]},654705:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'When setting up a workflow, begin by selecting "Custom action event":',paraId:0,tocIndex:1},{value:"v.1.6.0+",paraId:1,tocIndex:3},{value:"Different context types determine where the workflow can be bound to buttons in different blocks:",paraId:2,tocIndex:3},{value:"None: A global event that can be bound to action buttons in the action panel and other data blocks.",paraId:3,tocIndex:3},{value:"Single record: Can be bound to action buttons in data blocks such as table rows, forms, and details.",paraId:3,tocIndex:3},{value:"Multiple records: Can be bound to batch operation buttons in the table block.",paraId:3,tocIndex:3},{value:"When the context type is single record or multiple records, you'll need to choose the collection that will be associated with your data model:",paraId:4,tocIndex:4},{value:"If your workflow requires the use of related data from the triggered data row, you can select the necessary deep relationship fields here:",paraId:5,tocIndex:5},{value:"These fields will be automatically preloaded into the workflow's context once the event is triggered, making them available for use within the workflow.",paraId:6,tocIndex:5},{value:"Except for trigger configuration, there are also some related contents about custom action trigger that can be further understood through the ",paraId:7,tocIndex:6},{value:"plugin documentation",paraId:8,tocIndex:6},{value:".",paraId:7,tocIndex:6}]},603438:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Triggers are the entry points for workflow execution. When an event that meets the trigger conditions occurs during the application runtime, the workflow will be triggered. The type of trigger is also the type of workflow, chosen when creating the workflow and cannot be modified afterward. The currently supported trigger types are as follows:",paraId:0,tocIndex:0},{value:"Collection Events",paraId:1,tocIndex:0},{value:" (built-in)",paraId:2,tocIndex:0},{value:"Scheduled Tasks",paraId:3,tocIndex:0},{value:" (built-in)",paraId:2,tocIndex:0},{value:"Pre-Action Events",paraId:4,tocIndex:0},{value:" (provided by plugin @nocobase/plugin-workflow-request-interceptor)",paraId:2,tocIndex:0},{value:"Custom Action Events",paraId:5,tocIndex:0},{value:" (provided by plugin @nocobase/plugin-workflow-custom-action-trigger)",paraId:2,tocIndex:0},{value:"Post-Action Events",paraId:6,tocIndex:0},{value:" (provided by plugin @nocobase/plugin-workflow-action-trigger)",paraId:2,tocIndex:0},{value:"Approval",paraId:7,tocIndex:0},{value:" (provided by plugin @nocobase/plugin-workflow-approval)",paraId:2,tocIndex:0},{value:"Webhook",paraId:8,tocIndex:0},{value:" (provided by plugin @nocobase/plugin-workflow-webhook)",paraId:2,tocIndex:0},{value:"The timing of each event trigger type is shown in the following diagram:",paraId:9,tocIndex:0},{value:"For example, when a user submits a form, or data in a collection changes due to user action or program calls, or when a task reaches its scheduled time, the corresponding workflow will be triggered.",paraId:10,tocIndex:0},{value:"Triggers related to data (such as actions, collection events) usually carry trigger context data. This data can be referenced in the nodes of the workflow to achieve automated data processing. For instance, when a user submits a form bound to a workflow, the submitted data will be injected into the context environment of the execution plan, allowing subsequent nodes to use it as variables.",paraId:11,tocIndex:0},{value:"After creating a workflow, the trigger will appear as an entry node at the beginning of the flow on the workflow view page. Click the card to open the configuration drawer. Depending on the trigger type, relevant conditions can be configured.",paraId:12,tocIndex:0}]},914491:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'To create a workflow, begin by selecting "Post-action Event" as the type:',paraId:0,tocIndex:1},{value:'When setting up post-action events, you have the option to choose between "Synchronous" and "Asynchronous" execution modes:',paraId:1,tocIndex:2},{value:"Use the synchronous mode if the process needs to execute and provide feedback immediately after a user operation. For other scenarios, the default asynchronous mode is generally suitable. In asynchronous mode, the user operation completes instantly, and the workflow continues to execute in the background as part of a queued process.",paraId:2,tocIndex:2},{value:"To begin configuration, navigate to the workflow canvas and click on the trigger to open the settings window. The first step is to select the data table that you wish to bind:",paraId:3,tocIndex:3},{value:"Next, determine the trigger mode by choosing between Local Mode and Global Mode:",paraId:4,tocIndex:4},{value:"Local Mode",paraId:5,tocIndex:4},{value:": This mode triggers the workflow only on the action buttons that have been explicitly bound to it. If the workflow is not bound, clicking the button will not initiate the workflow. This mode is ideal when you want to tailor the workflow to specific forms or actions.",paraId:5,tocIndex:4},{value:"Global Mode",paraId:5,tocIndex:4},{value:": In this mode, the workflow is triggered by any action button configured within the data table, regardless of the form's origin, and does not require specific workflow binding.",paraId:5,tocIndex:4},{value:"In Local Mode, you can currently bind the following action buttons:",paraId:6,tocIndex:4},{value:'The "Submit" and "Save" buttons in new forms.',paraId:7,tocIndex:4},{value:'The "Submit" and "Save" buttons in update forms.',paraId:7,tocIndex:4},{value:'The "Update Data" button within data rows (such as in tables, lists, or kanban views).',paraId:7,tocIndex:4},{value:'When using Global Mode, you also need to specify the action type. The available options are "Create record action" and "Update record action." The workflow is triggered upon the successful completion of either operation.',paraId:8,tocIndex:5},{value:"If subsequent workflow steps require the use of related data from the trigger, you can select the relationship fields to preload:",paraId:9,tocIndex:6},{value:"These preloaded related data will then be readily accessible throughout the workflow after it is triggered.",paraId:10,tocIndex:6},{value:"Except for trigger configuration, there are also some related contents about post-action trigger that can be further understood through the ",paraId:11,tocIndex:7},{value:"plugin documentation",paraId:12,tocIndex:7},{value:".",paraId:11,tocIndex:7}]},628639:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'When setting up a workflow, select "Pre-action event" as the event type:',paraId:0,tocIndex:1},{value:"The first step in configuring a trigger for intercepting workflows is to select the data table associated with the action:",paraId:1,tocIndex:2},{value:"Next, choose the intercept mode. You can either intercept only the action buttons linked to this workflow or intercept all selected actions for the data table (regardless of the form the action originates from and without needing to bind the corresponding workflow):",paraId:2,tocIndex:2},{value:'Currently, the supported action types include "Create," "Update," and "Delete." You can select multiple action types simultaneously.',paraId:3,tocIndex:3},{value:"Except for trigger configuration, there are also some related contents about pre-action trigger that can be further understood through the ",paraId:4,tocIndex:4},{value:"plugin documentation",paraId:5,tocIndex:4},{value:".",paraId:4,tocIndex:4}]},576105:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Scheduled tasks are events triggered based on time conditions, including two modes:",paraId:0,tocIndex:0},{value:"Custom Time: Regularly scheduled triggers similar to cron based on system time.",paraId:1,tocIndex:0},{value:"Time field of collection: Triggered according to the value of the time field in the collection.",paraId:1,tocIndex:0},{value:"When the system reaches the time (accurate to seconds) that meets the configured trigger conditions, the corresponding workflow will be triggered.",paraId:2,tocIndex:0},{value:'Select the "Schedule event" type when creating a workflow in the workflow list:',paraId:3,tocIndex:2},{value:"For the regular mode, start by configuring the start time to any point in time (accurate to seconds). The start time can be set to a future time or a past time. When set to a past time, it will check whether it is time based on the configured repeat condition. If no repeat condition is configured, the workflow will not be triggered if the start time is in the past.",paraId:4,tocIndex:3},{value:"There are two ways to configure repeat rules:",paraId:5,tocIndex:3},{value:"Interval Time: Trigger every fixed interval after the start time, such as every hour, every 30 minutes, etc.",paraId:6,tocIndex:3},{value:"Advanced Mode: Using cron rules, it can be configured to occur at fixed rule of dates and times.",paraId:6,tocIndex:3},{value:"After configuring the repeat rule, you can also configure the end condition, which can end at a fixed point in time or by the number of times executed.",paraId:7,tocIndex:3},{value:"Using the time field of the collection to determine the start time is a trigger mode that combines ordinary scheduled tasks with the collection time field. Using this mode can simplify some nodes in specific processes and make the configuration more intuitive. For example, to change the status of orders that have not been paid for more than 30 minutes to canceled, you can simply configure a scheduled task in the collection time field mode, select the start time as 30 minutes after the order created time field.",paraId:8,tocIndex:4},{value:"If the configured time conditions are met but the entire NocoBase application service is in a stopped or shutdown state, the scheduled tasks that should be triggered at the corresponding time point will be missed, and after the service restarts, missed tasks will not be triggered again. So, it may be necessary to consider handling corresponding situations or backup measures when using it.",paraId:9,tocIndex:6},{value:"When the repeat count is configured in the end condition, it calculates the total number of executions of the same workflow including all versions. For example, if a scheduled task has been executed 10 times in version 1, and the repeat count is also set to 10 times, the workflow will no longer be triggered. Even if it is copied to a new version, it will not be triggered unless the repeat count is modified to a number greater than 10. However, if it is duplicated to a new workflow, the number of executions will be recalculated from 0. Without modifying the relevant configuration, the new workflow can be triggered 10 more times.",paraId:10,tocIndex:7},{value:"The interval time in the repeat rule is relative to the time point of the previous trigger (start time), while the advanced mode triggers at fixed time points. For example, if it is configured to trigger every 30 minutes, and the last trigger is at 2021-09-01 12:01:23, the next trigger time will be 2021-09-01 12:31:23. The advanced mode, same as cron, configures rules to trigger at fixed time points, for example, it can be configured to trigger at 01 and 31 minutes past every hour.",paraId:11,tocIndex:8},{value:"Suppose we want to check orders that have not been paid for more than 30 minutes every minute and automatically change their status to canceled. We'll implement it using both modes.",paraId:12,tocIndex:9},{value:'Create a workflow based on a scheduled task, select the "Custom Time" mode in the trigger configuration, choose any time point not later than the current time as the start time, select "Every Minute" for the repeat rule, and leave the end condition blank:',paraId:13,tocIndex:10},{value:"Then, configure other nodes according to the logic of the workflow, calculating a time 30 minutes before current system time, and updating the status to canceled if unpaid which created before then:",paraId:14,tocIndex:10},{value:"After enabling the workflow, it will trigger every minute from the start time, calculate 30 minutes before now, and update the status of orders created before that time to canceled.",paraId:15,tocIndex:10},{value:'Create a workflow based on a scheduled task, select the "Collection Time Field" mode in the trigger configuration, choose the "Orders" collection, select 30 minutes after the order created time as the start time, and choose "No Repeat" for the repeat rule:',paraId:16,tocIndex:11},{value:'Then, configure other nodes according to the logic of the workflow, update orders with the ID of the triggered data and the status "Unpaid" to canceled:',paraId:17,tocIndex:11},{value:"Unlike the custom time mode, there is no need to calculate 30 minutes before, because the triggered data context in the workflow contains the corresponding data record that meet the time conditions, so you can directly update the status of the corresponding orders.",paraId:18,tocIndex:11}]},345585:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The Webhook trigger provides a system-generated URL for third-party systems to call via HTTP POST requests. This URL triggers workflow execution when specific events occur, such as payment callbacks or notifications.",paraId:0},{value:'Create a workflow, select "Webhook Event" as the workflow type:',paraId:1,tocIndex:2},{value:'The key difference between "Synchronous" and "Asynchronous" workflows lies in their response behavior. Synchronous workflows wait until the workflow execution is complete before returning a response. In contrast, asynchronous workflows immediately return a pre-configured response, then execute the workflow in the background.',paraId:2},{value:"The URL is automatically generated and tied to the workflow. Use the copy button to paste the URL into the third-party system.",paraId:3,tocIndex:4},{value:"HTTP requests must use the POST method. Other methods return a ",paraId:4,tocIndex:4},{value:"405",paraId:4,tocIndex:4},{value:" error.",paraId:4,tocIndex:4},{value:"Basic HTTP authentication is supported. By enabling this option and setting a username and password, you can secure the Webhook. The third-party system must include the username and password in the Webhook URL for authentication (Criteria Detail: ",paraId:5,tocIndex:5},{value:"MDN: HTTP authentication",paraId:5,tocIndex:5},{value:").",paraId:5,tocIndex:5},{value:"When the user name and password are set, the system checks whether the user name and password in the request match, and returns a ",paraId:6,tocIndex:5},{value:"401",paraId:6,tocIndex:5},{value:" error when no match is provided or no match is provided.",paraId:6,tocIndex:5},{value:"Data in HTTP requests must be parsed to make it usable in Workflow. Parsed data is available as variables in subsequent nodes.",paraId:7,tocIndex:6},{value:"Parsing an HTTP request is divided into three parts:",paraId:8,tocIndex:6},{value:"Request Headers",paraId:9,tocIndex:6},{value:"Headers are simple key-value pairs in string format. Specify the fields you need, such as ",paraId:10,tocIndex:6},{value:"Date",paraId:10,tocIndex:6},{value:" , ",paraId:10,tocIndex:6},{value:"X-Request-Id",paraId:10,tocIndex:6},{value:", etc.",paraId:10,tocIndex:6},{value:"Request Parameters",paraId:11,tocIndex:6},{value:"Request parameter is the URL of query parameters, such as ",paraId:12,tocIndex:6},{value:"http://localhost:13000/api/webhook:trigger/1hfmkioou0d? query=1",paraId:12,tocIndex:6},{value:"  'query' parameter. Paste the complete URL sample or query only the parameter part of the sample and click the parse button to automatically parse the key-value pairs.",paraId:12,tocIndex:6},{value:"Automatic parsing converts the parameter portion of the URL into a JSON structure, and generates a path based on the parameter hierarchy such as ",paraId:13,tocIndex:6},{value:"query[0]",paraId:13,tocIndex:6},{value:", ",paraId:13,tocIndex:6},{value:"query[0].a",paraId:13,tocIndex:6},{value:", etc. The path name can be manually modified if it does not meet the requirements, but usually does not need to be modified. Aliases are optional for displaying the name of a variable when used as a variable. At the same time, all parameter tables in the sample are generated. If there are unnecessary parameters, you can delete them.",paraId:13,tocIndex:6},{value:"Request Body",paraId:14,tocIndex:6},{value:"The request Body is the body of the HTTP request. Currently, only the request body in Content-Type format application/json is supported. You can directly configure the path to be parsed, or enter a JSON example and click the parse button for automatic parsing.",paraId:15,tocIndex:6},{value:"Automatic parsing JSON structure will be the key/value pair into paths, such as ",paraId:16,tocIndex:6},{value:'{" a ": 1," b ": {" c" : 2}}',paraId:16,tocIndex:6},{value:" generates ",paraId:16,tocIndex:6},{value:"a",paraId:16,tocIndex:6},{value:", ",paraId:16,tocIndex:6},{value:"b",paraId:16,tocIndex:6},{value:", ",paraId:16,tocIndex:6},{value:"b.c",paraId:16,tocIndex:6},{value:" path, etc. Aliases are optional for displaying the name of a variable when used as a variable. At the same time, all parameter tables in the sample are generated. If there are unnecessary parameters, you can delete them.",paraId:16,tocIndex:6},{value:"The response part of Webhook is configured differently in synchronous and asynchronous workflows. The asynchronous workflows are directly configured in the trigger. After receiving the Webhook request, the response configuration in the trigger is immediately returned to the third-party system before the workflow is executed. Synchronous workflows need to be handled in the process by adding response nodes as required by the business (Detail: [Response nodes](#response nodes)).",paraId:17,tocIndex:7},{value:"Typically, the response to an asynchronously triggered Webhook event has a status code of ",paraId:18,tocIndex:7},{value:"200",paraId:18,tocIndex:7},{value:" and a response body of ",paraId:18,tocIndex:7},{value:"ok",paraId:18,tocIndex:7},{value:". You can also customize the status code, response header, and response body of the response.",paraId:18,tocIndex:7},{value:"It is only supported for use in synchronous mode Webhook workflows for responses returned to third-party systems. For example, if there is an unexpected result (such as an error or failure) during the processing of a payment callback, the response node can return an error response to the third-party system so that some third-party systems can retry later according to the status.",paraId:19,tocIndex:8},{value:"In addition, the execution of the response node terminates the execution of the workflow, and subsequent nodes do not execute. If the entire workflow is not configured with a response node, the system will automatically respond according to the state of the process execution, returning ",paraId:20,tocIndex:8},{value:"200",paraId:20,tocIndex:8},{value:" for successful execution and ",paraId:20,tocIndex:8},{value:"500",paraId:20,tocIndex:8},{value:" for failed execution.",paraId:20,tocIndex:8},{value:'In the workflow configuration interface, click the plus sign ("+") button in the process to add the "Response" node:',paraId:21,tocIndex:9},{value:"Variables in the workflow context can be used in the response body.",paraId:22,tocIndex:10},{value:"In the Webhook workflow in synchronous mode, different responses can be returned according to different business conditions, as shown in the figure below:",paraId:23,tocIndex:11},{value:"Check whether a service status is satisfied through the conditional branch node. If yes, a success message is displayed. Otherwise, a failure message is displayed.",paraId:24,tocIndex:11}]},745606:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},962879:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u76EE\u524D\uFF0CNocoBase \u56FE\u8868\u533A\u5757\u9700\u8981\u901A\u8FC7\u914D\u7F6E\u6587\u4EF6\u6216\u7F16\u5199\u4EE3\u7801\u6765\u5B9E\u73B0\u3002\u56FE\u8868\u5E93\u4F7F\u7528\u7684\u662F ",paraId:0,tocIndex:0},{value:"g2plot",paraId:0,tocIndex:0},{value:"\uFF0C\u7406\u8BBA\u4E0A\u652F\u6301 ",paraId:0,tocIndex:0},{value:"https://g2plot.antv.vision/en/examples",paraId:0,tocIndex:0},{value:" \u4E0A\u7684\u6240\u6709\u56FE\u8868\u3002\u76EE\u524D\u53EF\u4EE5\u914D\u7F6E\u7684\u56FE\u8868\u5305\u62EC\uFF1A",paraId:0,tocIndex:0},{value:"\u67F1\u72B6\u56FE",paraId:1,tocIndex:0},{value:"\u6761\u5F62\u56FE",paraId:1,tocIndex:0},{value:"\u6298\u7EBF\u56FE",paraId:1,tocIndex:0},{value:"\u997C\u56FE",paraId:1,tocIndex:0},{value:"\u9762\u79EF\u56FE",paraId:1,tocIndex:0},{value:"\u521D\u59CB\u5316\u7684\u56FE\u8868\u914D\u7F6E\u662F\u9759\u6001\u7684 JSON \u6570\u636E",paraId:2,tocIndex:2},{value:`{
  "data": [
    {
      "type": "furniture & appliances",
      "sales": 38
    },
    {
      "type": "\u98DF\u54C1\u6CB9\u526F\u98DF",
      "sales": 52
    },
    {
      "type": "Fresh Fruit",
      "sales": 61
    },
    {
      "type": "\u7F8E\u5BB9\u6D17\u62A4",
      "sales": 145
    },
    {
      "type": "Maternity & Baby Products",
      "sales": 48
    },
    {
      "type": "Imported Food",
      "sales": 38
    },
    {
      "type": "Food & Beverage",
      "sales": 38
    },
    {
      "type": "Home Cleaning",
      "sales": 38
    }
  ],
  "xField": "type",
  "yField": "sales",
  "label": {
    "position": "middle",
    "style": {
      "fill": "#FFFFFF",
      "opacity": 0.6
    }
  },
  "xAxis": {
    "label": {
      "autoHide": true,
      "autoRotate": false
    }
  },
  "meta": {
    "type": {
      "alias": "category"
    },
    "sales": {
      "alias": "sales"
    }
  }
}
`,paraId:3,tocIndex:2},{value:"data \u652F\u6301\u8868\u8FBE\u5F0F\u7684\u5199\u6CD5\uFF0CNocoBase \u5185\u7F6E\u4E86 ",paraId:4,tocIndex:2},{value:"requestChartData(config)",paraId:4,tocIndex:2},{value:" \u51FD\u6570\uFF0C\u7528\u4E8E\u81EA\u5B9A\u4E49\u56FE\u8868\u6570\u636E\u7684\u8BF7\u6C42\u3002Config \u53C2\u6570\u8BF4\u660E\u89C1\uFF1A ",paraId:4,tocIndex:2},{value:"https://github.com/axios/axios#request-config",paraId:4,tocIndex:2},{value:"\u793A\u4F8B\uFF1A",paraId:5,tocIndex:2},{value:`{
  "data": "{{requestChartData({ url: 'collectionName:getColumnChartData' })}}",
  "xField": "type",
  "yField": "sales",
  "label": {
    "position": "middle",
    "style": {
      "fill": "#FFFFFF",
      "opacity": 0.6
    }
  },
  "xAxis": {
    "label": {
      "autoHide": true,
      "autoRotate": false
    }
  },
  "meta": {
    "type": {
      "alias": "category"
    },
    "sales": {
      "alias": "sales"
    }
  }
}
`,paraId:6,tocIndex:2},{value:"HTTP API \u793A\u4F8B\uFF1A",paraId:7,tocIndex:2},{value:`GET /api/collectionName:getColumnChartData

Response Body
{
    "data": [
    {
      "type": "furniture & appliances",
      "sales": 38
    },
    {
      "type": "\u98DF\u54C1\u6CB9\u526F\u98DF",
      "sales": 52
    },
    {
      "type": "Fresh Fruit",
      "sales": 61
    },
    {
      "type": "\u7F8E\u5BB9\u6D17\u62A4",
      "sales": 145
    },
    {
      "type": "Maternity & Baby Products",
      "sales": 48
    },
    {
      "type": "Imported Food",
      "sales": 38
    },
    {
      "type": "Food & Beverage",
      "sales": 38
    },
    {
      "type": "Home Cleaning",
      "sales": 38
    }
  ]
}

`,paraId:8,tocIndex:2},{value:"\u4E3A\u540D\u4E3A collectionName \u7684\u6570\u636E\u8868\uFF0C\u6DFB\u52A0\u81EA\u5B9A\u4E49\u7684 getColumnChartData \u65B9\u6CD5\uFF1A",paraId:9,tocIndex:3},{value:`app.resourcer.registerActionHandlers({
  'collectionName:getColumnChartData': (ctx, next) => {
    // The data to be output
    ctx.body = [];
    await next();
  },
});

`,paraId:10,tocIndex:3},{value:`
  `,paraId:11},{value:`
  `,paraId:11},{value:"\u7406\u8BBA\u4E0A\u652F\u6301 ",paraId:12,tocIndex:7},{value:"https://g2plot.antv.vision/en/examples",paraId:12,tocIndex:7},{value:" \u4E0A\u7684\u6240\u6709\u56FE\u8868",paraId:12,tocIndex:7},{value:`
  `,paraId:11},{value:"Syntax",paraId:13,tocIndex:8},{value:`{
  "key1": "{{ js expression }}"
}
`,paraId:14,tocIndex:8},{value:`
  `,paraId:11}]},309063:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"MySQL \u6570\u636E\u5E93\u9ED8\u8BA4\u6CA1\u6709\u5F00\u542F federated \u6A21\u5757\uFF0C\u9700\u8981\u4FEE\u6539 my.cnf \u914D\u7F6E\uFF0C\u5982\u679C\u662F docker \u7248\u672C\uFF0C\u53EF\u4EE5\u901A\u8FC7 volumes \u6765\u5904\u7406\u6269\u5C55\u7684\u60C5\u51B5\uFF1A",paraId:0,tocIndex:0},{value:`mysql:
  image: mysql:8.1.0
  volumes:
    - ./storage/mysql-conf:/etc/mysql/conf.d
  environment:
    MYSQL_DATABASE: nocobase
    MYSQL_USER: nocobase
    MYSQL_PASSWORD: nocobase
    MYSQL_ROOT_PASSWORD: nocobase
  restart: always
  networks:
    - nocobase
`,paraId:1,tocIndex:0},{value:"\u65B0\u5EFA ",paraId:2,tocIndex:0},{value:"./storage/mysql-conf/federated.cnf",paraId:2,tocIndex:0},{value:" \u6587\u4EF6",paraId:2,tocIndex:0},{value:`[mysqld]
federated
`,paraId:3,tocIndex:0},{value:"\u91CD\u542F mysql",paraId:4,tocIndex:0},{value:`docker compose up -d mysql
`,paraId:5,tocIndex:0},{value:"\u67E5\u770B federated \u662F\u5426\u5DF2\u7ECF\u6FC0\u6D3B",paraId:6,tocIndex:0},{value:`show engines
`,paraId:7,tocIndex:0}]},99893:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u57FA\u4E8E\u6570\u636E\u5E93\u7684 foreign data wrapper \u5B9E\u73B0\u7684\u8FDE\u63A5\u8FDC\u7A0B\u6570\u636E\u8868\u7684\u529F\u80FD\u63D2\u4EF6\u3002\u76EE\u524D\u652F\u6301 MySQL \u548C PostgreSQL \u6570\u636E\u5E93\u3002",paraId:0,tocIndex:1},{value:"MySQL \u901A\u8FC7 ",paraId:1,tocIndex:2},{value:"federated",paraId:1,tocIndex:2},{value:" \u5F15\u64CE\uFF0C\u9700\u8981\u6FC0\u6D3B\uFF0C\u652F\u6301\u8FDE\u63A5\u8FDC\u7A0B MySQL \u53CA\u5176\u534F\u8BAE\u517C\u5BB9\u6570\u636E\u5E93\uFF0C\u5982 MariaDB\u3002\u8BE6\u60C5\u6587\u6863\u53C2\u8003 ",paraId:1,tocIndex:2},{value:"Federated Storage Engine",paraId:1,tocIndex:2},{value:"\u3002",paraId:1,tocIndex:2},{value:"\u5728 PostgreSQL \u4E2D\uFF0C\u53EF\u901A\u8FC7\u4E0D\u540C\u7C7B\u578B\u7684 ",paraId:2,tocIndex:3},{value:"fdw",paraId:2,tocIndex:3},{value:" \u6269\u5C55\u6765\u652F\u6301\u4E0D\u540C\u7684\u8FDC\u7A0B\u6570\u636E\u7C7B\u578B\uFF0C\u76EE\u524D\u652F\u6301\u7684\u6269\u5C55\u6709\uFF1A",paraId:2,tocIndex:3},{value:"postgres_fdw",paraId:3,tocIndex:3},{value:"\uFF1A\u5728 PostgreSQL \u4E2D\u8FDE\u63A5\u8FDC\u7A0B PostgreSQL \u6570\u636E\u5E93\u3002",paraId:3,tocIndex:3},{value:"mysql_fdw(\u5F00\u53D1\u4E2D)",paraId:3,tocIndex:3},{value:"\uFF1A\u5728 PostgreSQL \u4E2D\u8FDE\u63A5\u8FDC\u7A0B MySQL \u6570\u636E\u5E93\u3002",paraId:3,tocIndex:3},{value:"\u5176\u4F59\u7C7B\u578B\u7684 fdw \u6269\u5C55\uFF0C\u53EF\u53C2\u8003 ",paraId:3,tocIndex:3},{value:"PostgreSQL Foreign Data Wrappers",paraId:3,tocIndex:3},{value:"\uFF0C\u63A5\u5165 NocoBase \u9700\u8981\u5728\u4EE3\u7801\u4E2D\u5B9E\u73B0\u76F8\u5E94\u7684\u9002\u914D\u63A5\u53E3\u3002",paraId:3,tocIndex:3},{value:"\u524D\u63D0\u6761\u4EF6",paraId:4,tocIndex:4},{value:"\u672C\u5730 MySQL\uFF08NocoBase \u4F7F\u7528\u7684\u6570\u636E\u5E93\uFF09\u9700\u8981\u6FC0\u6D3B ",paraId:5,tocIndex:4},{value:"federated",paraId:5,tocIndex:4},{value:"\uFF0C\u53C2\u8003 ",paraId:5,tocIndex:4},{value:"MySQL \u5982\u4F55\u542F\u7528 federated \u5F15\u64CE",paraId:6,tocIndex:4},{value:"\u7136\u540E\u901A\u8FC7\u63D2\u4EF6\u7BA1\u7406\u5668\u5B89\u88C5\u5E76\u6FC0\u6D3B\u63D2\u4EF6",paraId:7,tocIndex:4},{value:"\u5728\u300C\u6570\u636E\u8868\u7BA1\u7406 > \u521B\u5EFA\u6570\u636E\u8868\u300D \u4E0B\u62C9\u4E2D\uFF0C\u9009\u62E9\u300C\u8FDE\u63A5\u5916\u90E8\u6570\u636E\u300D",paraId:8,tocIndex:5},{value:"\u5728\u300C\u6570\u636E\u5E93\u670D\u52A1\u300D\u4E0B\u62C9\u9009\u9879\u4E2D\uFF0C\u9009\u62E9\u5DF2\u5B58\u5728\u7684\u6570\u636E\u5E93\u670D\u52A1\uFF0C\u6216\u8005\u300C\u521B\u5EFA\u6570\u636E\u5E93\u670D\u52A1\u300D",paraId:9,tocIndex:5},{value:"\u521B\u5EFA\u6570\u636E\u5E93\u670D\u52A1",paraId:10,tocIndex:5},{value:"\u9009\u62E9\u6570\u636E\u5E93\u670D\u52A1\u4E4B\u540E\uFF0C \u5728\u300C\u8FDC\u7A0B\u8868\u300D\u7684\u4E0B\u62C9\u9009\u9879\u4E2D\uFF0C\u9009\u62E9\u9700\u8981\u8FDE\u63A5\u7684\u6570\u636E\u8868\u3002",paraId:11,tocIndex:5},{value:"\u914D\u7F6E\u5B57\u6BB5\u4FE1\u606F",paraId:12,tocIndex:5},{value:"\u5982\u679C\u8FDC\u7A0B\u8868\u6709\u7ED3\u6784\u53D8\u5316\uFF0C\u4E5F\u53EF\u4EE5\u300C\u4ECE\u8FDC\u7A0B\u8868\u540C\u6B65\u300D",paraId:13,tocIndex:5},{value:"\u8FDC\u7A0B\u8868\u540C\u6B65",paraId:14,tocIndex:5},{value:"\u6700\u540E\uFF0C\u5728\u754C\u9762\u91CC\u663E\u793A",paraId:15,tocIndex:5}]},352822:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u65E5\u5386\u6570\u636E\u8868\u6A21\u677F\u662F\u4E00\u79CD\u7528\u4E8E\u7BA1\u7406\u65F6\u95F4\u76F8\u5173\u6570\u636E\u7684\u6570\u636E\u6A21\u677F\uFF0C\u901A\u5E38\u7528\u4E8E\u5B58\u50A8\u548C\u7BA1\u7406\u4E8B\u4EF6\u3001\u7EA6\u4F1A\u3001\u4EFB\u52A1\u7B49\u4E0E\u65E5\u671F/\u65F6\u95F4\u76F8\u5173\u7684\u4FE1\u606F\u3002\u4EE5\u4E0B\u662F\u65E5\u5386\u6570\u636E\u8868\u6A21\u677F\u7684\u9884\u5B9A\u4E49\u5B57\u6BB5\uFF1A",paraId:0,tocIndex:0},{value:"\u521B\u5EFA\u65F6\u95F4\u548C\u7ED3\u675F\u65F6\u95F4\uFF1A\u8868\u793A\u4E8B\u4EF6\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65E5\u671F\u53CA\u65F6\u95F4\u3002",paraId:1,tocIndex:0},{value:"\u521B\u5EFA\u8005\u548C\u66F4\u65B0\u8005\uFF1A\u5217\u51FA\u4E8B\u4EF6\u7684\u4EBA\u5458\u3002",paraId:1,tocIndex:0},{value:"\u91CD\u590D\u9891\u7387\uFF1A\u5B9A\u4E49\u4E8B\u4EF6\u7684\u91CD\u590D\u6A21\u5F0F\uFF0C\u5982\u6BCF\u5929\u3001\u6BCF\u5468\u3001\u6BCF\u6708\u7B49\u3002",paraId:1,tocIndex:0},{value:"\u901A\u8FC7\u65E5\u5386\u6570\u636E\u8868\u6A21\u677F\uFF0C\u53EF\u4EE5\u65B9\u4FBF\u5730\u521B\u5EFA\u548C\u7BA1\u7406\u4E0E\u65F6\u95F4\u76F8\u5173\u7684\u4FE1\u606F\uFF0C\u5E76\u652F\u6301\u65E5\u7A0B\u5B89\u6392\u3001\u63D0\u9192\u548C\u8DDF\u8E2A\u4EFB\u52A1\u7684\u8FDB\u5EA6\u3002\u8FD9\u79CD\u6A21\u677F\u5E38\u7528\u4E8E\u4E2A\u4EBA\u65E5\u7A0B\u7BA1\u7406\u3001\u56E2\u961F\u534F\u4F5C\u3001\u4F1A\u8BAE\u5B89\u6392\u7B49\u5E94\u7528",paraId:2,tocIndex:0}]},263869:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u533A\u522B\u4E8E\u6570\u636E\u8868\u4E2D\u9488\u5BF9\u5168\u8868\u7EDF\u4E00\u7684\u516C\u5F0F\u5B57\u6BB5\uFF0C\u52A8\u6001\u8868\u8FBE\u5F0F\u7684\u53EF\u4EE5\u9488\u5BF9\u6BCF\u884C\u6570\u636E\u8FDB\u884C\u4E0D\u540C\u516C\u5F0F\u7684\u8BA1\u7B97\u3002\u52A8\u6001\u8868\u8FBE\u5F0F\u8BA1\u7B97\u76EE\u524D",paraId:0,tocIndex:1},{value:"\u53EA\u5728\u5DE5\u4F5C\u6D41\u4E2D\u652F\u6301",paraId:0,tocIndex:1},{value:"\u3002",paraId:0,tocIndex:1},{value:"\u8868\u8FBE\u5F0F\u6A21\u677F\u8868\u7528\u4E8E\u5B58\u50A8\u9488\u5BF9\u540C\u4E00\u7C7B\u6570\u636E\u4E0D\u540C\u7684\u516C\u5F0F\uFF0C\u4E0E\u9700\u8981\u53C2\u4E0E\u8BA1\u7B97\u7684\u6570\u636E\u8868\u901A\u5E38\u4E3A\u4E00\u5BF9\u591A\u5173\u7CFB\uFF08\u666E\u901A\u6570\u636E\u8868 belongsTo \u8868\u8FBE\u5F0F\u8868\uFF09\uFF1A",paraId:1,tocIndex:1},{value:"m:1 \u53EA\u662F\u901A\u5E38\u7684\u7528\u6CD5\uFF0C\u4F46\u5B9E\u9645\u4E0A\u666E\u901A\u6570\u636E\u8868\u4E0E\u8868\u8FBE\u5F0F\u8868\u7684\u5173\u7CFB\u662F\u53EF\u4EE5\u4EFB\u610F\u5EFA\u7ACB\u7684\uFF0C\u4E00\u884C\u6570\u636E\u5BF9\u591A\u4E2A\u8868\u8FBE\u5F0F\u901A\u5E38\u8FD8\u9700\u8981\u5176\u4ED6\u533A\u5206\u5B57\u6BB5\uFF0C\u6216\u8005\u662F\u5728\u5FAA\u73AF\u4E2D\u5BF9\u4E00\u884C\u6570\u636E\u505A\u591A\u79CD\u8BA1\u7B97\u7684\u573A\u666F\u3002",paraId:2,tocIndex:1},{value:"\u8868\u8FBE\u5F0F\u8868\u4E09\u4E2A\u5B57\u6BB5\u7684\u542B\u4E49\uFF1A",paraId:3,tocIndex:1},{value:"\u6570\u636E\u8868",paraId:4,tocIndex:1},{value:"\uFF1A\u76F8\u5F53\u4E8E\u51FD\u6570\u7684\u53C2\u6570\uFF0C\u5728\u8868\u8FBE\u5F0F\u4E2D\u53EF\u7528\u7684\u53D8\u91CF\u5B57\u6BB5\u6765\u6E90\uFF0C\u5373\u53EA\u80FD\u57FA\u4E8E\u4E00\u4E2A\u6570\u636E\u8868\u7684\u5B57\u6BB5\u8FDB\u884C\u8BA1\u7B97\u914D\u7F6E\uFF1B",paraId:4,tocIndex:1},{value:"\u8BA1\u7B97\u5F15\u64CE",paraId:4,tocIndex:1},{value:"\uFF1A\u76EE\u524D\u53EF\u9009 mathjs \u548C formulajs\uFF0C\u63A8\u8350\u4F7F\u7528 formulajs\u3002",paraId:4,tocIndex:1},{value:"\u8868\u8FBE\u5F0F",paraId:4,tocIndex:1},{value:"\uFF1A\u76F8\u5F53\u4E8E\u51FD\u6570\u7684\u5185\u5BB9\uFF0C\u8BA1\u7B97\u65F6\u5C06\u6839\u636E\u914D\u7F6E\u6267\u884C\u5F97\u5230\u4E00\u4E2A\u7ED3\u679C\u3002",paraId:4,tocIndex:1},{value:"\u4EE5\u5546\u54C1\u4E0B\u5355\u8FC7\u7A0B\u4E2D\u6839\u636E\u4E0D\u540C\u5546\u54C1\u8FDB\u884C\u4E0D\u540C\u4F18\u60E0\u89C4\u5219\u7684\u6700\u7EC8\u4EF7\u683C\u8BA1\u7B97\u4E3E\u4F8B\u3002",paraId:5,tocIndex:2},{value:"\u5EFA\u7ACB\u5546\u54C1\u8868\uFF1A",paraId:6,tocIndex:2},{value:"\u5B57\u6BB5\u540D",paraId:7,tocIndex:2},{value:"\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u5546\u54C1\u540D",paraId:7,tocIndex:2},{value:"\u6587\u672C",paraId:7,tocIndex:2},{value:"\u5546\u54C1\u539F\u4EF7",paraId:7,tocIndex:2},{value:"\u6570\u5B57",paraId:7,tocIndex:2},{value:"\u4F18\u60E0\u89C4\u5219",paraId:7,tocIndex:2},{value:"belongsTo\uFF08\u4F18\u60E0\u89C4\u5219\u8868\uFF09",paraId:7,tocIndex:2},{value:"\u5EFA\u7ACB\u4F18\u60E0\u89C4\u5219\u8868\uFF08\u4F7F\u7528\u8868\u8FBE\u5F0F\u8868\u6A21\u677F\u521B\u5EFA\uFF09\uFF1A",paraId:8,tocIndex:2},{value:"\u5B57\u6BB5\u540D",paraId:9,tocIndex:2},{value:"\u7C7B\u578B",paraId:9,tocIndex:2},{value:"\u89C4\u5219\u540D\u79F0",paraId:9,tocIndex:2},{value:"\u6587\u672C",paraId:9,tocIndex:2},{value:"\u6570\u636E\u8868",paraId:9,tocIndex:2},{value:"\u5355\u9009\uFF08\u6570\u636E\u8868\uFF09",paraId:9,tocIndex:2},{value:"\u8BA1\u7B97\u5F15\u64CE",paraId:9,tocIndex:2},{value:"\u5355\u9009\uFF08mathjs/formulajs\uFF09",paraId:9,tocIndex:2},{value:"\u8868\u8FBE\u5F0F",paraId:9,tocIndex:2},{value:"\u6587\u672C",paraId:9,tocIndex:2},{value:"\u521B\u5EFA\u4F18\u60E0\u89C4\u5219\uFF1A",paraId:10,tocIndex:2},{value:"ID",paraId:11,tocIndex:2},{value:"\u540D\u79F0",paraId:11,tocIndex:2},{value:"\u6570\u636E\u8868",paraId:11,tocIndex:2},{value:"\u8BA1\u7B97\u5F15\u64CE",paraId:11,tocIndex:2},{value:"\u8868\u8FBE\u5F0F",paraId:11,tocIndex:2},{value:"1",paraId:11,tocIndex:2},{value:"\u516B\u6298\u5546\u54C1",paraId:11,tocIndex:2},{value:"\u5546\u54C1",paraId:11,tocIndex:2},{value:"formula",paraId:11,tocIndex:2},{value:"{{\u5546\u54C1.\u4EF7\u683C}} * 0.8",paraId:11,tocIndex:2},{value:"2",paraId:11,tocIndex:2},{value:"\u4E5D\u6298\u5546\u54C1",paraId:11,tocIndex:2},{value:"\u5546\u54C1",paraId:11,tocIndex:2},{value:"formula",paraId:11,tocIndex:2},{value:"{{\u5546\u54C1.\u4EF7\u683C}} * 0.9",paraId:11,tocIndex:2},{value:"\u521B\u5EFA\u5546\u54C1\uFF0C\u5E76\u5173\u8054\u4F18\u60E0\u89C4\u5219\uFF1A",paraId:12,tocIndex:2},{value:"ID",paraId:13,tocIndex:2},{value:"\u5546\u54C1\u540D\u79F0",paraId:13,tocIndex:2},{value:"\u4EF7\u683C",paraId:13,tocIndex:2},{value:"\u4F18\u60E0\u89C4\u5219 ID",paraId:13,tocIndex:2},{value:"1",paraId:13,tocIndex:2},{value:"iPhone 14 Pro",paraId:13,tocIndex:2},{value:"7999",paraId:13,tocIndex:2},{value:"2",paraId:13,tocIndex:2},{value:"2",paraId:13,tocIndex:2},{value:"iPhone 13 Pro",paraId:13,tocIndex:2},{value:"5999",paraId:13,tocIndex:2},{value:"1",paraId:13,tocIndex:2},{value:"\u521B\u5EFA\u5DE5\u4F5C\u6D41\uFF0C\u8BA2\u5355\u521B\u5EFA\u65F6\u89E6\u53D1\uFF1A",paraId:14,tocIndex:2},{value:"\u521B\u5EFA\u4E00\u4E2A\u8FD0\u7B97\u8282\u70B9\uFF0C\u914D\u7F6E\u52A8\u6001\u8868\u8FBE\u5F0F\u4E3A\u89E6\u53D1\u6570\u636E/\u5546\u54C1/\u4F18\u60E0\u89C4\u5219\uFF1A",paraId:15,tocIndex:2},{value:"\u914D\u7F6E\u53D8\u91CF\u6570\u636E\u6E90\u4E3A\u89E6\u53D1\u6570\u636E\u4E2D\u7684\u5546\u54C1\uFF1A",paraId:16,tocIndex:2},{value:`\u589E\u52A0\u4E00\u4E2A\u66F4\u65B0\u6570\u636E\u8282\u70B9\uFF0C\u914D\u7F6E\u66F4\u65B0\u8BA2\u5355\u603B\u4EF7\u4E3A\u8BA1\u7B97\u8282\u70B9\u7684\u7ED3\u679C\uFF1A
`,paraId:17,tocIndex:2},{value:"\u521B\u5EFA\u8BA2\u5355\u89E6\u53D1\u5DE5\u4F5C\u6D41\uFF0C\u518D\u67E5\u770B\u8BA2\u5355\u5217\u8868\uFF0C\u6838\u5BF9\u4EF7\u683C\uFF1A",paraId:17,tocIndex:2},{value:"\u8BA2\u5355\u5546\u54C1",paraId:18,tocIndex:2},{value:"\u8BA2\u5355\u5546\u54C1 / \u539F\u4EF7",paraId:18,tocIndex:2},{value:"\u4F18\u60E0\u89C4\u5219",paraId:18,tocIndex:2},{value:"\u603B\u4EF7",paraId:18,tocIndex:2},{value:"iPhone 14 Pro",paraId:18,tocIndex:2},{value:"7999",paraId:18,tocIndex:2},{value:"\u4E5D\u6298",paraId:18,tocIndex:2},{value:"7999 * 0.9 = 7199.1",paraId:18,tocIndex:2},{value:"iPhone 13 Pro",paraId:18,tocIndex:2},{value:"6999",paraId:18,tocIndex:2},{value:"\u516B\u6298",paraId:18,tocIndex:2},{value:"6999 * 0.8 = 5599.2",paraId:18,tocIndex:2}]},441533:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u4EF6\u8868\u6570\u636E\u8868\u6A21\u677F\u901A\u8FC7 File manager \u63D2\u4EF6\u63D0\u4F9B",paraId:0,tocIndex:0},{value:"\u652F\u6301\u81EA\u5B9A\u4E49\u6269\u5C55\u6587\u4EF6\u5B58\u50A8\u7C7B\u578B",paraId:1,tocIndex:0}]},452366:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u666E\u901A\u6570\u636E\u8868\u6A21\u677F\uFF0C\u652F\u6301\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u6570\u636E\u8868\u7684\u884C\u4E3A\uFF1A",paraId:0,tocIndex:0},{value:"\u81EA\u52A8\u751F\u6210 ID \u5B57\u6BB5",paraId:1,tocIndex:0},{value:"\u8BB0\u5F55\u521B\u5EFA\u4EBA",paraId:1,tocIndex:0},{value:"\u8BB0\u5F55\u6700\u540E\u66F4\u65B0\u4EBA",paraId:1,tocIndex:0},{value:"\u8BB0\u5F55\u521B\u5EFA\u65F6\u95F4",paraId:1,tocIndex:0},{value:"\u8BB0\u5F55\u6700\u540E\u66F4\u65B0\u65F6\u95F4",paraId:1,tocIndex:0},{value:"\u53EF\u4EE5\u5BF9\u884C\u8BB0\u5F55\u8FDB\u884C\u6392\u5E8F",paraId:1,tocIndex:0}]},71251:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},668811:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"SQL collection \u63D0\u4F9B\u4E86\u4E00\u79CD\u901A\u8FC7 SQL \u8BED\u53E5\u83B7\u53D6\u6570\u636E\u7684\u65B9\u6CD5\u3002\u901A\u8FC7 SQL \u8BED\u53E5\u83B7\u53D6\u6570\u636E\u5B57\u6BB5\uFF0C\u914D\u7F6E\u5B57\u6BB5\u5143\u6570\u636E\u4E4B\u540E\uFF0C\u7528\u6237\u53EF\u4EE5\u50CF\u4F7F\u7528\u666E\u901A\u8868\u4E00\u6837\uFF0C\u7ED9\u8868\u683C\u3001\u56FE\u8868\u3001\u5DE5\u4F5C\u6D41\u7B49\u4F7F\u7528\uFF0C\u9002\u7528\u4E8E\u5173\u8054\u67E5\u8BE2\u3001\u7EDF\u8BA1\u7B49\u573A\u666F\u3002",paraId:0,tocIndex:1},{value:"\u5728 SQL \u8F93\u5165\u6846\u8F93\u5165 SQL \u8BED\u53E5\u540E\uFF0C\u70B9\u51FB\u6267\u884C (Execute) \u540E\uFF0C\u7CFB\u7EDF\u5C06\u4F1A\u5C1D\u8BD5\u89E3\u6790 SQL \u4F7F\u7528\u4E86\u54EA\u4E9B\u8868\u548C\u5B57\u6BB5\uFF0C\u4ECE\u6765\u6E90\u8868\u4E2D\u89E3\u6790\u51FA\u5B57\u6BB5\u5143\u6570\u636E\u3002",paraId:1,tocIndex:2},{value:"\u5982\u679C\u7CFB\u7EDF\u81EA\u52A8\u5206\u6790\u7684\u6765\u6E90\u8868\u548C\u5B57\u6BB5\u4E0D\u5BF9\uFF0C\u53EF\u4EE5\u624B\u52A8\u9009\u62E9\u5BF9\u5E94\u7684\u8868\u548C\u5B57\u6BB5\uFF0C\u6765\u4F7F\u7528\u5BF9\u5E94\u5B57\u6BB5\u7684\u5143\u6570\u636E\u3002\u9700\u8981\u5148\u9009\u62E9\u6765\u6E90\u8868\uFF0C\u624D\u80FD\u5728\u4E0B\u65B9\u7684\u5B57\u6BB5\u6765\u6E90\u4E2D\u9009\u62E9\u8BE5\u8868\u7684\u5B57\u6BB5\u3002",paraId:2,tocIndex:2},{value:"\u5982\u679C\u5B57\u6BB5\u6CA1\u6709\u5BF9\u5E94\u7684\u6765\u6E90\u5B57\u6BB5\uFF0C\u7CFB\u7EDF\u4F1A\u6839\u636E\u6570\u636E\u7C7B\u578B\u63A8\u65AD\u5B57\u6BB5\u7C7B\u578B\uFF0C\u5982\u679C\u63A8\u65AD\u7ED3\u679C\u4E0D\u5BF9\uFF0C\u53EF\u4EE5\u624B\u52A8\u9009\u62E9\u5B57\u6BB5\u7C7B\u578B\u3002",paraId:3,tocIndex:2},{value:"\u5728\u914D\u7F6E\u5B57\u6BB5\u7684\u540C\u65F6\u53EF\u4EE5\u5728\u9884\u89C8\u533A\u57DF\u770B\u5230\u5BF9\u5E94\u7684\u5C55\u793A\u6548\u679C\u3002",paraId:4,tocIndex:2},{value:"\u914D\u7F6E\u5B8C\u6210\uFF0C\u786E\u8BA4\u65E0\u8BEF\u4E4B\u540E\uFF0C\u9700\u8981\u70B9\u51FB SQL \u8F93\u5165\u6846\u4E0B\u65B9\u7684\u786E\u8BA4 (Confirm) \u6309\u94AE\u624D\u80FD\u8FDB\u884C\u6700\u540E\u7684\u63D0\u4EA4\u3002",paraId:5,tocIndex:2},{value:"SQL \u8BED\u53E5\u6709\u53D8\u5316\u65F6\uFF0C\u53EF\u4EE5\u70B9\u51FB\u4FEE\u6539 (Edit) \u6309\u94AE\uFF0C\u76F4\u63A5\u4FEE\u6539 SQL \u8BED\u53E5\uFF0C\u91CD\u65B0\u914D\u7F6E\u5B57\u6BB5\u3002",paraId:6,tocIndex:3},{value:"\u9700\u8981\u4FEE\u6539\u5B57\u6BB5\u5143\u6570\u636E\u65F6\uFF0C\u53EF\u4EE5\u901A\u8FC7\u914D\u7F6E\u5B57\u6BB5 (Configure fields), \u50CF\u666E\u901A\u8868\u4E00\u6837\u4FEE\u6539\u5B57\u6BB5\u76F8\u5173\u914D\u7F6E\u3002",paraId:6,tocIndex:3},{value:"SQL \u8BED\u53E5\u65E0\u53D8\u5316\uFF0C\u4F46\u6570\u636E\u5E93\u8868\u7ED3\u6784\u6709\u53D8\u5316\u65F6\uFF0C\u53EF\u4EE5\u901A\u8FC7\u70B9\u51FB\u914D\u7F6E\u5B57\u6BB5 (Configure fields) - \u4ECE\u6570\u636E\u5E93\u540C\u6B65 (Sync from database) \u5BF9\u5B57\u6BB5\u8FDB\u884C\u540C\u6B65\u548C\u914D\u7F6E\u3002",paraId:7,tocIndex:4},{value:"\u6A21\u677F\u7C7B\u578B",paraId:8,tocIndex:5},{value:"\u9002\u7528\u573A\u666F",paraId:8,tocIndex:5},{value:"\u5B9E\u73B0\u539F\u7406",paraId:8,tocIndex:5},{value:"\u589E\u5220\u6539\u652F\u6301",paraId:8,tocIndex:5},{value:"SQL",paraId:8,tocIndex:5},{value:"\u6A21\u578B\u6BD4\u8F83\u7B80\u5355\uFF0C\u8F83\u8F7B\u91CF\u573A\u666F\u4E0D\u65B9\u4FBF\u64CD\u4F5C\u6570\u636E\u5E93\u4E0D\u60F3\u7EF4\u62A4\u89C6\u56FE\u60F3\u5B8C\u5168\u901A\u8FC7 UI \u64CD\u4F5C",paraId:8,tocIndex:5},{value:"SQL \u5B50\u67E5\u8BE2",paraId:8,tocIndex:5},{value:"\u4E0D\u652F\u6301",paraId:8,tocIndex:5},{value:"\u8FDE\u63A5\u6570\u636E\u5E93\u89C6\u56FE",paraId:8,tocIndex:5},{value:"\u6A21\u578B\u6BD4\u8F83\u590D\u6742\u9700\u8981\u548C\u6570\u636E\u5E93\u4EA4\u4E92\u9700\u8981\u4FEE\u6539\u6570\u636E\u9700\u8981\u66F4\u826F\u597D\u548C\u7A33\u5B9A\u7684\u6570\u636E\u5E93\u652F\u6301",paraId:8,tocIndex:5},{value:"\u6570\u636E\u5E93\u89C6\u56FE",paraId:8,tocIndex:5},{value:"\u90E8\u5206\u652F\u6301",paraId:8,tocIndex:5}]},238554:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u548C\u666E\u901A\u8868\u4E00\u6837\u652F\u6301\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u6570\u636E\u8868\u7684\u884C\u4E3A",paraId:0,tocIndex:0},{value:"\u6811\u8868\u6A21\u677F\u7684\u9884\u5B9A\u4E49\u5B57\u6BB5",paraId:1,tocIndex:0},{value:`[
      {
        interface: 'integer',
        name: 'parentId',
        type: 'bigInt',
        isForeignKey: true,
      },
      {
        interface: 'm2o',
        type: 'belongsTo',
        name: 'parent',
        foreignKey: 'parentId',
        treeParent: true,
        onDelete: 'CASCADE',
      },
      {
        interface: 'o2m',
        type: 'hasMany',
        name: 'children',
        foreignKey: 'parentId',
        treeChildren: true,
        onDelete: 'CASCADE',
      },
    ]
`,paraId:2,tocIndex:0},{value:"\u6811\u8868\u521B\u5EFA\u540E\u521D\u59CB\u5316\u5B57\u6BB5",paraId:3,tocIndex:0},{value:"\u6811\u8868\u6570\u636E\u8868\u6A21\u677F\u662F\u901A\u8FC7\u81EA\u5173\u8054\u5B57\u6BB5\u5B9E\u73B0\u6811\u5F62\u7ED3\u6784\u7684\u8BBE\u8BA1",paraId:4,tocIndex:0},{value:'\u7236\u8282\u70B9\u5173\u8054\u5B57\u6BB5\uFF08Many to One\uFF09\uFF1A\u901A\u5E38\u79F0\u4E3A "Parent" \u5B57\u6BB5\uFF0C\u5B83\u4E0E\u540C\u4E00\u8868\u4E2D\u7684\u5176\u4ED6\u8BB0\u5F55\u5EFA\u7ACB\u5173\u8054\uFF0C\u8868\u793A\u6BCF\u4E2A\u8282\u70B9\u7684\u7236\u8282\u70B9\u3002',paraId:5,tocIndex:0},{value:'\u5B50\u8282\u70B9\u5173\u8054\u5B57\u6BB5\uFF08One to Many\uFF09\uFF1A\u901A\u5E38\u79F0\u4E3A "Children" \u5B57\u6BB5\uFF0C\u5B83\u8868\u793A\u6BCF\u4E2A\u8282\u70B9\u53EF\u4EE5\u6709\u591A\u4E2A\u5B50\u8282\u70B9',paraId:5,tocIndex:0},{value:"\u6811\u8868\u683C :\u9ED8\u8BA4\u5F00\u542F\uFF08\u7981\u7528\u65F6\uFF0C\u6570\u636E\u5C06\u5E73\u94FA\u8FD4\u56DE\uFF09",paraId:6,tocIndex:1},{value:"\u6DFB\u52A0\u5B50\u8BB0\u5F55\uFF1A\u4E3A\u5F53\u524D\u8BB0\u5F55\u6DFB\u52A0\u5B50\u8BB0\u5F55",paraId:6,tocIndex:1}]},656443:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6570\u636E\u5E93\u89C6\u56FE\u662F\u6570\u636E\u5E93\u4E2D\u7684\u865A\u62DF\u8868\uFF0C\u5B83\u57FA\u4E8E\u4E00\u4E2A\u6216\u591A\u4E2A\u6570\u636E\u5E93\u8868\u7684\u67E5\u8BE2\u7ED3\u679C\u751F\u6210\uFF0C\u5177\u6709\u4E0E\u8868\u76F8\u4F3C\u7684\u7ED3\u6784\uFF0C\u4F46\u4E0D\u5B58\u50A8\u5B9E\u9645\u6570\u636E\u3002\u6570\u636E\u5E93\u89C6\u56FE\u5141\u8BB8\u7528\u6237\u4EE5\u66F4\u7B80\u5355\u3001\u66F4\u62BD\u8C61\u7684\u65B9\u5F0F\u8BBF\u95EE\u548C\u64CD\u4F5C\u6570\u636E",paraId:0,tocIndex:1},{value:"\u5C06\u6570\u636E\u5E93\u4E2D\u7684\u89C6\u56FE\u4E0E Collection \u8FDE\u63A5\u662F NocoBase \u63D0\u4F9B\u7684\u4E00\u79CD\u6709\u6548\u5EFA\u8868\u65B9\u5F0F\u3002\u901A\u8FC7\u5728\u6570\u636E\u5E93\u4E2D\u521B\u5EFA\u89C6\u56FE\uFF0C\u53EF\u4EE5\u5728 Collection \u7BA1\u7406\u4E2D\u5F15\u7528\u5E76\u6620\u5C04\u4E3A\u6570\u636E\u8868\uFF0C\u7279\u522B\u9002\u7528\u4E8E\u7EDF\u8BA1\u573A\u666F\u3002\u8FD9\u79CD\u65B9\u5F0F\u4E0D\u4EC5\u63D0\u9AD8\u4E86\u6570\u636E\u8868\u7684\u53EF\u7EF4\u62A4\u6027\uFF0C\u5728\u4E0D\u540C\u5E94\u7528\u573A\u666F\u4E2D\u8FD8\u80FD\u7075\u6D3B\u4F7F\u7528\u3002",paraId:1,tocIndex:1},{value:"\u4E0B\u9762\u4EE5\u8BA2\u5355\u7BA1\u7406\u7CFB\u7EDF\u4E2D\u5E38\u89C1\u7684\u7EDF\u8BA1\u4E1A\u52A1\u573A\u666F\u4E3A\u4F8B",paraId:2,tocIndex:1},{value:"\u8BA2\u5355\u8868\u548C\u5BA2\u6237\u8868\u6709\u5173\u8054\u5173\u7CFB\uFF0C\u7EDF\u8BA1\u6BCF\u4E2A\u5BA2\u6237\u7684\u9500\u552E\u91D1\u989D\u6C47\u603B\u548C\u9500\u552E\u6570\u91CF\u6C47\u603B\uFF0C\u5C55\u793A\u5B57\u6BB5\uFF1A\u5BA2\u6237\u540D\u79F0\u3001\u5BA2\u6237\u624B\u673A\u53F7\u3001\u9500\u552E\u91D1\u989D\u6C47\u603B\uFF0C\u9500\u552E\u6570\u91CF\u6C47\u603B",paraId:3,tocIndex:1},{value:"\u5728\u6570\u636E\u5E93\u4E2D\u521B\u5EFA\u89C6\u56FE\uFF1A",paraId:4,tocIndex:1},{value:`SELECT t2.customer_name,
    t2.mobile_number ,
    sum(t1.amount) AS sum_amount,
    sum(t1.quantity) AS sum_quantity
   FROM Orders t1
     JOIN Customers t2 ON t1.f_6ln1f7tqn9b = t2.id
  GROUP BY t2.customer_name, t2.mobile_number;
`,paraId:5,tocIndex:1},{value:"\u6570\u636E\u5E93\u4E2D\u7684\u89C6\u56FE\uFF1A",paraId:6,tocIndex:1},{value:"\u5728 NocoBase \u4E2D\u5C06\u4E0A\u9762\u89C6\u56FE\u6620\u5C04\u4E3A\u6570\u636E\u8868\uFF08Collection\uFF09\u4F7F\u7528",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u76EE\u6807\u89C6\u56FE",paraId:8,tocIndex:2},{value:"\u652F\u6301\u81EA\u5B9A\u4E49\u89C6\u56FE\u7684\u5217\u540D\uFF08\u5B57\u6BB5\u540D\uFF09",paraId:9,tocIndex:2},{value:"\u6765\u6E90\u5B57\u6BB5\uFF1A\u5373\u6E90\u8868\u7684\u5143\u5B57\u6BB5\uFF0C\u5F53\u5B57\u6BB5\u672A\u89E3\u6790\u51FA\u6E90\u8868\u6765\u6E90\u5B57\u6BB5\u65F6\uFF08\u805A\u5408\u7684\u5B57\u6BB5\u65E0\u6765\u6E90\u5B57\u6BB5\uFF09\uFF0C\u53EF\u6307\u5B9A\u5B57\u6BB5\u7684 interface",paraId:9,tocIndex:2},{value:"\u89C6\u56FE\u6570\u636E\u662F\u5426\u652F\u6301\u589E\u5220\u6539\u64CD\u4F5C\uFF08\u9ED8\u8BA4\u4E0D\u652F\u6301\uFF09",paraId:9,tocIndex:2},{value:"\u5B8C\u6574\u7684\u793A\u4F8B\u914D\u7F6E\u6D41\u7A0B\u5982\u56FE",paraId:10,tocIndex:2},{value:"Sync from database \u652F\u6301\u8C03\u6574\u89C6\u56FE\u8868\u914D\u7F6E\uFF08\u82E5\u6570\u636E\u5E93\u4E2D\u89C6\u56FE\u8FDB\u884C\u4E86\u8C03\u6574\uFF0C\u53EF\u91CD\u65B0\u8FDE\u63A5\u89C6\u56FE\u540C\u6B65\u6570\u636E\uFF09",paraId:11,tocIndex:2},{value:"\u5220\u9664\uFF1A\u8FD9\u91CC\u5220\u9664\u64CD\u4F5C\u4E0D\u4F1A\u5C06\u6E90\u8868\u5B57\u6BB5\u5220\u9664\uFF0C\u4EC5\u5220\u9664\u89C6\u56FE\u8868\u4E2D\u7684\u5B57\u6BB5",paraId:11,tocIndex:2},{value:"\u662F\u5426\u652F\u6301\u5BF9\u89C6\u56FE\u6570\u636E\u8868\u7684\u589E\u5220\u6539\u64CD\u4F5C\uFF08\u9ED8\u8BA4\u4E0D\u542F\u7528\uFF09\uFF0C\u542F\u7528\u65F6\uFF0C\u5BF9\u5E94\u533A\u5757\u624D\u652F\u6301\u589E\u52A0\u3001\u5220\u9664\u7B49\u64CD\u4F5C",paraId:12,tocIndex:2},{value:"\u4F5C\u4E3A\u533A\u5757\u7684\u6570\u636E\u6E90",paraId:13,tocIndex:3},{value:"\u89C6\u56FE\u8868\u4E0E\u5176\u4ED6\u4EFB\u610F\u65B9\u5F0F\u521B\u5EFA\u7684\u6570\u636E\u8868\u4E00\u6837\u5728\u6240\u6709\u533A\u5757\u4E2D\u90FD\u80FD\u9009\u4E2D\u4F5C\u4E3A\u6570\u636E\u6E90",paraId:14,tocIndex:3}]},500635:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Formula",paraId:0,tocIndex:0},{value:"Sequence",paraId:0,tocIndex:0},{value:"JSON",paraId:0,tocIndex:0},{value:"Collection",paraId:0,tocIndex:0}]},152589:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Single line text",paraId:0,tocIndex:0},{value:"Username",paraId:0,tocIndex:0},{value:"Long text",paraId:0,tocIndex:0},{value:"Phone",paraId:0,tocIndex:0},{value:"Email",paraId:0,tocIndex:0},{value:"URL",paraId:0,tocIndex:0},{value:"Integer",paraId:0,tocIndex:0},{value:"Number",paraId:0,tocIndex:0},{value:"Percent",paraId:0,tocIndex:0},{value:"Password",paraId:0,tocIndex:0},{value:"Color",paraId:0,tocIndex:0},{value:"Icon",paraId:0,tocIndex:0}]},778402:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Checkbox",paraId:0,tocIndex:0},{value:"Single select",paraId:0,tocIndex:0},{value:"Multiple select",paraId:0,tocIndex:0},{value:"Radio group",paraId:0,tocIndex:0},{value:"Checkbox group",paraId:0,tocIndex:0},{value:"China region\uFF08\u63D2\u4EF6\u6269\u5C55\uFF09",paraId:0,tocIndex:0}]},766647:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Datetime",paraId:0,tocIndex:0},{value:"Time",paraId:0,tocIndex:0}]},66946:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},623709:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},521522:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Markdown",paraId:0,tocIndex:0},{value:"Rich Text",paraId:0,tocIndex:0},{value:"Attachment",paraId:0,tocIndex:0}]},289936:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7528\u4E8E\u5EFA\u7ACB\u5404\u79CD\u5173\u8054\u5173\u7CFB",paraId:0,tocIndex:0},{value:"One to one (belongs to)",paraId:1,tocIndex:0},{value:"One to one (has one)",paraId:1,tocIndex:0},{value:"One to many",paraId:1,tocIndex:0},{value:"Many to one",paraId:1,tocIndex:0},{value:"Many to many",paraId:1,tocIndex:0}]},266396:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"ID",paraId:0,tocIndex:0},{value:"Table OID (\u7EE7\u627F\u8868\u4E2D\u4F7F\u7528)",paraId:0,tocIndex:0},{value:"Created at",paraId:0,tocIndex:0},{value:"Last updated at",paraId:0,tocIndex:0},{value:"Created by",paraId:0,tocIndex:0},{value:"Last updated by",paraId:0,tocIndex:0}]},684910:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},54388:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6570\u636E\u8868\u7EE7\u627F\u662F PostgreSQL \u6570\u636E\u5E93\u72EC\u6709\u7684\u529F\u80FD\uFF08\u9700\u8981\u8FDE\u63A5 PostgreSQL \uFF09\uFF0C\u5B83\u5141\u8BB8\u5728\u4E3B\u8868\u7684\u57FA\u7840\u4E0A\u521B\u5EFA\u5B50\u8868\uFF0C\u5B50\u8868\u7EE7\u627F\u4E86\u4E3B\u8868\u7684\u7ED3\u6784\u3001\u5B57\u6BB5\u5B9A\u4E49\u548C\u7D22\u5F15\u3002\u8FD9\u4E2A\u7279\u6027\u4E3B\u8981\u7528\u4E8E\u7BA1\u7406\u5927\u91CF\u6570\u636E\uFF0C\u5B9E\u73B0\u6570\u636E\u5206\u533A\u548C\u6027\u80FD\u4F18\u5316\u3002\u6BCF\u4E2A\u5B50\u8868\u53EF\u4EE5\u5B58\u50A8\u7279\u5B9A\u6761\u4EF6\u4E0B\u7684\u6570\u636E\uFF0C\u4F8B\u5982\u6309\u65F6\u95F4\u5206\u5272\u6570\u636E\uFF0C\u4ECE\u800C\u51CF\u5C11\u67E5\u8BE2\u65F6\u7684\u6570\u636E\u626B\u63CF\u91CF\uFF0C\u63D0\u9AD8\u67E5\u8BE2\u6027\u80FD\u3002\u6B64\u5916\uFF0C\u4E3B\u8868\u548C\u5B50\u8868\u7684\u67E5\u8BE2\u900F\u660E\u5316\uFF0C\u7528\u6237\u53EF\u4EE5\u50CF\u64CD\u4F5C\u5355\u4E2A\u8868\u4E00\u6837\u67E5\u8BE2\u6574\u4E2A\u7EE7\u627F\u8868\u96C6\u5408\uFF0C\u7B80\u5316\u4E86\u6570\u636E\u64CD\u4F5C\u548C\u67E5\u8BE2\u7684\u590D\u6742\u6027\uFF0C\u4F7F\u6570\u636E\u5E93\u66F4\u9AD8\u6548\u5730\u5904\u7406\u5927\u89C4\u6A21\u6570\u636E\u3002",paraId:0,tocIndex:0},{value:"\u5728\u5355\u7EE7\u627F\u6A21\u5F0F\u4E2D\uFF0C\u4E00\u4E2A\u8868\u53EF\u4EE5\u7EE7\u627F\u53E6\u4E00\u4E2A\u8868\uFF0C\u5B50\u8868\u7EE7\u627F\u4E86\u7236\u8868\u7684\u7ED3\u6784\u3001\u5B57\u6BB5\u548C\u7EA6\u675F\u3002\u8FD9\u79CD\u6A21\u5F0F\u7528\u4E8E\u8868\u793A\u5B9E\u4F53\u7684\u5C42\u6B21\u7ED3\u6784\uFF0C\u5141\u8BB8\u5B50\u8868\u5728\u4FDD\u7559\u901A\u7528\u5C5E\u6027\u7684\u540C\u65F6\u6DFB\u52A0\u7279\u5B9A\u5C5E\u6027\u3002",paraId:1,tocIndex:1},{value:'\u5728\u8BA2\u5355\u7CFB\u7EDF\u4E2D\uFF0C\u914D\u7F6E"\u6279\u53D1\u8BA2\u5355\u8868"\u7EE7\u627F\u81EA\u4E3B\u8868 "\u8BA2\u5355"\uFF0C\u7528\u4E8E\u5904\u7406\u6279\u53D1\u8BA2\u5355\uFF0C\u914D\u7F6E\u4E86\u6279\u53D1\u5BA2\u6237\u7279\u6709\u7684\u5B57\u6BB5\uFF0C\u5982\u6279\u53D1\u4EF7\u683C\u3001\u6279\u6B21\u53F7\u7B49\u3002',paraId:2,tocIndex:1},{value:"\u5546\u54C1\u8868\u7684\u7EE7\u627F\u5173\u7CFB\u4E5F\u53EF\u4EE5\u505A\u5982\u4E0B\u68B3\u7406",paraId:3,tocIndex:1},{value:'\u4E3B\u8868 "\u5546\u54C1"\uFF08Products\uFF09\uFF1A\u5305\u542B\u901A\u7528\u5546\u54C1\u4FE1\u606F\uFF0C\u5982\u5546\u54C1 ID\u3001\u540D\u79F0\u3001\u4EF7\u683C\u3001\u5E93\u5B58\u7B49\u3002',paraId:4,tocIndex:1},{value:'\u5B50\u8868 "\u7535\u5B50\u4EA7\u54C1"\uFF08ElectronicsProduct\uFF09\uFF1A\u7EE7\u627F\u81EA\u4E3B\u8868 "\u5546\u54C1"\uFF0C\u5E76\u6DFB\u52A0\u4E86\u7279\u5B9A\u4E8E\u7535\u5B50\u4EA7\u54C1\u7684\u5B57\u6BB5\uFF0C\u5982\u5C4F\u5E55\u5C3A\u5BF8\u3001\u64CD\u4F5C\u7CFB\u7EDF\u7B49\u5B57\u6BB5\u3002',paraId:4,tocIndex:1},{value:'\u5B50\u8868 "\u670D\u88C5\u4EA7\u54C1"\uFF08ApparelProduct\uFF09\uFF1A\u540C\u6837\u7EE7\u627F\u81EA\u4E3B\u8868 "\u5546\u54C1"\uFF0C\u4F46\u5305\u542B\u670D\u88C5\u4EA7\u54C1\u7279\u6709\u7684\u5C5E\u6027\uFF0C\u5982\u5C3A\u5BF8\u3001\u989C\u8272\u3001\u6750\u8D28\u7B49\u5B57\u6BB5\u3002',paraId:4,tocIndex:1},{value:'\u5B50\u8868 "\u98DF\u54C1\u4EA7\u54C1"\uFF08FoodProduct\uFF09\uFF1A\u7EE7\u627F\u81EA\u4E3B\u8868 "\u5546\u54C1"\uFF0C\u7528\u4E8E\u5904\u7406\u98DF\u54C1\u4EA7\u54C1\uFF0C\u5305\u62EC\u4FDD\u8D28\u671F\u3001\u98DF\u54C1\u7C7B\u578B\u7B49\u5B57\u6BB5\u3002',paraId:4,tocIndex:1},{value:'\u5B50\u8868 "\u5BB6\u5177\u4EA7\u54C1"\uFF08FurnitureProduct\uFF09\uFF1A\u7EE7\u627F\u81EA\u4E3B\u8868 "\u5546\u54C1"\uFF0C\u5305\u542B\u5BB6\u5177\u4EA7\u54C1\u7684\u7279\u5B9A\u5C5E\u6027\uFF0C\u5982\u5C3A\u5BF8\u3001\u6750\u6599\u7B49\u5B57\u6BB5\u3002',paraId:4,tocIndex:1},{value:"\u591A\u7EE7\u627F\u5141\u8BB8\u4E00\u4E2A\u8868\u540C\u65F6\u7EE7\u627F\u591A\u4E2A\u7236\u8868\u7684\u7ED3\u6784\u3001\u5B57\u6BB5\u548C\u7EA6\u675F\u3002\u8FD9\u79CD\u6A21\u5F0F\u7528\u4E8E\u5177\u6709\u591A\u4E2A\u5173\u8054\u7684\u5B9E\u4F53\u5EFA\u6A21\u3002",paraId:5,tocIndex:2},{value:"\u4EE5\u8BA2\u5355\u3001\u8FD0\u5355\u548C\u5546\u54C1\u8FDB\u884C\u6570\u636E\u5EFA\u6A21\u4E3A\u4F8B\uFF0C\u5728\u8FD9\u4E2A\u7CFB\u7EDF\u4E2D\uFF0C\u6709\u4E09\u4E2A\u6838\u5FC3\u5B9E\u4F53\uFF1A\u8BA2\u5355\u3001\u8FD0\u5355\u548C\u5546\u54C1\u3002\u4E00\u4E2A\u8BA2\u5355\u53EF\u4EE5\u5305\u542B\u591A\u4E2A\u5546\u54C1\uFF0C\u4E00\u4E2A\u8BA2\u5355\u53EF\u4EE5\u5BF9\u5E94\u591A\u4E2A\u8FD0\u5355\uFF08\u4F8B\u5982\uFF0C\u90E8\u5206\u5546\u54C1\u8FD0\u9001\u5230\u4E0D\u540C\u5730\u70B9\uFF09\uFF0C\u540C\u65F6\u4E00\u4E2A\u8FD0\u5355\u53EF\u80FD\u6D89\u53CA\u591A\u4E2A\u8BA2\u5355\u3002\u8FD9\u79CD\u591A\u91CD\u5173\u7CFB\u53EF\u4EE5\u4F7F\u7528\u4E00\u4E2A\u5B50\u8868\uFF08\u8054\u63A5\u8868\uFF09\u6765\u5B9E\u73B0\uFF0C\u4E00\u4E2A\u8868\u5177\u6709\u591A\u4E2A\u7236\u8868\uFF08\u591A\u7EE7\u627F\uFF09\u3002",paraId:6,tocIndex:2},{value:'\u7236\u8868 "\u8BA2\u5355"\uFF08Orders\uFF09\uFF1A\u5305\u542B\u8BA2\u5355\u7684\u57FA\u672C\u4FE1\u606F\uFF0C\u5982\u8BA2\u5355 ID\u3002',paraId:7,tocIndex:2},{value:'\u7236\u8868 "\u8FD0\u5355"\uFF08Shipments\uFF09\uFF1A\u5305\u542B\u8FD0\u5355\u53F7\u3001\u8FD0\u8F93\u65B9\u5F0F\u4FE1\u606F\u7B49\u3002',paraId:7,tocIndex:2},{value:'\u7236\u8868 "\u5546\u54C1"\uFF08Products\uFF09\uFF1A\u5305\u542B\u5546\u54C1\u7684\u5C5E\u6027\uFF0C\u5982\u5546\u54C1 ID\u3001\u540D\u79F0\u3001\u4EF7\u683C\u7B49\u3002',paraId:7,tocIndex:2},{value:'\u5B50\u8868"\u8BA2\u5355\u5546\u54C1"\uFF08OrderProduct\uFF09\uFF1A\u7528\u4E8E\u7EE7\u627F\u8BA2\u5355\u548C\u5546\u54C1\u3002\u6BCF\u4E2A\u8BB0\u5F55\u8868\u793A\u4E00\u4E2A\u8BA2\u5355\u4E2D\u7684\u4E00\u4E2A\u5546\u54C1\uFF0C\u540C\u65F6\u8BB0\u5F55\u4E86\u6570\u91CF\u7B49\u4FE1\u606F\u3002',paraId:7,tocIndex:2},{value:'\u5B50\u8868 "\u8BA2\u5355\u8FD0\u5355\u5173\u8054"\uFF08OrderShipment\uFF09\uFF1A\u7528\u4E8E\u7EE7\u627F\u8BA2\u5355\u548C\u8FD0\u5355\u3002\u6BCF\u4E2A\u8BB0\u5F55\u8868\u793A\u4E00\u4E2A\u8BA2\u5355\u4E0E\u4E00\u4E2A\u8FD0\u5355\u7684\u5173\u7CFB\uFF0C\u540C\u65F6\u8BB0\u5F55\u4E86\u76F8\u5173\u4FE1\u606F',paraId:7,tocIndex:2},{value:"\u7EE7\u627F\u5173\u7CFB\u4E2D\u5B50\u8868\u53EF\u91CD\u65B0\u5B9A\u4E49\u6216\u8986\u76D6\u4ECE\u7236\u8868\u7EE7\u627F\u7684\u5B57\u6BB5\uFF0C\u81EA\u5B9A\u4E49\u5B57\u6BB5\u5C5E\u6027\u4EE5\u9002\u5E94\u7279\u5B9A\u9700\u6C42",paraId:8,tocIndex:3},{value:`\u5982 A \u591A\u5BF9\u591A B\uFF0CA1 \u7EE7\u627F A\uFF0CB1 \u7EE7\u627F B
\u5219 A1 \u4E5F\u5173\u8054 B\uFF0C\u8FD9\u65F6\u5019 B \u6709\u6240\u6709\uFF08\u672C\u8EAB\u53CA\u6240\u6709\u5B50\u8868\uFF09\u7684\u6570\u636E\uFF0C\u4F46\u662F A1 \u53EA\u9700\u8981\u770B B1 \u7684\u6570\u636E\uFF0C\u5219\u53EF\u4EE5 \u5728 A1 \u4E2D\u91CD\u5199 \u628A B target \u6539\u6210 B1\u3002\u5373\u5728\u5173\u7CFB A1.B \u4E2D\uFF0C\u53EF\u4EE5\u4FEE\u6539\u5173\u8054\u7684\u76EE\u6807\u8868 B\uFF08\u53EF\u9009\u8303\u56F4\u4E3A B \u548C B \u7684\u5B50\u8868\uFF09\u4E3A B1`,paraId:9,tocIndex:4},{value:"\u5982\u56FE\uFF1A\u6279\u53D1\u8BA2\u5355\u8868\u4E2D\u91CD\u5199\u5546\u54C1\u5173\u7CFB\u5B57\u6BB5\uFF08\u5C06\u76EE\u6807\u8868\u91CD\u5199\u4E3A\u7535\u5B50\u5546\u54C1\u8868\uFF09",paraId:10,tocIndex:4},{value:"\u5546\u54C1\u8868\uFF08\u4E3B\u8868\uFF09\u4E2D\u6709\u53EF\u9009\u9879\u5B57\u6BB5\u300C\u5C3A\u5BF8\u300D\uFF1A\u670D\u88C5\u5546\u54C1\u53EF\u4EE5\u5B9A\u4E49\u91CD\u5199\u4E3A\u8863\u670D\u5C3A\u5BF8\uFF08S\u3001M\u3001L\uFF09\uFF0C\u7535\u5B50\u5546\u54C1\u8868\u5219\u53EF\u4EE5\u91CD\u5199\u5B57\u6BB5\u4E3A\u300C\u5B58\u50A8\u5BB9\u91CF\u300D\uFF0832GB\u300164GB\u3001128GB\uFF09",paraId:11,tocIndex:5},{value:"\u5173\u7CFB\u5916\u952E\u5171\u4EAB\u662F\u4E00\u79CD\u7B56\u7565\uFF0C\u5141\u8BB8\u591A\u4E2A\u8868\u5171\u4EAB\u76F8\u540C\u7684\u5916\u952E\u5B57\u6BB5\uFF0C\u4EE5\u5EFA\u7ACB\u8868\u4E4B\u95F4\u7684\u5173\u7CFB\u3002\u8FD9\u5728\u591A\u4E2A\u8868\u9700\u8981\u5F15\u7528\u76F8\u540C\u5B9E\u4F53\u65F6\u975E\u5E38\u6709\u7528\u3002\u5728\u6570\u636E\u8868\u7EE7\u627F\u7684\u60C5\u51B5\u4E0B\uFF0C\u8FD9\u4E2A\u5171\u4EAB\u7684\u5916\u952E\u53EF\u4EE5\u7528\u4E8E\u786E\u4FDD\u6BCF\u4E2A\u5B50\u8868\u4E0E\u5176\u4ED6\u8868\u4E4B\u95F4\u7684\u5173\u7CFB\u6216\u5F15\u7528\uFF0C\u4ECE\u800C\u6784\u5EFA\u66F4\u590D\u6742\u7684\u6570\u636E\u6A21\u578B",paraId:12,tocIndex:6}]},709951:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6570\u636E\u8868\u7684\u589E\u5220\u6539\u67E5\u53CA\u62D6\u62FD\u6392\u5E8F",paraId:0,tocIndex:1},{value:"\u6570\u636E\u8868\u5B57\u6BB5\u7684\u589E\u5220\u6539",paraId:1,tocIndex:2},{value:"\u53EF\u4EE5\u5C06\u6570\u636E\u8868\u6309\u7167\u4E0D\u540C\u7684\u6807\u51C6\u8FDB\u884C\u7EC4\u7EC7\uFF0C\u4F7F\u6570\u636E\u7684\u7ED3\u6784\u66F4\u52A0\u6E05\u6670\u964D\u4F4E\u6570\u636E\u7BA1\u7406\u7684\u590D\u6742\u6027",paraId:2,tocIndex:3},{value:"\u6570\u636E\u8868\u5206\u7C7B\u7684\u589E\u5220\u6539\u53CA\u6392\u5E8F",paraId:3,tocIndex:3}]},793099:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},50477:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728\u65E0\u4EE3\u7801\u5C42\u9762\uFF0CNocoBase \u7684\u6838\u5FC3\u6982\u5FF5\u53EF\u4EE5\u603B\u7ED3\u4E3A ",paraId:0,tocIndex:0},{value:"A\xB7B\xB7C",paraId:0,tocIndex:0},{value:"\u3002",paraId:0,tocIndex:0},{value:"A\xB7B\xB7C",paraId:1,tocIndex:0},{value:" \u662F",paraId:1,tocIndex:0},{value:"Action\xB7Block\xB7Collection",paraId:1,tocIndex:0},{value:"\xA0\u7684\u7F29\u5199\uFF0C\u5373",paraId:1,tocIndex:0},{value:"\u64CD\u4F5C\xB7\u533A\u5757\xB7\u6570\u636E\u8868",paraId:1,tocIndex:0},{value:"\u3002\u901A\u8FC7\xA0",paraId:1,tocIndex:0},{value:"Collection",paraId:1,tocIndex:0},{value:"\xA0\u8BBE\u8BA1\u6570\u636E\u7ED3\u6784\uFF0C\u901A\u8FC7\xA0",paraId:1,tocIndex:0},{value:"Block",paraId:1,tocIndex:0},{value:"\xA0\u7EC4\u7EC7\u4E0E\u5C55\u793A\u6570\u636E\uFF0C\u901A\u8FC7\xA0",paraId:1,tocIndex:0},{value:"Action",paraId:1,tocIndex:0},{value:"\xA0\u4EA4\u4E92\u6570\u636E\u3002",paraId:1,tocIndex:0},{value:"\u5B9A\u4E49\u6570\u636E\u65F6\uFF0C\u4E13\u6CE8\u4E8E\u5B9A\u4E49\u6570\u636E\uFF1B\u5B9A\u4E49\u89C6\u56FE\u65F6\uFF0C\u4E13\u6CE8\u4E8E\u5B9A\u4E49\u89C6\u56FE\u3002",paraId:2,tocIndex:1},{value:"\u901A\u8FC7\u5B9A\u4E49\u6570\u636E\uFF0C\u6765\u62BD\u8C61\u4E1A\u52A1\uFF1B\u518D\u901A\u8FC7\u5B9A\u4E49\u533A\u5757\u53BB\u7EC4\u7EC7\u5185\u5BB9\u4EE5\u4F60\u6240\u671F\u671B\u7684\u65B9\u5F0F\u5448\u73B0\u6570\u636E\u3002",paraId:3,tocIndex:1},{value:"\u4E3A\u4E1A\u52A1\u62BD\u8C61\u51FA\u7EDF\u4E00\u7684\u6570\u636E\u6A21\u578B\uFF0C\u7136\u540E\u901A\u8FC7\u533A\u5757\u53EF\u4EE5\u4E3A\u540C\u4E00\u4E2A\u6570\u636E\u8868\u5EFA\u7ACB\u5404\u79CD\u5404\u6837\u7684\u5448\u73B0\u65B9\u5F0F\uFF0C\u7528\u4E8E\u4E0D\u540C\u7684\u573A\u666F\u3001\u4E0D\u540C\u7684\u89D2\u8272\u3001\u4E0D\u540C\u7684\u7EC4\u5408\u3002",paraId:4,tocIndex:2},{value:"\u6570\u636E\u8868\u6765\u5B9A\u4E49\u6570\u636E\u7684\u7ED3\u6784\uFF0C\u533A\u5757\u6765\u7EC4\u7EC7\u6570\u636E\u7684\u5448\u73B0\u65B9\u5F0F\u3002\u90A3\u4E48\uFF0C\u4EC0\u4E48\u9A71\u52A8\u6570\u636E\u7684\u4EA4\u4E92\u548C\u53D8\u66F4\uFF1F\u7B54\u6848\u662F\u64CD\u4F5C\u3002",paraId:5,tocIndex:3},{value:"\u533A\u5757\u5C06\u6570\u636E\u5448\u73B0\u7ED9\u7528\u6237\uFF0C\u64CD\u4F5C\u5219\u662F\u5C06\u7528\u6237\u7684\u6307\u4EE4\u53D1\u9001\u7ED9\u670D\u52A1\u5668\u5B8C\u6210\u6570\u636E\u7684\u4EA4\u4E92\u6216\u53D8\u66F4\u3002",paraId:6,tocIndex:3}]},226052:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u64CD\u4F5C",paraId:0,tocIndex:0},{value:"\u662F\u5B8C\u6210\u67D0\u4E2A\u7279\u5B9A\u76EE\u6807\u7684\u52A8\u4F5C\u96C6\u5408\u3002\u5728 NocoBase \u4E2D\u901A\u8FC7 ",paraId:0,tocIndex:0},{value:"\u64CD\u4F5C",paraId:0,tocIndex:0},{value:"\u6765\u5904\u7406\u6570\u636E\u6216\u8005\u4E0E\u670D\u52A1\u5668\u901A\u4FE1\u3002 \u64CD\u4F5C\u901A\u5E38\u4F1A\u901A\u8FC7\u70B9\u51FB\u67D0\u4E2A\u6309\u94AE\u89E6\u53D1\u3002",paraId:0,tocIndex:0},{value:"NocoBase \u76EE\u524D\u652F\u6301 10 \u51E0\u79CD\u64CD\u4F5C\uFF0C\u672A\u6765\u53EF\u4EE5\u901A\u8FC7\u63D2\u4EF6\u7684\u65B9\u5F0F\u652F\u6301\u66F4\u591A\u79CD\u3002",paraId:1,tocIndex:1},{value:"\u540D\u79F0",paraId:2,tocIndex:1},{value:"\u63CF\u8FF0",paraId:2,tocIndex:1},{value:"\u7B5B\u9009",paraId:2,tocIndex:1},{value:"\u6307\u5B9A\u6570\u636E\u7684\u663E\u793A\u8303\u56F4",paraId:2,tocIndex:1},{value:"\u6DFB\u52A0",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u6DFB\u52A0\u65B0\u6570\u636E\u7684\u5F39\u7A97\uFF0C\u5728\u5F39\u7A97\u91CC\u901A\u5E38\u5305\u542B\u4E00\u4E2A\u8868\u5355\u533A\u5757",paraId:2,tocIndex:1},{value:"\u67E5\u770B",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u67E5\u770B\u6307\u5B9A\u6570\u636E\u7684\u5F39\u7A97\uFF0C\u5728\u5F39\u7A97\u91CC\u901A\u5E38\u5305\u542B\u4E00\u4E2A\u8BE6\u60C5\u533A\u5757",paraId:2,tocIndex:1},{value:"\u7F16\u8F91",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u4FEE\u6539\u6307\u5B9A\u6570\u636E\u7684\u5F39\u7A97\uFF0C\u5728\u5F39\u7A97\u91CC\u901A\u5E38\u5305\u542B\u4E00\u4E2A\u8868\u5355\u533A\u5757",paraId:2,tocIndex:1},{value:"\u5220\u9664",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u5220\u9664\u6307\u5B9A\u6570\u636E\u7684\u5BF9\u8BDD\u6846\uFF0C\u786E\u8BA4\u540E\u5220\u9664",paraId:2,tocIndex:1},{value:"\u5BFC\u51FA",paraId:2,tocIndex:1},{value:"\u5C06\u6570\u636E\u5BFC\u51FA\u4E3A Excel\uFF0C\u5E38\u548C\u7B5B\u9009\u7EC4\u5408\u4F7F\u7528",paraId:2,tocIndex:1},{value:"\u6253\u5370",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u6D4F\u89C8\u5668\u6253\u5370\u7A97\u53E3\uFF0C\u6253\u5370\u6307\u5B9A\u7684\u6570\u636E\uFF0C\u5E38\u548C\u8BE6\u60C5\u533A\u5757\u7EC4\u5408\u4F7F\u7528",paraId:2,tocIndex:1},{value:"\u63D0\u4EA4",paraId:2,tocIndex:1},{value:"\u5C06\u6307\u5B9A\u8868\u5355\u533A\u5757\u7684\u6570\u636E\u63D0\u4EA4\u5230\u670D\u52A1\u7AEF",paraId:2,tocIndex:1},{value:"\u5237\u65B0",paraId:2,tocIndex:1},{value:"\u5237\u65B0\u5F53\u524D\u533A\u5757\u5185\u7684\u6570\u636E",paraId:2,tocIndex:1},{value:"\u5BFC\u5165",paraId:2,tocIndex:1},{value:"\u4ECE Excel \u6A21\u677F\u4E2D\u5BFC\u5165\u6570\u636E",paraId:2,tocIndex:1},{value:"\u6279\u91CF\u7F16\u8F91",paraId:2,tocIndex:1},{value:"\u6279\u91CF\u7F16\u8F91\u6570\u636E",paraId:2,tocIndex:1},{value:"\u6279\u91CF\u66F4\u65B0",paraId:2,tocIndex:1},{value:"\u6279\u91CF\u66F4\u65B0\u6570\u636E",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u5F39\u7A97",paraId:2,tocIndex:1},{value:"\u6253\u5F00\u5F39\u7A97\u6216\u62BD\u5C49\uFF0C\u5728\u91CC\u9762\u53EF\u4EE5\u653E\u7F6E\u533A\u5757",paraId:2,tocIndex:1},{value:"\u66F4\u65B0\u6570\u636E",paraId:2,tocIndex:1},{value:"\u70B9\u51FB\u540E\u81EA\u52A8\u66F4\u65B0\u6307\u5B9A\u7684\u5B57\u6BB5",paraId:2,tocIndex:1},{value:"\u81EA\u5B9A\u4E49\u8BF7\u6C42",paraId:2,tocIndex:1},{value:"\u5411\u7B2C\u4E09\u65B9\u53D1\u9001\u8BF7\u6C42",paraId:2,tocIndex:1},{value:"\u5728\u754C\u9762\u914D\u7F6E\u6A21\u5F0F\u4E0B\uFF0C\u5C06\u9F20\u6807\u79FB\u5230\u64CD\u4F5C\u6309\u94AE\u4E0A\uFF0C\u53F3\u4E0A\u89D2\u5C31\u4F1A\u51FA\u73B0\u8BE5\u64CD\u4F5C\u652F\u6301\u7684\u914D\u7F6E\u9879\u3002\u6BD4\u5982\u7B5B\u9009\u64CD\u4F5C\uFF1A",paraId:3,tocIndex:2}]},273641:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u533A\u5757\u662F\u7528\u6765\u5C55\u793A\u548C\u64CD\u4F5C\u6570\u636E\u7684\u89C6\u56FE\u3002\u5728 NocoBase \u91CC\uFF0C\u5C06\u9875\u9762\u3001\u5F39\u7A97\u3001\u62BD\u5C49\u770B\u4F5C\u662F\u533A\u5757\u7684\u5BB9\u5668\uFF0C\u5BB9\u5668\u5C31\u50CF\u4E00\u5F20\u753B\u5E03\uFF0C\u5728\u91CC\u9762\u53EF\u4EE5\u653E\u7F6E\u5404\u79CD\u5404\u6837\u7684\u533A\u5757\u3002",paraId:0,tocIndex:0},{value:"\u5F97\u76CA\u4E8E NocoBase \u5C06\u6570\u636E\u4E0E\u89C6\u56FE\u5206\u79BB\u7684\u8BBE\u8BA1\uFF0C\u9875\u9762\u901A\u8FC7\u533A\u5757\u627F\u8F7D\u6570\u636E\uFF0C\u5E76\u6839\u636E\u4E0D\u540C\u7684\u533A\u5757\u7C7B\u578B\uFF0C\u4EE5\u4E0D\u540C\u7684\u5F62\u5F0F\u7EC4\u7EC7\u548C\u7BA1\u7406\u6570\u636E\u3002",paraId:1,tocIndex:0},{value:"\u4E00\u4E2A\u5B8C\u6574\u7684\u533A\u5757\u7531\u4E09\u90E8\u5206\u7EC4\u6210\uFF1A",paraId:2,tocIndex:1},{value:"\u5185\u5BB9\u533A\uFF1A\u533A\u5757\u7684\u4E3B\u4F53",paraId:3,tocIndex:1},{value:"\u64CD\u4F5C\u533A\uFF1A\u53EF\u4EE5\u653E\u7F6E\u5404\u79CD\u64CD\u4F5C\u6309\u94AE\uFF0C\u7528\u4E8E\u64CD\u4F5C\u533A\u5757\u6570\u636E",paraId:3,tocIndex:1},{value:"\u914D\u7F6E\u533A\uFF1A\u64CD\u4F5C\u533A\u5757\u914D\u7F6E\u7684\u6309\u94AE",paraId:3,tocIndex:1},{value:"NocoBase \u76EE\u524D\u5185\u7F6E 10 \u51E0\u79CD\u533A\u5757\uFF0C\u672A\u6765\u53EF\u4EE5\u901A\u8FC7\u63D2\u4EF6\u7684\u65B9\u5F0F\u652F\u6301\u66F4\u591A\u79CD\u3002",paraId:4,tocIndex:2},{value:"\u6570\u636E\u533A\u5757",paraId:5,tocIndex:2},{value:`\uFF1A\u4E3A\u7EC4\u7EC7\u6570\u636E\u800C\u8BBE\u8BA1\u7684\u533A\u5757\u3002
`,paraId:5,tocIndex:2},{value:"\u8868\u683C",paraId:6,tocIndex:2},{value:"\uFF1A\u4EE5\u8868\u683C\u5F62\u5F0F\u5C55\u793A\u591A\u6761\u6570\u636E\u7684\u533A\u5757\uFF0C\u65E2\u53EF\u4EE5\u5C55\u793A\u4E00\u4E2A\u6570\u636E\u8868\uFF0C\u4E5F\u53EF\u4EE5\u5C55\u793A\u76F8\u4E92\u4E4B\u95F4\u6709\u5173\u8054\u5173\u7CFB\u7684\u591A\u4E2A\u6570\u636E\u8868\u3002",paraId:6,tocIndex:2},{value:"\u8868\u5355",paraId:6,tocIndex:2},{value:"\uFF1A\u4EE5\u5404\u79CD\u7C7B\u578B\u7684\u8F93\u5165\u6846\u5F55\u5165\u6216\u7F16\u8F91\u6570\u636E\u7684\u533A\u5757\uFF0C\u65E2\u53EF\u4EE5\u4E3A\u67D0\u4E00\u4E2A\u6570\u636E\u8868\u8FDB\u884C\u5F55\u5165\uFF0C\u4E5F\u53EF\u4EE5\u5BF9\u76F8\u4E92\u4E4B\u95F4\u6709\u5173\u8054\u5173\u7CFB\u7684\u591A\u4E2A\u6570\u636E\u8868\u7EDF\u4E00\u5F55\u5165\u3002",paraId:6,tocIndex:2},{value:"\u8BE6\u60C5",paraId:6,tocIndex:2},{value:"\uFF1A\u5C55\u793A\u4E00\u6761\u7279\u5B9A\u6570\u636E\u7684\u533A\u5757\uFF0C\u65E2\u53EF\u4EE5\u5BF9\u67D0\u4E00\u4E2A\u6570\u636E\u8868\u7684\u67D0\u4E00\u6761\u6570\u636E\u8FDB\u884C\u5C55\u793A\uFF0C\u4E5F\u53EF\u4EE5\u5BF9\u76F8\u4E92\u4E4B\u95F4\u6709\u5173\u8054\u5173\u7CFB\u7684\u591A\u4E2A\u6570\u636E\u8868\u4E2D\u7684\u591A\u6761\u6570\u636E\u7EDF\u4E00\u5C55\u793A\u3002",paraId:6,tocIndex:2},{value:"\u65E5\u5386",paraId:6,tocIndex:2},{value:"\uFF1A\u4EE5\u65E5\u5386\u7684\u5F62\u5F0F\u5C55\u793A\u591A\u6761\u6570\u636E\u7684\u533A\u5757\uFF0C\u9002\u5408\u67D0\u4E9B\u5728\u65E5\u671F\u4E0A\u5177\u5907\u91CD\u8981\u7279\u5F81\u7684\u6570\u636E\u3002",paraId:6,tocIndex:2},{value:"\u770B\u677F",paraId:6,tocIndex:2},{value:"\uFF1A\u4EE5\u770B\u677F\u7684\u5F62\u5F0F\u5C55\u793A\u591A\u6761\u6570\u636E\u7684\u533A\u5757\uFF0C\u9002\u5408\u7528\u6765\u5BF9\u751F\u4EA7\u8FC7\u7A0B\u8FDB\u884C\u7BA1\u7406\u3002",paraId:6,tocIndex:2},{value:"\u56FE\u8868\u533A\u5757",paraId:5,tocIndex:2},{value:"\uFF1A\u4E3A\u56FE\u5F62\u5316\u5C55\u793A\u7EDF\u8BA1\u6570\u636E\u800C\u8BBE\u8BA1\u7684\u533A\u5757\u3002\u76EE\u524D\u652F\u6301\uFF1A\u67F1\u72B6\u56FE\u3001\u6761\u5F62\u56FE\u3001\u6298\u7EBF\u56FE\u3001\u997C\u56FE\u3001\u9762\u79EF\u56FE\u7B49\u3002",paraId:5,tocIndex:2},{value:"\u5176\u4ED6\u533A\u5757",paraId:5,tocIndex:2},{value:`\uFF1A\u4E3A\u5C55\u793A\u7279\u6B8A\u6570\u636E\u800C\u8BBE\u8BA1\u7684\u533A\u5757\u3002
`,paraId:5,tocIndex:2},{value:"Markdown",paraId:7,tocIndex:2},{value:"\uFF1A\u7528 Markdown \u4E66\u5199\u7684\u6587\u672C\u5185\u5BB9\u3002",paraId:7,tocIndex:2},{value:"\u64CD\u4F5C\u8BB0\u5F55",paraId:7,tocIndex:2},{value:"\uFF1A\u5C55\u793A\u4E00\u4E2A\u6570\u636E\u8868\u4E2D\u7684\u6240\u6709\u6570\u636E\u7684\u53D8\u66F4\u8BB0\u5F55\uFF0C\u5305\u62EC\u65B0\u5EFA\u3001\u7F16\u8F91\u548C\u5220\u9664\u3002",paraId:7,tocIndex:2},{value:"\u8FDB\u5165\u754C\u9762\u914D\u7F6E\u6A21\u5F0F\uFF0C\u5728\u9875\u9762\u548C\u5F39\u7A97\u5185\u70B9\u51FB Add block \u6309\u94AE\u5373\u53EF\u6DFB\u52A0\u533A\u5757\u3002\u9009\u9879\u5206\u4E3A 4 \u6B65\uFF1A",paraId:8,tocIndex:3},{value:"\u9009\u62E9\u533A\u5757\u7C7B\u578B\uFF1A\u76EE\u524D\u53EF\u7528\u7684\u533A\u5757\u7C7B\u578B\u5305\u62EC\u8868\u683C\u3001\u8868\u5355\u3001\u8BE6\u60C5\u3001\u65E5\u5386\u3001\u770B\u677F\u3001Markdown",paraId:9,tocIndex:3},{value:"\u9009\u62E9 Collection\uFF1A\u6B64\u5904\u4F1A\u5217\u51FA\u6240\u6709\u7684 Collection",paraId:9,tocIndex:3},{value:"\u9009\u62E9\u521B\u5EFA\u65B9\u5F0F\uFF1A\u521B\u5EFA\u7A7A\u767D\u533A\u5757\uFF0C\u6216\u8005\u4ECE\u6A21\u677F\u521B\u5EFA",paraId:9,tocIndex:3},{value:"\u9009\u62E9\u6A21\u677F\uFF1A\u82E5\u7B2C 3 \u6B65\u9009\u62E9\u4E86\u4ECE\u6A21\u677F\u521B\u5EFA\uFF0C\u5219\u5728\u7B2C 4 \u6B65\u9009\u62E9\u6A21\u677F",paraId:9,tocIndex:3},{value:"\u914D\u7F6E\u533A\u5757\u5305\u62EC\u4E09\u65B9\u9762\u7684\u5185\u5BB9\uFF1A",paraId:10,tocIndex:4},{value:"\u914D\u7F6E\u533A\u5757\u5185\u5BB9",paraId:11,tocIndex:4},{value:"\u914D\u7F6E\u533A\u5757\u64CD\u4F5C",paraId:11,tocIndex:4},{value:"\u914D\u7F6E\u533A\u5757\u5C5E\u6027",paraId:11,tocIndex:4},{value:"\u4EE5\u8868\u683C\u533A\u5757\u4E3A\u4F8B\uFF0C\u533A\u5757\u5185\u5BB9\u662F\u6307\u8868\u683C\u4E2D\u8981\u663E\u793A\u7684\u5217\u3002\u70B9\u51FB Configure columns \u5373\u53EF\u914D\u7F6E\u8981\u663E\u793A\u7684\u5217\uFF1A",paraId:12,tocIndex:5},{value:"\u4EE5\u8868\u683C\u533A\u5757\u4E3A\u4F8B\uFF0C\u6709\u7B5B\u9009\u3001\u6DFB\u52A0\u3001\u5220\u9664\u3001\u67E5\u770B\u3001\u7F16\u8F91\u3001\u81EA\u5B9A\u4E49\u7B49\u64CD\u4F5C\u53EF\u9009\u3002\u70B9\u51FB Configure actions \u6309\u94AE\u53EF\u4EE5\u914D\u7F6E\u64CD\u4F5C\u3002\u5176\u4E2D\uFF0C\u6BCF\u4E2A\u64CD\u4F5C\u6309\u94AE\u90FD\u53EF\u4EE5\u5355\u72EC\u914D\u7F6E\u5C5E\u6027\uFF1A",paraId:13,tocIndex:6},{value:"\u5C06\u5149\u6807\u79FB\u5230\u533A\u5757\u53F3\u4E0A\u89D2\uFF0C\u4F1A\u770B\u5230\u533A\u5757\u914D\u7F6E\u6309\u94AE\u3002\u4EE5\u8868\u683C\u533A\u5757\u4E3A\u4F8B\uFF0C\u53EF\u4EE5\u914D\u7F6E\u7684\u5C5E\u6027\u6709\uFF1A",paraId:14,tocIndex:7},{value:"Block title",paraId:15,tocIndex:7},{value:"Drag & drop sorting",paraId:15,tocIndex:7},{value:"Set the data scope",paraId:15,tocIndex:7},{value:"Set default sorting rules",paraId:15,tocIndex:7},{value:"Records per page",paraId:15,tocIndex:7},{value:"\u9875\u9762\u5185\u65E2\u53EF\u4EE5\u53EA\u653E\u4E00\u4E2A\u533A\u5757\uFF0C\u4E5F\u53EF\u4EE5\u653E\u591A\u4E2A\u533A\u5757\u8FDB\u884C\u7EC4\u5408\u3002\u4F60\u53EF\u4EE5\u901A\u8FC7\u62D6\u62FD\u5B8C\u6210\u533A\u5757\u4F4D\u7F6E\u548C\u5BBD\u5EA6\u7684\u8C03\u6574\u3002",paraId:16,tocIndex:8},{value:"\u4F60\u53EF\u4EE5\u5C06\u4E00\u4E2A\u533A\u5757\u4FDD\u5B58\u4E3A\u6A21\u677F\uFF0C\u4EE5\u540E\u53EF\u4EE5\u901A\u8FC7\u8FD9\u4E2A\u6A21\u677F\u5FEB\u901F\u521B\u5EFA\u65B0\u7684\u533A\u5757\u3002",paraId:17,tocIndex:9},{value:"\u6BD4\u5982\uFF0C\u4E00\u4E2A\u6570\u636E\u8868\u7684\u8868\u5355\uFF0C\u65E2\u7528\u4E8E\u65B0\u589E\u6570\u636E\uFF0C\u53C8\u7528\u4E8E\u7F16\u8F91\u6570\u636E\uFF0C\u90A3\u5C31\u53EF\u4EE5\u5C06\u8FD9\u4E2A\u8868\u5355\u4FDD\u5B58\u4E3A\u6A21\u677F\uFF0C\u5728\u65B0\u589E\u6570\u636E\u548C\u7F16\u8F91\u6570\u636E\u7684\u754C\u9762\u91CC\u5F15\u7528\u5B83\u3002",paraId:18,tocIndex:9}]},172277:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5F00\u53D1\u4E00\u4E2A\u7CFB\u7EDF\u4E4B\u524D\uFF0C\u6211\u4EEC\u901A\u5E38\u8981\u5BF9\u4E1A\u52A1\u8FDB\u884C\u62BD\u8C61\uFF0C\u5EFA\u7ACB\u6570\u636E\u6A21\u578B\u3002NocoBase \u7684\u6570\u636E\u8868\u7531\u5B57\u6BB5\uFF08\u5217\uFF09\u548C\u8BB0\u5F55\uFF08\u884C\uFF09\u7EC4\u6210\u3002\u6570\u636E\u8868\u7684\u6982\u5FF5\u4E0E\u5173\u7CFB\u578B\u6570\u636E\u5E93\u7684\u6570\u636E\u8868\u6982\u5FF5\u76F8\u8FD1\uFF0C\u4F46\u662F\u5B57\u6BB5\u7684\u6982\u5FF5\u7565\u6709\u4E0D\u540C\u3002",paraId:0,tocIndex:0},{value:"\u4F8B\u5982\uFF0C\u5728\u4E00\u4E2A\u63CF\u8FF0\u8BA2\u5355\u7684\u6570\u636E\u8868\u4E2D\uFF0C\u6BCF\u5217\u5305\u542B\u7684\u662F\u8BA2\u5355\u67D0\u4E2A\u7279\u5B9A\u5C5E\u6027\u7684\u4FE1\u606F\uFF0C\u5982\u6536\u4EF6\u5730\u5740\uFF1B\u800C\u6BCF\u884C\u5219\u5305\u542B\u4E86\u67D0\u4E2A\u7279\u5B9A\u8BA2\u5355\u7684\u6240\u6709\u4FE1\u606F\uFF0C\u5982\u8BA2\u5355\u53F7\u3001\u987E\u5BA2\u59D3\u540D\u3001\u7535\u8BDD\u3001\u6536\u4EF6\u5730\u5740\u7B49\u3002",paraId:1,tocIndex:0},{value:"NocoBase \u7684",paraId:2,tocIndex:1},{value:"\u6570\u636E",paraId:2,tocIndex:1},{value:"\u548C",paraId:2,tocIndex:1},{value:"\u89C6\u56FE",paraId:2,tocIndex:1},{value:"\u662F\u5206\u79BB\u7684\uFF0C\u5206\u522B\u7531\u6570\u636E\u8868\u548C\u533A\u5757\u6765\u7BA1\u7406\u548C\u5448\u73B0\u3002",paraId:2,tocIndex:1},{value:"\u8FD9\u5C31\u610F\u5473\u7740\uFF1A",paraId:3,tocIndex:1},{value:"\u4F60\u53EF\u4EE5\u521B\u5EFA",paraId:4,tocIndex:1},{value:"\u4E00\u4E2A",paraId:4,tocIndex:1},{value:"\u6570\u636E\u8868\uFF0C\u5E76\u4E3A\u5176\u8BBE\u8BA1",paraId:4,tocIndex:1},{value:"\u4E00\u5957",paraId:4,tocIndex:1},{value:"\u754C\u9762\uFF0C\u5B9E\u73B0\u6570\u636E\u7684\u5C55\u793A\u548C\u64CD\u4F5C\uFF1B",paraId:4,tocIndex:1},{value:"\u4F60\u4E5F\u53EF\u4EE5\u521B\u5EFA",paraId:4,tocIndex:1},{value:"\u4E00\u4E2A",paraId:4,tocIndex:1},{value:"\u6570\u636E\u8868\uFF0C\u7136\u540E\u4E3A\u5176\u8BBE\u8BA1",paraId:4,tocIndex:1},{value:"\u591A\u5957",paraId:4,tocIndex:1},{value:"\u754C\u9762\uFF0C\u7528\u4E8E\u4E0D\u540C\u7684\u573A\u666F\u6216\u89D2\u8272\u4E0B\u5BF9\u6570\u636E\u7684\u5C55\u793A\u548C\u64CD\u4F5C\uFF1B",paraId:4,tocIndex:1},{value:"\u4F60\u8FD8\u53EF\u4EE5\u521B\u5EFA",paraId:4,tocIndex:1},{value:"\u591A\u4E2A",paraId:4,tocIndex:1},{value:"\u6570\u636E\u8868\uFF0C\u7136\u540E\u4E3A\u5176\u8BBE\u8BA1",paraId:4,tocIndex:1},{value:"\u4E00\u5957",paraId:4,tocIndex:1},{value:"\u754C\u9762\uFF0C\u5B9E\u73B0\u591A\u4E2A\u6570\u636E\u8868\u7684\u540C\u65F6\u5C55\u793A\u548C\u64CD\u4F5C\uFF1B",paraId:4,tocIndex:1},{value:"\u4F60\u751A\u81F3\u53EF\u4EE5\u521B\u5EFA",paraId:4,tocIndex:1},{value:"\u591A\u4E2A",paraId:4,tocIndex:1},{value:"\u6570\u636E\u8868\uFF0C\u7136\u540E\u4E3A\u5176\u8BBE\u8BA1",paraId:4,tocIndex:1},{value:"\u591A\u5957",paraId:4,tocIndex:1},{value:"\u754C\u9762\uFF0C\u6BCF\u5957\u754C\u9762\u90FD\u53EF\u4EE5\u64CD\u4F5C\u591A\u4E2A\u6570\u636E\u8868\u5E76\u5B8C\u6210\u72EC\u7279\u7684\u529F\u80FD\uFF1B",paraId:4,tocIndex:1},{value:"\u7B80\u5355\u8BF4\uFF0C\u6570\u636E\u4E0E\u754C\u9762\u7684\u5206\u79BB\u4F7F\u5F97",paraId:5,tocIndex:1},{value:"\u6570\u636E\u7684\u7EC4\u7EC7\u548C\u7BA1\u7406\u66F4\u52A0\u7075\u6D3B",paraId:5,tocIndex:1},{value:"\uFF0C\u5982\u4F55\u5448\u73B0\u6570\u636E\u5C31\u770B\u4F60\u5982\u4F55\u914D\u7F6E\u754C\u9762\u3002",paraId:5,tocIndex:1},{value:"NocoBase \u76EE\u524D\u652F\u6301\u4EE5\u4E0B\u51E0\u5341\u79CD\u5B57\u6BB5\uFF0C\u672A\u6765\u53EF\u4EE5\u901A\u8FC7\u63D2\u4EF6\u7684\u65B9\u5F0F\u652F\u6301\u66F4\u591A\u79CD\u3002",paraId:6,tocIndex:2},{value:"\u540D\u79F0",paraId:7,tocIndex:2},{value:"\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u5355\u884C\u6587\u672C",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u56FE\u6807",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u591A\u884C\u6587\u672C",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u5BC6\u7801",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u624B\u673A\u53F7\u7801",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u6570\u5B57",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u6574\u6570",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u7535\u5B50\u90AE\u7BB1",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u767E\u5206\u6BD4",paraId:7,tocIndex:2},{value:"\u57FA\u672C\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E0B\u62C9\u83DC\u5355\uFF08\u5355\u9009\uFF09",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E0B\u62C9\u83DC\u5355\uFF08\u591A\u9009\uFF09",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E2D\u56FD\u884C\u653F\u533A",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u52FE\u9009",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u5355\u9009\u6846",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u590D\u9009\u6846",paraId:7,tocIndex:2},{value:"\u9009\u62E9\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u5173\u8054",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E00\u5BF9\u4E00\uFF08belongs to\uFF09",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E00\u5BF9\u4E00\uFF08has one\uFF09",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u4E00\u5BF9\u591A",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u591A\u5BF9\u4E00",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u591A\u5BF9\u591A",paraId:7,tocIndex:2},{value:"\u5173\u7CFB\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u516C\u5F0F",paraId:7,tocIndex:2},{value:"\u9AD8\u7EA7\u7C7B\u578B",paraId:7,tocIndex:2},{value:"\u81EA\u52A8\u7F16\u7801",paraId:7,tocIndex:2},{value:"\u9AD8\u7EA7\u7C7B\u578B",paraId:7,tocIndex:2},{value:"JSON",paraId:7,tocIndex:2},{value:"\u9AD8\u7EA7\u7C7B\u578B",paraId:7,tocIndex:2},{value:"Markdown",paraId:7,tocIndex:2},{value:"\u591A\u5A92\u4F53",paraId:7,tocIndex:2},{value:"\u5BCC\u6587\u672C",paraId:7,tocIndex:2},{value:"\u591A\u5A92\u4F53",paraId:7,tocIndex:2},{value:"\u9644\u4EF6",paraId:7,tocIndex:2},{value:"\u591A\u5A92\u4F53",paraId:7,tocIndex:2},{value:"\u65E5\u671F",paraId:7,tocIndex:2},{value:"\u65E5\u671F&\u65F6\u95F4",paraId:7,tocIndex:2},{value:"\u65F6\u95F4",paraId:7,tocIndex:2},{value:"\u65E5\u671F&\u65F6\u95F4",paraId:7,tocIndex:2},{value:"ID",paraId:7,tocIndex:2},{value:"\u7CFB\u7EDF\u4FE1\u606F",paraId:7,tocIndex:2},{value:"\u521B\u5EFA\u4EBA",paraId:7,tocIndex:2},{value:"\u7CFB\u7EDF\u4FE1\u606F",paraId:7,tocIndex:2},{value:"\u521B\u5EFA\u65E5\u671F",paraId:7,tocIndex:2},{value:"\u7CFB\u7EDF\u4FE1\u606F",paraId:7,tocIndex:2},{value:"\u6700\u540E\u4FEE\u6539\u4EBA",paraId:7,tocIndex:2},{value:"\u7CFB\u7EDF\u4FE1\u606F",paraId:7,tocIndex:2},{value:"\u6700\u540E\u4FEE\u6539\u65E5\u671F",paraId:7,tocIndex:2},{value:"\u7CFB\u7EDF\u4FE1\u606F",paraId:7,tocIndex:2}]},611837:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728 NocoBase \u91CC\uFF0C\u5C06\u9875\u9762\u3001\u5F39\u7A97\u3001\u62BD\u5C49\u770B\u4F5C\u662F\u533A\u5757\u7684\u5BB9\u5668\uFF0C\u5BB9\u5668\u5C31\u50CF\u4E00\u5F20\u753B\u5E03\uFF0C\u5728\u91CC\u9762\u53EF\u4EE5\u653E\u7F6E\u5404\u79CD\u5404\u6837\u7684\u533A\u5757",paraId:0,tocIndex:0},{value:"\u5728\u5F39\u7A97\u3001\u62BD\u5C49\u3001\u9875\u9762\u5185\uFF0C\u53EF\u4EE5\u6DFB\u52A0\u591A\u4E2A\u6807\u7B7E\u9875\u3002\u5411\u6BCF\u4E2A\u6807\u7B7E\u9875\u91CC\u6DFB\u52A0\u4E0D\u540C\u7684\u533A\u5757\uFF0C\u4ECE\u800C\u663E\u793A\u4E0D\u540C\u7684\u5185\u5BB9\u548C\u64CD\u4F5C\u3002\u6BD4\u5982\uFF0C\u5728\u4E00\u4E2A\u987E\u5BA2\u4FE1\u606F\u7684\u5F39\u7A97\u91CC\uFF0C\u6DFB\u52A0 3 \u4E2A\u6807\u7B7E\u9875\uFF0C\u5206\u522B\u7528\u6765\u663E\u793A\u987E\u5BA2\u7684\u4E2A\u4EBA\u4FE1\u606F\u3001\u8BA2\u5355\u8BB0\u5F55\u3001\u987E\u5BA2\u8BC4\u4EF7\uFF1A",paraId:1,tocIndex:4}]},565329:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u76EE\u524D NocoBase \u652F\u6301\u4E09\u79CD\u7C7B\u578B\u7684\u83DC\u5355\u9879\uFF1A",paraId:0,tocIndex:0},{value:"\u9875\u9762\uFF1A\u8DF3\u8F6C\u81F3\u83DC\u5355\u5173\u8054\u7684 NocoBase \u7684\u9875\u9762\uFF1B",paraId:1,tocIndex:0},{value:"\u5206\u7EC4\uFF1A\u5BF9\u83DC\u5355\u8FDB\u884C\u5206\u7EC4\uFF0C\u5C06\u540C\u7C7B\u83DC\u5355\u653E\u5230\u7EDF\u4E00\u7684\u4F4D\u7F6E\uFF1B",paraId:1,tocIndex:0},{value:"\u94FE\u63A5\uFF1A\u8DF3\u8F6C\u81F3\u6307\u5B9A\u7684 URL\uFF1B",paraId:1,tocIndex:0},{value:"\u4EE5\u4ED3\u50A8\u7CFB\u7EDF\u4E3A\u4F8B\uFF0C\u5982\u679C\u4F60\u7684\u4E1A\u52A1\u91CC\u6709\u50A8\u4F4D\u7BA1\u7406\uFF0C\u50A8\u4F4D\u7BA1\u7406\u91CC\u53C8\u5305\u542B\u51FA\u5165\u5E93\u65E5\u5FD7\u3001\u5E93\u5B58\u67E5\u8BE2\u3001\u8DF3\u8F6C ERP \u7533\u8BF7\u50A8\u4F4D\u7B49\u529F\u80FD\u3002\u90A3\u4E48\u53EF\u4EE5\u8FD9\u6837\u8BBE\u7F6E\u83DC\u5355\uFF1A",paraId:2,tocIndex:0},{value:`- \u50A8\u4F4D\u7BA1\u7406\uFF08\u5206\u7EC4\uFF09
    - \u5E93\u5B58\u67E5\u8BE2\uFF08\u9875\u9762\uFF09
    - \u51FA\u5165\u5E93\u65E5\u5FD7\uFF08\u9875\u9762\uFF09
    - \u8DF3\u8F6CERP\u7533\u8BF7\u50A8\u4F4D\uFF08\u94FE\u63A5\uFF09
`,paraId:3,tocIndex:0},{value:"\u5728 NocoBase \u5185\u7F6E\u7684\u9875\u9762\u6A21\u677F\u4E2D\uFF0C\u83DC\u5355\u4F1A\u51FA\u73B0\u5728\u9876\u90E8\u548C\u5DE6\u4FA7\u3002",paraId:4,tocIndex:1},{value:"\u70B9\u51FB Add menu item\uFF0C\u9009\u62E9\u6DFB\u52A0\u7684\u7C7B\u578B\u3002\u652F\u6301\u65E0\u9650\u7EA7\u5B50\u83DC\u5355\u3002",paraId:5,tocIndex:2},{value:"\u5C06\u5149\u6807\u79FB\u5230\u83DC\u5355\u9879\u4E0A\uFF0C\u53F3\u4E0A\u89D2\u4F1A\u51FA\u73B0\u6392\u5E8F\u548C\u914D\u7F6E\u6309\u94AE\u3002\u6309\u4F4F\u6392\u5E8F\u6309\u94AE\uFF0C\u53EF\u4EE5\u62D6\u62FD\u6392\u5E8F\u3002",paraId:6,tocIndex:3},{value:"\u5BF9\u83DC\u5355\u9879\u53EF\u64CD\u4F5C\u7684\u914D\u7F6E\uFF1A",paraId:7,tocIndex:3},{value:"Edit",paraId:8,tocIndex:3},{value:"Move to",paraId:8,tocIndex:3},{value:"Insert before",paraId:8,tocIndex:3},{value:"Insert after",paraId:8,tocIndex:3},{value:"Insert Inner",paraId:8,tocIndex:3},{value:"Delete",paraId:8,tocIndex:3}]},793118:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u56FE\u8868\u533A\u5757\u662F\u4E00\u4E2A\u7528\u4E8E\u7EC4\u7EC7\u591A\u4E2A\u56FE\u8868\u7684\u9762\u677F\u3002",paraId:0,tocIndex:0},{value:"\u70B9\u51FB\u201C\u6DFB\u52A0\u533A\u5757\u201D (Add block) - \u201C\u56FE\u8868\u201D (Charts)\uFF0C\u53EF\u4EE5\u521B\u5EFA\u53EF\u4EE5\u7A7A\u767D\u7684\u56FE\u8868\u533A\u5757\u3002",paraId:1,tocIndex:1},{value:"\u5728\u56FE\u8868\u533A\u5757\u4E2D\u70B9\u51FB\u201C\u6DFB\u52A0\u533A\u5757\u201D (Add block) - \u201C\u56FE\u8868\u201D (Chart)\uFF0C\u9009\u62E9\u5BF9\u5E94\u7684\u6570\u636E\u8868 (Collection), \u53EF\u4EE5\u521B\u5EFA\u548C\u914D\u7F6E\u56FE\u8868\u3002\u6709\u67E5\u770B\u6743\u9650\u7684\u6570\u636E\u8868\u624D\u53EF\u4EE5\u7528\u4E8E\u914D\u7F6E\u56FE\u8868\uFF0C\u5426\u5219\u5C06\u4F1A\u5728\u9009\u9879\u4E2D\u88AB\u9690\u85CF\u3002",paraId:2,tocIndex:1},{value:"\u56FE\u8868\u533A\u5757\u4E2D\u7684\u56FE\u8868\u53EF\u4EE5\u50CF\u666E\u901A\u533A\u5757\u4E00\u6837\uFF0C\u5728\u56FE\u8868\u533A\u5757\u4E2D\uFF0C\u81EA\u7531\u62D6\u62FD\u548C\u7EC4\u7EC7\u3002",paraId:3,tocIndex:2},{value:"\u70B9\u51FB\u201C\u914D\u7F6E\u201D (Configure) \u6309\u94AE\uFF0C\u53EF\u4EE5\u5BF9\u5F53\u524D\u56FE\u8868\u8FDB\u884C\u4FEE\u6539\u3002",paraId:3,tocIndex:2},{value:"\u70B9\u51FB\u201C\u590D\u5236\u201D (Duplicate) \u6309\u94AE\uFF0C\u53EF\u4EE5\u5FEB\u901F\u590D\u5236\u5F53\u524D\u56FE\u8868\u3002",paraId:3,tocIndex:2},{value:"\u53EF\u4EE5\u201C\u7F16\u8F91\u533A\u5757\u6807\u9898\u201D (Edit block title)\uFF0C\u7ED9\u5F53\u524D\u56FE\u8868\u6DFB\u52A0\u6807\u9898\u8BF4\u660E\u3002",paraId:3,tocIndex:2}]},411397:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u56FE\u8868\u7684\u914D\u7F6E\u9762\u677F\u6574\u4F53\u4E0A\u5212\u5206\u4E3A\u4E09\u4E2A\u90E8\u5206\uFF1A\u6570\u636E\u914D\u7F6E\u3001\u56FE\u8868\u914D\u7F6E\u548C\u56FE\u8868\u9884\u89C8\u3002",paraId:0,tocIndex:0},{value:"\u9876\u90E8\u4E0B\u62C9\u6846\u4EE3\u8868\u5F53\u524D\u6B63\u5728\u914D\u7F6E\u7684\u6570\u636E\u8868 (Collection)\uFF0C\u901A\u8FC7\u4E0B\u62C9\u83DC\u5355\u53EF\u4EE5\u5207\u6362\u3002",paraId:1,tocIndex:1},{value:"\u914D\u7F6E\u5B8C\u6210\u540E\uFF0C\u70B9\u51FB\u201C\u6267\u884C\u67E5\u8BE2\u201D (Run query) \u53EF\u4EE5\u901A\u8FC7\u914D\u7F6E\u83B7\u53D6\u6570\u636E\uFF0C\u201C\u6570\u636E\u201D (Data) \u9762\u677F\u4F1A\u5C55\u793A\u6570\u636E\u3002",paraId:1,tocIndex:1},{value:"\u5EA6\u91CF\u5B57\u6BB5\uFF0C\u901A\u5E38\u662F\u56FE\u8868\u9700\u8981\u5C55\u793A\u7684\u6838\u5FC3\u6570\u636E\u3002\u5EA6\u91CF\u6570\u636E\u53EF\u4EE5\u901A\u8FC7\u805A\u5408\u51FD\u6570\u8FDB\u884C\u7EDF\u8BA1\uFF0C\u652F\u6301\u5E38\u7528\u7684\u6570\u636E\u5E93\u7EDF\u8BA1\u51FD\u6570 ",paraId:2,tocIndex:2},{value:"\u6C42\u548C (Sum)",paraId:2,tocIndex:2},{value:",",paraId:2,tocIndex:2},{value:"\u8BA1\u6570 (Count)",paraId:2,tocIndex:2},{value:",",paraId:2,tocIndex:2},{value:"\u5E73\u5747\u503C (Avg)",paraId:2,tocIndex:2},{value:",",paraId:2,tocIndex:2},{value:"\u6700\u5927\u503C (Max)",paraId:2,tocIndex:2},{value:",",paraId:2,tocIndex:2},{value:"\u6700\u5C0F\u503C (Min)",paraId:2,tocIndex:2},{value:". \u5EA6\u91CF\u5B57\u6BB5\u53EF\u4EE5\u6709\u591A\u4E2A\uFF0C\u53EF\u4EE5\u8BBE\u7F6E\u522B\u540D\u3002",paraId:2,tocIndex:2},{value:"\u7EF4\u5EA6\u5B57\u6BB5\uFF0C\u901A\u5E38\u662F\u56FE\u8868\u6570\u636E\u5206\u7EC4\u7684\u4F9D\u636E\u3002\u5BF9\u4E8E\u65E5\u671F\u7C7B\u578B\u5B57\u6BB5\uFF0C\u652F\u6301\u5982\u56FE\u6240\u793A\u7684\u683C\u5F0F\u5316\u65B9\u5F0F\uFF0C\u683C\u5F0F\u5316\u901A\u8FC7\u6570\u636E\u5E93\u51FD\u6570\u5B9E\u73B0\uFF08\u4F8B\u5982\uFF1AMySQL \u5BF9\u5E94 ",paraId:3,tocIndex:3},{value:"date_format",paraId:3,tocIndex:3},{value:"\uFF09\uFF0C\u5176\u4ED6\u7C7B\u578B\u6570\u636E\u683C\u5F0F\u5316\u89C1",paraId:3,tocIndex:3},{value:"\u6570\u636E\u8F6C\u6362",paraId:4,tocIndex:3},{value:"\u90E8\u5206\u3002",paraId:3,tocIndex:3},{value:"\u7EF4\u5EA6\u683C\u5F0F\u5316 (Dimensions Format) VS \u6570\u636E\u8F6C\u6362 (Transform)",paraId:5},{value:"\u7EF4\u5EA6\u683C\u5F0F\u5316\u53D1\u751F\u5728\u83B7\u53D6\u6700\u7EC8\u6570\u636E\u4E4B\u524D\uFF0C\u6570\u636E\u5206\u7EC4\u6309\u7167\u7EF4\u5EA6\u683C\u5F0F\u5316\u540E\u7684\u503C\u8FDB\u884C\uFF0C\u901A\u5E38\u5728\u6309\u65F6\u95F4\u6BB5\u7B5B\u9009\u6570\u636E\u65F6\u6709\u6B64\u9700\u6C42\u3002",paraId:6},{value:"\u6570\u636E\u8F6C\u6362\u5BF9\u54CD\u5E94\u6570\u636E\u505A\u8FDB\u4E00\u6B65\u5904\u7406\uFF0C\u8BF8\u5982\u53EF\u8BFB\u6027\u5904\u7406\uFF0C\u4EE5\u5C55\u73B0\u6070\u5F53\u7684\u6570\u636E\uFF0C\u6570\u636E\u8F6C\u6362\u5728\u524D\u7AEF\u8FDB\u884C\u3002",paraId:6},{value:"\u7B5B\u9009\u914D\u7F6E\u5C06\u5BF9\u5206\u7EC4\u524D\u7684\u6570\u636E\u8FDB\u884C\u8FC7\u6EE4\u3002\u6709\u201C\u5F53\u524D\u7528\u6237\u201D\u548C\u201C\u5F53\u524D\u65E5\u671F\u201D\u53D8\u91CF\u53EF\u4F9B\u9009\u62E9\uFF0C\u7ED9\u56FE\u8868\u914D\u7F6E\u52A8\u6001\u7684\u7B5B\u9009\u8303\u56F4\u3002",paraId:7,tocIndex:4},{value:"\u9ED8\u8BA4\u6570\u636E\u96C6\u6761\u6570\u4E0A\u9650\u4E3A 2000.",paraId:8,tocIndex:5},{value:"\u5F00\u542F\u7F13\u5B58\u540E\uFF0C\u56FE\u8868\u5C06\u5C55\u793A\u7F13\u5B58\u7684\u6570\u636E\u3002",paraId:9,tocIndex:6},{value:"\u56FE\u8868\u7C7B\u578B (Chart Type) - \u7528\u4E8E\u5C55\u793A\u7684\u56FE\u8868\u7C7B\u578B\u3002NocoBase \u4F7F\u7528 ",paraId:10,tocIndex:7},{value:"G2Plot",paraId:10,tocIndex:7},{value:" \u4F5C\u4E3A\u9ED8\u8BA4\u7684\u56FE\u8868\u5E93\uFF0C\u60F3\u6269\u5C55\u4F7F\u7528\u5176\u4ED6\u56FE\u8868\u5E93\uFF0C\u53EF\u4EE5\u53C2\u8003",paraId:10,tocIndex:7},{value:"\u5F00\u53D1\u6307\u5357",paraId:11,tocIndex:7},{value:"\u3002",paraId:10,tocIndex:7},{value:"\u57FA\u7840\u914D\u7F6E - \u9009\u62E9\u56FE\u8868\u540E\uFF0C\u4F1A\u51FA\u73B0\u76F8\u5E94\u7684\u57FA\u7840\u53EF\u89C6\u5316\u914D\u7F6E\uFF0C\u5B57\u6BB5\u914D\u7F6E\u901A\u5E38\u63D0\u4F9B\u4E86\u4E0B\u62C9\u83DC\u5355\u4F9B\u9009\u62E9\uFF0C\u9009\u9879\u4E2D\u5305\u542B\u4E86 Collection \u7684\u57FA\u7840\u5B57\u6BB5\u548C\u5B57\u6BB5\u522B\u540D\u3002",paraId:10,tocIndex:7},{value:"JSON \u914D\u7F6E - \u5F53\u57FA\u7840\u914D\u7F6E\u4E0D\u6EE1\u8DB3\u8981\u6C42\u65F6\uFF0C\u53EF\u4EE5\u4F7F\u7528 JSON \u914D\u7F6E\u5176\u4ED6\u56FE\u8868\u5C5E\u6027\u3002\u53C2\u8003 ",paraId:10,tocIndex:7},{value:"G2Plot \u6587\u6863",paraId:10,tocIndex:7},{value:"\u3002",paraId:10,tocIndex:7},{value:"\u4F7F\u7528\u6570\u636E\u8F6C\u6362\u53EF\u4EE5\u5BF9\u63A5\u53E3\u54CD\u5E94\u7684\u6570\u636E\u505A\u8FDB\u4E00\u6B65\u5904\u7406\uFF0C\u76EE\u524D\u652F\u6301\u8F6C\u6362\u5904\u7406\u7684\u6570\u636E\u7C7B\u578B\u4E3A ",paraId:12,tocIndex:8},{value:"number",paraId:12,tocIndex:8},{value:",",paraId:12,tocIndex:8},{value:"date",paraId:12,tocIndex:8},{value:",",paraId:12,tocIndex:8},{value:"time",paraId:12,tocIndex:8},{value:",",paraId:12,tocIndex:8},{value:"datetime",paraId:12,tocIndex:8},{value:", \u5BF9\u4E8E\u4E0D\u5C5E\u4E8E\u652F\u6301\u7684\u6570\u636E\u7C7B\u578B\u7684\u5B57\u6BB5\uFF0C\u53EF\u4EE5\u624B\u52A8\u9009\u62E9\u4E3A\u8FD9\u51E0\u4E2A\u7C7B\u578B\uFF0C\u4EE5\u4F7F\u7528\u5BF9\u5E94\u7684\u8F6C\u6362\u65B9\u6CD5\u3002",paraId:12,tocIndex:8}]},577517:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u56FE\u8868\u533A\u5757\u4E2D\u7684\u7B5B\u9009\u533A\u5757\uFF0C\u7528\u4E8E\u5BF9\u5F53\u524D\u56FE\u8868\u533A\u5757\u5167\u7684\u591A\u4E2A\u56FE\u8868\u8FDB\u884C\u52A8\u6001\u7B5B\u9009\u3002",paraId:0,tocIndex:0},{value:"\u5728\u56FE\u8868\u533A\u5757\u4E2D\u70B9\u51FB\u201C\u6DFB\u52A0\u533A\u5757\u201D (Add block) - \u201C\u7B5B\u9009\u201D (Filter), \u53EF\u4EE5\u542F\u7528/\u7981\u7528\u7B5B\u9009\u533A\u5757\u3002",paraId:1,tocIndex:1},{value:"\u5BF9\u4E8E\u5F53\u524D\u56FE\u8868\u533A\u5757\u4E2D\u7684\u56FE\u8868\u6240\u7528\u5230\u7684\u6570\u636E\u8868\uFF0C\u76F4\u63A5\u9009\u62E9\u6570\u636E\u8868\u5BF9\u5E94\u7684\u5B57\u6BB5\uFF0C\u5373\u53EF\u521B\u5EFA\u4E00\u4E2A\u7B5B\u9009\u8868\u5355\u5B57\u6BB5\u3002",paraId:2,tocIndex:3},{value:"\u53EF\u4EE5\u5BF9\u8868\u5355\u5B57\u6BB5\u8FDB\u884C\u914D\u7F6E\uFF1A",paraId:3,tocIndex:3},{value:"\u914D\u7F6E\u5B57\u6BB5\u663E\u793A\u6807\u9898",paraId:4,tocIndex:3},{value:"\u914D\u7F6E\u5B57\u6BB5\u63CF\u8FF0",paraId:5,tocIndex:3},{value:"\u914D\u7F6E\u8BE5\u5B57\u6BB5\u5728\u7B5B\u9009\u65F6\u5E94\u7528\u7684\u64CD\u4F5C\u7B26",paraId:6,tocIndex:3},{value:`\u914D\u7F6E\u5B57\u6BB5\u9ED8\u8BA4\u503C\uFF0C\u53EF\u4EE5\u4F7F\u7528\u53D8\u91CF\u3002\u53D8\u91CF\u7684\u6570\u636E\u7C7B\u578B\u9700\u4E0E\u5F53\u524D\u5B57\u6BB5\u6570\u636E\u7C7B\u578B\u76F8\u7B26\u3002
`,paraId:7,tocIndex:3},{value:"\u4F8B\u5982\uFF1A",paraId:8,tocIndex:3},{value:"\u914D\u7F6E\u9ED8\u8BA4\u503C\u4E3A\u5F53\u524D\u7528\u6237ID\uFF0C\u9875\u9762\u52A0\u8F7D\u540E\u81EA\u52A8\u7B5B\u9009\u51FA\u5F53\u524D\u7528\u6237\u6570\u636E\u3002",paraId:9,tocIndex:3},{value:"\u914D\u7F6E\u9ED8\u8BA4\u503C\u4E3A\u5F53\u524D\u65E5\u671F\uFF0C\u9875\u9762\u52A0\u8F7D\u540E\u81EA\u52A8\u7B5B\u9009\u51FA\u5F53\u524D\u65E5\u671F\u6570\u636E\u3002",paraId:9,tocIndex:3},{value:"\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u53EF\u80FD\u9700\u8981\u7528\u540C\u4E00\u4E2A\u7B5B\u9009\u5B57\u6BB5\u6765\u7B5B\u9009\u4E0D\u540C\u8868\u7684\u4E0D\u540C\u5B57\u6BB5\u3002\u4F8B\u5982\uFF1A\u7528\u4E00\u4E2A\u65E5\u671F\u5B57\u6BB5\u6765\u7B5B\u9009\u4E0D\u540C\u8868\u7684\u4E0D\u540C\u65E5\u671F\u5B57\u6BB5\u3002\u8FD9\u65F6\u5019\u53EF\u4EE5\u9009\u62E9\u521B\u5EFA\u81EA\u5B9A\u4E49\u5B57\u6BB5\u3002",paraId:10,tocIndex:4},{value:"\u6DFB\u52A0\u81EA\u5B9A\u4E49\u5B57\u6BB5\u7684\u65F6\u5019\uFF0C\u9700\u8981\u8BBE\u7F6E\u5B57\u6BB5\u6807\u9898\uFF0C\u9009\u62E9\u5B57\u6BB5\u7EC4\u4EF6\u53CA\u8FDB\u884C\u76F8\u5E94\u914D\u7F6E\uFF0C\u8FD8\u53EF\u4EE5\u4ECE\u5F53\u524D\u533A\u5757\u4F7F\u7528\u7684\u6570\u636E\u8868\u4E2D\u9009\u62E9\u4E00\u4E2A\u5B57\u6BB5\uFF0C\u76F4\u63A5\u5E94\u7528\u8BE5\u5B57\u6BB5\u7684\u5143\u6570\u636E\u914D\u7F6E\uFF0C\u907F\u514D\u91CD\u590D\u914D\u7F6E\u3002",paraId:11,tocIndex:4},{value:"\u8981\u4F7F\u7528\u81EA\u5B9A\u4E49\u7B5B\u9009\u5B57\u6BB5\uFF0C\u9700\u8981\u6253\u5F00\u5BF9\u5E94\u56FE\u8868\u7684\u914D\u7F6E\uFF0C\u7136\u540E\u5728\u6570\u636E\u67E5\u8BE2\u7684\u7B5B\u9009\u914D\u7F6E\u4E2D\uFF0C\u6DFB\u52A0\u7B5B\u9009\u6761\u4EF6\u5E76\u4F7F\u7528\u201C\u5F53\u524D\u7B5B\u9009\u201D (Current filter) \u4E2D\u7684\u53D8\u91CF\u3002\u88AB\u7B5B\u9009\u5B57\u6BB5\u7684\u7C7B\u578B\u9700\u8981\u548C\u7B5B\u9009\u8868\u5355\u81EA\u5B9A\u4E49\u5B57\u6BB5\u7684\u7C7B\u578B\u76F8\u7B26\u3002",paraId:12,tocIndex:4},{value:"\u5BF9\u4E8E\u81EA\u5B9A\u4E49\u5B57\u6BB5\uFF0C\u540C\u6837\u53EF\u4EE5\u914D\u7F6E\u6807\u9898\u3001\u63CF\u8FF0\u548C\u9ED8\u8BA4\u503C\u3002",paraId:13,tocIndex:4},{value:"\u7B5B\u9009 (Filter) - \u5E94\u7528\u7B5B\u9009\u6761\u4EF6",paraId:14,tocIndex:5},{value:"\u91CD\u7F6E (Reset) - \u91CD\u7F6E\u7B5B\u9009\u8868\u5355",paraId:14,tocIndex:5},{value:"\u6298\u53E0/\u5C55\u5F00 (Collapse / Expand) - \u5C06\u6298\u53E0\u4E3A\u4E00\u884C\u6216\u5C55\u5F00\u591A\u884C",paraId:14,tocIndex:5}]},879654:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase\u7684\u6570\u636E\u53EF\u89C6\u5316\u63D2\u4EF6\u63D0\u4F9B\u4E86\u53EF\u89C6\u5316\u7684\u6570\u636E\u68C0\u7D22\u529F\u80FD\u548C\u4E30\u5BCC\u7684\u56FE\u8868\u7EC4\u4EF6\uFF0C\u57FA\u4E8E\u7CFB\u7EDFCollection\u6570\u636E\uFF0C\u7528\u6237\u53EF\u4EE5\u5FEB\u901F\u5EFA\u7ACB\u53EF\u89C6\u5316\u9762\u677F\uFF0C\u7075\u6D3B\u7EC4\u7EC7\u56FE\u8868\uFF0C\u8FDB\u884C\u4E1A\u52A1\u6570\u636E\u5206\u6790\u3002",paraId:0,tocIndex:1},{value:`\u8BA1\u5212\u6216\u8FDB\u884C\u4E2D
`,paraId:1,tocIndex:3},{value:"\u5BF9\u5355\u4E2A\u56FE\u8868\u8FDB\u884C\u6570\u636E\u4E0B\u94BB\uFF0C\u4E0E\u8868\u683C\u8054\u52A8",paraId:2,tocIndex:3},{value:"\u4E0ESQL Collection\u66F4\u597D\u7ED3\u5408",paraId:2,tocIndex:3},{value:"\u56FE\u8868\u4EA4\u4E92\u914D\u7F6E\uFF0C\u5982\u94FE\u63A5\u8DF3\u8F6C",paraId:2,tocIndex:3},{value:"\u5728\u5176\u4ED6\u533A\u5757\u4E2D\u6DFB\u52A0\u56FE\u8868",paraId:1,tocIndex:3},{value:"\u66F4\u65B9\u4FBF\u7684\u6570\u636E\u5904\u7406\u548C\u8F6C\u6362",paraId:1,tocIndex:3},{value:"\u652F\u6301Having",paraId:1,tocIndex:3},{value:"\u5728\u56FE\u8868\u533A\u5757\u4E2D\u6DFB\u52A0\u5176\u4ED6\u533A\u5757\uFF0C\u6BD4\u5982Markdown",paraId:1,tocIndex:3},{value:"\u5728\u4E00\u4E2A\u56FE\u8868\u4E2D\u7EC4\u5408\u591A\u4E2AQuery",paraId:1,tocIndex:3},{value:"\u6743\u9650\u63A7\u5236\u4F18\u5316",paraId:1,tocIndex:3},{value:"...",paraId:1,tocIndex:3}]},703199:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},361128:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},187601:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u6863\u5F85\u8865\u5145",paraId:0}]},358646:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},998728:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},241863:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u540C\u6B65\u4E4B\u540E\uFF0C\u4F1A\u5217\u51FA\u6240\u6709\u53EF\u7FFB\u8BD1\u8BCD\u6761",paraId:0,tocIndex:6},{value:"\u7FFB\u8BD1\u5B8C\u6210\u4E4B\u540E\uFF0C\u9700\u8981\u70B9\u51FB\u201C\u53D1\u5E03\u201D\u6309\u94AE\uFF0C\u624D\u80FD\u4F7F\u4FEE\u6539\u7ED3\u679C\u751F\u6548",paraId:1,tocIndex:7},{value:"\u542F\u7528\u5176\u4ED6\u8BED\u8A00\uFF0C\u5982\u7B80\u4F53\u4E2D\u6587",paraId:2,tocIndex:8},{value:"\u5207\u6362\u8BED\u8A00",paraId:3,tocIndex:8},{value:"\u8BCD\u6761\u540C\u6B65",paraId:4,tocIndex:8},{value:"\u7FFB\u8BD1\u5E76\u53D1\u5E03",paraId:5,tocIndex:8}]},335527:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u6863\u5F85\u8865\u5145",paraId:0}]},548711:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},588915:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u63D0\u4F9B\u79FB\u52A8\u7AEF\u9875\u9762\u914D\u7F6E\u7684\u80FD\u529B\u3002",paraId:0,tocIndex:1},{value:"\u9884\u7F6E\u63D2\u4EF6\uFF0C\u9700\u8981\u5148\u6FC0\u6D3B\u624D\u80FD\u4F7F\u7528\u3002",paraId:1,tocIndex:2}]},780096:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u63D2\u4EF6\u7BA1\u7406\u5668\u652F\u6301\u901A\u8FC7\u754C\u9762\u6DFB\u52A0\u63D2\u4EF6\uFF0C\u4EE5\u7B80\u5355\u3001\u76F4\u89C2\uFF0C\u8F7B\u91CF\u7EA7\u7684\u4F7F\u7528\u4F53\u9A8C\u6765\u6269\u5C55 NocoBase \u7684\u529F\u80FD\u3002\u8F7B\u677E\u6269\u5C55\u548C\u5B9A\u5236\u5E94\u7528\u529F\u80FD\uFF0C\u5305\u62EC\u5B89\u88C5\u3001\u5347\u7EA7\u3001\u548C\u5378\u8F7D\u63D2\u4EF6",paraId:0,tocIndex:0},{value:"\u63D2\u4EF6\u7BA1\u7406\u5668\u7684\u7EC4\u6210\u90E8\u5206",paraId:1,tocIndex:0},{value:"\u672C\u5730\u63D2\u4EF6/\u63D2\u4EF6\u5E02\u573A",paraId:2,tocIndex:0},{value:"\u63D2\u4EF6\u5206\u7C7B\uFF08\u5185\u7F6E\u3001\u542F\u7528\u3001\u672A\u542F\u7528\u3001\u6709\u95EE\u9898,\u652F\u6301\u6309\u63D2\u4EF6\u540D\u79F0\u6A21\u7CCA\u641C\u7D22\uFF09",paraId:2,tocIndex:0},{value:"\u6DFB\u52A0\u65B0\u63D2\u4EF6",paraId:2,tocIndex:0},{value:"\u63D2\u4EF6\u914D\u7F6E\u4E3B\u4F53",paraId:2,tocIndex:0},{value:"\u70B9\u51FB\u63D2\u4EF6\u53EF\u4EE5\u5FEB\u901F\u9605\u89C8\u63D2\u4EF6\u7684\u4ECB\u7ECD\u6587\u6863\uFF08\u5305\u62EC\u8BF4\u660E\u6587\u6863\u3001\u4F9D\u8D56\u517C\u5BB9\u6027\u68C0\u67E5\u3001\u66F4\u65B0\u65E5\u5FD7\uFF09",paraId:3,tocIndex:1},{value:"\u5373\u63D2\u5373\u7528\uFF0C\u53EF\u4EE5\u76F4\u63A5\u901A\u8FC7\u754C\u9762\u6DFB\u52A0\u63D2\u4EF6\uFF0C\u652F\u6301\u4ECE npm registry\uFF08\u53EF\u4EE5\u662F\u79C1\u6709\u7684\uFF09\u4E0B\u8F7D\u3001\u672C\u5730\u4E0A\u4F20\u3001URL \u4E0B\u8F7D",paraId:4,tocIndex:2},{value:"\u76EE\u524D\u4EC5 storage/plugins \u4E0B\u7684\u63D2\u4EF6\u624D\u6709\u66F4\u65B0\u64CD\u4F5C\uFF0C\u5982\u56FE",paraId:5,tocIndex:6}]},606232:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7BA1\u7406\u4E2D\u5FC3\u4E3A\u7528\u6237\u63D0\u4F9B\u4E86\u4E00\u4E2A\u96C6\u4E2D\u7BA1\u7406\u548C\u914D\u7F6E\u7CFB\u7EDF\u4FE1\u606F\u4EE5\u53CA\u4E0E\u5DE5\u4F5C\u76F8\u5173\u8BBE\u7F6E\u7684\u5E73\u53F0\u3002\u7528\u6237\u53EF\u4EE5\u6839\u636E\u5176\u7279\u5B9A\u7684\u4E1A\u52A1\u9700\u6C42\u548C\u4E2A\u4EBA\u504F\u597D\u6765\u81EA\u5B9A\u4E49\u7CFB\u7EDF\u3001\u6570\u636E\u8868\u5EFA\u6A21\u3001\u5DE5\u4F5C\u6D41\u914D\u7F6E\u548C\u63D2\u4EF6\u914D\u7F6E",paraId:0,tocIndex:0},{value:"\u63D2\u4EF6\u7BA1\u7406\u4E2D\u5FC3\u7684\u7EC4\u6210",paraId:1,tocIndex:0},{value:"\u7F6E\u9876\u7684\u5FEB\u6377\u914D\u7F6E\u9879",paraId:2,tocIndex:0},{value:"\u6240\u6709\u6FC0\u6D3B\u7684\u63D2\u4EF6\u914D\u7F6E\u5217\u8868",paraId:2,tocIndex:0},{value:"\u63D2\u4EF6\u7684\u6807\u7B7E\u9875",paraId:2,tocIndex:0},{value:"\u6B63\u6587\u5185\u5BB9",paraId:2,tocIndex:0}]},44219:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u6863\u5F85\u8865\u5145",paraId:0}]},663266:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u6863\u5F85\u8865\u5145",paraId:0}]},853541:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},971600:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u81EA\u5B9A\u4E49\u6DFB\u52A0\u6570\u636E\u64CD\u4F5C\u5141\u8BB8\u7528\u6237\u5728\u64CD\u4F5C\u4E2D\u4E3A\u4EFB\u610F\u6570\u636E\u8868\u4E2D\u6DFB\u52A0\u6570\u636E",paraId:0,tocIndex:0}]},489974:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u914D\u7F6E\u81EA\u5B9A\u4E49\u8BF7\u6C42\u64CD\u4F5C\u7684\u8BF7\u6C42\u5730\u5740\uFF0C\u4EE5\u6EE1\u8DB3\u7279\u5B9A\u4E1A\u52A1\u9700\u6C42\uFF0C\u8BE6\u60C5\u67E5\u770B\u81EA\u5B9A\u4E49\u8BF7\u6C42\u63D2\u4EF6\u6587\u6863",paraId:0,tocIndex:0}]},693315:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5220\u9664\u64CD\u4F5C\u7528\u4E8E\u5220\u9664\u6570\u636E\u8BB0\u5F55\uFF08\u884C\u6309\u94AE/\u6279\u91CF\u64CD\u4F5C\u6309\u94AE\uFF09\uFF0C\u6709\u4E8C\u6B21\u786E\u8BA4\u5F39\u7A97",paraId:0,tocIndex:0}]},391120:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u590D\u5236\u64CD\u4F5C\u5141\u8BB8\u7528\u6237\u590D\u5236\u4E00\u884C\u6570\u636E\u4EE5\u4FBF\u4E8E\u521B\u5EFA\u65B0\u7684\u6570\u636E\u8BB0\u5F55\uFF0C\u652F\u6301\u76F4\u63A5\u590D\u5236/\u590D\u5236\u5230\u8868\u5355\u5E76\u7EE7\u7EED\u586B\u5199\u4E24\u79CD\u65B9\u5F0F",paraId:0,tocIndex:0},{value:"\u9ED8\u8BA4\u4EE5\u76F4\u63A5\u590D\u5236\u7684\u65B9\u5F0F\u590D\u5236\u6570\u636E",paraId:1,tocIndex:1},{value:"\u76EE\u6807\u6570\u636E\u8868\uFF1A\u662F\u6307\u590D\u5236\u6DFB\u52A0\u7684\u76EE\u6807\u6570\u636E\u8868\uFF08\u5728\u7EE7\u627F\u7684\u573A\u666F\u4E0B\uFF0C\u53EF\u4EE5\u590D\u5236\u7ED9\u5B50\u8868\uFF0C\u76F4\u63A5\u590D\u5236\u53EA\u80FD\u590D\u5236\u6DFB\u52A0\u5230\u672C\u8868\uFF09",paraId:1,tocIndex:1},{value:"\u6A21\u7248\u5B57\u6BB5\uFF1A\u7528\u4E8E\u6307\u5B9A\u8981\u590D\u5236\u7684\u5B57\u6BB5\uFF0C\u53EF\u5168\u9009\uFF0C\u5FC5\u586B",paraId:1,tocIndex:1},{value:"\u5B8C\u6210\u914D\u7F6E\u540E\u70B9\u51FB\u6309\u94AE\u5373\u590D\u5236\u6570\u636E",paraId:2,tocIndex:1},{value:"\u914D\u7F6E\u7684\u6A21\u677F\u5B57\u6BB5\u4F5C\u4E3A\u5C06\u9ED8\u8BA4\u503C\u586B\u5145\u5230\u8868\u5355\u4E2D\uFF0C\u53EF\u4FEE\u6539\u540E\u63D0\u4EA4",paraId:3,tocIndex:2},{value:"\u53EF\u4EE5\u8BBE\u7F6E\u672C\u8868\u6216\u5B50\u8868\u4E3A\u590D\u5236\u6DFB\u52A0\u7684\u76EE\u6807\u8868",paraId:4,tocIndex:2},{value:"\u914D\u7F6E\u6A21\u677F\u5B57\u6BB5\uFF1A\u6A21\u677F\u5B57\u6BB5\u5C06\u4F5C\u4E3A\u9ED8\u8BA4\u503C\u586B\u5145\u5230\u8868\u5355\u4E2D\uFF0C\u53EA\u4F1A\u5E26\u51FA\u6709\u52FE\u9009\u7684\u5B57\u6BB5\u503C",paraId:5,tocIndex:2},{value:"\u300C\u8FD0\u5355\u300D\uFF08o2m\uFF09\u662F\u590D\u5236\u7684\u5173\u7CFB\uFF0C\u8C03\u6574\u5176\u5B57\u6BB5\u7EC4\u4EF6\u4E3A\u5B50\u8868\u5355\uFF0C\u53EF\u914D\u7F6E\u5B50\u8868\u5355\u4E2D\u7684\u5B57\u6BB5",paraId:6,tocIndex:2},{value:"\u540C\u6B65\u8868\u5355\u5B57\u6BB5\uFF1A\u5B8C\u6210\u8868\u5355\u914D\u7F6E\u540E\u53EF\u70B9\u51FB\u540C\u6B65\u8868\u5355\u5B57\u6BB5\u6309\u94AE\uFF0C\u4F1A\u81EA\u52A8\u89E3\u6790\u5C06\u8868\u5355\u4E2D\u5DF2\u914D\u7F6E\u7684\u5B57\u6BB5\u5747\u52FE\u9009\u4E0A\uFF08\u6BCF\u6B21\u8868\u5355\u5B57\u6BB5\u914D\u7F6E\u4FEE\u6539\u4E4B\u540E\u9700\u8981\u624B\u52A8\u518D\u540C\u6B65\u4E00\u6B21\uFF09\uFF0C\u540C\u6B65\u8868\u5355\u5B57\u6BB5\u540E\u53EF\u81EA\u5B9A\u4E49\u8C03\u6574\u6A21\u677F\u5B57\u6BB5",paraId:7,tocIndex:2},{value:"\u70B9\u51FB\u590D\u5236\u64CD\u4F5C\u4F1A\u6253\u5F00\u5F39\u7A97\uFF0C\u5E76\u6309\u7167\u6A21\u677F\u5B57\u6BB5\u5E26\u51FA\u6A21\u677F\u6570\u636E\u4F5C\u4E3A\u8868\u5355\u9ED8\u8BA4\u503C\u586B\u5145\uFF0C\u53EF\u4FEE\u6539\u6570\u636E\u540E\u63D0\u4EA4\u5B8C\u6210\u6570\u636E\u590D\u5236",paraId:8,tocIndex:2},{value:"\u5982\u4E0B\u56FE\u5B8C\u6574\u793A\u4F8B\u4E3A\u8BA2\u5355\u5217\u8868\u914D\u7F6E\u590D\u5236\u64CD\u4F5C",paraId:9,tocIndex:2},{value:"\u5BF9\u4E8E\u4E0D\u540C\u5B57\u6BB5\uFF08\u4E0D\u540C\u5173\u7CFB\u7C7B\u578B\uFF09\u6709\u4E0D\u540C\u7684\u5904\u7406\u903B\u8F91\uFF08\u590D\u5236\u3001\u5F15\u7528\u3001\u9884\u52A0\u8F7D\uFF09\uFF0C\u5176\u4E2D\u8C03\u6574\u5173\u7CFB\u5B57\u6BB5\u7684\u5B57\u6BB5\u7EC4\u4EF6\u4E2D\u4E5F\u4F1A\u5F71\u54CD\u5904\u7406\u903B\u8F91\uFF08Select \u548C Record pikcer \u7528\u4E8E\u5904\u7406\u5F15\u7528\u5173\u7CFB\uFF0CSub-form \u548C Sub-table \u7528\u4E8E\u5904\u7406\u590D\u5236\u5173\u7CFB\uFF09",paraId:10,tocIndex:3},{value:"\u590D\u5236",paraId:11,tocIndex:3},{value:"\u666E\u901A\u5B57\u6BB5\u662F\u590D\u5236",paraId:12,tocIndex:3},{value:"hasOne \u548C hasMany \u7684\u5173\u7CFB\u5B57\u6BB5\u53EA\u80FD\u662F\u590D\u5236\uFF08\u5373\u8BE5\u7C7B\u578B\u7684\u5173\u7CFB\u5B57\u6BB5\u4E0D\u80FD\u7528 Select\u3001Record picker \u4F5C\u4E3A\u5B57\u6BB5\u7EC4\u4EF6\uFF0C\u5E94\u4F7F\u7528 Sub-form\u3001Sub-table \u7B49\uFF09",paraId:13,tocIndex:3},{value:"hasOne \u548C hasMany \u5B57\u6BB5\u7EC4\u4EF6\u7684\u53D8\u66F4\u4E0D\u4F1A\u6539\u53D8\u5904\u7406\u903B\u8F91\uFF08\u590D\u5236\uFF09",paraId:14,tocIndex:3},{value:"\u590D\u5236\u7684\u5173\u7CFB\u5B57\u6BB5\uFF0C\u6240\u6709\u7684\u5B50\u5B57\u6BB5\u90FD\u53EF\u4EE5\u88AB\u9009\u62E9",paraId:14,tocIndex:3},{value:"\u5F15\u7528",paraId:15,tocIndex:3},{value:"belongsTo \u548C belongsToMany \u662F\u5F15\u7528",paraId:16,tocIndex:3},{value:"\u5F15\u7528\u662F\u53EF\u80FD\u53D8\u6210\u590D\u5236\u7684\uFF0C\u6BD4\u5982\u5B57\u6BB5\u7EC4\u4EF6\u4ECE select \u8C03\u6574\u4E3A sub-form \u540E\uFF0C\u5173\u7CFB\u5C31\u4ECE\u5F15\u7528\u53D8\u6210\u4E86\u590D\u5236\uFF08\u53D8\u6210\u590D\u5236\u4E4B\u540E\uFF0C\u6240\u6709\u7684\u5B50\u5B57\u6BB5\u90FD\u662F\u53EF\u9009\u7684\uFF09",paraId:16,tocIndex:3},{value:"\u9884\u52A0\u8F7D\uFF1A\u5F15\u7528\u5B57\u6BB5\u91CC\u7684\u5173\u7CFB\u5B57\u6BB5",paraId:17,tocIndex:3},{value:"\u5F15\u7528\u7684\u5173\u7CFB\u5B57\u6BB5\u4E0B\u7684\u5173\u7CFB\u5B57\u6BB5\u4E3A\u9884\u52A0\u8F7D",paraId:18,tocIndex:3},{value:"\u9884\u52A0\u8F7D\u7684\u5173\u7CFB\u5B57\u6BB5\u5728\u5B57\u6BB5\u7EC4\u4EF6\u53D8\u66F4\u540E\u53EF\u80FD\u53D8\u6210\u5F15\u7528\u6216\u8005\u590D\u5236",paraId:18,tocIndex:3},{value:"\u6240\u6709\u7684\u590D\u5236\u5B57\u6BB5\u90FD\u52FE\u9009\u4E0A",paraId:19,tocIndex:4},{value:"\u6240\u6709\u7684\u5F15\u7528\u5B57\u6BB5\u90FD\u52FE\u9009\u4E0A",paraId:19,tocIndex:4},{value:"\u6240\u6709\u7684\u5173\u7CFB\u7684 fk \u90FD\u4F1A\u8FC7\u6EE4\u6389",paraId:20,tocIndex:5},{value:"\u5982\u679C\u662F\u590D\u5236\u7684\u5173\u7CFB\u6570\u636E pk \u4E5F\u4F1A\u8FC7\u6EE4\u6389",paraId:20,tocIndex:5},{value:"\u5F15\u7528\u548C\u9884\u52A0\u8F7D\u6709 pk \u5B57\u6BB5",paraId:20,tocIndex:5},{value:"\u5728\u5927\u591A\u6570\u573A\u666F\u4E0B\uFF0C\u8868\u5355\u914D\u7F6E\u6D89\u53CA\u7684\u5B57\u6BB5\u975E\u5E38\u7E41\u591A\u3002\u5728\u5904\u7406\u8FD9\u79CD\u590D\u6742\u8868\u5355\u573A\u666F\u65F6\uFF0C\u624B\u52A8\u914D\u7F6E\u6A21\u677F\u5B57\u6BB5\u901A\u5E38\u4F1A\u53D8\u5F97\u975E\u5E38\u7E41\u7410\u3002\u4E3A\u4E86\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF0C\u5F15\u5165\u4E86\u4E00\u4E2A\u529F\u80FD\u5F3A\u5927\u7684\u540C\u6B65\u8868\u5355\u5B57\u6BB5\u6309\u94AE\u3002\u8FD9\u4E2A\u6309\u94AE\u7684\u4F5C\u7528\u662F\u81EA\u52A8\u89E3\u6790\u8868\u5355\u5B57\u6BB5\u7684\u914D\u7F6E\uFF0C\u6839\u636E\u5B57\u6BB5\u7C7B\u578B\u548C\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u7684\u914D\u7F6E\u6765\u5904\u7406\u5B57\u6BB5\u590D\u5236\u903B\u8F91\uFF0C\u5305\u62EC\u590D\u5236\u3001\u5F15\u7528\u548C\u9884\u52A0\u8F7D\u3002\u5728\u8FD9\u4E2A\u8FC7\u7A0B\u4E2D\uFF0C\u5DF2\u7ECF\u914D\u7F6E\u597D\u7684\u5B57\u6BB5\u4F1A\u9ED8\u8BA4\u88AB\u52FE\u9009\u4E0A",paraId:21,tocIndex:6},{value:"\u6BCF\u5F53\u7528\u6237\u4FEE\u6539\u8868\u5355\u5B57\u6BB5\u914D\u7F6E\u4E4B\u540E\uFF0C\u7CFB\u7EDF\u4E0D\u4F1A\u81EA\u52A8\u540C\u6B65\u8FD9\u4E9B\u53D8\u5316\u3002\u56E0\u6B64\uFF0C\u7528\u6237\u9700\u8981\u624B\u52A8\u70B9\u51FB\u540C\u6B65\u8868\u5355\u5B57\u6BB5\u6309\u94AE\uFF0C\u4EE5\u4FBF\u5C06\u6700\u65B0\u7684\u914D\u7F6E\u4FE1\u606F\u5E94\u7528\u5230\u6A21\u677F\u914D\u7F6E\u4E2D\u3002",paraId:22,tocIndex:6}]},311524:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7F16\u8F91\u64CD\u4F5C\u5141\u8BB8\u7528\u6237\u5BF9\u6570\u636E\u8FDB\u884C\u4FEE\u6539\uFF0C\u901A\u5E38\u914D\u7F6E\u8868\u5355\u533A\u5757",paraId:0,tocIndex:0}]},924076:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5BFC\u51FA\u64CD\u4F5C\u662F\u901A\u8FC7\u63D2\u4EF6\u6269\u5C55\u5B9E\u73B0\u7684\uFF0C\u6279\u91CF\u5BFC\u51FA\u533A\u5757\u4E2D\u6240\u7ED1\u5B9A\u7684\u6570\u636E\u8868\u7684\u6240\u6709\u6570\u636E\uFF0C\u652F\u6301\u914D\u7F6E\u5BFC\u51FA\u5B57\u6BB5\u7684\u6807\u9898",paraId:0,tocIndex:0},{value:"\u914D\u7F6E\u53EF\u5BFC\u51FA\u5B57\u6BB5",paraId:1,tocIndex:0}]},444890:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7B5B\u9009\u64CD\u4F5C\u901A\u5E38\u51FA\u73B0\u5728\u6570\u636E\u533A\u5757\u4E2D\uFF0C\u53EF\u4EE5\u914D\u7F6E\u5404\u79CD\u6761\u4EF6\u6765\u8FC7\u6EE4\u6570\u636E\uFF0C\u9700\u8981\u6CE8\u610F\u7684\u662F\u5982\u679C\u533A\u5757\u5DF2\u7ECF\u914D\u7F6E\u4E86\u6570\u636E\u8303\u56F4\uFF0C\u7B5B\u9009\u64CD\u4F5C\u5C06\u4E0E\u6570\u636E\u8303\u56F4\u7684\u6761\u4EF6\u5408\u5E76\u4F5C\u4E3A\u6700\u7EC8\u8FC7\u6EE4\u6761\u4EF6\u3002",paraId:0,tocIndex:0},{value:"\u652F\u6301\u914D\u7F6E\u53EF\u7B5B\u9009\u7684\u5B57\u6BB5",paraId:1,tocIndex:0},{value:"\u5982\u4E0B\u56FE\u8FD0\u5355\u5217\u8868\u914D\u7F6E\u7B5B\u9009\u64CD\u4F5C\uFF1A\u901A\u8FC7\u8C03\u6574\u6761\u4EF6\u914D\u7F6E\u7B5B\u9009\u6570\u636E",paraId:2,tocIndex:0}]},234165:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5BFC\u5165\u64CD\u4F5C\u662F\u901A\u8FC7\u63D2\u4EF6\u6269\u5C55\u5B9E\u73B0\u7684\uFF0C\u76EE\u524D\u652F\u6301\u901A\u8FC7\u5BFC\u5165",paraId:0,tocIndex:0},{value:"xlsx",paraId:0,tocIndex:0},{value:"\u6587\u4EF6\u6279\u91CF\u5BFC\u5165\u6570\u636E",paraId:0,tocIndex:0},{value:"\u914D\u7F6E\u53EF\u5BFC\u5165\u7684\u5B57\u6BB5",paraId:1,tocIndex:0},{value:"\u4E0B\u8F7D\u5BFC\u5165\u7684\u6A21\u677F\uFF0C\u5728\u6A21\u677F\u4E2D\u6DFB\u52A0\u6570\u636E\u540E\u5BFC\u5165",paraId:2,tocIndex:0},{value:"\u8BE6\u89C1\u5BFC\u5165\u8BF4\u660E",paraId:3,tocIndex:0},{value:"https://github.com/nocobase/nocobase/tree/main/packages/plugins/%40nocobase/plugin-import#%E5%AF%BC%E5%85%A5%E8%AF%B4%E6%98%8E",paraId:4,tocIndex:0}]},767657:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728 UI \u91CC\uFF0C\u64CD\u4F5C\u662F\u7528\u6765\u89E6\u53D1\u4E00\u6BB5\u6307\u4EE4\u7684\u6309\u94AE\u3002\u53EF\u4EE5\u76F4\u63A5\u653E\u5728\u9875\u9762\u3001\u5BF9\u8BDD\u6846\u3001\u62BD\u5C49\u91CC\uFF0C\u4E5F\u53EF\u4EE5\u548C\u533A\u5757\u7EC4\u5408\u4F7F\u7528\u3002\u76EE\u524D\u53EF\u52A8\u6001\u914D\u7F6E\u7684\u64CD\u4F5C\uFF0C\u4E3B\u8981\u662F\u548C\u533A\u5757\u7EC4\u5408\u4F7F\u7528",paraId:0,tocIndex:0},{value:"\u548C\u533A\u5757\u3001\u5B57\u6BB5\u4E0D\u592A\u4E00\u6837\uFF0C\u64CD\u4F5C\u7684\u8BBE\u8BA1\u5668\u91CC\u53EA\u6709\u4E24\u4E2A\u56FE\u6807\uFF0C\u5206\u522B\u4E3A\uFF1A",paraId:1,tocIndex:2},{value:"\u62D6\u62FD",paraId:2,tocIndex:2},{value:"\u53C2\u6570\u914D\u7F6E",paraId:2,tocIndex:2},{value:"\u6309\u4F4F\u6309\u94AE\u8BBE\u8BA1\u5668\u91CC\u7684\u300C\u62D6\u62FD\u300D\u56FE\u6807\uFF0C\u53EF\u4EE5\u5BF9\u6309\u94AE\u8FDB\u884C\u6392\u5E8F",paraId:3,tocIndex:3},{value:`\u7F3A\u5C11\u4E00\u4E2A\u52A8\u56FE
`,paraId:4,tocIndex:3},{value:"\u7F16\u8F91\u6309\u94AE",paraId:5,tocIndex:4},{value:"\u6253\u5F00\u65B9\u5F0F\uFF1A\u62BD\u5C49\u3001\u5BF9\u8BDD\u6846",paraId:5,tocIndex:4},{value:"\u5F39\u7A97\u5C3A\u5BF8\uFF1A\u5927\u3001\u4E2D\u3001\u5C0F",paraId:5,tocIndex:4},{value:"\u5220\u9664",paraId:5,tocIndex:4},{value:"\u6709\u4E0A\u4E0B\u6587\u6570\u636E\u7684\u64CD\u4F5C\uFF0C\u8FD8\u53EF\u4EE5\u914D\u7F6E\u300C\u8054\u52A8\u89C4\u5219\u300D",paraId:6,tocIndex:5},{value:"\u8054\u52A8\u89C4\u5219\u914D\u7F6E",paraId:7,tocIndex:5},{value:"\u53EF\u4EE5\u6DFB\u52A0\u591A\u6761\uFF0C\u6761\u4EF6\u4E0E\u7B5B\u9009\u7528\u6CD5\u4E00\u81F4\uFF0C\u53EF\u4EE5\u63A7\u5236\u6309\u94AE\u7684\u663E\u793A\u3001\u9690\u85CF\u3001\u542F\u7528\u3001\u7981\u7528",paraId:8,tocIndex:5}]},382:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6253\u5F00\u5F39\u7A97\u64CD\u4F5C\u4EE5\u5F39\u7A97\u7684\u65B9\u5F0F\u5448\u73B0\u6570\u636E\uFF0C\u53EF\u81EA\u5B9A\u4E49\u914D\u7F6E\u8BE6\u60C5\u533A\u5757\u6216\u8868\u5355\u533A\u5757\uFF0C\u9002\u7528\u4E8E\u591A\u79CD\u573A\u666F\u3002\u5982\u5F53\u6570\u636E\u8868\u4E2D\u6709\u8BB8\u591A\u5B57\u6BB5\uFF0C\u53EF\u4EE5\u5C06\u5B57\u6BB5\u62C6\u5206\u5230\u4E0D\u540C\u7684\u64CD\u4F5C\u533A\u5757\u4E2D\uFF0C\u4E13\u6CE8\u4E8E\u67E5\u770B\u6216\u4FEE\u6539\u67D0\u4E9B\u5B57\u6BB5\uFF0C\u6839\u636E\u4E1A\u52A1\u9700\u6C42\u521B\u5EFA\u591A\u4E2A\u5B9A\u5236\u5316\u6570\u636E\u5C55\u793A\u6216\u7F16\u8F91\u754C\u9762\u7684\u64CD\u4F5C",paraId:0,tocIndex:0},{value:"\u5982\u56FE\u8BA2\u5355\u8868\u683C\u4E2D\u914D\u7F6E\u4E86\u4E09\u4E2A\u6253\u5F00\u5F39\u7A97\u64CD\u4F5C\uFF0C\u67E5\u770B\u4E3B\u8BA2\u5355\uFF08\u8BA2\u5355\u4E3B\u4FE1\u606F\uFF09\uFF0C\u67E5\u770B\u5546\u54C1\uFF08\u8BA2\u5355\u7684\u5173\u8054\u7684\u5546\u54C1\u4FE1\u606F\uFF09\u548C\u67E5\u770B\u5BA2\u6237\uFF08\u8BA2\u5355\u5173\u8054\u7684\u5BA2\u6237\u4FE1\u606F\uFF09",paraId:1,tocIndex:0}]},377276:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},967609:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5237\u65B0\u64CD\u4F5C\u7528\u4E8E\u91CD\u65B0\u52A0\u8F7D\u6570\u636E\u533A\u5757\u4E2D\u7684\u6570\u636E\uFF0C\u652F\u6301\u624B\u52A8\u5237\u65B0",paraId:0,tocIndex:0}]},576031:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u81EA\u5B9A\u4E49\u4FDD\u5B58\u6570\u636E\u64CD\u4F5C\u662F\u8868\u5355\u533A\u5757\u7279\u6709\u7684\u64CD\u4F5C\uFF0C\u652F\u6301\u81EA\u5B9A\u4E49\u64CD\u4F5C\u7684\u884C\u4E3A\uFF1A",paraId:0,tocIndex:0},{value:"\u7F16\u8F91\u6309\u94AE",paraId:1,tocIndex:0},{value:"\u5B57\u6BB5\u8D4B\u503C\uFF1A\u70B9\u51FB\u5F53\u524D\u81EA\u5B9A\u4E49\u6309\u94AE\u65F6\uFF0C\u5F53\u524D\u6570\u636E\u5B57\u6BB5\u8D4B\u503C\u4E2D\u7684\u60C5\u51B5\u4FDD\u5B58\u3002",paraId:1,tocIndex:0},{value:"\u8DF3\u8FC7\u5FC5\u586B\u6821\u9A8C",paraId:1,tocIndex:0},{value:"\u63D0\u4EA4\u6210\u529F\u540E\u7684\u52A8\u4F5C",paraId:1,tocIndex:0},{value:"\u7ED1\u5B9A\u5DE5\u4F5C\u6D41",paraId:2,tocIndex:0}]},644379:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u63D0\u4EA4\u81F3\u5DE5\u4F5C\u6D41\u64CD\u4F5C\u7531\u63D2\u4EF6\u6269\u5C55",paraId:0,tocIndex:0},{value:"\u65B0\u589E\u3001\u66F4\u65B0\u8868\u5355\u4E2D\u652F\u6301\u63D0\u4EA4\u81F3\u5DE5\u4F5C\u6D41\u7684\u914D\u7F6E\u548C\u89E6\u53D1\u3002",paraId:1,tocIndex:0},{value:"\u53EF\u5728\u4E00\u4E2A\u6309\u94AE\u70B9\u51FB\u65F6\u89E6\u53D1\u591A\u4E2A\u5DE5\u4F5C\u6D41\uFF0C\u5404\u81EA\u9009\u5B9A\u4E0D\u540C\u7684\u5DE5\u4F5C\u6D41\u548C\u6570\u636E\u4E0A\u4E0B\u6587\uFF08\u4E0D\u9650\u5236\u6570\u636E\uFF0C\u7528\u6237\u81EA\u884C\u4FDD\u8BC1\uFF09\u3002",paraId:1,tocIndex:0},{value:"\u8868\u5355\u6309\u94AE\u89E6\u53D1\u4EC5\u652F\u6301\u65B0\u7684\u5DE5\u4F5C\u6D41\u7C7B\u578B\u201C\u8868\u5355\u4E8B\u4EF6\u201D\u3002",paraId:1,tocIndex:0},{value:"\u8BE6\u60C5\u53EF\u67E5\u770B\u63D2\u4EF6\u6587\u6863",paraId:2,tocIndex:0}]},133808:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u63D0\u4EA4\u64CD\u4F5C\u7528\u4E8E\u4FDD\u5B58\u8868\u5355\u6570\u636E\uFF08\u8868\u5355\u533A\u5757\u7279\u6709\uFF09",paraId:0,tocIndex:0},{value:"\u4FDD\u5B58\u65B9\u5F0F\uFF1A\u4EC5\u9488\u5BF9",paraId:1,tocIndex:1},{value:"\u65B0\u5EFA",paraId:1,tocIndex:1},{value:"\u64CD\u4F5C\u4E2D\u8868\u5355\u533A\u5757\u7684\u63D0\u4EA4\u652F\u6301\u914D\u7F6E\u4FDD\u5B58\u65B9\u5F0F",paraId:1,tocIndex:1},{value:"\u7ED1\u5B9A\u5DE5\u4F5C\u6D41\uFF1A\u652F\u6301\u4E0E\u5DE5\u4F5C\u6D41\u7684\u7ED1\u5B9A\u914D\u7F6E\uFF0C\u63D0\u4EA4\u540E\u81EA\u52A8\u89E6\u53D1\u5DE5\u4F5C\u6D41\uFF0C\u901A\u8FC7\u5B9A\u4E49\u89E6\u53D1\u6570\u636E\u4E0A\u4E0B\u6587\uFF0C\u5B9E\u73B0\u9AD8\u7EA7\u7684\u81EA\u52A8\u5316\u4EFB\u52A1\uFF0C\u63D0\u9AD8\u6570\u636E\u5904\u7406\u6548\u7387\u548C\u4E1A\u52A1\u6D41\u7A0B\u63A7\u5236",paraId:2,tocIndex:1},{value:"\u8BE6\u60C5\u53EF\u67E5\u770B\u5DE5\u4F5C\u6D41\u4F7F\u7528\u6587\u6863",paraId:3,tocIndex:1}]},81403:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u81EA\u5B9A\u4E49\u884C\u64CD\u4F5C\u66F4\u65B0\u6570\u636E\uFF0C\u901A\u8FC7\u914D\u7F6E\u5B57\u6BB5\u8D4B\u503C\u786E\u5B9A\u8981\u4FEE\u6539\u7684\u5185\u5BB9",paraId:0,tocIndex:0},{value:"\u5982\u56FE\u5728\u8FD0\u5355\u8868\u683C\u533A\u5757\u4E2D\u914D\u7F6E\u66F4\u65B0\u6570\u636E\u64CD\u4F5C\u7528\u4E8E\u786E\u8BA4\u9001\u8FBE",paraId:1,tocIndex:0}]},322987:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u8BE6\u60C5\u64CD\u4F5C\u7528\u4E8E\u67E5\u770B\u6570\u636E\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u901A\u5E38\u914D\u7F6E\u8BE6\u60C5\u533A\u5757,\u8BE6\u60C5\u533A\u5757",paraId:0,tocIndex:0}]},679273:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u533A\u5757\u662F\u5185\u5BB9\u7684\u8F7D\u4F53\uFF0C\u53EF\u4EE5\u653E\u7F6E\u4E8E\u9875\u9762\uFF08Page\uFF09\u3001\u5BF9\u8BDD\u6846\uFF08Modal\uFF09\u6216\u62BD\u5C49\uFF08Drawer\uFF09\u91CC\uFF0C\u591A\u4E2A\u533A\u5757\u53EF\u4EE5\u81EA\u7531\u62D6\u62FD\u6392\u5217\u3002",paraId:0,tocIndex:0},{value:"\u533A\u5757\u53EF\u4EE5\u653E\u7F6E\u4E8E\u9875\u9762\uFF08Page\uFF09\u3001\u5BF9\u8BDD\u6846\uFF08Modal\uFF09\u6216\u62BD\u5C49\uFF08Drawer\uFF09\u91CC",paraId:1,tocIndex:1},{value:"\u76EE\u524D\u9875\u9762\u91CC\u7684\u533A\u5757\u7C7B\u578B\u5305\u62EC\uFF1A\u6570\u636E\u533A\u5757\u3001\u7B5B\u9009\u533A\u5757\u3001\u5176\u4ED6\u533A\u5757",paraId:2,tocIndex:2},{value:"\u5F39\u7A97\u6709\u5BF9\u8BDD\u6846\u548C\u62BD\u5C49\u4E24\u79CD\uFF0C\u548C\u9875\u9762\u4E00\u6837\u4E5F\u53EF\u4EE5\u6DFB\u52A0\u533A\u5757\uFF0C\u533A\u522B\u5728\u4E8E\u5F39\u7A97\u91CC\u7684\u533A\u5757\u901A\u5E38\u4E3A\u5355\u6761\u8BB0\u5F55\u7684\u6DFB\u52A0\u3001\u7F16\u8F91\u6216\u67E5\u770B\u7B49\uFF0C\u533A\u5757\u7C7B\u578B\u5305\u62EC\u5F53\u524D\u6570\u636E\u533A\u5757\u3001\u5173\u7CFB\u533A\u5757\u3001\u5176\u4ED6\u533A\u5757\u3002",paraId:3,tocIndex:3},{value:"\u6BCF\u4E2A\u533A\u5757\u53F3\u4E0A\u89D2\u90FD\u6709\u4E09\u4E2A\u5C0F\u56FE\u6807\uFF0C\u4ECE\u5DE6\u5230\u53F3\u5206\u522B\u4E3A\uFF1A",paraId:4,tocIndex:6},{value:"\u62D6\u62FD\u5E03\u5C40",paraId:5,tocIndex:6},{value:"\u5FEB\u6377\u6DFB\u52A0\u533A\u5757",paraId:5,tocIndex:6},{value:"\u533A\u5757\u53C2\u6570\u914D\u7F6E",paraId:5,tocIndex:6},{value:"\u7B80\u5355\u7684\u533A\u5757\u6240\u6709\u7684\u914D\u7F6E\u9879\u90FD\u96C6\u4E2D\u5728\u300C\u533A\u5757\u53C2\u6570\u914D\u7F6E\u300D\u91CC\uFF0C\u5982 Markdown",paraId:6,tocIndex:6},{value:"\u590D\u6742\u7684\u6570\u636E\u7C7B\u578B\u533A\u5757\u8FD8\u4F1A\u63D0\u4F9B\u72EC\u7ACB\u7684\u5185\u5D4C\u7684\u300C\u914D\u7F6E\u5B57\u6BB5\u300D\u548C\u300C\u914D\u7F6E\u64CD\u4F5C\u300D",paraId:7,tocIndex:6},{value:"\u9664\u6B64\u4E4B\u5916\uFF0C\u4E5F\u53EF\u4EE5\u81EA\u7531\u53D1\u6325\uFF0C\u63D0\u4F9B\u66F4\u591A\u5D4C\u5957\u7684\u53EF\u80FD\uFF0C\u5982\u56FE\u8868\u533A\u5757",paraId:8,tocIndex:6},{value:"\u591A\u4E2A\u533A\u5757\u53EF\u4EE5\u901A\u8FC7\u62D6\u62FD\u8C03\u6574\u5E03\u5C40",paraId:9,tocIndex:7},{value:"\u53EF\u4EE5\u5C06\u4E00\u4E2A\u6570\u636E\u7C7B\u578B\u533A\u5757\u4FDD\u5B58\u4E3A\u6A21\u677F\uFF0C\u4EE5\u540E\u6DFB\u52A0\u533A\u5757\u65F6\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u8FD9\u4E2A\u6A21\u677F\u3002\u6BD4\u5982\uFF0C\u4E00\u4E2A\u6570\u636E\u8868\u7684\u8868\u5355\uFF0C\u65E2\u7528\u4E8E\u65B0\u589E\u6570\u636E\uFF0C\u53C8\u7528\u4E8E\u7F16\u8F91\u6570\u636E\uFF0C\u90A3\u5C31\u53EF\u4EE5\u5C06\u8FD9\u4E2A\u8868\u5355\u4FDD\u5B58\u4E3A\u6A21\u677F\uFF0C\u5728\u65B0\u589E\u6570\u636E\u548C\u7F16\u8F91\u6570\u636E\u7684\u754C\u9762\u91CC\u901A\u8FC7\u8BE5\u6A21\u677F\u521B\u5EFA\u5BF9\u5E94\u7684\u8868\u5355\u533A\u5757\u3002",paraId:10,tocIndex:8},{value:"\u53C2\u8003",paraId:11,tocIndex:9},{value:"\u533A\u5757\u6A21\u677F",paraId:12,tocIndex:9},{value:"NocoBase \u9ED8\u8BA4\u5C06\u533A\u5757\u5206\u4E3A\u56DB\u79CD\u7C7B\u578B\uFF1A",paraId:13,tocIndex:10},{value:"\u6570\u636E\u533A\u5757\uFF1A\u53EF\u4EE5\u5C06 Collection \u7684\u6570\u636E\u5C55\u793A\u5728\u533A\u5757\u91CC",paraId:14,tocIndex:10},{value:"\u7B5B\u9009\u533A\u5757\uFF1A\u76EE\u524D\u53EA\u80FD\u5728\u9875\u9762\u91CC\u6DFB\u52A0\uFF0C\u53EF\u7528\u4E8E\u6570\u636E\u533A\u5757\u7684\u6570\u636E\u7B5B\u9009",paraId:14,tocIndex:10},{value:"\u5173\u7CFB\u533A\u5757\uFF1A\u76EE\u524D\u53EA\u80FD\u5728\u5F39\u7A97\u91CC\u6DFB\u52A0\uFF0C\u53EF\u7528\u4E8E\u5F53\u524D\u8BB0\u5F55\u7684\u5173\u7CFB\u6570\u636E\u7684\u589E\u5220\u6539\u67E5\u7B49",paraId:14,tocIndex:10},{value:"\u5176\u4ED6\u533A\u5757\uFF1A\u7528\u4E8E\u653E\u7F6E\u72EC\u7ACB\u533A\u5757\uFF0C\u5982 Markdown\u3001\u5BA1\u8BA1\u65E5\u5FD7\u533A\u5757\u3001\u5DE5\u4F5C\u6D41\u5F85\u529E\u533A\u5757\u7B49",paraId:14,tocIndex:10}]},645137:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7EA7\u8054\u9009\u62E9\u5668\u7528\u4E8E\u5173\u7CFB\u5B57\u6BB5\u76EE\u6807\u8868\u4E3A",paraId:0,tocIndex:0},{value:"\u6811\u8868",paraId:0,tocIndex:0},{value:"\u65F6\uFF0C\u63D0\u4F9B\u7684\u4FBF\u6377\u7684\u6570\u636E\u9009\u62E9\u65B9\u5F0F\u3002\u6309\u7167\u6811\u8868\u6570\u636E\u7684\u5C42\u6B21\u7ED3\u6784\u9009\u62E9\u76F8\u5173\u6570\u636E\u9879\u3002\u652F\u6301\u5B50\u6570\u636E\u7684\u641C\u7D22\u8FC7\u6EE4",paraId:0,tocIndex:0},{value:"\u5982\u4EFB\u52A1\u7BA1\u7406\u5E94\u7528\u6A21\u578B\u4E2D\uFF0C\u4EFB\u52A1\u8868\u4E2D\u6709\u5173\u7CFB\u5B57\u6BB5\u300C\u90E8\u95E8\u300D\uFF08\u591A\u5BF9\u591A\uFF09\uFF0C\u300C\u9879\u76EE\u300D\uFF08\u591A\u5BF9\u4E00\uFF09\uFF0C\u90E8\u95E8\u8868\u548C\u9879\u76EE\u8868\u5747\u4E3A\u6811\u8868",paraId:1,tocIndex:0},{value:"\u5173\u7CFB\u4E3A\u5BF9\u4E00\uFF0C\u7EA7\u8054\u4E3A\u5355\u9009",paraId:2,tocIndex:0},{value:"\u5173\u7CFB\u4E3A\u5BF9\u591A\uFF0C\u7EA7\u8054\u4E3A\u591A\u9009\uFF0C\u652F\u6301\u62D6\u62FD\u6392\u5E8F",paraId:3,tocIndex:0}]},500260:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6587\u4EF6\u7BA1\u7406\u5668\u662F\u4E13\u95E8\u7528\u4E8E\u5904\u7406\u5173\u7CFB\u76EE\u6807\u8868\u4E3A\u6587\u4EF6\u8868\u7684\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u3002",paraId:0,tocIndex:0},{value:"\u5982\u5728\u4EFB\u52A1\u7BA1\u7406\u5E94\u7528\u6A21\u578B\u4E2D\uFF0C\u4EFB\u52A1\u8868\u4E2D\u6709\u5173\u7CFB\u5B57\u6BB5\u300C\u9644\u4EF6\u300D\uFF08\u4E00\u5BF9\u4E00\uFF09\uFF0C\u5F53\u5173\u7CFB\u5B57\u6BB5\u7684\u76EE\u6807\u8868\u4E3A\u6587\u4EF6\u8868\u65F6\uFF0C\u9ED8\u8BA4\u5B57\u6BB5\u7EC4\u4EF6\u4E3A\u6587\u4EF6\u7BA1\u7406\u5668",paraId:1,tocIndex:0},{value:"\u53EF\u4EE5\u901A\u8FC7\u6587\u4EF6\u7BA1\u7406\u5668\u7EC4\u4EF6\u6765\u7BA1\u7406\u4E0E\u5F53\u524D\u4EFB\u52A1\u5173\u8054\u7684\u9644\u4EF6\u6587\u4EF6\u3002",paraId:2,tocIndex:0},{value:"\u901A\u8FC7\u4E0A\u4F20\u6309\u94AE\u5C06\u65B0\u6587\u4EF6\u4E0A\u4F20\u6DFB\u52A0\u540E\u5173\u8054\uFF08\u5FEB\u901F\u4E0A\u4F20\uFF09",paraId:3,tocIndex:0},{value:"\u70B9\u51FB\u9009\u62E9\u4ECE\u5DF2\u6709\u7684\u9644\u4EF6\u5217\u8868\u4E2D\u9009\u62E9\u8981\u5173\u8054\u7684\u9644\u4EF6\uFF08\u9009\u62E9\u6587\u4EF6 )",paraId:3,tocIndex:0}]},284664:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u65E8\u5728\u5E2E\u52A9\u7528\u6237\u66F4\u597D\u5730\u5C55\u793A\u548C\u5904\u7406\u5173\u8054\u6570\u636E\u3002\u65E0\u8BBA\u5173\u7CFB\u7C7B\u578B\u5982\u4F55\uFF0C\u8FD9\u4E9B\u7EC4\u4EF6\u5177\u6709\u7075\u6D3B\u6027\u548C\u901A\u7528\u6027\uFF0C\u7528\u6237\u80FD\u591F\u6839\u636E\u5177\u4F53\u9700\u6C42\u9009\u62E9\u5E76\u914D\u7F6E\u8FD9\u4E9B\u7EC4\u4EF6\u3002",paraId:0,tocIndex:0},{value:"\u4E0B\u62C9\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u4ECE\u4E00\u4E2A\u4E0B\u62C9\u5217\u8868\u4E2D",paraId:1,tocIndex:1},{value:"\u9009\u62E9\u6216\u65B0\u5EFA",paraId:1,tocIndex:1},{value:"\u4E00\u4E2A\u6216\u591A\u4E2A\u9009\u9879\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\uFF0C\u652F\u6301\u8BBE\u7F6E\u4E0B\u62C9\u5217\u8868\u7684\u6807\u9898\u5B57\u6BB5\u3002",paraId:1,tocIndex:1},{value:"\u6570\u636E\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u4ECE\u76F8\u5173\u6570\u636E\u4E2D",paraId:1,tocIndex:1},{value:"\u9009\u62E9\u6216\u65B0\u5EFA",paraId:1,tocIndex:1},{value:"\u4E00\u4E2A\u6216\u591A\u4E2A\u9009\u9879\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002\u914D\u7F6E\u548C\u4F7F\u7528\u65F6\uFF0C\u53EF\u4EE5\u914D\u7F6E\u9009\u62E9\u5668\u5217\u8868\u7684\u5C55\u793A\u4FE1\u606F",paraId:1,tocIndex:1},{value:"\u7EA7\u8054\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u76EE\u6807\u8868\u4E3A",paraId:1,tocIndex:1},{value:"\u6811\u8868",paraId:1,tocIndex:1},{value:"\u7684\u5173\u7CFB\u6570\u636E\uFF0C\u6309\u6811\u5F62\u7ED3\u6784\u4E00\u5C42\u4E00\u5C42\u7684\u5F80\u4E0B\u9009\u53D6\u6570\u636E\u3002",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u5355/\u5B50\u8BE6\u60C5\uFF1A\u7528\u4E8E\u5728\u5F53\u524D\u8868\u5355\u6216\u8BE6\u60C5\u9875\u9762\u4E2D\u5C55\u793A\u5173\u8054\u8BB0\u5F55\u7684\u6570\u636E\u3002\u5B83\u63D0\u4F9B\u4E86\u4E00\u79CD\u4FBF\u6377\u7684\u5D4C\u5957\u65B9\u5F0F\u6765\u67E5\u770B\u548C\u7F16\u8F91\u5173\u8054\u6570\u636E\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u65E0\u9700\u8DF3\u8F6C\u5230\u5176\u4ED6\u9875\u9762\uFF0C\u63D0\u4F9B\u4E86\u66F4\u6D41\u7545\u548C\u9AD8\u6548\u7684\u7528\u6237\u4F53\u9A8C\uFF0C**\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B\uFF0C**\u591A\u5C42\u7684\u5173\u7CFB\u6570\u636E\u80FD\u4EE5\u5D4C\u5957\u7684\u5F62\u5F0F\u5C55\u793A\uFF0C\u914D\u7F6E\u4F7F\u7528\u65F6\u6CE8\u610F\u5E03\u5C40\u7684\u8C03\u6574",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u683C\uFF1A\u7F16\u8F91\u72B6\u6001\u4E0B\u5B50\u8868\u683C\u652F\u6301\u76F4\u63A5",paraId:1,tocIndex:1},{value:"\u65B0\u5EFA/\u7F16\u8F91",paraId:1,tocIndex:1},{value:"\u5173\u7CFB\u6570\u636E\uFF0C",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u4E00\u5BF9\u591A\u6216\u591A\u5BF9\u591A\u7684\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\uFF0C\u6682\u4E0D\u652F\u6301\u9009\u62E9\u5173\u8054\u3002",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\uFF1A\u901A\u8FC7\u5C06\u6B21\u8981\u6216\u590D\u6742\u6570\u636E\u5B57\u6BB5\u653E\u5728\u5F39\u7A97\u4E2D\uFF0C\u4F18\u5316\u4E86\u4E3B\u8868\u5355\u7684\u5E03\u5C40\uFF0C\u4F7F\u754C\u9762\u66F4\u7B80\u6D01\u3001\u76F4\u89C2\u3002\u89E3\u51B3\u4E86\u590D\u6742\u5173\u7CFB\u5C42\u7EA7\u4E0B\u8868\u5355\u7684\u5197\u957F\u95EE\u9898\uFF0C\u63D0\u5347\u7528\u6237\u4F53\u9A8C\u3002\u9002\u7528\u4E8E\u6709\u5927\u91CF\u6570\u636E\u5B57\u6BB5\u3001\u5173\u7CFB\u5C42\u7EA7\u590D\u6742\u7684\u573A\u666F\uFF0C\u5C06\u6B21\u8981\u4FE1\u606F\u4E0E\u4E3B\u8981\u4FE1\u606F\u5206\u5F00\u586B\u5199\uFF0C\u63D0\u9AD8\u8868\u5355\u7684\u53EF\u7528\u6027\u3002",paraId:1,tocIndex:1},{value:"\u6807\u7B7E\uFF1A\u901A\u8FC7\u4E3A\u5173\u7CFB\u5B57\u6BB5\u914D\u7F6E\u6807\u7B7E\u7EC4\u4EF6\uFF0C\u5B9E\u73B0\u4E86\u6570\u636E\u7684\u5206\u7C7B\u548C\u6807\u8BC6\uFF0C\u80FD\u591F\u66F4\u76F4\u89C2\u5730\u5C55\u793A\u6570\u636E\u5173\u7CFB\uFF0C\u9002\u7528\u4E8E\u9700\u8981\u5C06\u6570\u636E\u6309\u7167\u7C7B\u522B\u8FDB\u884C\u5206\u7EC4\u7684\u573A\u666F",paraId:1,tocIndex:1},{value:"\u6587\u4EF6\u7BA1\u7406\u5668\uFF1A\u7528\u4E8E\u76F4\u63A5",paraId:1,tocIndex:1},{value:"\u4E0A\u4F20\u6216\u9009\u62E9",paraId:1,tocIndex:1},{value:"\u4E0E\u5F53\u524D\u8BB0\u5F55\u5173\u8054\u7684\u6587\u4EF6\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u76EE\u6807\u8868\u4E3A\u6587\u4EF6\u8868\u7684\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002",paraId:1,tocIndex:1},{value:"\u6807\u9898\uFF1A\u7528\u4E8E\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u663E\u793A\u5173\u8054\u8BB0\u5F55\uFF0C\u662F\u6240\u6709\u5173\u7CFB\u5B57\u6BB5\u9605\u8BFB\u72B6\u6001\u4E0B\u7684\u9ED8\u8BA4\u5B57\u6BB5\u7EC4\u4EF6\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002\u914D\u7F6E\u548C\u4F7F\u7528\u65F6\uFF0C\u9ED8\u8BA4\u6807\u9898\u5B57\u6BB5\u4E3A id,\u652F\u6301\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u6807\u9898\u5B57\u6BB5\u3002",paraId:1,tocIndex:1},{value:"\u901A\u8FC7\u4F7F\u7528\u8FD9\u4E9B\u5B57\u6BB5\u7EC4\u4EF6\uFF0C\u53EF\u4EE5\u5B9A\u5236\u548C\u4F18\u5316\u6570\u636E\u5C55\u793A\u548C\u64CD\u4F5C\u7684\u754C\u9762\uFF0C\u63D0\u4F9B\u66F4\u597D\u7684\u7528\u6237\u4F53\u9A8C\u3002\u6839\u636E\u5177\u4F53\u7684\u4E1A\u52A1\u9700\u6C42\u548C\u5173\u7CFB\u7C7B\u578B\uFF0C\u9009\u62E9\u5408\u9002\u7684\u5B57\u6BB5\u7EC4\u4EF6\u3002\u66F4\u591A\u5173\u7CFB\u5B57\u6BB5\u7684\u529F\u80FD\u53EF\u5728\u7CFB\u7EDF\u4E2D\u4F53\u9A8C\u5E76\u63D0\u51FA\u53CD\u9988\u3002",paraId:2,tocIndex:1}]},618612:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6570\u636E\u9009\u62E9\u5668\u7528\u4E8E\u4ECE\u76F8\u5173\u6570\u636E\u4E2D\u9009\u62E9\u4E00\u4E2A\u6216\u591A\u4E2A\u9009\u9879\u3002\u5B83\u4E0E\u4E0B\u62C9\u9009\u62E9\u5668\u7C7B\u4F3C\uFF0C\u4F46\u63D0\u4F9B\u4E86\u66F4\u5927\u7684\u7075\u6D3B\u6027\u548C\u529F\u80FD\uFF0C\u4F7F\u7528\u6237\u80FD\u591F\u66F4\u7CBE\u786E\u5730\u9009\u62E9\u5173\u8054\u6570\u636E\uFF0C\u53EF\u4EE5\u5728\u6570\u636E\u9009\u62E9\u5668\u4E2D\u914D\u7F6E\u66F4\u591A\u5173\u8054\u4FE1\u606F\u5B57\u6BB5\uFF08\u5173\u7CFB\u7684\u5173\u7CFB\u6570\u636E\uFF09\uFF0C\u65B9\u4FBF\u7528\u6237\u7CBE\u51C6\u9009\u62E9\u6570\u636E\u3002",paraId:0,tocIndex:0},{value:"\u901A\u8FC7\u6570\u636E\u9009\u62E9\u5668\u9009\u62E9\u5173\u8054\u6570\u636E",paraId:1,tocIndex:0},{value:"\u6570\u636E\u9009\u62E9\u5668\u4EE5\u5F39\u7A97\u5F62\u5F0F\u5C55\u793A\u5173\u7CFB\u6570\u636E\uFF0C\u5728\u8868\u683C\u533A\u5757\u4E2D\u53EF\u4EE5\u914D\u7F6E\u66F4\u591A\u76EE\u6807\u8868\u5B57\u6BB5",paraId:2,tocIndex:0},{value:"\u901A\u8FC7\u6570\u636E\u9009\u62E9\u5668\uFF0C\u4E0D\u4EC5\u53EF\u4EE5\u9009\u62E9\u5173\u8054\u6570\u636E\uFF0C\u8FD8\u53EF\u5BF9\u5173\u7CFB\u76EE\u6807\u8868\u8FDB\u4E00\u6B65\u7BA1\u7406\uFF08\u65B0\u589E\u3001\u5220\u9664\u3001\u5BFC\u5165\u5BFC\u51FA\u7B49\uFF09",paraId:3,tocIndex:0}]},496755:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u4E0B\u62C9\u9009\u62E9\u5668\u662F\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u7684\u5E38\u7528\u7EC4\u4EF6\uFF0C\u9664\u4E86\u76EE\u6807\u8868\u4E3A\u6587\u4EF6\u8868\u7684\u6240\u6709\u5173\u7CFB\u5B57\u6BB5\uFF0C\u7F16\u8F91\u72B6\u6001\u4E0B\u7684\u9ED8\u8BA4\u7EC4\u4EF6\u5747\u4E3A\u4E0B\u62C9\u9009\u62E9\u5668\uFF0C\u652F\u6301\u4ECE\u76EE\u6807\u8868\u9009\u62E9\u5DF2\u6709\u6570\u636E\u5173\u8054\u6216\u6DFB\u52A0\u65B0\u6570\u636E\u540E\u5173\u8054\u3002",paraId:0,tocIndex:0},{value:"\u5982\u56FE\u5728\u4EFB\u52A1\u7BA1\u7406\u5E94\u7528\u4E2D,\u4EFB\u52A1\u8868\u6709\u5173\u7CFB\u5B57\u6BB5\u300C\u8D1F\u8D23\u4EBA\u300D\uFF08\u591A\u5BF9\u4E00\uFF09",paraId:1,tocIndex:0},{value:"\u9009\u62E9\u5173\u8054\u6570\u636E\uFF0C\u4ECE\u76EE\u6807\u8868\u7684\u5DF2\u6709\u6570\u636E\u4E2D\u9009\u62E9\u5173\u8054",paraId:2,tocIndex:0},{value:"\u65B0\u589E\u6570\u636E\u540E\u5173\u8054",paraId:3,tocIndex:0},{value:"\u76F4\u63A5\u4E3A\u76EE\u6807\u8868\u65B0\u5EFA\u6570\u636E\u540E\u8FDB\u884C\u5173\u8054\uFF0C\u76EE\u524D\u6709\u4E24\u79CD\u65B0\u5EFA\u65B9\u5F0F\uFF08\u4E0B\u62C9\u83DC\u5355/\u5F39\u7A97\u6DFB\u52A0\uFF09",paraId:4,tocIndex:0},{value:"\u4E0B\u62C9\u83DC\u5355\u6DFB\u52A0\uFF0C\u521B\u5EFA\u6210\u529F\u540E\u81EA\u52A8\u9009\u4E2D\u521B\u5EFA\u7684\u6570\u636E\uFF0C\u9700\u8981\u914D\u7F6E\u6807\u9898\u5B57\u6BB5",paraId:5,tocIndex:0},{value:"\u793A\u4F8B\u5982\u4E0B",paraId:6,tocIndex:0},{value:"\u5F39\u7A97\u6DFB\u52A0\uFF1A\u521B\u5EFA\u6210\u529F\u540E\u4F1A\u81EA\u52A8\u9009\u4E2D\u521B\u5EFA\u7684\u6570\u636E",paraId:7,tocIndex:0},{value:"\u5728\u5F88\u591A\u573A\u666F\u4E2D\uFF0C\u5E0C\u671B\u901A\u8FC7\u5173\u7CFB\u9009\u62E9\u5668\u5E26\u51FA\u5173\u8054\u6570\u636E\uFF0C\u800C\u4E0B\u62C9\u9009\u62E9\u5668\u53EA\u80FD\u5E26\u51FA\u76EE\u6807\u8868\u4E2D\u7684\u7B80\u5355\u5B57\u6BB5\uFF0C\u5173\u7CFB\u7684\u5173\u7CFB\u6570\u636E\u5219\u8981\u901A\u8FC7\u914D\u7F6E\u6570\u636E\u9009\u62E9\u5668\u6765\u5E26\u51FA",paraId:8,tocIndex:0}]},374764:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5B50\u8BE6\u60C5\u662F\u5B50\u8868\u5355\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u7684\u5BF9\u5E94\u7EC4\u4EF6\uFF0C\u652F\u6301\u591A\u5C42\u5173\u7CFB\u6570\u636E\u5D4C\u5957\u5C55\u793A",paraId:0,tocIndex:0}]},186613:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\u662F\u4E00\u79CD\u7528\u4E8E\u4F18\u5316\u590D\u6742\u6570\u636E\u8F93\u5165\u573A\u666F\u7684\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u3002\u5728\u9762\u5BF9\u5173\u7CFB\u5C42\u7EA7\u590D\u6742\u3001\u6570\u636E\u5B57\u6BB5\u4F17\u591A\u7684\u60C5\u51B5\u4E0B\uFF0C\u5B50\u8868\u5355\u5E03\u5C40\u53EF\u80FD\u663E\u5F97\u5197\u957F\u4E14\u6742\u4E71\uFF0C\u96BE\u4EE5\u6709\u6548\u5448\u73B0\u6570\u636E\u7684\u4E3B\u6B21\u5173\u7CFB\u3002\u5C06\u67D0\u4E9B\u975E\u5173\u952E\u6027\u6216\u4E0D\u5E38\u7528\u7684\u6570\u636E\u5B57\u6BB5\u4ECE\u4E3B\u8868\u5355\u4E2D\u79FB\u81F3\u72EC\u7ACB\u7684\u5F39\u7A97\u4E2D\u8FDB\u884C\u586B\u5199\uFF0C\u4E3B\u8868\u5355\u80FD\u591F\u66F4\u4E13\u6CE8\u5730\u5C55\u793A\u6700\u91CD\u8981\u7684\u4FE1\u606F\uFF0C\u800C\u5B50\u8868\u5355\u5219\u7528\u4E8E\u6536\u7EB3\u6B21\u8981\u4FE1\u606F\u6216\u9700\u8981\u590D\u6742\u5173\u8054\u7684\u6570\u636E\u3002\u7528\u6237\u53EF\u4EE5\u66F4\u6709\u9488\u5BF9\u6027\u5730\u8F93\u5165\u76F8\u5173\u4FE1\u606F\uFF0C\u800C\u65E0\u9700\u88AB\u4E3B\u8868\u5355\u7684\u5197\u957F\u6240\u56F0\u6270\u3002",paraId:0,tocIndex:0},{value:"\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\u4E0D\u4EC5\u7B80\u5316\u4E86\u8868\u5355\u5E03\u5C40\uFF0C\u540C\u65F6\u4E5F\u6709\u6548\u5730\u89E3\u51B3\u4E86\u5B50\u8868\u683C\u4E2D\u5173\u7CFB\u5B57\u6BB5\u65E0\u6CD5\u76F4\u63A5\u586B\u5199\u6570\u636E\u7684\u95EE\u9898\u3002",paraId:1,tocIndex:0},{value:"\u914D\u7F6E\u6807\u9898\u5B57\u6BB5\u53EF\u63A7\u5236\u5BF9\u5916\u7684\u663E\u793A\u5B57\u6BB5",paraId:2,tocIndex:0},{value:"\u5B50\u8868\u683C\u4E2D\u7684\u5173\u7CFB\u5B57\u6BB5\u4E5F\u53EF\u4EE5\u4F7F\u7528\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\u586B\u5199\u5173\u7CFB\u6570\u636E",paraId:3,tocIndex:0},{value:"\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\u5185\u90E8\u4E5F\u652F\u6301\u591A\u5C42\u5173\u7CFB\u5B57\u6BB5\u7684\u914D\u7F6E\uFF0C\u53EF\u6839\u636E\u5B9E\u9645\u60C5\u51B5\u914D\u7F6E\u3002",paraId:4,tocIndex:0}]},475584:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u82E5\u60F3\u5904\u7406\u5C42\u7EA7\u8F83\u6DF1\u7684\u5173\u7CFB\u6570\u636E\uFF0C\u901A\u8FC7 select \u548C\u6570\u636E\u9009\u62E9\u5668\u90FD\u4E0D\u592A\u65B9\u4FBF\uFF0C\u9700\u8981\u6253\u5F00\u5F39\u7A97\u64CD\u4F5C\uFF0C\u70B9\u51FB\u6B21\u6570\u592A\u591A\uFF0C\u5F88\u7E41\u7410\uFF1B\u800C\u5B50\u8868\u5355\u5C31\u662F\u4E3A\u4E86\u4F18\u5316\u8FD9\u79CD\u573A\u666F\uFF0C\u4F7F\u7528\u6237\u80FD\u591F\u5728\u5F53\u524D\u9875\u9762\u4E0A\u76F4\u63A5\u7EF4\u62A4\u5173\u8054\u7684\u4FE1\u606F\uFF0C\u591A\u5C42\u5173\u7CFB\u4EE5\u5D4C\u5957\u8868\u5355\u7684\u5F62\u5F0F\u5C55\u793A",paraId:0,tocIndex:0},{value:"\u652F\u6301\u591A\u5C42\u5173\u7CFB\u5B57\u6BB5\u7684\u5D4C\u5957\u663E\u793A",paraId:1,tocIndex:0},{value:"\u53EF\u4EE5\u914D\u7F6E\u662F\u5426\u663E\u793A\u6807\u9898\u548C\u8C03\u6574\u5E03\u5C40",paraId:2,tocIndex:0}]},161775:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5B50\u8868\u683C\u4EE5\u8868\u683C\u5F62\u5F0F\u5C55\u793A",paraId:0,tocIndex:0},{value:"\u4E00\u5BF9\u591A\u6216\u591A\u5BF9\u591A",paraId:0,tocIndex:0},{value:"\u5173\u7CFB\u8BB0\u5F55\u3002\u5B83\u63D0\u4F9B\u4E86\u4E00\u79CD\u6E05\u6670\u3001\u7ED3\u6784\u5316\u7684\u65B9\u5F0F\u6765\u5C55\u793A\u548C\u7BA1\u7406\u5173\u8054\u6570\u636E\uFF0C\u6BCF\u4E00\u884C\u4EE3\u8868\u4E00\u4E2A\u5173\u8054\u8BB0\u5F55\uFF0C\u6BCF\u5217\u4EE3\u8868\u5173\u8054\u8BB0\u5F55\u7684\u4E0D\u540C\u5B57\u6BB5\u3002",paraId:0,tocIndex:0},{value:"\u5728\u4EFB\u52A1\u7BA1\u7406\u5E94\u7528\u6A21\u578B\u4E2D\uFF0C\u4EFB\u52A1\u8868\u4E2D\u6709\u5173\u7CFB\u5B57\u6BB5\u300C\u5BA1\u6279\u7EAA\u5F55\u300D\uFF08\u4E00\u5BF9\u591A\uFF09\u3002",paraId:1,tocIndex:0},{value:"\u7F16\u8F91\u4E0B\u7684\u5B50\u8868\u683C",paraId:2,tocIndex:0},{value:"\u5B50\u8868\u683C\u4E2D\u5B57\u6BB5\u4F1A\u6839\u636E\u4E0D\u540C\u5B57\u6BB5\u7C7B\u578B\u5C55\u793A\u4E0D\u540C\u7EC4\u4EF6\uFF0C\u800C\u5927\u5B57\u6BB5\uFF08\u5BCC\u6587\u672C\uFF0CJson,\u591A\u884C\u6587\u672C\u7B49\u5B57\u6BB5\uFF09\u5219\u901A\u8FC7\u60AC\u6D6E\u5F39\u7A97\u7F16\u8F91",paraId:3,tocIndex:0},{value:"\u5B50\u8868\u683C\u4E2D\u5173\u7CFB\u5B57\u6BB5\u9ED8\u8BA4\u7EC4\u4EF6\u662F\u4E0B\u62C9\u9009\u62E9\u5668\uFF08\u53EF\u8C03\u6574\u4E3A\u6570\u636E\u9009\u62E9\u5668/\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\uFF09",paraId:4,tocIndex:0},{value:"\u8BE6\u60C5\u4E0B\u7684\u5B50\u8868\u683C",paraId:5,tocIndex:0}]},665345:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u7684\u5173\u7CFB\u5B57\u6BB5\u7EC4\u4EF6\u65E8\u5728\u5E2E\u52A9\u7528\u6237\u66F4\u597D\u5730\u5C55\u793A\u548C\u5904\u7406\u5173\u8054\u6570\u636E\u3002\u65E0\u8BBA\u5173\u7CFB\u7C7B\u578B\u5982\u4F55\uFF0C\u8FD9\u4E9B\u7EC4\u4EF6\u5177\u6709\u7075\u6D3B\u6027\u548C\u901A\u7528\u6027\uFF0C\u7528\u6237\u80FD\u591F\u6839\u636E\u5177\u4F53\u9700\u6C42\u9009\u62E9\u5E76\u914D\u7F6E\u8FD9\u4E9B\u7EC4\u4EF6\u3002",paraId:0,tocIndex:0},{value:"\u4E0B\u62C9\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u4ECE\u4E00\u4E2A\u4E0B\u62C9\u5217\u8868\u4E2D",paraId:1,tocIndex:1},{value:"\u9009\u62E9\u6216\u65B0\u5EFA",paraId:1,tocIndex:1},{value:"\u4E00\u4E2A\u6216\u591A\u4E2A\u9009\u9879\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\uFF0C\u652F\u6301\u8BBE\u7F6E\u4E0B\u62C9\u5217\u8868\u7684\u6807\u9898\u5B57\u6BB5\u3002",paraId:1,tocIndex:1},{value:"\u6570\u636E\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u4ECE\u76F8\u5173\u6570\u636E\u4E2D",paraId:1,tocIndex:1},{value:"\u9009\u62E9\u6216\u65B0\u5EFA",paraId:1,tocIndex:1},{value:"\u4E00\u4E2A\u6216\u591A\u4E2A\u9009\u9879\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002\u914D\u7F6E\u548C\u4F7F\u7528\u65F6\uFF0C\u53EF\u4EE5\u914D\u7F6E\u9009\u62E9\u5668\u5217\u8868\u7684\u5C55\u793A\u4FE1\u606F",paraId:1,tocIndex:1},{value:"\u7EA7\u8054\u9009\u62E9\u5668\uFF1A\u7528\u4E8E\u76EE\u6807\u8868\u4E3A",paraId:1,tocIndex:1},{value:"\u6811\u8868",paraId:1,tocIndex:1},{value:"\u7684\u5173\u7CFB\u6570\u636E\uFF0C\u6309\u6811\u5F62\u7ED3\u6784\u4E00\u5C42\u4E00\u5C42\u7684\u5F80\u4E0B\u9009\u53D6\u6570\u636E\u3002",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u5355/\u5B50\u8BE6\u60C5\uFF1A\u7528\u4E8E\u5728\u5F53\u524D\u8868\u5355\u6216\u8BE6\u60C5\u9875\u9762\u4E2D\u5C55\u793A\u5173\u8054\u8BB0\u5F55\u7684\u6570\u636E\u3002\u5B83\u63D0\u4F9B\u4E86\u4E00\u79CD\u4FBF\u6377\u7684\u5D4C\u5957\u65B9\u5F0F\u6765\u67E5\u770B\u548C\u7F16\u8F91\u5173\u8054\u6570\u636E\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u65E0\u9700\u8DF3\u8F6C\u5230\u5176\u4ED6\u9875\u9762\uFF0C\u63D0\u4F9B\u4E86\u66F4\u6D41\u7545\u548C\u9AD8\u6548\u7684\u7528\u6237\u4F53\u9A8C\uFF0C**\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B\uFF0C**\u591A\u5C42\u7684\u5173\u7CFB\u6570\u636E\u80FD\u4EE5\u5D4C\u5957\u7684\u5F62\u5F0F\u5C55\u793A\uFF0C\u914D\u7F6E\u4F7F\u7528\u65F6\u6CE8\u610F\u5E03\u5C40\u7684\u8C03\u6574",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u683C\uFF1A\u7F16\u8F91\u72B6\u6001\u4E0B\u5B50\u8868\u683C\u652F\u6301\u76F4\u63A5",paraId:1,tocIndex:1},{value:"\u65B0\u5EFA/\u7F16\u8F91",paraId:1,tocIndex:1},{value:"\u5173\u7CFB\u6570\u636E\uFF0C",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u4E00\u5BF9\u591A\u6216\u591A\u5BF9\u591A\u7684\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\uFF0C\u6682\u4E0D\u652F\u6301\u9009\u62E9\u5173\u8054\u3002",paraId:1,tocIndex:1},{value:"\u5B50\u8868\u5355\uFF08\u5F39\u7A97\uFF09\uFF1A\u901A\u8FC7\u5C06\u6B21\u8981\u6216\u590D\u6742\u6570\u636E\u5B57\u6BB5\u653E\u5728\u5F39\u7A97\u4E2D\uFF0C\u4F18\u5316\u4E86\u4E3B\u8868\u5355\u7684\u5E03\u5C40\uFF0C\u4F7F\u754C\u9762\u66F4\u7B80\u6D01\u3001\u76F4\u89C2\u3002\u89E3\u51B3\u4E86\u590D\u6742\u5173\u7CFB\u5C42\u7EA7\u4E0B\u8868\u5355\u7684\u5197\u957F\u95EE\u9898\uFF0C\u63D0\u5347\u7528\u6237\u4F53\u9A8C\u3002\u9002\u7528\u4E8E\u6709\u5927\u91CF\u6570\u636E\u5B57\u6BB5\u3001\u5173\u7CFB\u5C42\u7EA7\u590D\u6742\u7684\u573A\u666F\uFF0C\u5C06\u6B21\u8981\u4FE1\u606F\u4E0E\u4E3B\u8981\u4FE1\u606F\u5206\u5F00\u586B\u5199\uFF0C\u63D0\u9AD8\u8868\u5355\u7684\u53EF\u7528\u6027\u3002",paraId:1,tocIndex:1},{value:"\u6807\u7B7E\uFF1A\u901A\u8FC7\u4E3A\u5173\u7CFB\u5B57\u6BB5\u914D\u7F6E\u6807\u7B7E\u7EC4\u4EF6\uFF0C\u5B9E\u73B0\u4E86\u6570\u636E\u7684\u5206\u7C7B\u548C\u6807\u8BC6\uFF0C\u80FD\u591F\u66F4\u76F4\u89C2\u5730\u5C55\u793A\u6570\u636E\u5173\u7CFB\uFF0C\u9002\u7528\u4E8E\u9700\u8981\u5C06\u6570\u636E\u6309\u7167\u7C7B\u522B\u8FDB\u884C\u5206\u7EC4\u7684\u573A\u666F",paraId:1,tocIndex:1},{value:"\u6587\u4EF6\u7BA1\u7406\u5668\uFF1A\u7528\u4E8E\u76F4\u63A5",paraId:1,tocIndex:1},{value:"\u4E0A\u4F20\u6216\u9009\u62E9",paraId:1,tocIndex:1},{value:"\u4E0E\u5F53\u524D\u8BB0\u5F55\u5173\u8054\u7684\u6587\u4EF6\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u76EE\u6807\u8868\u4E3A\u6587\u4EF6\u8868\u7684\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002",paraId:1,tocIndex:1},{value:"\u6807\u9898\uFF1A\u7528\u4E8E\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u663E\u793A\u5173\u8054\u8BB0\u5F55\uFF0C\u662F\u6240\u6709\u5173\u7CFB\u5B57\u6BB5\u9605\u8BFB\u72B6\u6001\u4E0B\u7684\u9ED8\u8BA4\u5B57\u6BB5\u7EC4\u4EF6\u3002",paraId:1,tocIndex:1},{value:"\u9002\u7528\u4E8E\u6240\u6709\u5173\u7CFB\u7C7B\u578B",paraId:1,tocIndex:1},{value:"\u3002\u914D\u7F6E\u548C\u4F7F\u7528\u65F6\uFF0C\u9ED8\u8BA4\u6807\u9898\u5B57\u6BB5\u4E3A id,\u652F\u6301\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u6807\u9898\u5B57\u6BB5\u3002",paraId:1,tocIndex:1},{value:"\u901A\u8FC7\u4F7F\u7528\u8FD9\u4E9B\u5B57\u6BB5\u7EC4\u4EF6\uFF0C\u53EF\u4EE5\u5B9A\u5236\u548C\u4F18\u5316\u6570\u636E\u5C55\u793A\u548C\u64CD\u4F5C\u7684\u754C\u9762\uFF0C\u63D0\u4F9B\u66F4\u597D\u7684\u7528\u6237\u4F53\u9A8C\u3002\u6839\u636E\u5177\u4F53\u7684\u4E1A\u52A1\u9700\u6C42\u548C\u5173\u7CFB\u7C7B\u578B\uFF0C\u9009\u62E9\u5408\u9002\u7684\u5B57\u6BB5\u7EC4\u4EF6\u3002\u66F4\u591A\u5173\u7CFB\u5B57\u6BB5\u7684\u529F\u80FD\u53EF\u5728\u7CFB\u7EDF\u4E2D\u4F53\u9A8C\u5E76\u63D0\u51FA\u53CD\u9988\u3002",paraId:2,tocIndex:1}]},442035:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6807\u7B7E\u662F\u7528\u6765\u5728\u6570\u636E\u5C55\u793A\u4E2D\u66F4\u597D\u5730\u5206\u7C7B\u548C\u6807\u8BC6\u5173\u7CFB\u4FE1\u606F\u7684\u7EC4\u4EF6\u3002\u8BA9\u7528\u6237\u66F4\u8F7B\u677E\u5730\u8BC6\u522B\u4E0D\u540C\u7C7B\u522B\u7684\u6570\u636E\uFF0C\u63D0\u5347\u6D4F\u89C8\u6548\u7387\u548C\u6570\u636E\u7406\u89E3\u3002 \u5728\u4EFB\u52A1\u7BA1\u7406\u5E94\u7528\u6A21\u578B\u4E2D\uFF0C\u4EFB\u52A1\u8868\u4E2D\u6709\u5173\u7CFB\u5B57\u6BB5\u300C\u4EFB\u52A1\u8FDB\u5EA6\u300D\uFF08\u4E00\u5BF9\u591A\uFF09",paraId:0,tocIndex:0},{value:"\u9700\u8981\u914D\u7F6E\u6807\u7B7E\u7684\u989C\u8272\u5B57\u6BB5\uFF08\u4ECE\u76EE\u6807\u8868\u4E2D\u9009\u62E9\uFF09",paraId:1,tocIndex:0}]},124451:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6807\u9898\u7EC4\u4EF6\u662F\u9605\u8BFB\u6A21\u5F0F\u4E0B\u63D0\u4F9B\u7684\u4E00\u79CD\u6E05\u6670\u660E\u4E86\u7684\u65B9\u5F0F\u6765\u663E\u793A\u4E0E\u5F53\u524D\u8BB0\u5F55\u5173\u8054\u7684\u5173\u952E\u4FE1\u606F\uFF0C\u8BE6\u60C5\u72B6\u6001\u4E0B\u5173\u7CFB\u5B57\u6BB5\u7684\u9ED8\u8BA4\u7EC4\u4EF6\u5747\u4E3A\u6807\u9898,\u9ED8\u8BA4\u6807\u9898\u5B57\u6BB5\u4E3A id,\u652F\u6301\u81EA\u5B9A\u4E49\u6807\u9898\u5B57\u6BB5\u3002",paraId:0,tocIndex:0}]},55934:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728 UI \u91CC\uFF0C\u5B57\u6BB5\u5373\u5B57\u6BB5\u7EC4\u4EF6\uFF0C\u662F\u5355\u5143\u6570\u636E\u7684\u8F7D\u4F53\uFF0C\u4E0D\u540C\u7C7B\u578B\u6570\u636E\u4EE5\u4E0D\u540C\u5B57\u6BB5\u7EC4\u4EF6\u5448\u73B0\u3002\u5B57\u6BB5\u53EA\u80FD\u9644\u5C5E\u4E8E\u533A\u5757\uFF0C\u4E0D\u80FD\u72EC\u7ACB\u4F7F\u7528\u3002",paraId:0,tocIndex:0},{value:"\u5B57\u6BB5\u4E00\u822C\u4E0D\u5355\u72EC\u4F7F\u7528\uFF0C\u800C\u662F\u4F5C\u4E3A\u6570\u636E\u7C7B\u578B\u533A\u5757\u7684\u5B50\u5143\u7D20\u5B58\u5728\u3002\u6570\u636E\u7C7B\u578B\u7684\u533A\u5757\u901A\u5E38\u90FD\u6709\u300C\u914D\u7F6E\u5B57\u6BB5\u300D\uFF0C\u5B57\u6BB5\u5217\u8868\u7531\u5F53\u524D\u6570\u636E\u8868\u63D0\u4F9B\u3002",paraId:1,tocIndex:1},{value:"\u548C\u533A\u5757\u4E00\u6837\uFF0C\u5B57\u6BB5\u7EC4\u4EF6\u7684\u53F3\u4E0A\u89D2\u4E5F\u6709\u4E09\u4E2A\u56FE\u6807\uFF0C\u5206\u522B\u4E3A\uFF1A",paraId:2,tocIndex:2},{value:"\u62D6\u62FD\u5E03\u5C40",paraId:3,tocIndex:2},{value:"\u5FEB\u6377\u6DFB\u52A0\u5B57\u6BB5",paraId:3,tocIndex:2},{value:"\u5B57\u6BB5\u53C2\u6570\u914D\u7F6E",paraId:3,tocIndex:2},{value:"\u901A\u8FC7\u62D6\u62FD\u79FB\u52A8\u53EF\u4EE5\u81EA\u5B9A\u4E49\u8C03\u6574\u5B57\u6BB5\u5728\u533A\u5757\u4E2D\u7684\u5E03\u5C40",paraId:4,tocIndex:3},{value:"\u7F16\u8F91\u5B57\u6BB5\u6807\u9898",paraId:5,tocIndex:4},{value:"\u663E\u793A\u6807\u9898",paraId:5,tocIndex:4},{value:"\u7F16\u8F91\u63CF\u8FF0",paraId:5,tocIndex:4},{value:"\u5FC5\u586B",paraId:5,tocIndex:4},{value:"\u9A8C\u8BC1\u89C4\u5219",paraId:5,tocIndex:4},{value:"\u9ED8\u8BA4\u503C",paraId:5,tocIndex:4},{value:"\u663E\u793A\u6A21\u5F0F",paraId:5,tocIndex:4},{value:"\u91CD\u8981\u53C2\u6570\u914D\u7F6E\u8BF4\u660E\uFF1A",paraId:6,tocIndex:4},{value:"\u5F85\u8865\u5145",paraId:7,tocIndex:5},{value:"\u5F85\u8865\u5145",paraId:8,tocIndex:6},{value:"\u548C\u533A\u5757\u4E0D\u540C\u7684\u662F\u5B57\u6BB5\u7EC4\u4EF6\u6709\u4E09\u79CD\u663E\u793A\u6A21\u5F0F\uFF1A",paraId:9,tocIndex:7},{value:"\u53EF\u7F16\u8F91 - editable",paraId:10,tocIndex:7},{value:"\u53EA\u8BFB\uFF08\u4E0D\u53EF\u7F16\u8F91\uFF09- readonly",paraId:10,tocIndex:7},{value:"\u53EA\u8BFB\uFF08\u9605\u8BFB\u6A21\u5F0F\uFF09- read friendly",paraId:10,tocIndex:7},{value:"\u90E8\u5206\u5B57\u6BB5\u652F\u6301\u5207\u6362\u4E3A\u5176\u4ED6\u7EC4\u4EF6\uFF0C\u4F8B\u5982\uFF1A",paraId:11,tocIndex:8},{value:"URL",paraId:11,tocIndex:8},{value:" \u7EC4\u4EF6\u53EF\u4EE5\u5207\u6362\u4E3A ",paraId:11,tocIndex:8},{value:"Preview",paraId:11,tocIndex:8},{value:" \u7EC4\u4EF6\u3002",paraId:11,tocIndex:8},{value:"\u5982\u679C\u4F60\u9700\u8981\u6269\u5C55\u66F4\u591A\u7684\u7EC4\u4EF6\uFF0C\u53EF\u4EE5\u53C2\u8003 ",paraId:12,tocIndex:8},{value:"\u6269\u5C55\u6709\u503C\u5B57\u6BB5\u7EC4\u4EF6\u7EC4\u4EF6",paraId:13,tocIndex:8},{value:"\u3002",paraId:12,tocIndex:8},{value:"\u533A\u5757\u7684\u5B57\u6BB5\u7531\u6570\u636E\u8868\u63D0\u4F9B\uFF0C\u66F4\u591A\u5B57\u6BB5\u7C7B\u578B\u7684\u914D\u7F6E\u53C2\u8003 ",paraId:14,tocIndex:9},{value:"\u6570\u636E\u8868\u5B57\u6BB5\u7C7B\u578B",paraId:14,tocIndex:9}]},976009:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase utilizes a WYSIWYG interface configuration mode. You can switch between configuration mode and usage mode by clicking the UI Editor button.",paraId:0,tocIndex:1},{value:"Usage Mode:",paraId:1,tocIndex:1},{value:"Configuration mode:",paraId:2,tocIndex:1},{value:"NocoBase has a built-in layout template, with the navigation area on the top and left, and the content area on the right.",paraId:3,tocIndex:2},{value:"Once you enter the UI Editor mode, orange configurable items will appear on the interface. Typically, the configuration item entry for each configurable element is located in the upper right corner of the element. Almost all elements can be configured and viewed in effect in real time on the interface, here are a few examples:",paraId:4,tocIndex:3},{value:"Configurable items for menu items:",paraId:5,tocIndex:3},{value:"Configuration item for pages:",paraId:6,tocIndex:3},{value:"Configuration items for blocks:",paraId:7,tocIndex:3},{value:"Configuration item for actions:",paraId:8,tocIndex:3},{value:"Configuration items for table columns:",paraId:9,tocIndex:3}]},813696:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5B50\u8868\u5728\u533A\u5757\u4E2D\u4F7F\u7528\u65F6\u9664\u4E86\u672C\u8868\u5B57\u6BB5\u8FD8\u6709\u6240\u6709\u7236\u8868\u7684\u5B57\u6BB5\u4F9B\u914D\u7F6E",paraId:0,tocIndex:1},{value:"\u7236\u8868\u914D\u7F6E TableOID(\u8BB0\u5F55\u662F\u7531\u54EA\u4E2A\u8868\u521B\u5EFA\u7684\u6570\u636E)",paraId:1,tocIndex:2},{value:"\u5B50\u8868\u7684\u6570\u636E\u6C47\u805A\u5728\u7236\u8868\u4E2D",paraId:2,tocIndex:2},{value:"\u5728\u7236\u8868\u4E2D\u4E3A\u5B50\u8868\u914D\u7F6E\u6DFB\u52A0\u64CD\u4F5C",paraId:3,tocIndex:2},{value:"\u53EF\u9009\u9879\u4E3A\u5F53\u524D\u8868\u7684\u6240\u6709\u5B50\u8868",paraId:4,tocIndex:2},{value:"UI \u914D\u7F6E\u72B6\u6001\u4E0B\u53EF\u4EE5\u4E3A\u5B50\u8868\u914D\u7F6E\u533A\u5757\uFF08\u8868\u5355/\u8BE6\u60C5\u533A\u5757\uFF09",paraId:5,tocIndex:3},{value:"\u975E UI \u914D\u7F6E\u72B6\u6001\u4E0B,\u6309 __collection \u53EA\u663E\u793A\u5BF9\u5E94\u6570\u636E\u8868\u8BB0\u5F55\u7684\u533A\u5757",paraId:6,tocIndex:3},{value:"\u5173\u7CFB\u6570\u636E\u7684\u8BE6\u60C5\u5728\u975E UI \u914D\u7F6E\u72B6\u6001\u4E0B\u6309 __collection \u4EC5\u663E\u793A\u5BF9\u5E94\u6570\u636E\u7684\u533A\u5757",paraId:7,tocIndex:4},{value:"B \u53EF\u4EE5\u8FDE\u63A5 A\uFF0CB \u7684\u5B50\u8868 B1 \u4E5F\u53EF\u4EE5\u8FDE\u63A5 A",paraId:8,tocIndex:5}]},750561:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},390842:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Menus are used to organize pages and external links. In NocoBase's default page layout template, menus are located on the top and left side. In this case, the top side is the first level menu, and the left side is the second level and infinite levels of submenus.",paraId:0,tocIndex:0},{value:"NocoBase has three built-in menu item types:",paraId:1,tocIndex:1},{value:"Group",paraId:2,tocIndex:1},{value:"Page",paraId:2,tocIndex:1},{value:"Link",paraId:2,tocIndex:1},{value:'"Group" is used to group menu items, which can be on the top or left side. Within a group, you can continue to create groups, i.e. the menu can be infinitely hierarchical.',paraId:3,tocIndex:2},{value:"Page can be used as container for blocks, holding a wide variety of blocks. (See [pages and popups](. /pages/index.md) )",paraId:4,tocIndex:3},{value:"Can be used to jump to third-party URLs",paraId:5,tocIndex:4},{value:"Once you switch into UI Editor mode, there are two icons in the upper right corner of the menu item:",paraId:6,tocIndex:5},{value:"Drag and drop to move",paraId:7,tocIndex:5},{value:"Menu Item Configuration",paraId:7,tocIndex:5},{value:"Edit: includes menu item title, icon, etc.",paraId:8,tocIndex:6},{value:'Move to: besides drag and drop move, you can also move the menu item quickly by "Move to", you can move the menu item in front of, behind or inside of other menu items.',paraId:8,tocIndex:6},{value:"Insert before",paraId:8,tocIndex:6},{value:"Insert after",paraId:8,tocIndex:6},{value:"Insert inner (group type only)",paraId:8,tocIndex:6},{value:"Delete",paraId:8,tocIndex:6}]},802330:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's pages and popups (dialog, drawer) can be used as containers for blocks; they are like a canvas on which various blocks can be freely placed.",paraId:0,tocIndex:0},{value:"After creating a page by [menu](. /menus/index.md) , you can see that an empty page consists of the following two parts:",paraId:1,tocIndex:1},{value:`header
`,paraId:2,tocIndex:1},{value:"page title",paraId:3,tocIndex:1},{value:"tab",paraId:3,tocIndex:1},{value:"block container",paraId:2,tocIndex:1},{value:"Hover your mouse over the configuration item icon at the top right of the page to see the page configuration item:",paraId:4,tocIndex:1},{value:"Configurable items include:",paraId:5,tocIndex:1},{value:"Enable page header: used to control whether to display the header or not;",paraId:6,tocIndex:1},{value:"Display page title: whether to show the page title in the header;",paraId:6,tocIndex:1},{value:"Edit page title: the default page title is the menu item title, which can be customized;",paraId:6,tocIndex:1},{value:"Enable page tabs: off by default, you can add multiple tabs when enabled.",paraId:6,tocIndex:1},{value:"Usually, we need to enable the header area for displaying page title, tabs. There are also cases where you don't want to enable it, for example, when we create a Dashbodrd page and the first level menu is a good representation of the content of that page, in this case we can disable the header and only show the blocks within the page.",paraId:7,tocIndex:2},{value:`The default page title is the name of the menu item, which can be changed by clicking "Edit page title". As with the header, there are times when we don't need to show the page title, but only the tabs, in which case the title can be turned off.`,paraId:8,tocIndex:3},{value:"When there is too much content in a page, or when it is suitable to organize it into several separate parts, we can enable tabs, each tab is a separate block container. In the image below, we have added 3 tabs to the orders page to display all orders, completed orders, and refunded orders. Hover your mouse over the tab titles and you can see the Drag and Configure Items buttons in the upper right corner.",paraId:9,tocIndex:4},{value:'You can add an unlimited number of blocks to your page by clicking "Add block" (see [Blocks](. /blocks/index.md)).',paraId:10,tocIndex:5},{value:"After adding multiple blocks, you can drag and drop any layout of the blocks to adjust the layout to achieve the most suitable effect by using the dragbutton at the upper right corner of the block.",paraId:11,tocIndex:5},{value:"Currently, there are two kinds of popup windows in NocoBase: dialogs and drawers. Like pages, dialogs and drawers can be used as containers for blocks, and multiple tabs can be added to them. They are opened by actions such as Add, Edit, View, etc.",paraId:12,tocIndex:6}]},334872:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u4E2A\u4EBA\u4E2D\u5FC3\u4E3A\u7528\u6237\u63D0\u4F9B\u4E86\u4E00\u7CFB\u5217\u7BA1\u7406\u548C\u7CFB\u7EDF\u7EF4\u62A4\u529F\u80FD\uFF0C\u5305\u62EC\u67E5\u770B\u7CFB\u7EDF\u7248\u672C\u53F7\u3001\u67E5\u770B\u548C\u7F16\u8F91\u4E2A\u4EBA\u8D44\u6599\u7B49\u5FEB\u6377\u64CD\u4F5C\u3002\u5F53\u7CFB\u7EDF\u6743\u9650\u5F00\u542F\u4E86\u76F8\u5E94\u6743\u9650\u65F6\uFF0C\u4E2A\u4EBA\u4E2D\u5FC3\u8FD8\u4F1A\u63D0\u4F9B\u6E05\u9664\u7F13\u5B58\u548C\u91CD\u542F\u5E94\u7528\u7684\u6309\u94AE\uFF0C\u4E2A\u4EBA\u4E2D\u5FC3\u7684\u5FEB\u6377\u64CD\u4F5C\u53EF\u7531\u63D2\u4EF6\u6269\u5C55\u63D0\u4F9B\u3002",paraId:0,tocIndex:0},{value:"\u76EE\u524D\u63D0\u4F9B\u7684\u4E2A\u4EBA\u4E2D\u5FC3\u5FEB\u6377\u64CD\u4F5C\uFF1A",paraId:1,tocIndex:0},{value:"Edit profile\uFF1A\u7F16\u8F91\u7528\u6237\u4E2A\u4EBA\u4FE1\u606F\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u63D0\u4F9B",paraId:2,tocIndex:0},{value:"Change password\uFF1A\u4FEE\u6539\u5BC6\u7801\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B",paraId:2,tocIndex:0},{value:"Switch role\uFF1A\u5207\u6362\u89D2\u8272\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B",paraId:2,tocIndex:0},{value:"Sign out\uFF1A\u767B\u51FA\u7CFB\u7EDF\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B",paraId:2,tocIndex:0},{value:"Theme \uFF1A\u7528\u4E8E\u5207\u6362\u4E3B\u9898\uFF0C\u7531\u4E3B\u9898\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B",paraId:2,tocIndex:0},{value:"Clear cache: \u6E05\u9664\u7F13\u5B58\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B\uFF08\u6709\u6743\u9650\u63A7\u5236\uFF09",paraId:2,tocIndex:0},{value:"Restart application\uFF1A\u91CD\u542F\u5E94\u7528\uFF0C\u7531\u7528\u6237\u8BA4\u8BC1\u63D2\u4EF6\u5B9E\u73B0\u63D0\u4F9B\uFF08\u6709\u6743\u9650\u63A7\u5236\uFF09",paraId:2,tocIndex:0}]},996214:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Table",paraId:0},{value:"TODO",paraId:1,tocIndex:0}]},413413:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u652F\u6301\u591A\u79CD\u7C7B\u578B\u7684\u533A\u5757\u3002",paraId:0,tocIndex:0},{value:"\u4F46\u662F\u76EE\u524D\u5DF2\u6709\u7684\u533A\u5757\u4E0D\u4E00\u5B9A\u6EE1\u8DB3\u9700\u6C42\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6269\u5C55\u533A\u5757\u3002",paraId:1,tocIndex:0},{value:"\u6839\u636E\u533A\u5757\u7C7B\u578B\u548C\u590D\u6742\u5EA6\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E86\u5982\u4E0B\u793A\u4F8B\uFF1A",paraId:2,tocIndex:0},{value:"Carousel",paraId:3,tocIndex:0},{value:" \u533A\u5757",paraId:3,tocIndex:0},{value:"Form",paraId:4,tocIndex:0},{value:" \u533A\u5757",paraId:4,tocIndex:0},{value:"Table",paraId:5,tocIndex:0},{value:" \u533A\u5757",paraId:5,tocIndex:0}]},923766:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Create a new page and use the ",paraId:0,tocIndex:1},{value:"SchemaComponent",paraId:0,tocIndex:1},{value:" to render some content. The route component and the components within the ",paraId:0,tocIndex:1},{value:"SchemaComponent",paraId:0,tocIndex:1},{value:" are globally registered.",paraId:0,tocIndex:1},{value:"You can view the complete example code for this documentation in the ",paraId:1,tocIndex:1},{value:"plugin-samples",paraId:1,tocIndex:1},{value:" repository.",paraId:1,tocIndex:1},{value:"Following the instructions from ",paraId:2,tocIndex:2},{value:"Creating Your First Plugin",paraId:3,tocIndex:2},{value:", if you don\u2019t already have a project, you can create one. If you have a project or have cloned the source code, you can skip this step.",paraId:2,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:4,tocIndex:2},{value:"Next, initialize a plugin and add it to the system:",paraId:5,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-component-and-scope-global
yarn pm enable @nocobase-sample/plugin-component-and-scope-global
`,paraId:6,tocIndex:2},{value:"Then, start the project:",paraId:7,tocIndex:2},{value:`yarn dev
`,paraId:8,tocIndex:2},{value:"After logging in, visit ",paraId:9,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/local/",paraId:9,tocIndex:2},{value:" to check that the plugin has been installed and enabled.",paraId:9,tocIndex:2},{value:"Create the ",paraId:10,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-global/src/client/CustomPage.tsx",paraId:10,tocIndex:4},{value:" file with the following content:",paraId:10,tocIndex:4},{value:`import React from "react"

export const SamplesCustomPage = () => {
  return <div>TODO</div>
}
`,paraId:11,tocIndex:4},{value:"For detailed instructions on creating a custom page, refer to the ",paraId:12,tocIndex:5},{value:"Add Page",paraId:13,tocIndex:5},{value:" documentation.",paraId:12,tocIndex:5},{value:"Modify the ",paraId:14,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-global/src/index.ts",paraId:14,tocIndex:5},{value:" file as follows:",paraId:14,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { SamplesCustomPage } from './CustomPage'

export class PluginComponentAndScopeGlobalClient extends Plugin {
  async load() {
    this.app.router.add('admin.custom-page1', {
      path: '/admin/custom-page1',
      Component: 'SamplesCustomPage',
    })

    this.app.addComponents({ SamplesCustomPage })
  }
}

export default PluginComponentAndScopeGlobalClient;
`,paraId:15,tocIndex:5},{value:"We register the ",paraId:16,tocIndex:5},{value:"SamplesCustomPage",paraId:16,tocIndex:5},{value:" component globally using the ",paraId:16,tocIndex:5},{value:"app.addComponents()",paraId:16,tocIndex:5},{value:" method, then register a route using the ",paraId:16,tocIndex:5},{value:"app.router.add()",paraId:16,tocIndex:5},{value:" method. The ",paraId:16,tocIndex:5},{value:"Component",paraId:16,tocIndex:5},{value:" field, being a string type, will automatically search for the globally registered component.",paraId:16,tocIndex:5},{value:"Afterward, visit ",paraId:17,tocIndex:5},{value:"http://localhost:13000/admin/custom-page1",paraId:17,tocIndex:5},{value:" to see the content of the ",paraId:17,tocIndex:5},{value:"SamplesCustomPage",paraId:17,tocIndex:5},{value:" component.",paraId:17,tocIndex:5},{value:"SchemaComponent",paraId:18},{value:"We first need to understand the following concepts:",paraId:19,tocIndex:6},{value:"Schema Protocol",paraId:20,tocIndex:6},{value:"SchemaComponent",paraId:21,tocIndex:6},{value:"withDynamicSchemaProps",paraId:22,tocIndex:6},{value:"useFieldSchema()",paraId:21,tocIndex:6},{value:"Modify the ",paraId:23,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-global/src/client/CustomPage.tsx",paraId:23,tocIndex:6},{value:" file as follows:",paraId:23,tocIndex:6},{value:`import { ISchema, SchemaComponent, withDynamicSchemaProps } from "@nocobase/client"
import { uid } from '@formily/shared'
import { useFieldSchema } from '@formily/react'
import React, { FC } from "react"

export const SamplesHello: FC<{ name: string }> = withDynamicSchemaProps(({ name }) => {
  return <div>hello {name}</div>
})

export const useSamplesHelloProps = () => {
  const schema = useFieldSchema();
  return { name: schema.name }
}

const schema: ISchema = {
  type: 'void',
  name: uid(),
  properties: {
    demo1: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-component-props': {
        name: 'demo1',
      },
    },
    demo2: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-use-component-props': 'useSamplesHelloProps',
    },
  }
}

export const SamplesCustomPage = () => {
  return <SchemaComponent schema={schema}></SchemaComponent>
}
`,paraId:24,tocIndex:6},{value:"We defined and exported the ",paraId:25,tocIndex:6},{value:"SamplesHello",paraId:25,tocIndex:6},{value:" and ",paraId:25,tocIndex:6},{value:"useSamplesHelloProps",paraId:25,tocIndex:6},{value:" components.",paraId:25,tocIndex:6},{value:"We defined a ",paraId:25,tocIndex:6},{value:"schema",paraId:25,tocIndex:6},{value:" object that contains ",paraId:25,tocIndex:6},{value:"'x-component': 'SamplesHello'",paraId:25,tocIndex:6},{value:" and ",paraId:25,tocIndex:6},{value:"'x-use-component-props': 'useSamplesHelloProps'",paraId:25,tocIndex:6},{value:", both of which are string types.",paraId:25,tocIndex:6},{value:"We used the ",paraId:25,tocIndex:6},{value:"SchemaComponent",paraId:25,tocIndex:6},{value:" component to render the ",paraId:25,tocIndex:6},{value:"schema",paraId:25,tocIndex:6},{value:" object.",paraId:25,tocIndex:6},{value:"Next, we need to register ",paraId:26,tocIndex:6},{value:"SamplesHello",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"useSamplesHelloProps",paraId:26,tocIndex:6},{value:" globally. Modify the ",paraId:26,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-global/src/index.ts",paraId:26,tocIndex:6},{value:" file as follows:",paraId:26,tocIndex:6},{value:`import { Plugin } from '@nocobase/client';
- import { SamplesCustomPage } from './CustomPage'
+ import { SamplesCustomPage, SamplesHello, useSamplesHelloProps } from './CustomPage'

export class PluginComponentAndScopeGlobalClient extends Plugin {
  async load() {
    this.app.router.add('admin.custom-page1', {
      path: '/admin/custom-page1',
      Component: 'SamplesCustomPage',
    })

-   this.app.addComponents({ SamplesCustomPage })
+   this.app.addComponents({ SamplesCustomPage, SamplesHello })
+   this.app.addScopes({ useSamplesHelloProps })
  }
}

export default PluginComponentAndScopeGlobalClient;
`,paraId:27,tocIndex:6},{value:"Afterward, visit ",paraId:28,tocIndex:6},{value:"http://localhost:13000/admin/custom-page1",paraId:28,tocIndex:6},{value:" to see the content of the ",paraId:28,tocIndex:6},{value:"CustomPage",paraId:28,tocIndex:6},{value:" component.",paraId:28,tocIndex:6},{value:"Following the instructions in ",paraId:29,tocIndex:7},{value:"Building and Packaging the Plugin",paraId:30,tocIndex:7},{value:", you can package the plugin and upload it to the production environment.",paraId:29,tocIndex:7},{value:"If you have cloned the source code, first perform a full build to include plugin dependencies.",paraId:31,tocIndex:7},{value:`yarn build
`,paraId:32,tocIndex:7},{value:"If the project was created using ",paraId:33,tocIndex:7},{value:"create-nocobase-app",paraId:33,tocIndex:7},{value:", simply run:",paraId:33,tocIndex:7},{value:`yarn build @nocobase-sample/plugin-component-and-scope-global --tar
`,paraId:34,tocIndex:7},{value:"After this, you\u2019ll find the ",paraId:35,tocIndex:7},{value:"storage/tar/@nocobase-sample/plugin-component-and-scope-global.tar.gz",paraId:35,tocIndex:7},{value:" file, which can be installed using the ",paraId:35,tocIndex:7},{value:"upload method",paraId:36,tocIndex:7},{value:".",paraId:35,tocIndex:7}]},630192:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"There are two main reasons why Components and Scopes need to be registered:",paraId:0,tocIndex:1},{value:"NocoBase\u2019s front-end pages are rendered based on the ",paraId:1,tocIndex:2},{value:"UI Schema",paraId:2,tocIndex:2},{value:", which must be stored in the database. Since the UI Schema cannot have reference-type properties, we can only store the values of properties like ",paraId:1,tocIndex:2},{value:"x-component",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"x-decorator",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"x-use-component-props",paraId:1,tocIndex:2},{value:", and ",paraId:1,tocIndex:2},{value:"x-use-decorator-props",paraId:1,tocIndex:2},{value:" as strings. Then, we register the corresponding Component and Scope in NocoBase so that during page rendering, the system can match the stored strings to the appropriate Component and Scope.",paraId:1,tocIndex:2},{value:"In contrast, for UI Schemas that do not need to be stored in the database, we can directly use reference-type properties. For example, in the locally developed ",paraId:3,tocIndex:2},{value:"plugin configuration page",paraId:4,tocIndex:2},{value:", properties like ",paraId:3,tocIndex:2},{value:"x-component",paraId:3,tocIndex:2},{value:" and ",paraId:3,tocIndex:2},{value:"x-use-component-props",paraId:3,tocIndex:2},{value:" can use reference-type values directly.",paraId:3,tocIndex:2},{value:`const schema: ISchema = {
  type: 'void',
  name: uid(),
  'x-component': MyComponent,
  'x-use-component-props': useMyComponentProps,
}
`,paraId:5,tocIndex:2},{value:"Components can be used both in the UI Schema and in routing. In both cases, it may be necessary to override certain components to achieve customization. For example:",paraId:6,tocIndex:3},{value:`class AuthPlugin extends Plugin {
  async load() {
    this.app.addComponents({ LoginPage })
    this.app.router.add('auth.signin', {
      path: '/signin',
      Component: 'SignInPage',
    })
  }
}
`,paraId:7,tocIndex:3},{value:"If someone needs to replace the login page, there are two options:",paraId:8,tocIndex:3},{value:`class CustomPlugin extends Plugin {
  async load() {
    this.app.router.add('auth.login', {
      path: '/login',
      Component: CustomLoginPage,
    })
  }
}
`,paraId:9,tocIndex:4},{value:`class CustomPlugin extends Plugin {
  async load() {
    this.app.addComponent({ LoginPage: CustomLoginPage })
  }
}
`,paraId:10,tocIndex:5},{value:"In summary, if it's not one of these two scenarios, there's no need to register the Component and Scope, and you can directly use reference-type properties instead.",paraId:11,tocIndex:5},{value:"Components and Scopes can be registered globally or locally.",paraId:12,tocIndex:6},{value:"For global registration, use the methods ",paraId:13,tocIndex:7},{value:"app.addComponents()",paraId:13,tocIndex:7},{value:" and ",paraId:13,tocIndex:7},{value:"app.addScopes()",paraId:13,tocIndex:7},{value:". For example:",paraId:13,tocIndex:7},{value:`class MyPlugin extends Plugin {
  async load() {
    this.app.addComponents({ MyComponent })
    this.app.addScopes({ MyScope })
  }
}
`,paraId:14,tocIndex:7},{value:"For local registration, use the ",paraId:15,tocIndex:8},{value:"components",paraId:15,tocIndex:8},{value:" and ",paraId:15,tocIndex:8},{value:"scope",paraId:15,tocIndex:8},{value:" properties of the ",paraId:15,tocIndex:8},{value:"SchemaComponent",paraId:15,tocIndex:8},{value:" and ",paraId:15,tocIndex:8},{value:"SchemaComponentOptions",paraId:15,tocIndex:8},{value:" components. For example:",paraId:15,tocIndex:8},{value:`<SchemaComponentProvider components={{ Hello }} scope={{ useDeleteProps }}>
  <SchemaComponent schema={schema} components={{ World }} scope={{ useSubmitProps }} />
</SchemaComponentProvider>
`,paraId:16,tocIndex:8},{value:"SchemaComponentProvider",paraId:17,tocIndex:8},{value:" can be nested multiple layers deep, and inner ",paraId:17,tocIndex:8},{value:"SchemaComponent",paraId:17,tocIndex:8},{value:" elements will inherit the ",paraId:17,tocIndex:8},{value:"components",paraId:17,tocIndex:8},{value:" and ",paraId:17,tocIndex:8},{value:"scope",paraId:17,tocIndex:8},{value:" from outer layers.",paraId:17,tocIndex:8},{value:"For the scenarios mentioned, we provide the following examples:",paraId:18,tocIndex:8},{value:"Global Registration of Component and Scope",paraId:19,tocIndex:8},{value:"Local Registration of Component and Scope",paraId:20,tocIndex:8},{value:"For the customization scenario, refer to the routing example ",paraId:21,tocIndex:8},{value:"Replace Page",paraId:22,tocIndex:8},{value:".",paraId:21,tocIndex:8}]},32602:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The functionality to be implemented here is identical to the example in ",paraId:0,tocIndex:1},{value:"Global Registration of Component and Scope",paraId:1,tocIndex:1},{value:", except this time the components and scopes will be registered within the plugin itself rather than globally.",paraId:0,tocIndex:1},{value:"The complete example code for this documentation can be found in the ",paraId:2,tocIndex:1},{value:"plugin-samples",paraId:2,tocIndex:1},{value:" repository.",paraId:2,tocIndex:1},{value:"Following the instructions in ",paraId:3,tocIndex:2},{value:"Creating Your First Plugin",paraId:4,tocIndex:2},{value:", if you do not already have a project, you can create one first. If you already have a project or have cloned the source code, skip this step.",paraId:3,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:2},{value:"Then, initialize a plugin and add it to the system:",paraId:6,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-component-and-scope-local
yarn pm enable @nocobase-sample/plugin-component-and-scope-local
`,paraId:7,tocIndex:2},{value:"Finally, start the project:",paraId:8,tocIndex:2},{value:`yarn dev
`,paraId:9,tocIndex:2},{value:"Once logged in, visit ",paraId:10,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:2},{value:" to confirm the plugin has been successfully installed and enabled.",paraId:10,tocIndex:2},{value:"Create a new file at ",paraId:11,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/client/CustomPage.tsx",paraId:11,tocIndex:4},{value:" with the following content:",paraId:11,tocIndex:4},{value:`import React from "react";

export const SamplesCustomPage = () => {
  return <div>TODO</div>;
};
`,paraId:12,tocIndex:4},{value:"Component",paraId:13},{value:"For details on creating custom pages, refer to ",paraId:14,tocIndex:5},{value:"Adding a New Page",paraId:15,tocIndex:5},{value:".",paraId:14,tocIndex:5},{value:"Modify the file ",paraId:16,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/index.ts",paraId:16,tocIndex:5},{value:" with the following content:",paraId:16,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { SamplesCustomPage } from './CustomPage';

export class PluginComponentAndScopeLocalClient extends Plugin {
  async load() {
    this.app.router.add('admin.custom-page2', {
      path: '/admin/custom-page2',
      Component: SamplesCustomPage,
    });
  }
}

export default PluginComponentAndScopeLocalClient;
`,paraId:17,tocIndex:5},{value:"Unlike global registration, here we directly use ",paraId:18,tocIndex:5},{value:"Component: SamplesCustomPage",paraId:18,tocIndex:5},{value:" instead of a string.",paraId:18,tocIndex:5},{value:"Now, visit ",paraId:19,tocIndex:5},{value:"http://localhost:13000/admin/custom-page2",paraId:19,tocIndex:5},{value:" to view the content of the ",paraId:19,tocIndex:5},{value:"SamplesCustomPage",paraId:19,tocIndex:5},{value:" component.",paraId:19,tocIndex:5},{value:"SchemaComponent",paraId:13},{value:"Here\u2019s some required background knowledge:",paraId:20,tocIndex:6},{value:"Schema Protocol",paraId:21,tocIndex:6},{value:"SchemaComponent",paraId:22,tocIndex:6},{value:"withDynamicSchemaProps",paraId:23,tocIndex:6},{value:"useFieldSchema()",paraId:22,tocIndex:6},{value:"Modify the file ",paraId:24,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/client/CustomPage.tsx",paraId:24,tocIndex:6},{value:" as follows:",paraId:24,tocIndex:6},{value:`import { ISchema, SchemaComponent, withDynamicSchemaProps } from "@nocobase/client"
import { uid } from '@formily/shared'
import { useFieldSchema } from '@formily/react'
import React, { FC } from "react"

const SamplesHello: FC<{ name: string }> = withDynamicSchemaProps(({ name }) => {
  return <div>hello {name}</div>
})

const useSamplesHelloProps = () => {
  const schema = useFieldSchema();
  return { name: schema.name }
}

const schema: ISchema = {
  type: 'void',
  name: uid(),
  properties: {
    demo1: {
      type: 'void',
      'x-component': SamplesHello,
      'x-component-props': {
        name: 'demo1',
      },
    },
    demo2: {
      type: 'void',
      'x-component': SamplesHello,
      'x-use-component-props': useSamplesHelloProps,
    },
    demo3: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-component-props': {
        name: 'demo3',
      },
    },
    demo4: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-use-component-props': 'useSamplesHelloProps',
    },
  }
}

export const SamplesCustomPage = () => {
  return <SchemaComponent schema={schema} components={{ SamplesHello }} scope={{ useSamplesHelloProps }}></SchemaComponent>
}
`,paraId:25,tocIndex:6},{value:"The ",paraId:26,tocIndex:6},{value:"SamplesHello",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"useSamplesHelloProps",paraId:26,tocIndex:6},{value:" components are defined.",paraId:26,tocIndex:6},{value:"A ",paraId:26,tocIndex:6},{value:"schema",paraId:26,tocIndex:6},{value:" object is created where ",paraId:26,tocIndex:6},{value:"demo1",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"demo2",paraId:26,tocIndex:6},{value:" directly use the corresponding components and scopes, while ",paraId:26,tocIndex:6},{value:"demo3",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"demo4",paraId:26,tocIndex:6},{value:" use string-based definitions.",paraId:26,tocIndex:6},{value:"The ",paraId:26,tocIndex:6},{value:"SchemaComponent",paraId:26,tocIndex:6},{value:" registers ",paraId:26,tocIndex:6},{value:"SamplesHello",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"useSamplesHelloProps",paraId:26,tocIndex:6},{value:" locally using the ",paraId:26,tocIndex:6},{value:"components",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"scope",paraId:26,tocIndex:6},{value:" properties.",paraId:26,tocIndex:6},{value:"Visit ",paraId:27,tocIndex:6},{value:"http://localhost:13000/admin/custom-page2",paraId:27,tocIndex:6},{value:" to view the ",paraId:27,tocIndex:6},{value:"CustomPage",paraId:27,tocIndex:6},{value:" component.",paraId:27,tocIndex:6},{value:"Follow the ",paraId:28,tocIndex:7},{value:"Build and Package Plugin",paraId:29,tocIndex:7},{value:" guide to package the plugin for production.",paraId:28,tocIndex:7},{value:"If the source code is cloned, perform a full build first to ensure all plugin dependencies are built:",paraId:30,tocIndex:7},{value:`yarn build
`,paraId:31,tocIndex:7},{value:"If the project was created using ",paraId:32,tocIndex:7},{value:"create-nocobase-app",paraId:32,tocIndex:7},{value:", directly run:",paraId:32,tocIndex:7},{value:`yarn build @nocobase-sample/plugin-component-and-scope-local --tar
`,paraId:33,tocIndex:7},{value:"This generates a file at ",paraId:34,tocIndex:7},{value:"storage/tar/@nocobase-sample/plugin-component-and-scope-local.tar.gz",paraId:34,tocIndex:7},{value:". Use the ",paraId:34,tocIndex:7},{value:"upload process",paraId:35,tocIndex:7},{value:" to install it.",paraId:34,tocIndex:7}]},978320:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u65E0\u503C\u5B57\u6BB5\u7EC4\u4EF6",paraId:0,tocIndex:0},{value:"\u6709\u503C\u5B57\u6BB5\u7EC4\u4EF6",paraId:1,tocIndex:0},{value:"Field interface",paraId:2,tocIndex:0}]},326788:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u524D\u9762\u5DF2\u7ECF\u4ECB\u7ECD\u4E86\u57FA\u4E8E\u5DF2\u6709\u7684 ",paraId:0,tocIndex:0},{value:"Field interface",paraId:0,tocIndex:0},{value:" \u589E\u52A0\u7EC4\u4EF6\u7C7B\u578B\u7684\u65B9\u5F0F\u5B9E\u73B0\u5B57\u6BB5\u7EC4\u4EF6\u7684\u66FF\u6362\uFF0C\u4F46\u662F\u67D0\u4E9B\u573A\u666F\u4E0B\u65B0\u589E\u7684\u7EC4\u4EF6\u4E0D\u5C5E\u4E8E\u5DF2\u6709\u7684 ",paraId:0,tocIndex:0},{value:"Field interface",paraId:0,tocIndex:0},{value:"\uFF0C\u8FD9\u65F6\u5019\u6211\u4EEC\u5C31\u9700\u8981\u81EA\u5B9A\u4E49 ",paraId:0,tocIndex:0},{value:"Field interface",paraId:0,tocIndex:0},{value:"\u3002",paraId:0,tocIndex:0},{value:"\u672C\u6587\u4F1A\u65B0\u589E\u4E00\u4E2A ",paraId:1,tocIndex:1},{value:"Encryption",paraId:1,tocIndex:1},{value:" interface \u7C7B\u578B\u5373\u52A0\u89E3\u5BC6\u5B57\u6BB5\u3002\u5177\u4F53\u9700\u6C42\u5982\u4E0B\uFF1A",paraId:1,tocIndex:1},{value:"\u4F7F\u7528\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u5BF9\u5B57\u6BB5\u8FDB\u884C\u52A0\u5BC6\u548C\u89E3\u5BC6",paraId:2,tocIndex:1},{value:"\u52A0\u5BC6\u540E\uFF0C\u4EE5\u5BC6\u6587\u7684\u65B9\u5F0F\u88AB\u5B58\u50A8\u81F3\u6570\u636E\u5E93\u4E2D\uFF0C\u5728\u67E5\u770B\u6570\u636E\u65F6\u8FDB\u884C\u89E3\u5BC6\u660E\u6587\u663E\u793A",paraId:2,tocIndex:1},{value:"\u52A0\u5BC6\u540E\u7684\u5B57\u6BB5\u4E0D\u652F\u6301\u6A21\u7CCA\u641C\u7D22\uFF0C\u53EA\u652F\u6301\u7B49\u4E8E\u3001\u4E0D\u7B49\u4E8E\u3001\u4E3A\u7A7A\u3001\u4E0D\u4E3A\u7A7A\u7B49\u64CD\u4F5C",paraId:2,tocIndex:1},{value:"\u6B64\u529F\u80FD\u9700\u8981\u524D\u540E\u7AEF\u914D\u5408\u5B9E\u73B0\uFF0C\u524D\u7AEF\u9700\u8981\u5B9E\u73B0\u52A0\u5BC6\u548C\u89E3\u5BC6\u7684 Field interface\uFF0C\u540E\u7AEF\u9700\u8981\u5B9E\u73B0\u52A0\u5BC6\u548C\u89E3\u5BC6\u7684\u903B\u8F91\u3002",paraId:3,tocIndex:1},{value:"\u672C\u6587\u6863\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801\u53EF\u4EE5\u5728 ",paraId:4,tocIndex:1},{value:"plugin-samples",paraId:4,tocIndex:1},{value:" \u4E2D\u67E5\u770B\u3002",paraId:4,tocIndex:1},{value:`
  `,paraId:5},{value:"\u6211\u4EEC\u6309\u7167 ",paraId:6,tocIndex:2},{value:"\u7F16\u5199\u7B2C\u4E00\u4E2A\u63D2\u4EF6",paraId:7,tocIndex:2},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u5982\u679C\u6CA1\u6709\u4E00\u4E2A\u9879\u76EE\uFF0C\u53EF\u4EE5\u5148\u521B\u5EFA\u4E00\u4E2A\u9879\u76EE\uFF0C\u5982\u679C\u5DF2\u7ECF\u6709\u4E86\u6216\u8005\u662F clone \u7684\u6E90\u7801\uFF0C\u5219\u8DF3\u8FC7\u8FD9\u4E00\u6B65\u3002",paraId:6,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:8,tocIndex:2},{value:"\u7136\u540E\u521D\u59CB\u5316\u4E00\u4E2A\u63D2\u4EF6\uFF0C\u5E76\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\uFF1A",paraId:9,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-field-interface
yarn pm enable @nocobase-sample/plugin-field-interface
`,paraId:10,tocIndex:2},{value:"\u7136\u540E\u542F\u52A8\u9879\u76EE\u5373\u53EF\uFF1A",paraId:11,tocIndex:2},{value:`yarn dev
`,paraId:12,tocIndex:2},{value:"\u7136\u540E\u767B\u5F55\u540E\u8BBF\u95EE ",paraId:13,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/locale/",paraId:13,tocIndex:2},{value:" \u5C31\u53EF\u4EE5\u770B\u5230\u63D2\u4EF6\u5DF2\u7ECF\u5B89\u88C5\u5E76\u542F\u7528\u4E86\u3002",paraId:13,tocIndex:2},{value:"\u5728\u5B9E\u73B0\u672C\u793A\u4F8B\u4E4B\u524D\uFF0C\u6211\u4EEC\u9700\u8981\u5148\u4E86\u89E3\u4E00\u4E9B\u57FA\u7840\u77E5\u8BC6\uFF1A",paraId:14,tocIndex:3},{value:"NodeJS crypto \u6A21\u5757",paraId:15,tocIndex:3},{value:"Database",paraId:16,tocIndex:3},{value:"\uFF1A\u7528\u4E8E\u7BA1\u7406\u6570\u636E\u3001\u5B57\u6BB5\u3001\u6A21\u578B\u3001\u64CD\u4F5C\u7B49",paraId:15,tocIndex:3},{value:"CollectionFieldInterface",paraId:15,tocIndex:3},{value:"\uFF1A\u524D\u7AEF\u6570\u636E\u5B57\u6BB5\u7C7B",paraId:15,tocIndex:3},{value:"CollectionFieldInterfaceManager",paraId:15,tocIndex:3},{value:"\uFF1A\u524D\u7AEF\u7528\u6765\u7BA1\u7406 ",paraId:15,tocIndex:3},{value:"CollectionFieldInterface",paraId:15,tocIndex:3},{value:" \u7684\u7C7B",paraId:15,tocIndex:3},{value:`.
\u251C\u2500\u2500 client # \u5BA2\u6237\u7AEF\u63D2\u4EF6
\u2502   \u251C\u2500\u2500 EncryptionFieldInterface.tsx # \u524D\u7AEF Field Interface
\u2502   \u251C\u2500\u2500 locale.ts # \u591A\u8BED\u8A00\u5DE5\u5177\u51FD\u6570
\u2502   \u2514\u2500\u2500 index.ts # \u524D\u7AEF\u5165\u53E3\u6587\u4EF6
\u251C\u2500\u2500 locale
\u2502   \u251C\u2500\u2500 en-US.json # \u82F1\u8BED
\u2502   \u2514\u2500\u2500 zh-CN.json # \u4E2D\u6587
\u251C\u2500\u2500 index.ts # \u670D\u52A1\u7AEF\u63D2\u4EF6\u5165\u53E3
\u2514\u2500\u2500 server
      \u251C\u2500\u2500 encryption-field.ts # \u52A0\u89E3\u5BC6\u5B57\u6BB5
      \u251C\u2500\u2500 index.ts # \u670D\u52A1\u7AEF\u5165\u53E3\u6587\u4EF6
      \u251C\u2500\u2500 operators # \u67E5\u8BE2\u64CD\u4F5C\u7B26
      \u2502   \u251C\u2500\u2500 eq.ts # \u7B49\u4E8E
      \u2502   \u251C\u2500\u2500 ne.ts # \u4E0D\u7B49\u4E8E
      \u2502   \u2514\u2500\u2500 utils.ts # \u5DE5\u5177\u51FD\u6570
      \u251C\u2500\u2500 plugin.ts  # \u670D\u52A1\u7AEF\u63D2\u4EF6
      \u2514\u2500\u2500 utils.ts # \u5DE5\u5177\u51FD\u6570
`,paraId:17,tocIndex:3},{value:"\u7531\u4E8E\u52A0\u89E3\u5BC6\u7528\u7684\u662F\u5B57\u7B26\u4E32\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 ",paraId:18,tocIndex:5},{value:"Input",paraId:18,tocIndex:5},{value:" \u7EC4\u4EF6\uFF0C\u5E76\u4E0D\u9700\u8981\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u3002",paraId:18,tocIndex:5},{value:"\u5982\u679C\u5176\u4ED6\u9700\u6C42\u9700\u8981\u81EA\u5B9A\u4E49\u7EC4\u4EF6\uFF0C\u53EF\u4EE5\u53C2\u8003 ",paraId:19,tocIndex:5},{value:"\u6709\u503C\u5B57\u6BB5\u7EC4\u4EF6",paraId:20,tocIndex:5},{value:" \u6587\u6863\u3002",paraId:19,tocIndex:5},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:21,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/client/EncryptionFieldInterface.tsx",paraId:21,tocIndex:7},{value:" \u6587\u4EF6\uFF1A",paraId:21,tocIndex:7},{value:`import { CollectionFieldInterface, defaultProps } from '@nocobase/client';
import { uid } from '@nocobase/utils/client';
import { tStr } from './locale';

export class EncryptionFieldInterface extends CollectionFieldInterface {
  name = 'encryption';
  type = 'object';
  group = 'advanced';
  order = 10;
  title = tStr('Encryption');
  default = {
    type: 'encryption',
    iv: uid(16),
    uiSchema: {
      type: 'string',
      'x-component': 'Input',
    },
  };
  availableTypes = ['string'];
  hasDefaultValue = true;
  properties = {
    ...defaultProps,
  };
  filterable = {
    operators: [
      { label: '{{t("is")}}', value: '$encryptionEq', selected: true },
      { label: '{{t("is not")}}', value: '$encryptionNe' },
      { label: '{{t("exists")}}', value: '$exists', noValue: true },
      { label: '{{t("not exists")}}', value: '$notExists', noValue: true },
    ],
  };
}
`,paraId:22,tocIndex:7},{value:"\u6240\u6709\u7684 Field interface \u90FD\u9700\u8981\u7EE7\u627F ",paraId:23,tocIndex:7},{value:"CollectionFieldInterface",paraId:23,tocIndex:7},{value:" \u7C7B\uFF0C\u7136\u540E\u5B9E\u73B0 ",paraId:23,tocIndex:7},{value:"name",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"type",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"group",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"order",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"title",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"default",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"availableTypes",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"hasDefaultValue",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"properties",paraId:23,tocIndex:7},{value:"\u3001",paraId:23,tocIndex:7},{value:"filterable",paraId:23,tocIndex:7},{value:" \u7B49\u5C5E\u6027\uFF0C\u5177\u4F53\u6BCF\u4E2A\u5C5E\u6027\u7684\u542B\u4E49\u4E3A\uFF1A",paraId:23,tocIndex:7},{value:"tStr",paraId:24,tocIndex:7},{value:"\uFF1A\u751F\u6210\u591A\u8BED\u8A00\u5B57\u7B26\u4E32\u6A21\u677F",paraId:24,tocIndex:7},{value:"name",paraId:25,tocIndex:7},{value:"\uFF1AField interface \u7684\u552F\u4E00\u6807\u8BC6\uFF0C\u7528\u4E8E\u533A\u5206\u4E0D\u540C\u7684 Field interface",paraId:25,tocIndex:7},{value:"type",paraId:26,tocIndex:7},{value:"\uFF1A\uFF1F",paraId:26,tocIndex:7},{value:"group",paraId:27,tocIndex:7},{value:"\uFF1A\u5206\u7EC4\uFF0C\u7528\u4E8E\u5728\u5B57\u6BB5\u8BBE\u7F6E\u4E2D\u5206\u7EC4\u663E\u793A\uFF0C\u8FD9\u91CC\u6211\u4EEC\u8BBE\u7F6E\u4E3A ",paraId:27,tocIndex:7},{value:"advanced",paraId:27,tocIndex:7},{value:"order",paraId:28,tocIndex:7},{value:"\uFF1A\u6392\u5E8F\uFF0C\u7528\u4E8E\u5728\u5B57\u6BB5\u8BBE\u7F6E\u4E2D\u6392\u5E8F\u663E\u793A",paraId:28,tocIndex:7},{value:"title",paraId:29,tocIndex:7},{value:"\uFF1A\u6807\u9898\uFF0C\u7528\u4E8E\u5728\u5B57\u6BB5\u8BBE\u7F6E\u4E2D\u663E\u793A",paraId:29,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"\uFF1A\u5B57\u6BB5\u914D\u7F6E\uFF0C\u63D2\u5165\u5230\u6570\u636E\u5E93\u4E2D\u7684\u9ED8\u8BA4\u503C",paraId:30,tocIndex:7},{value:"iv",paraId:31,tocIndex:7},{value:"\uFF1A\u521D\u59CB\u5316\u5411\u91CF\uFF0C\u968F\u673A\u5B57\u7B26\u4E32\uFF0C\u7528\u4E8E\u52A0\u5BC6",paraId:31,tocIndex:7},{value:"uiSchema",paraId:31,tocIndex:7},{value:"\uFF1A\u5B57\u6BB5\u7684 UI \u914D\u7F6E\uFF0C\u8FD9\u91CC\u6211\u4EEC\u4F7F\u7528 ",paraId:31,tocIndex:7},{value:"Input",paraId:31,tocIndex:7},{value:" \u7EC4\u4EF6",paraId:31,tocIndex:7},{value:"availableTypes",paraId:32,tocIndex:7},{value:"\uFF1A\u53EF\u7528\u7684\u5B57\u6BB5\u7C7B\u578B",paraId:32,tocIndex:7},{value:"hasDefaultValue",paraId:33,tocIndex:7},{value:"\uFF1A\u662F\u5426\u6709\u9ED8\u8BA4\u503C\u914D\u7F6E",paraId:33,tocIndex:7},{value:"properties",paraId:34,tocIndex:7},{value:"\uFF1A\u5C5E\u6027\u914D\u7F6E\uFF0C\u5176\u4E2D ",paraId:34,tocIndex:7},{value:"defaultProps",paraId:34,tocIndex:7},{value:" \u5305\u542B",paraId:34,tocIndex:7},{value:"name",paraId:35,tocIndex:7},{value:"\uFF1A\u5B57\u6BB5\u540D",paraId:35,tocIndex:7},{value:"displayName",paraId:35,tocIndex:7},{value:"\uFF1A\u5B57\u6BB5\u663E\u793A\u540D",paraId:35,tocIndex:7},{value:"filterable",paraId:36,tocIndex:7},{value:"\uFF1A\u53EF\u8FC7\u6EE4\u7684\u64CD\u4F5C\u7B26\u3002",paraId:36,tocIndex:7},{value:"\u5176\u4E2D\u5173\u4E8E ",paraId:37,tocIndex:7},{value:"filterable",paraId:37,tocIndex:7},{value:" \u6709 2 \u70B9\u6CE8\u610F\uFF1A",paraId:37,tocIndex:7},{value:"\u56E0\u4E3A\u5B58\u50A8\u5230\u6570\u636E\u5E93\u4E2D\u662F\u5BC6\u6587\uFF0C\u6240\u4EE5\u4EC5\u652F\u6301 ",paraId:38,tocIndex:7},{value:"\u76F8\u7B49\u3001\u4E0D\u7B49\u3001\u5B58\u5728\u3001\u4E0D\u5B58\u5728",paraId:38,tocIndex:7},{value:" \u64CD\u4F5C\u7B26",paraId:38,tocIndex:7},{value:"\u641C\u7D22\u5B57\u7B26\u4E32\u7684\u65F6\u5019\uFF0C\u9700\u8981\u5C06\u5B57\u7B26\u4E32\u89E3\u5BC6\u540E\u518D\u8FDB\u884C\u641C\u7D22\uFF0C\u6240\u4EE5\u8FD9\u91CC\u4E0D\u80FD\u4F7F\u7528\u9ED8\u8BA4\u7684 ",paraId:38,tocIndex:7},{value:"$eq",paraId:38,tocIndex:7},{value:"\u3001",paraId:38,tocIndex:7},{value:"$ne",paraId:38,tocIndex:7},{value:" \u64CD\u4F5C\u7B26\uFF0C\u9700\u8981\u81EA\u5B9A\u4E49\u64CD\u4F5C\u7B26\u4E3A ",paraId:38,tocIndex:7},{value:"$encryptionEq",paraId:38,tocIndex:7},{value:"\u3001",paraId:38,tocIndex:7},{value:"$encryptionNe",paraId:38,tocIndex:7},{value:"\u3002",paraId:38,tocIndex:7},{value:"\u66F4\u591A\u5173\u4E8E CollectionFieldInterface \u7684\u5C5E\u6027\u548C\u65B9\u6CD5\u53EF\u4EE5\u67E5\u770B ",paraId:39,tocIndex:7},{value:"CollectionFieldInterface",paraId:39,tocIndex:7},{value:" \u6587\u6863\u3002",paraId:39,tocIndex:7},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:40,tocIndex:8},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/client/index.ts",paraId:40,tocIndex:8},{value:" \u6587\u4EF6\uFF1A",paraId:40,tocIndex:8},{value:`import { Plugin } from '@nocobase/client';
import { EncryptionFieldInterface } from './EncryptionFieldInterface';

export class PluginFieldInterfaceClient extends Plugin {
  async load() {
    this.app.dataSourceManager.collectionFieldInterfaceManager.addFieldInterfaces([EncryptionFieldInterface]);
  }
}

export default PluginFieldInterfaceClient;
`,paraId:41,tocIndex:8},{value:"\u6211\u4EEC\u901A\u8FC7 ",paraId:42,tocIndex:8},{value:"collectionFieldInterfaceManager.addFieldInterfaces()",paraId:42,tocIndex:8},{value:" \u5C06 ",paraId:42,tocIndex:8},{value:"EncryptionFieldInterface",paraId:42,tocIndex:8},{value:" \u6CE8\u518C\u5230\u7CFB\u7EDF\u4E2D\u3002",paraId:42,tocIndex:8},{value:"\u66F4\u591A\u5173\u4E8E ",paraId:43,tocIndex:8},{value:"CollectionFieldInterfaceManager",paraId:43,tocIndex:8},{value:" \u7684\u5C5E\u6027\u548C\u65B9\u6CD5\u53EF\u4EE5\u67E5\u770B ",paraId:43,tocIndex:8},{value:"\u6587\u6863",paraId:43,tocIndex:8},{value:"\u3002",paraId:43,tocIndex:8},{value:"\u6B64\u65F6\u754C\u9762\u4E0A\u5C31\u53EF\u4EE5\u770B\u5230 ",paraId:44,tocIndex:8},{value:"Encryption",paraId:44,tocIndex:8},{value:" \u5B57\u6BB5\u4E86\uFF0C\u4F46\u662F\u540E\u7AEF\u8FD8\u6CA1\u6709\u5B9E\u73B0\u52A0\u89E3\u5BC6\u903B\u8F91\uFF0C\u6240\u4EE5\u8FD8",paraId:44,tocIndex:8},{value:"\u4E0D\u80FD\u521B\u5EFA\u5B57\u6BB5",paraId:44,tocIndex:8},{value:"\u3002",paraId:44,tocIndex:8},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:45,tocIndex:10},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/utils.ts",paraId:45,tocIndex:10},{value:" \u6587\u4EF6\uFF1A",paraId:45,tocIndex:10},{value:`import crypto from 'crypto';
const algorithm = 'aes-256-cbc';

const keyString = process.env.ENCRYPTION_KEY || '12345678901234567890123456789012';;

const key = Buffer.from(keyString, 'utf8');

export function encryptSync(text: string, ivString: string) {
  const iv = Buffer.from(ivString, 'utf8');
  const cipher = crypto.createCipheriv(algorithm, key, iv);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

export function decryptSync(encrypted: string, ivString: string) {
  const iv = Buffer.from(ivString, 'utf8');
  const decipher = crypto.createDecipheriv(algorithm, key, iv);
  let decrypted = decipher.update(encrypted, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}
`,paraId:46,tocIndex:10},{value:"\u6211\u4EEC\u4F7F\u7528 ",paraId:47,tocIndex:10},{value:"crypto",paraId:47,tocIndex:10},{value:" \u6A21\u5757\u5B9E\u73B0\u52A0\u89E3\u5BC6\uFF0C\u5176\u4E2D ",paraId:47,tocIndex:10},{value:"encryptSync",paraId:47,tocIndex:10},{value:" \u65B9\u6CD5\u7528\u4E8E\u52A0\u5BC6\uFF0C",paraId:47,tocIndex:10},{value:"decryptSync",paraId:47,tocIndex:10},{value:" \u65B9\u6CD5\u7528\u4E8E\u89E3\u5BC6\u3002\u5177\u4F53\u7684\u52A0\u5BC6\u7B97\u6CD5\u662F ",paraId:47,tocIndex:10},{value:"aes-256-cbc",paraId:47,tocIndex:10},{value:"\uFF0C\u5BC6\u94A5\u662F ",paraId:47,tocIndex:10},{value:"ENCRYPTION_KEY",paraId:47,tocIndex:10},{value:" \u73AF\u5883\u53D8\u91CF\uFF0C\u5982\u679C\u6CA1\u6709\u8BBE\u7F6E\u5219\u4F7F\u7528\u9ED8\u8BA4\u503C ",paraId:47,tocIndex:10},{value:"12345678901234567890123456789012",paraId:47,tocIndex:10},{value:"\u3002",paraId:47,tocIndex:10},{value:"\u5173\u4E8E ",paraId:48,tocIndex:10},{value:"crypto",paraId:48,tocIndex:10},{value:" \u6A21\u5757\u7684\u66F4\u591A\u4FE1\u606F\u53EF\u4EE5\u67E5\u770B ",paraId:48,tocIndex:10},{value:"NodeJS crypto \u6A21\u5757",paraId:48,tocIndex:10},{value:" \u6587\u6863\u3002",paraId:48,tocIndex:10},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:49,tocIndex:12},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/encryption-field.ts",paraId:49,tocIndex:12},{value:" \u6587\u4EF6\uFF1A",paraId:49,tocIndex:12},{value:`import { BaseColumnFieldOptions, Field, FieldContext } from '@nocobase/database';
import { DataTypes } from 'sequelize';
import { decryptSync, encryptSync } from './utils';

export interface EncryptionFieldOptions extends BaseColumnFieldOptions {
  type: 'encryption';
}

export class EncryptionField extends Field {
  get dataType() {
    return DataTypes.STRING;
  }

  constructor(options?: any, context?: FieldContext) {
    const { name, iv } = options;
    super(
      {
        get() {
          const value = this.getDataValue(name);
          if (!value) return null;
          return decryptSync(value, iv);
        },
        set(value) {
          if (!value?.length) value = null;
          else {
            value = encryptSync(value, iv);
          }
          this.setDataValue(name, value);
        },
        ...options,
      },
      context,
    );
  }
}
`,paraId:50,tocIndex:12},{value:"dataType\uFF1A\u52A0\u89E3\u5BC6\u5BF9\u5E94\u5230\u6570\u636E\u5E93\u4E2D\u662F\u5B57\u7B26\u4E32\uFF0C\u6240\u4EE5\u6211\u4EEC\u4F7F\u7528 ",paraId:51,tocIndex:12},{value:"DataTypes.STRING",paraId:51,tocIndex:12},{value:" \u7C7B\u578B",paraId:51,tocIndex:12},{value:"get\uFF1A\u83B7\u53D6\u5B57\u6BB5\u503C\u65F6\uFF0C\u89E3\u5BC6",paraId:51,tocIndex:12},{value:"set\uFF1A\u8BBE\u7F6E\u5B57\u6BB5\u503C\u65F6\uFF0C\u52A0\u5BC6",paraId:51,tocIndex:12},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:52,tocIndex:13},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/plugin.ts",paraId:52,tocIndex:13},{value:" \u6587\u4EF6\uFF1A",paraId:52,tocIndex:13},{value:`import { Plugin } from '@nocobase/server';
import { EncryptionField } from './encryption-field';
import { $encryptionEq } from './operators/eq';
import { $encryptionNe } from './operators/ne';

export class PluginFieldInterfaceServer extends Plugin {
  async load() {
    this.db.registerFieldTypes({
      encryption: EncryptionField,
    });
  }
}

export default PluginFieldInterfaceServer;
`,paraId:53,tocIndex:13},{value:"\u6211\u4EEC\u901A\u8FC7 ",paraId:54,tocIndex:13},{value:"db.registerFieldTypes()",paraId:54,tocIndex:13},{value:" \u5C06 ",paraId:54,tocIndex:13},{value:"EncryptionField",paraId:54,tocIndex:13},{value:" \u6CE8\u518C\u5230\u7CFB\u7EDF\u4E2D\uFF0C\u5177\u4F53\u53EF\u4EE5\u67E5\u770B ",paraId:54,tocIndex:13},{value:"registerFieldTypes()",paraId:55,tocIndex:13},{value:" \u6587\u6863\u3002",paraId:54,tocIndex:13},{value:"\u6B64\u65F6\u6211\u4EEC\u5DF2\u7ECF\u5B8C\u6210\u4E86\u524D\u540E\u7AEF\u7684\u5B9E\u73B0\uFF0C\u53EF\u4EE5\u521B\u5EFA\u5B57\u6BB5\u4E86\uFF0C\u4F46\u662F\u8FD8\u9700\u8981\u5B9E\u73B0\u67E5\u8BE2\u64CD\u4F5C\u7B26\u3002",paraId:56,tocIndex:13},{value:"\u6211\u4EEC\u8981\u505A\u7684\u5C31\u662F\u5728\u67E5\u8BE2\u65F6\uFF0C\u5C06\u5B57\u7B26\u4E32\u52A0\u5BC6\u540E\u518D\u8FDB\u884C\u67E5\u8BE2\u3002",paraId:57,tocIndex:15},{value:"\u56E0\u4E3A ",paraId:58,tocIndex:16},{value:"$encryptionEq",paraId:58,tocIndex:16},{value:"\u3001",paraId:58,tocIndex:16},{value:"$encryptionNe",paraId:58,tocIndex:16},{value:" \u90FD\u662F\u9700\u8981\u5728\u52A0\u5BC6\u540E\u518D\u8FDB\u884C\u67E5\u8BE2\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u5C06\u8FD9\u4E24\u4E2A\u64CD\u4F5C\u7B26\u7684\u903B\u8F91\u62BD\u79BB\u51FA\u6765\uFF0C\u6240\u4EE5\u6211\u4EEC\u65B0\u5EFA ",paraId:58,tocIndex:16},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/operators/utils.ts",paraId:58,tocIndex:16},{value:" \u6587\u4EF6\uFF1A",paraId:58,tocIndex:16},{value:`import { encryptSync } from '../utils';

export function getFieldOptions(ctx: any) {
  const fieldPathArr = ctx.fieldPath.split('.');
  const collectionName = fieldPathArr[fieldPathArr.length - 2];
  const fieldName = ctx.fieldName;

  return ctx.db.collections.get(collectionName).fields.get(fieldName).options;
}

export function encryptSearchValueSync(str: any, ctx: any) {
  const { iv } = getFieldOptions(ctx);
  let encrypted;
  if (Array.isArray(str)) {
    encrypted = str.map((item) => encryptSync(item, iv));
  } else {
    encrypted = encryptSync(str, iv);
  }
  return encrypted;
}
`,paraId:59,tocIndex:16},{value:"\u6211\u4EEC\u5B9A\u4E49\u4E86 2 \u4E2A\u65B9\u6CD5\uFF1A",paraId:60,tocIndex:16},{value:"getFieldOptions",paraId:61,tocIndex:16},{value:"\uFF1A\u83B7\u53D6\u5B57\u6BB5\u914D\u7F6E",paraId:61,tocIndex:16},{value:"encryptSearchValueSync",paraId:61,tocIndex:16},{value:"\uFF1A\u52A0\u5BC6\u641C\u7D22\u503C",paraId:61,tocIndex:16},{value:"$encryptionEq",paraId:5},{value:"\u7136\u540E\u6211\u4EEC\u65B0\u5EFA ",paraId:62,tocIndex:17},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/operators/eq.ts",paraId:62,tocIndex:17},{value:" \u6587\u4EF6\uFF1A",paraId:62,tocIndex:17},{value:`import { encryptSearchValueSync } from './utils';

export const $encryptionEq = (str, ctx) => {
  const eq = ctx.db.operators.get('$eq');
  if (!str) return eq(str, ctx);
  const encrypted = encryptSearchValueSync(str, ctx);
  return eq(encrypted, ctx);
};
`,paraId:63,tocIndex:17},{value:"\u6211\u4EEC\u5B9A\u4E49\u4E86 ",paraId:64,tocIndex:17},{value:"$encryptionEq",paraId:64,tocIndex:17},{value:" \u64CD\u4F5C\u7B26\uFF0C\u5C06\u641C\u7D22\u503C\u52A0\u5BC6\u540E\u518D\u8FDB\u884C\u67E5\u8BE2\u3002",paraId:64,tocIndex:17},{value:"$encryptionNe",paraId:5},{value:"\u7136\u540E\u6211\u4EEC\u65B0\u5EFA ",paraId:65,tocIndex:18},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/operators/ne.ts",paraId:65,tocIndex:18},{value:" \u6587\u4EF6\uFF1A",paraId:65,tocIndex:18},{value:`import { encryptSearchValueSync } from './utils';

export const $encryptionNe = (str, ctx) => {
  const eq = ctx.db.operators.get('$ne');
  if (!str) return eq(str, ctx);
  const encrypted = encryptSearchValueSync(str, ctx);
  return eq(encrypted, ctx);
};
`,paraId:66,tocIndex:18},{value:"\u6211\u4EEC\u5B9A\u4E49\u4E86 ",paraId:67,tocIndex:18},{value:"$encryptionNe",paraId:67,tocIndex:18},{value:" \u64CD\u4F5C\u7B26\uFF0C\u5C06\u641C\u7D22\u503C\u52A0\u5BC6\u540E\u518D\u8FDB\u884C\u67E5\u8BE2\u3002",paraId:67,tocIndex:18},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:68,tocIndex:19},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/server/plugin.ts",paraId:68,tocIndex:19},{value:" \u6587\u4EF6\uFF1A",paraId:68,tocIndex:19},{value:`// ...
import { $encryptionEq } from './operators/eq';
import { $encryptionNe } from './operators/ne';

export class PluginFieldInterfaceServer extends Plugin {
  async load() {
    // ...

    this.db.registerOperators({
      $encryptionEq,
      $encryptionNe,
    });
  }
}

export default PluginFieldInterfaceServer;
`,paraId:69,tocIndex:19},{value:"\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7 ",paraId:70,tocIndex:20},{value:"http://localhost:13000/admin/settings/system-settings",paraId:70,tocIndex:20},{value:" \u6DFB\u52A0\u591A\u4E2A\u8BED\u8A00\uFF0C\u5E76\u4E14\u5728\u53F3\u4E0A\u89D2\u5207\u6362\u8BED\u8A00\u3002",paraId:70,tocIndex:20},{value:"\u6211\u4EEC\u7F16\u8F91 ",paraId:71,tocIndex:21},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/locale/zh-CN.json",paraId:71,tocIndex:21},{value:" \u6587\u4EF6\uFF1A",paraId:71,tocIndex:21},{value:`{
  "Encryption": "Encryption"
}
`,paraId:72,tocIndex:21},{value:"\u6211\u4EEC\u7F16\u8F91 ",paraId:73,tocIndex:22},{value:"packages/plugins/@nocobase-sample/plugin-field-interface/src/locale/zh-CN.json",paraId:73,tocIndex:22},{value:" \u6587\u4EF6\uFF1A",paraId:73,tocIndex:22},{value:`{
  "Encryption": "\u52A0\u5BC6"
}
`,paraId:74,tocIndex:22},{value:"\u6309\u7167 ",paraId:75,tocIndex:23},{value:"\u6784\u5EFA\u5E76\u6253\u5305\u63D2\u4EF6",paraId:76,tocIndex:23},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6253\u5305\u63D2\u4EF6\u5E76\u4E0A\u4F20\u5230\u751F\u4EA7\u73AF\u5883\u3002",paraId:75,tocIndex:23},{value:"\u5982\u679C\u662F clone \u7684\u6E90\u7801\uFF0C\u9700\u8981\u5148\u6267\u884C\u4E00\u6B21\u5168\u91CF build\uFF0C\u5C06\u63D2\u4EF6\u7684\u4F9D\u8D56\u4E5F\u6784\u5EFA\u597D\u3002",paraId:77,tocIndex:23},{value:`yarn build
`,paraId:78,tocIndex:23},{value:"\u5982\u679C\u662F\u4F7F\u7528\u7684 ",paraId:79,tocIndex:23},{value:"create-nocobase-app",paraId:79,tocIndex:23},{value:" \u521B\u5EFA\u7684\u9879\u76EE\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6267\u884C\uFF1A",paraId:79,tocIndex:23},{value:`yarn build @nocobase-sample/plugin-field-interface --tar
`,paraId:80,tocIndex:23},{value:"\u8FD9\u6837\u5C31\u53EF\u4EE5\u770B\u5230 ",paraId:81,tocIndex:23},{value:"storage/tar/@nocobase-sample/plugin-field-interface.tar.gz",paraId:81,tocIndex:23},{value:" \u6587\u4EF6\u4E86\uFF0C\u7136\u540E\u901A\u8FC7",paraId:81,tocIndex:23},{value:"\u4E0A\u4F20\u7684\u65B9\u5F0F",paraId:82,tocIndex:23},{value:"\u8FDB\u884C\u5B89\u88C5\u3002",paraId:81,tocIndex:23}]},995999:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},953687:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6709\u503C\u5B57\u6BB5\u7EC4\u4EF6\u662F\u7EC4\u4EF6\u6709 ",paraId:0,tocIndex:0},{value:"value",paraId:0,tocIndex:0},{value:" \u5C5E\u6027\u7684\u5B57\u6BB5\u7EC4\u4EF6\uFF0C\u7528\u4E8E\u5C55\u793A\u5B57\u6BB5\u7684\u503C\u3002\u4E3E\u4F8B\u6765\u8BF4\uFF0C",paraId:0,tocIndex:0},{value:"Input",paraId:0,tocIndex:0},{value:"\u3001",paraId:0,tocIndex:0},{value:"Select",paraId:0,tocIndex:0},{value:"\u3001",paraId:0,tocIndex:0},{value:"Checkbox",paraId:0,tocIndex:0},{value:"\u3001",paraId:0,tocIndex:0},{value:"Radio",paraId:0,tocIndex:0},{value:"\u3001",paraId:0,tocIndex:0},{value:"Switch",paraId:0,tocIndex:0},{value:" \u7B49\u7EC4\u4EF6\u90FD\u662F\u6709\u503C\u5B57\u6BB5\u7EC4\u4EF6\u3002",paraId:0,tocIndex:0},{value:"\u672C\u5B9E\u4F8B\u4F1A\u65B0\u589E ",paraId:1,tocIndex:1},{value:"QRCode",paraId:1,tocIndex:1},{value:" \u7EC4\u4EF6\uFF0C\u7528\u4E8E URL \u5B57\u6BB5\u7684\u503C\u5C55\u793A\uFF0C\u5E76\u652F\u6301 ",paraId:1,tocIndex:1},{value:"\u5C3A\u5BF8",paraId:1,tocIndex:1},{value:"\u3001",paraId:1,tocIndex:1},{value:"\u989C\u8272",paraId:1,tocIndex:1},{value:"\u3001",paraId:1,tocIndex:1},{value:"\u8FB9\u6846",paraId:1,tocIndex:1},{value:" \u7684\u914D\u7F6E\u3002",paraId:1,tocIndex:1},{value:"\u672C\u6587\u6863\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801\u53EF\u4EE5\u5728 ",paraId:2,tocIndex:1},{value:"plugin-samples",paraId:2,tocIndex:1},{value:" \u4E2D\u67E5\u770B\u3002",paraId:2,tocIndex:1},{value:`
  `,paraId:3},{value:"\u6211\u4EEC\u6309\u7167 ",paraId:4,tocIndex:2},{value:"\u7F16\u5199\u7B2C\u4E00\u4E2A\u63D2\u4EF6",paraId:5,tocIndex:2},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u5982\u679C\u6CA1\u6709\u4E00\u4E2A\u9879\u76EE\uFF0C\u53EF\u4EE5\u5148\u521B\u5EFA\u4E00\u4E2A\u9879\u76EE\uFF0C\u5982\u679C\u5DF2\u7ECF\u6709\u4E86\u6216\u8005\u662F clone \u7684\u6E90\u7801\uFF0C\u5219\u8DF3\u8FC7\u8FD9\u4E00\u6B65\u3002",paraId:4,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:6,tocIndex:2},{value:"\u7136\u540E\u521D\u59CB\u5316\u4E00\u4E2A\u63D2\u4EF6\uFF0C\u5E76\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\uFF1A",paraId:7,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-field-value
yarn pm enable @nocobase-sample/plugin-field-value
`,paraId:8,tocIndex:2},{value:"\u7136\u540E\u542F\u52A8\u9879\u76EE\u5373\u53EF\uFF1A",paraId:9,tocIndex:2},{value:`yarn dev
`,paraId:10,tocIndex:2},{value:"\u7136\u540E\u767B\u5F55\u540E\u8BBF\u95EE ",paraId:11,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/locale/",paraId:11,tocIndex:2},{value:" \u5C31\u53EF\u4EE5\u770B\u5230\u63D2\u4EF6\u5DF2\u7ECF\u5B89\u88C5\u5E76\u542F\u7528\u4E86\u3002",paraId:11,tocIndex:2},{value:"\u5728\u5B9E\u73B0\u672C\u793A\u4F8B\u4E4B\u524D\uFF0C\u6211\u4EEC\u9700\u8981\u5148\u4E86\u89E3\u4E00\u4E9B\u57FA\u7840\u77E5\u8BC6\uFF1A",paraId:12,tocIndex:3},{value:"ant-design QRCode",paraId:13,tocIndex:3},{value:"SchemaInitializer \u6559\u7A0B",paraId:14,tocIndex:3},{value:"\uFF1A\u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49",paraId:13,tocIndex:3},{value:"SchemaInitializer API",paraId:13,tocIndex:3},{value:"\uFF1A\u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49",paraId:13,tocIndex:3},{value:"UI Schema \u534F\u8BAE",paraId:15,tocIndex:3},{value:"\uFF1A\u8BE6\u7EC6\u4ECB\u7ECD Schema \u7684\u7ED3\u6784\u548C\u6BCF\u4E2A\u5C5E\u6027\u7684\u4F5C\u7528",paraId:13,tocIndex:3},{value:"Designable \u8BBE\u8BA1\u5668",paraId:16,tocIndex:3},{value:"\uFF1A\u7528\u4E8E\u4FEE\u6539 Schema",paraId:13,tocIndex:3},{value:`.
\u251C\u2500\u2500 client # \u5BA2\u6237\u7AEF\u63D2\u4EF6
\u2502   \u251C\u2500\u2500 QRCode.tsx # \u7EC4\u4EF6
\u2502   \u251C\u2500\u2500 settings.tsx # Schema Settings
\u2502   \u251C\u2500\u2500 locale.ts #  \u591A\u8BED\u8A00\u5DE5\u5177\u51FD\u6570
\u2502   \u2514\u2500\u2500 index.ts # \u5BA2\u6237\u7AEF\u5165\u53E3\u6587\u4EF6
\u251C\u2500\u2500 locale # \u591A\u8BED\u8A00\u6587\u4EF6
\u2502   \u251C\u2500\u2500 en-US.json # \u82F1\u8BED
\u2502   \u2514\u2500\u2500 zh-CN.json # \u4E2D\u6587
\u251C\u2500\u2500 index.ts # \u670D\u52A1\u7AEF\u63D2\u4EF6\u5165\u53E3
\u2514\u2500\u2500 server # \u670D\u52A1\u7AEF\u63D2\u4EF6
`,paraId:17,tocIndex:3},{value:"\u5BF9\u4E8E\u7EC4\u4EF6\u800C\u8A00\u6211\u4EEC\u9700\u8981\u9002\u914D\u4E09\u79CD\u6A21\u5F0F\uFF1A",paraId:18,tocIndex:4},{value:"Editable\uFF1A\u7F16\u8F91\u6A21\u5F0F",paraId:19,tocIndex:4},{value:"ReadOnly\uFF1A\u53EA\u8BFB\u6A21\u5F0F\uFF08\u7981\u6B62\u7F16\u8F91\uFF09",paraId:19,tocIndex:4},{value:"Easy-reading\uFF1A\u9605\u89C8\u6A21\u5F0F",paraId:19,tocIndex:4},{value:"\u5176\u4E2D ",paraId:20,tocIndex:4},{value:"ReadOnly",paraId:20,tocIndex:4},{value:" \u6A21\u5F0F\u5C5E\u4E8E\u7F16\u8F91\u6A21\u5F0F\u7684 ",paraId:20,tocIndex:4},{value:"disabled",paraId:20,tocIndex:4},{value:" \u5C5E\u6027\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EA\u9700\u8981\u9002\u914D ",paraId:20,tocIndex:4},{value:"Editable",paraId:20,tocIndex:4},{value:" \u548C ",paraId:20,tocIndex:4},{value:"Easy-reading",paraId:20,tocIndex:4},{value:" \u4E24\u79CD\u6A21\u5F0F\u3002",paraId:20,tocIndex:4},{value:"\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\uFF0C\u7EC4\u4EF6\u4F1A\u81EA\u52A8\u6CE8\u5165 ",paraId:21,tocIndex:5},{value:"onChange",paraId:21,tocIndex:5},{value:"\u3001",paraId:21,tocIndex:5},{value:"value",paraId:21,tocIndex:5},{value:"\u3001",paraId:21,tocIndex:5},{value:"disabled",paraId:21,tocIndex:5},{value:" \u4EE5\u53CA ",paraId:21,tocIndex:5},{value:"schema",paraId:21,tocIndex:5},{value:" \u4E2D\u7684 ",paraId:21,tocIndex:5},{value:"x-component-props",paraId:22,tocIndex:5},{value:" \u5C5E\u6027\u3002",paraId:21,tocIndex:5},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:23,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/client/QRCode.tsx",paraId:23,tocIndex:5},{value:" \u6587\u4EF6\uFF1A",paraId:23,tocIndex:5},{value:`import React, { FC } from 'react';
import { Input } from '@nocobase/client';
import { QRCode as AntdQRCode, Space, QRCodeProps as AntdQRCodeProps } from 'antd';

interface QRCodeProps extends AntdQRCodeProps {
  onChange: (value: string) => void;
  disabled?: boolean;
}

const QRCodeEditable: FC<QRCodeProps> = ({ value, disabled, onChange, ...otherProps }) => {
  return <Space direction="vertical" align="center">
    <AntdQRCode value={value || '-'} {...otherProps} />
    <Input.URL
      maxLength={60}
      value={value}
      disabled={disabled}
      onChange={(e) => onChange(e.target.value)}
    />
  </Space>;
}
`,paraId:24,tocIndex:5},{value:"\u7F16\u8F91\u6A21\u5F0F\u4E0B\uFF0C\u6211\u4EEC\u4F7F\u7528 ",paraId:25,tocIndex:5},{value:"Space",paraId:25,tocIndex:5},{value:" \u7EC4\u4EF6\u5C06 ",paraId:25,tocIndex:5},{value:"QRCode",paraId:25,tocIndex:5},{value:" \u548C ",paraId:25,tocIndex:5},{value:"Input.URL",paraId:25,tocIndex:5},{value:" \u7EC4\u4EF6\u653E\u5728\u4E00\u8D77\uFF0C",paraId:25,tocIndex:5},{value:"QRCode",paraId:25,tocIndex:5},{value:" \u7EC4\u4EF6\u7528\u4E8E\u5C55\u793A URL \u5B57\u6BB5\u7684\u503C\uFF0C",paraId:25,tocIndex:5},{value:"Input.URL",paraId:25,tocIndex:5},{value:" \u7528\u4E8E\u7F16\u8F91 URL \u5B57\u6BB5\u7684\u503C\u3002",paraId:25,tocIndex:5},{value:"\u5176\u4E2D ",paraId:26,tocIndex:5},{value:"value",paraId:26,tocIndex:5},{value:"\u3001",paraId:26,tocIndex:5},{value:"disabled",paraId:26,tocIndex:5},{value:"\u3001",paraId:26,tocIndex:5},{value:"onChange",paraId:26,tocIndex:5},{value:" \u662F ",paraId:26,tocIndex:5},{value:"Editable",paraId:26,tocIndex:5},{value:" \u6A21\u5F0F\u4E0B\u81EA\u52A8\u6CE8\u5165\u7684\u5C5E\u6027\u3002",paraId:26,tocIndex:5},{value:"\u5728\u9884\u89C8\u6A21\u5F0F\u4E0B\uFF0C\u7EC4\u4EF6\u4F1A\u81EA\u52A8\u6CE8\u5165 ",paraId:27,tocIndex:6},{value:"value",paraId:27,tocIndex:6},{value:" \u4EE5\u53CA ",paraId:27,tocIndex:6},{value:"schema",paraId:27,tocIndex:6},{value:" \u4E2D\u7684 ",paraId:27,tocIndex:6},{value:"x-component-props",paraId:28,tocIndex:6},{value:" \u5C5E\u6027\u3002",paraId:27,tocIndex:6},{value:"\u6211\u4EEC\u7EE7\u7EED\u4FEE\u6539 ",paraId:29,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/client/QRCode.tsx",paraId:29,tocIndex:6},{value:" \u6587\u4EF6\uFF1A",paraId:29,tocIndex:6},{value:`const QRCodeReadPretty: FC<QRCodeProps> = ({ value, ...otherProps }) => {
  if (!value) return null;
  return <AntdQRCode value={value} {...otherProps} />;
}
`,paraId:30,tocIndex:6},{value:"\u6211\u4EEC\u9700\u8981\u5C06 ",paraId:31,tocIndex:7},{value:"QRCodeEditable",paraId:31,tocIndex:7},{value:" \u548C ",paraId:31,tocIndex:7},{value:"QRCodeReadPretty",paraId:31,tocIndex:7},{value:" \u7EC4\u4EF6\u8FDE\u63A5\u8D77\u6765\uFF0C\u8FD9\u6837\u5728 Schema \u4E2D\u5C31\u80FD\u591F\u901A\u8FC7 ",paraId:31,tocIndex:7},{value:"x-pattern",paraId:31,tocIndex:7},{value:" \u81EA\u52A8\u5207\u6362\u7EC4\u4EF6\u3002",paraId:31,tocIndex:7},{value:"\u6211\u4EEC\u7EE7\u7EED\u4FEE\u6539 ",paraId:32,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/client/QRCode.tsx",paraId:32,tocIndex:7},{value:" \u6587\u4EF6\uFF1A",paraId:32,tocIndex:7},{value:`import { connect, mapReadPretty } from '@formily/react';

export const QRCode: FC<QRCodeProps>  = connect(QRCodeEditable, mapReadPretty(QRCodeReadPretty);

QRCode.displayName = 'QRCode';
`,paraId:33,tocIndex:7},{value:"\u6211\u4EEC\u4F7F\u7528 ",paraId:34,tocIndex:7},{value:"connect",paraId:34,tocIndex:7},{value:" \u51FD\u6570\u80FD\u5C06 ",paraId:34,tocIndex:7},{value:"QRCodeEditable",paraId:34,tocIndex:7},{value:" \u548C ",paraId:34,tocIndex:7},{value:"QRCodeReadPretty",paraId:34,tocIndex:7},{value:" \u7EC4\u4EF6\u8FDE\u63A5\u8D77\u6765\u3002",paraId:34,tocIndex:7},{value:"\u6211\u4EEC\u9700\u8981\u5C06 ",paraId:35,tocIndex:8},{value:"QRCode",paraId:35,tocIndex:8},{value:" \u901A\u8FC7\u63D2\u4EF6\u6CE8\u518C\u5230\u7CFB\u7EDF\u4E2D\u3002",paraId:35,tocIndex:8},{value:`import { Plugin } from '@nocobase/client';

import { QRCode } from './QRCode';

export class PluginFieldComponentValueClient extends Plugin {
  async load() {
    this.app.addComponents({ QRCode });
  }
}

export default PluginFieldComponentValueClient;
`,paraId:36,tocIndex:8},{value:"\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728 Schema \u4E2D\u4EE5\u5B57\u7B26\u4E32\u7684\u65B9\u5F0F\u4F7F\u7528 ",paraId:37,tocIndex:8},{value:"QRCode",paraId:37,tocIndex:8},{value:" \u7EC4\u4EF6\u4E86\u3002",paraId:37,tocIndex:8},{value:`{
  "type": "string",
  "x-component": "QRCode",
}
`,paraId:38,tocIndex:8},{value:"componentOptions",paraId:3},{value:"\u6211\u4EEC\u8FD8\u9700\u8981\u5C06 ",paraId:39,tocIndex:9},{value:"QRCode",paraId:39,tocIndex:9},{value:" \u7EC4\u4EF6\u6DFB\u52A0\u5230 ",paraId:39,tocIndex:9},{value:"url",paraId:39,tocIndex:9},{value:" interface \u5B57\u6BB5\u7684 ",paraId:39,tocIndex:9},{value:"componentOptions",paraId:39,tocIndex:9},{value:" \u4E2D\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u901A\u8FC7\u754C\u9762\u81EA\u7531\u5207\u6362\u7EC4\u4EF6\u4E86\u3002",paraId:39,tocIndex:9},{value:`import { Plugin } from '@nocobase/client';

import { QRCode } from './QRCode';
import { qrCodeComponentFieldSettings } from './settings';
import { tStr } from './locale';

export class PluginFieldComponentValueClient extends Plugin {
  async load() {
    this.app.addComponents({ QRCode });
    this.schemaSettingsManager.add(qrCodeComponentFieldSettings);
    this.app.addFieldInterfaceComponentOption('url', {
      label: tStr('QRCode'),
      value: 'QRCode',
    });
  }
}

export default PluginFieldComponentValueClient;
`,paraId:40,tocIndex:9},{value:"\u5176\u4E2D\u5173\u4E8E ",paraId:41,tocIndex:9},{value:"app.addFieldInterfaceComponentOption",paraId:41,tocIndex:9},{value:" \u7684\u4F7F\u7528\u53EF\u4EE5\u53C2\u8003 ",paraId:41,tocIndex:9},{value:"\u6587\u6863",paraId:41,tocIndex:9},{value:"\u3002",paraId:41,tocIndex:9},{value:"\u6211\u4EEC\u9700\u8981\u901A\u8FC7 Schema Settings \u6765\u914D\u7F6E ",paraId:42,tocIndex:10},{value:"QRCode",paraId:42,tocIndex:10},{value:" \u7EC4\u4EF6\u7684\u5C5E\u6027\u3002",paraId:42,tocIndex:10},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:43,tocIndex:11},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/client/settings.tsx",paraId:43,tocIndex:11},{value:" \u6587\u4EF6\uFF1A",paraId:43,tocIndex:11},{value:`import { createModalSettingsItem, createSelectSchemaSettingsItem, createSwitchSettingsItem, SchemaSettings } from "@nocobase/client";

import { tStr, useT } from './locale';

export const qrCodeComponentFieldSettings = new SchemaSettings({
  name: 'fieldSettings:component:QRCode',
  items: [
    // TODO
  ]
});
`,paraId:44,tocIndex:11},{value:"\u5176\u4E2D ",paraId:45,tocIndex:11},{value:"name",paraId:45,tocIndex:11},{value:" \u7684\u547D\u540D\u89C4\u5219\u4E3A ",paraId:45,tocIndex:11},{value:"fieldSettings:component:${componentName}",paraId:45,tocIndex:11},{value:"\uFF0C",paraId:45,tocIndex:11},{value:"componentName",paraId:45,tocIndex:11},{value:" \u4E3A\u7EC4\u4EF6\u7684\u540D\u5B57\u3002",paraId:45,tocIndex:11},{value:"\u6211\u4EEC\u5C06 ",paraId:46,tocIndex:12},{value:"qrCodeComponentFieldSettings",paraId:46,tocIndex:12},{value:" \u6CE8\u518C\u5230\u7CFB\u7EDF\u4E2D\u3002",paraId:46,tocIndex:12},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:47,tocIndex:12},{value:"packages/plugins/@nocobase-sample/plugin-field-component-value/src/client/index.tsx",paraId:47,tocIndex:12},{value:" \u6587\u4EF6\uFF1A",paraId:47,tocIndex:12},{value:`// ...
import { qrCodeComponentFieldSettings } from './settings';

export class PluginFieldComponentValueClient extends Plugin {
  async load() {
    // ...
    this.schemaSettingsManager.add(qrCodeComponentFieldSettings);
  }
}
`,paraId:48,tocIndex:12},{value:"Size",paraId:3},{value:"Size",paraId:49,tocIndex:14},{value:" \u6211\u4EEC\u4F7F\u7528 ",paraId:49,tocIndex:14},{value:"select",paraId:49,tocIndex:14},{value:" \u9009\u62E9\u6846\u6765\u9009\u62E9 ",paraId:49,tocIndex:14},{value:"small",paraId:49,tocIndex:14},{value:"\u3001",paraId:49,tocIndex:14},{value:"middle",paraId:49,tocIndex:14},{value:"\u3001",paraId:49,tocIndex:14},{value:"large",paraId:49,tocIndex:14},{value:"\u3002",paraId:49,tocIndex:14},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:50,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-field-component-value/src/client/settings.ts",paraId:50,tocIndex:14},{value:"\uFF1A",paraId:50,tocIndex:14},{value:`// ...
export const qrCodeComponentFieldSettings = new SchemaSettings({
  name: 'fieldSettings:component:QRCode',
  items: [
    createSelectSchemaSettingsItem({
      name: 'size',
      title: tStr('Size'),
      schemaKey: 'x-component-props.size',
      defaultValue: 160,
      useOptions() {
        const t = useT();
        return [
          {
            label: t('Small'),
            value: 100,
          },
          {
            label: t('Middle'),
            value: 160,
          },
          {
            label: t('Large'),
            value: 200,
          }
        ]
      }
    }),
  ],
});
`,paraId:51,tocIndex:14},{value:"name",paraId:52,tocIndex:14},{value:"\uFF1A\u552F\u4E00\u6807\u8BC6",paraId:52,tocIndex:14},{value:"title",paraId:52,tocIndex:14},{value:"\uFF1A\u6807\u9898",paraId:52,tocIndex:14},{value:"schemaKey",paraId:52,tocIndex:14},{value:"\uFF1ASchema \u7684 key\uFF0C\u6211\u4EEC\u8FD9\u91CC\u5C06\u5176\u5B58\u50A8\u5728 ",paraId:52,tocIndex:14},{value:"x-component-props.size",paraId:52,tocIndex:14},{value:" \u4E2D",paraId:52,tocIndex:14},{value:"defaultValue",paraId:52,tocIndex:14},{value:"\uFF1A\u9ED8\u8BA4\u503C",paraId:52,tocIndex:14},{value:"useOptions",paraId:52,tocIndex:14},{value:"\uFF1A\u9009\u9879",paraId:52,tocIndex:14},{value:"Bordered",paraId:3},{value:"Border",paraId:53,tocIndex:15},{value:" \u6211\u4EEC\u4F7F\u7528 ",paraId:53,tocIndex:15},{value:"switch",paraId:53,tocIndex:15},{value:" \u5F00\u5173\u6765\u9009\u62E9\u662F\u5426\u663E\u793A\u8FB9\u6846\u3002",paraId:53,tocIndex:15},{value:`export const qrCodeComponentFieldSettings = new SchemaSettings({
  name: 'fieldSettings:component:QRCode',
  items: [
    // ...
    createSwitchSettingsItem({
      name: 'bordered',
      schemaKey: 'x-component-props.bordered',
      title: tStr('Bordered'),
      defaultValue: true,
    }),
  ],
});
`,paraId:54,tocIndex:15},{value:"name",paraId:55,tocIndex:15},{value:"\uFF1A\u552F\u4E00\u6807\u8BC6",paraId:55,tocIndex:15},{value:"schemaKey",paraId:55,tocIndex:15},{value:"\uFF1ASchema \u7684 key\uFF0C\u6211\u4EEC\u8FD9\u91CC\u5C06\u5176\u5B58\u50A8\u5728 ",paraId:55,tocIndex:15},{value:"x-component-props.bordered",paraId:55,tocIndex:15},{value:" \u4E2D",paraId:55,tocIndex:15},{value:"defaultValue",paraId:55,tocIndex:15},{value:"\uFF1A\u9ED8\u8BA4\u503C",paraId:55,tocIndex:15},{value:"Color",paraId:3},{value:"Color",paraId:56,tocIndex:16},{value:" \u6211\u4EEC\u4F7F\u7528 ",paraId:56,tocIndex:16},{value:"Modal",paraId:56,tocIndex:16},{value:" \u5F39\u7A97\u6765\u9009\u62E9\u989C\u8272\u3002",paraId:56,tocIndex:16},{value:`export const qrCodeComponentFieldSettings = new SchemaSettings({
  name: 'fieldSettings:component:QRCode',
  items: [
    // ...
    createModalSettingsItem({
      name: 'color',
      title: tStr('Color'),
      parentSchemaKey: 'x-component-props',
      schema({ color }) {
        return {
          type: 'object',
          title: tStr('Color'),
          properties: {
            color: {
              type: 'string',
              title: tStr('Color'),
              default: color,
              'x-component': 'ColorPicker',
            }
          }
        }
      },
    }),
  ],
});
`,paraId:57,tocIndex:16},{value:"\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7 ",paraId:58,tocIndex:17},{value:"http://localhost:13000/admin/settings/system-settings",paraId:58,tocIndex:17},{value:" \u6DFB\u52A0\u591A\u4E2A\u8BED\u8A00\uFF0C\u5E76\u4E14\u5728\u53F3\u4E0A\u89D2\u5207\u6362\u8BED\u8A00\u3002",paraId:58,tocIndex:17},{value:"\u6211\u4EEC\u7F16\u8F91 ",paraId:59,tocIndex:18},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/locale/zh-CN.json",paraId:59,tocIndex:18},{value:" \u6587\u4EF6\uFF1A",paraId:59,tocIndex:18},{value:`{
  "QRCode": "QRCode",
  "Size": "Size",
  "Bordered": "Bordered",
  "Color": "Color",
  "Small": "Small",
  "Middle": "Middle",
  "Large": "Large"
}
`,paraId:60,tocIndex:18},{value:"\u6211\u4EEC\u7F16\u8F91 ",paraId:61,tocIndex:19},{value:"packages/plugins/@nocobase-sample/plugin-field-value/src/locale/zh-CN.json",paraId:61,tocIndex:19},{value:" \u6587\u4EF6\uFF1A",paraId:61,tocIndex:19},{value:`{
  "QRCode": "\u4E8C\u7EF4\u7801",
  "Size": "\u5C3A\u5BF8",
  "Bordered": "\u8FB9\u6846",
  "Color": "\u989C\u8272",
  "Small": "\u5C0F",
  "Middle": "\u4E2D",
  "Large": "\u5927"
}
`,paraId:62,tocIndex:19},{value:"\u6309\u7167 ",paraId:63,tocIndex:20},{value:"\u6784\u5EFA\u5E76\u6253\u5305\u63D2\u4EF6",paraId:64,tocIndex:20},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6253\u5305\u63D2\u4EF6\u5E76\u4E0A\u4F20\u5230\u751F\u4EA7\u73AF\u5883\u3002",paraId:63,tocIndex:20},{value:"\u5982\u679C\u662F clone \u7684\u6E90\u7801\uFF0C\u9700\u8981\u5148\u6267\u884C\u4E00\u6B21\u5168\u91CF build\uFF0C\u5C06\u63D2\u4EF6\u7684\u4F9D\u8D56\u4E5F\u6784\u5EFA\u597D\u3002",paraId:65,tocIndex:20},{value:`yarn build
`,paraId:66,tocIndex:20},{value:"\u5982\u679C\u662F\u4F7F\u7528\u7684 ",paraId:67,tocIndex:20},{value:"create-nocobase-app",paraId:67,tocIndex:20},{value:" \u521B\u5EFA\u7684\u9879\u76EE\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6267\u884C\uFF1A",paraId:67,tocIndex:20},{value:`yarn build @nocobase-sample/plugin-field-value --tar
`,paraId:68,tocIndex:20},{value:"\u8FD9\u6837\u5C31\u53EF\u4EE5\u770B\u5230 ",paraId:69,tocIndex:20},{value:"storage/tar/@nocobase-sample/plugin-field-value.tar.gz",paraId:69,tocIndex:20},{value:" \u6587\u4EF6\u4E86\uFF0C\u7136\u540E\u901A\u8FC7",paraId:69,tocIndex:20},{value:"\u4E0A\u4F20\u7684\u65B9\u5F0F",paraId:70,tocIndex:20},{value:"\u8FDB\u884C\u5B89\u88C5\u3002",paraId:69,tocIndex:20}]},910172:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Creating the First Plugin",paraId:0,tocIndex:0},{value:"@my-project/plugin-hello",paraId:1,tocIndex:0},{value:"Tables and Fields",paraId:0,tocIndex:0},{value:"sample-collection-define",paraId:2,tocIndex:0},{value:"sample-collection-extend",paraId:2,tocIndex:0},{value:"sample-collection-model",paraId:2,tocIndex:0},{value:"sample-collection-repository",paraId:2,tocIndex:0},{value:"sample-collection-template",paraId:2,tocIndex:0},{value:"sample-collection-field-type",paraId:2,tocIndex:0},{value:"sample-collection-field-interface",paraId:2,tocIndex:0},{value:"Resources and Actions",paraId:0,tocIndex:0},{value:"sample-resource-manager-register-action-handlers",paraId:3,tocIndex:0},{value:"sample-resource-manager-define",paraId:3,tocIndex:0},{value:"sample-resource-manager-actions",paraId:3,tocIndex:0},{value:"Database Usage",paraId:0,tocIndex:0},{value:"sample-db-registerFieldTypes",paraId:4,tocIndex:0},{value:"sample-db-registerModels",paraId:4,tocIndex:0},{value:"sample-db-registerRepositories",paraId:4,tocIndex:0},{value:"sample-db-registerOperators",paraId:4,tocIndex:0},{value:"sample-db-repository",paraId:4,tocIndex:0},{value:"Custom Command Line",paraId:0,tocIndex:0},{value:"sample-cli-create-command",paraId:5,tocIndex:0},{value:"Migration Scripts",paraId:0,tocIndex:0},{value:"sample-migration-create-migration",paraId:6,tocIndex:0},{value:"Caching",paraId:0,tocIndex:0},{value:"sample-cache-register-store",paraId:7,tocIndex:0},{value:"sample-cache-create-cache",paraId:7,tocIndex:0},{value:"Server Middleware",paraId:0,tocIndex:0},{value:"sample-middleware-ratelimit",paraId:8,tocIndex:0},{value:"Data Source Extensions",paraId:0,tocIndex:0},{value:"sample-data-source-nocobase-api",paraId:9,tocIndex:0},{value:"Chart Extensions",paraId:0,tocIndex:0},{value:"sample-dv-echarts",paraId:10,tocIndex:0},{value:"Internationalization",paraId:0,tocIndex:0},{value:"sample-i18n-zh-cn",paraId:11,tocIndex:0},{value:"Frontend Routing Extensions",paraId:0,tocIndex:0},{value:"Add a New Page",paraId:12,tocIndex:0},{value:"Replace an Existing Page",paraId:12,tocIndex:0},{value:"Plugin Configuration Page (Single Route)",paraId:12,tocIndex:0},{value:"Plugin Configuration Page (Tabbed Layout)",paraId:12,tocIndex:0},{value:"Plugin Configuration Page (Different Layouts)",paraId:12,tocIndex:0},{value:"Plugin Configuration Pages",paraId:0,tocIndex:0},{value:"Form Configuration Page",paraId:13,tocIndex:0},{value:"Table Configuration Page",paraId:13,tocIndex:0},{value:"Polymorphic Table Configuration Page",paraId:13,tocIndex:0},{value:"Provider Components",paraId:0,tocIndex:0},{value:"Global Announcement Bar",paraId:14,tocIndex:0},{value:"Component Extensions",paraId:0,tocIndex:0},{value:"Schema Initializer",paraId:0,tocIndex:0},{value:"Add initialization items to existing Add blocks",paraId:15,tocIndex:0},{value:"Add initialization items to existing Configure actions",paraId:15,tocIndex:0},{value:"Add initialization items to existing Configure fields",paraId:15,tocIndex:0},{value:`Reuse existing SchemaInitializerItem
`,paraId:15,tocIndex:0},{value:`Directly add a block
`,paraId:16,tocIndex:0},{value:"Add after configuring a pop-up (such as a calendar)",paraId:17,tocIndex:0},{value:`Create new initializers
`,paraId:15,tocIndex:0},{value:"Simple button and dropdown menu",paraId:18,tocIndex:0},{value:"Schema Settings",paraId:0,tocIndex:0},{value:"Add initialization items to existing Settings",paraId:19,tocIndex:0},{value:"Reuse existing SchemaSettingsItem",paraId:19,tocIndex:0},{value:"Create new settings",paraId:19,tocIndex:0},{value:"Block Extensions",paraId:0,tocIndex:0},{value:`Simple Block Example - Gallery Image Carousel Block
`,paraId:20,tocIndex:0},{value:"Block component development",paraId:21,tocIndex:0},{value:"Initializer item",paraId:21,tocIndex:0},{value:"Block Settings",paraId:21,tocIndex:0},{value:`Embedded Block Initializer
`,paraId:20,tocIndex:0},{value:"Configure operations",paraId:22,tocIndex:0},{value:"Configure fields",paraId:22,tocIndex:0},{value:"Custom initializer",paraId:22,tocIndex:0},{value:"Operation Extensions",paraId:0,tocIndex:0},{value:"Command-based operations",paraId:23,tocIndex:0},{value:"Pop-up-based operations",paraId:23,tocIndex:0},{value:"Field Extensions",paraId:0,tocIndex:0},{value:"Custom Field Interface Type",paraId:24,tocIndex:0},{value:"Custom Field Data Type",paraId:24,tocIndex:0},{value:`Field Component Development
`,paraId:24,tocIndex:0},{value:"connect + mapReadPretty",paraId:25,tocIndex:0},{value:"observer + mapReadPretty",paraId:25,tocIndex:0},{value:"Provide Setters for Fields",paraId:24,tocIndex:0}]},914146:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The configuration interface is composed of a form.",paraId:0,tocIndex:1},{value:"Suppose we need to connect to a third-party map service and configure the map's ",paraId:1,tocIndex:2},{value:"key",paraId:1,tocIndex:2},{value:" and ",paraId:1,tocIndex:2},{value:"secret",paraId:1,tocIndex:2},{value:". We can add a configuration page via a plugin to fill in this information.",paraId:1,tocIndex:2},{value:"The complete example code in this document can be found in ",paraId:2,tocIndex:2},{value:"plugin-samples",paraId:2,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"Following the ",paraId:3,tocIndex:3},{value:"Writing Your First Plugin",paraId:4,tocIndex:3},{value:" document, if you don\u2019t have a project yet, you can create one first. If you already have one or have cloned the source code, you can skip this step.",paraId:3,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:3},{value:"Then, initialize a plugin and add it to the system:",paraId:6,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-settings-form
yarn pm enable @nocobase-sample/plugin-settings-form
`,paraId:7,tocIndex:3},{value:"Now, start the project:",paraId:8,tocIndex:3},{value:`yarn dev
`,paraId:9,tocIndex:3},{value:"After logging in, visit ",paraId:10,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:10,tocIndex:3},{value:"The backend mainly involves creating a database table to store configuration information. For creating database tables, we need to be familiar with the following:",paraId:11,tocIndex:5},{value:"Tables and Fields",paraId:12,tocIndex:5},{value:"Creating Tables",paraId:13,tocIndex:5},{value:"Field Type",paraId:14,tocIndex:5},{value:"defineCollection() API",paraId:15,tocIndex:5},{value:"Collection API",paraId:16,tocIndex:5},{value:"In this example, we create the ",paraId:17,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/server/collections/map-configuration.ts",paraId:17,tocIndex:5},{value:" file with the following content:",paraId:17,tocIndex:5},{value:`import { defineCollection } from '@nocobase/database';

export default defineCollection({
  name: 'SamplesMapConfiguration',
  fields: [
    {
      type: 'string',
      name: 'key',
    },
    {
      type: 'string',
      name: 'secret',
    },
  ],
});
`,paraId:18,tocIndex:5},{value:"As needed, we created a ",paraId:19,tocIndex:5},{value:"SamplesMapConfiguration",paraId:19,tocIndex:5},{value:" database table containing two fields: ",paraId:19,tocIndex:5},{value:"key",paraId:19,tocIndex:5},{value:" and ",paraId:19,tocIndex:5},{value:"secret",paraId:19,tocIndex:5},{value:", both of string type.",paraId:19,tocIndex:5},{value:"We need to update the database with the defined table, which can be done with the following command:",paraId:20,tocIndex:6},{value:`yarn nocobase upgrade
`,paraId:21,tocIndex:6},{value:"We've already introduced the detailed steps for ",paraId:22,tocIndex:8},{value:"Adding a Plugin Configuration Page (Single Route)",paraId:23,tocIndex:8},{value:", so we won\u2019t repeat them here.",paraId:22,tocIndex:8},{value:"We modify the ",paraId:24,tocIndex:8},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/index.tsx",paraId:24,tocIndex:8},{value:" file as follows:",paraId:24,tocIndex:8},{value:`import { Plugin } from '@nocobase/client';
// @ts-ignore
import { name } from '../../package.json';

export class PluginSettingsFormClient extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(name, {
      title: 'Plugin Settings Form',
      icon: 'FormOutlined',
      Component: () => 'TODO',
    });
  }
}

export default PluginSettingsFormClient;
`,paraId:25,tocIndex:8},{value:"Then, visit ",paraId:26,tocIndex:8},{value:"http://localhost:13000/admin/settings/@nocobase-sample/plugin-settings-form",paraId:26,tocIndex:8},{value:" to see the configuration page.",paraId:26,tocIndex:8},{value:"Based on the Schema definition method, we first need to define the structure of the data table. To define the data table structure on the frontend, we need to understand the following concepts:",paraId:27,tocIndex:9},{value:"Tables and Fields",paraId:28,tocIndex:9},{value:"Field Type",paraId:29,tocIndex:9},{value:"Field Interface",paraId:30,tocIndex:9},{value:"UI Schema Protocol",paraId:31,tocIndex:9},{value:"Field Components",paraId:32,tocIndex:9},{value:"We then create the ",paraId:33,tocIndex:9},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsForm.tsx",paraId:33,tocIndex:9},{value:" file with the following content:",paraId:33,tocIndex:9},{value:`const mapConfigurationCollection = {
  name: 'SamplesMapConfiguration',
  filterTargetKey: 'id',
  fields: [
    {
      type: 'string',
      name: 'key',
      interface: 'input',
      uiSchema: {
        title: 'Title',
        required: true,
        'x-component': 'Input',
      },
    },
    {
      type: 'string',
      name: 'secret',
      interface: 'input',
      uiSchema: {
        title: 'Secret',
        required: true,
        'x-component': 'Input',
      },
    },
  ],
};
`,paraId:34,tocIndex:9},{value:"We've defined a ",paraId:35,tocIndex:9},{value:"SamplesMapConfiguration",paraId:35,tocIndex:9},{value:" data table with two fields: ",paraId:35,tocIndex:9},{value:"key",paraId:35,tocIndex:9},{value:" and ",paraId:35,tocIndex:9},{value:"secret",paraId:35,tocIndex:9},{value:". The ",paraId:35,tocIndex:9},{value:"fields",paraId:35,tocIndex:9},{value:" are explained as follows:",paraId:35,tocIndex:9},{value:"type",paraId:36,tocIndex:9},{value:": Since the values are strings, it is set to ",paraId:36,tocIndex:9},{value:"string",paraId:36,tocIndex:9},{value:" and must match the backend field type.",paraId:36,tocIndex:9},{value:"name",paraId:36,tocIndex:9},{value:": The field's name, which must match the backend field name.",paraId:36,tocIndex:9},{value:"interface",paraId:36,tocIndex:9},{value:": Corresponding to the string value, it is set to ",paraId:36,tocIndex:9},{value:"input",paraId:36,tocIndex:9},{value:".",paraId:36,tocIndex:9},{value:"uiSchema",paraId:36,tocIndex:9},{value:`: Refers to the rendering of the frontend form components.
`,paraId:36,tocIndex:9},{value:"title",paraId:37,tocIndex:9},{value:": The title of the form field.",paraId:37,tocIndex:9},{value:"required",paraId:37,tocIndex:9},{value:": As it is mandatory, it is set to ",paraId:37,tocIndex:9},{value:"true",paraId:37,tocIndex:9},{value:".",paraId:37,tocIndex:9},{value:"x-component",paraId:37,tocIndex:9},{value:": The ",paraId:37,tocIndex:9},{value:"Input component",paraId:37,tocIndex:9},{value:" is chosen for single-line text input.",paraId:37,tocIndex:9},{value:"For writing form schemas, the following concepts are important:",paraId:38,tocIndex:10},{value:"Form Component",paraId:39,tocIndex:10},{value:"CollectionField Component",paraId:39,tocIndex:10},{value:"CardItem Component",paraId:39,tocIndex:10},{value:"Schema Protocol",paraId:40,tocIndex:10},{value:"DataBlockProvider Component",paraId:39,tocIndex:10},{value:"Action Component",paraId:39,tocIndex:10},{value:"We continue to write the following in ",paraId:41,tocIndex:10},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsForm.tsx",paraId:41,tocIndex:10},{value:":",paraId:41,tocIndex:10},{value:`import { useMemo } from 'react';
import { App as AntdApp } from 'antd';
import { createForm } from '@formily/core';
import { useForm } from '@formily/react';
import { uid } from '@formily/shared';
import { ActionProps, ISchema, useCollection, useCollectionRecordData, useDataBlockResource } from '@nocobase/client';

const schema: ISchema = {
  type: 'void',
  name: uid(),
  'x-component': 'CardItem',
  'x-decorator': 'DataBlockProvider',
  'x-decorator-props': {
    collection: mapConfigurationCollection.name,
    action: 'get',
  },
  properties: {
    form: {
      type: 'void',
      'x-component': 'FormV2',
      'x-use-component-props': 'useFormBlockProps',
      properties: {
        key: {
          title: 'Key',
          'x-decorator': 'FormItem',
          'x-component': 'CollectionField',
        },
        secret: {
          title: 'Secret',
          'x-decorator': 'FormItem',
          'x-component': 'CollectionField',
        },
        footer: {
          type: 'void',
          'x-component': 'Action',
          title: 'Submit',
          'x-use-component-props': 'useSubmitActionProps',
        },
      },
    },
  },
};

const useFormBlockProps = () => {
  const recordData = useCollectionRecordData();
  const form = useMemo(
    () => createForm({
      initialValues: recordData,
    }),
    [recordData],
  );
  return {
    form,
  };
};

const useSubmitActionProps = (): ActionProps => {
  const form = useForm();
  const { message } = AntdApp.useApp();
  const collection = useCollection();
  const resource = useDataBlockResource();
  return {
    type: 'primary',
    htmlType: 'submit',
    async onClick() {
      await form.submit();
      const values = form.values;
      await resource.updateOrCreate({
        values,
        filterKeys: [collection.filterTargetKey],
      });
      message.success('Saved successfully!');
    },
  };
};
`,paraId:42,tocIndex:10},{value:"[CardItem](",paraId:43,tocIndex:10},{value:"https://client",paraId:43,tocIndex:10},{value:".docs.nocobase.com/components/card-item): A card component that provides card-style layouts.",paraId:44,tocIndex:10},{value:"DataBlockProvider",paraId:45,tocIndex:10},{value:": A component that provides data to child nodes, with the ",paraId:45,tocIndex:10},{value:"collection",paraId:45,tocIndex:10},{value:" and ",paraId:45,tocIndex:10},{value:"action",paraId:45,tocIndex:10},{value:" attributes since the form fetches single-row data.",paraId:45,tocIndex:10},{value:"FormV2",paraId:45,tocIndex:10},{value:": A form component used to render the form.",paraId:45,tocIndex:10},{value:"useFormBlockProps",paraId:45,tocIndex:10},{value:": Used to get the data block's attributes and pass them to the FormV2 component. For detailed examples, see FormV2 ",paraId:45,tocIndex:10},{value:"Default values",paraId:45,tocIndex:10},{value:".",paraId:45,tocIndex:10},{value:"CollectionField",paraId:45,tocIndex:10},{value:": A data table field component used to read the UI Schema of the Collection and render it.",paraId:45,tocIndex:10},{value:"Action",paraId:45,tocIndex:10},{value:": An action button component used to submit the form.",paraId:45,tocIndex:10},{value:"useSubmitActionProps",paraId:45,tocIndex:10},{value:`: Used to get the attributes of the submit button.
`,paraId:45,tocIndex:10},{value:"useCollection",paraId:46,tocIndex:10},{value:": Used to get information about the data table.",paraId:47,tocIndex:10},{value:"useDataBlockResource",paraId:48,tocIndex:10},{value:": A hook provided by DataBlockProvider to access the data block's resources for CRUD operations.",paraId:47,tocIndex:10},{value:"To render the schema into a component, we need to understand the following concepts:",paraId:49,tocIndex:11},{value:"ExtendCollectionsProvider",paraId:50,tocIndex:11},{value:" component to extend data tables.",paraId:50,tocIndex:11},{value:"SchemaComponent",paraId:50,tocIndex:11},{value:" component to render forms.",paraId:50,tocIndex:11},{value:"We continue writing in ",paraId:51,tocIndex:11},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsForm.tsx",paraId:51,tocIndex:11},{value:":",paraId:51,tocIndex:11},{value:`import React from 'react';
import { ExtendCollectionsProvider, SchemaComponent } from '@nocobase/client';
export const PluginSettingsForm = () => {
  return (
    <ExtendCollectionsProvider collections={[mapConfigurationCollection]}>
      <SchemaComponent schema={schema} scope={{ useFormBlockProps, useSubmitActionProps }} />
    </ExtendCollectionsProvider>
  );
};
`,paraId:52,tocIndex:11},{value:"We modify the ",paraId:53,tocIndex:12},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/index.tsx",paraId:53,tocIndex:12},{value:" file as follows:",paraId:53,tocIndex:12},{value:`import { Plugin } from '@nocobase/client';
// @ts-ignore
import { name } from '../../package.json';
+ import { PluginSettingsForm } from './PluginSettingsForm'

export class PluginSettingFormClient extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(name, {
      title: 'Plugin Settings Form',
      icon: 'FormOutlined',
-     Component: () => 'TODO',
+     Component: PluginSettingsForm,
    });
  }
}

export default PluginSettingFormClient;
`,paraId:54,tocIndex:12},{value:"Now, visit ",paraId:55,tocIndex:12},{value:"http://localhost:13000/admin/settings/@nocobase-sample/plugin-settings-form",paraId:55,tocIndex:12},{value:" to see the configuration page.",paraId:55,tocIndex:12},{value:`
  `,paraId:56},{value:"When using form data, there are two scenarios: using the data inside the page and using it globally. The difference is:",paraId:57,tocIndex:13},{value:"Global usage: After updating the form data, it needs to be synchronized to the global state for real-time updates.",paraId:58,tocIndex:13},{value:"Page-specific usage: Since the page will be automatically destroyed and created upon switching, there\u2019s no need to synchronize the data.",paraId:58,tocIndex:13},{value:"In this step, we'll demonstrate using form data inside a page.",paraId:59,tocIndex:13},{value:"We create the ",paraId:60,tocIndex:13},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsFormPage.tsx",paraId:60,tocIndex:13},{value:" file with the following content:",paraId:60,tocIndex:13},{value:`import { useRequest } from '@nocobase/client';
import React from 'react';

export const PluginSettingsFormPage = () => {
  const { data, loading } = useRequest<{ data?: { key: string; secret: string } }>({
    url: 'SamplesMapConfiguration:get',
  });

  if (loading) return null;

  return <pre>{JSON.stringify(data?.data, null, 2)}</pre>
}
`,paraId:61,tocIndex:13},{value:"Then we introduce the ",paraId:62,tocIndex:13},{value:"PluginSettingsFormPage",paraId:62,tocIndex:13},{value:" component in the ",paraId:62,tocIndex:13},{value:"PluginSettingsForm",paraId:62,tocIndex:13},{value:" component:",paraId:62,tocIndex:13},{value:`import { PluginSettingsFormPage } from './PluginSettingsFormPage'
// ...

export class PluginSettingFormClient extends Plugin {
  async load() {
    // ...

    this.app.router.add(\`admin.\${name}-page\`, {
      path: '/admin/plugin-settings-form-page',
      Component: PluginSettingsFormPage,
    })
  }
}
`,paraId:63,tocIndex:13},{value:"Now, visit ",paraId:64,tocIndex:13},{value:"http://localhost:13000/admin/plugin-settings-form-page",paraId:64,tocIndex:13},{value:" to see the form data.",paraId:64,tocIndex:13},{value:"To use the data globally and ensure real-time updates, we need to use ",paraId:65,tocIndex:14},{value:"Context",paraId:65,tocIndex:14},{value:" and NocoBase's ",paraId:65,tocIndex:14},{value:"Provider",paraId:66,tocIndex:14},{value:" capabilities.",paraId:65,tocIndex:14},{value:"We create the ",paraId:67,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsFormProvider.tsx",paraId:67,tocIndex:14},{value:" file with the following content:",paraId:67,tocIndex:14},{value:`import React, { createContext, FC } from 'react';
import { useRequest, UseRequestResult } from '@nocobase/client';

const PluginSettingsFormContext = createContext<UseRequestResult<{ data?: { key: string; secret: string } }>>(null as any);

export const PluginSettingsFormProvider: FC<{ children: React.ReactNode }> = ({children}) => {
  const request = useRequest<{ data?: { key: string; secret: string } }>({
    url: 'SamplesMapConfiguration:get',
  });

  console.log('PluginSettingsFormProvider', request.data?.data);

  return <PluginSettingsFormContext.Provider value={request}>{children}</PluginSettingsFormContext.Provider>;
}

export const usePluginSettingsFormRequest = () => {
  return React.useContext(PluginSettingsFormContext);
};
`,paraId:68,tocIndex:14},{value:"Then we modify the ",paraId:69,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/index.tsx",paraId:69,tocIndex:14},{value:" file to register it globally:",paraId:69,tocIndex:14},{value:`import { PluginSettingsFormProvider } from './PluginSettingsFormProvider'
// ...

export class PluginSettingFormClient extends Plugin {
  async load() {
    // ...
    this.app.addProvider(PluginSettingsFormProvider)
  }
}
`,paraId:70,tocIndex:14},{value:"After updating the form, we need to re-fetch the global data. We modify the ",paraId:71,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-settings-form/src/client/PluginSettingsForm.tsx",paraId:71,tocIndex:14},{value:" file:",paraId:71,tocIndex:14},{value:`+ import { usePluginSettingsFormRequest } from './PluginSettingsFormProvider';

const useSubmitActionProps = (): ActionProps => {
  const form = useForm();
  const { message } = AntdApp.useApp();
  const collection = useCollection();
  const resource = useDataBlockResource();
+ const globalSettingsFormRequest = usePluginSettingsFormRequest();
  return {
    type: 'primary',
    htmlType: 'submit',
    async onClick() {
      await form.submit();
      const values = form.values;
      await resource.updateOrCreate({
        values,
        filterKeys: [collection.filterTargetKey],
      });
+     await globalSettingsFormRequest.runAsync();
      message.success('Saved successfully!');
    },
  };
};
`,paraId:72,tocIndex:14},{value:`
  `,paraId:56},{value:"Following the ",paraId:73,tocIndex:15},{value:"Build and Package Plugin",paraId:74,tocIndex:15},{value:" document, we can package the plugin and upload it to the production environment.",paraId:73,tocIndex:15},{value:"If you've cloned the source code, you need to perform a full build first to package the plugin's dependencies.",paraId:75,tocIndex:15},{value:`yarn build
`,paraId:76,tocIndex:15},{value:"If you used the ",paraId:77,tocIndex:15},{value:"create-nocobase-app",paraId:77,tocIndex:15},{value:" to create the project, you can directly execute:",paraId:77,tocIndex:15},{value:`yarn build @nocobase-sample/plugin-settings-form --tar
`,paraId:78,tocIndex:15},{value:"Then you\u2019ll see the ",paraId:79,tocIndex:15},{value:"storage/tar/@nocobase-sample/plugin-settings-form.tar.gz",paraId:79,tocIndex:15},{value:" file, which can be installed by following the ",paraId:79,tocIndex:15},{value:"uploading instructions",paraId:80,tocIndex:15},{value:".",paraId:79,tocIndex:15}]},414103:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When developing plugins, it is often necessary to provide a configuration page where users can set various parameters for the plugin.",paraId:0,tocIndex:1},{value:"There are four common types of plugin configuration pages:",paraId:1,tocIndex:1},{value:"Users can fill in certain parameters in a form and save them. These parameters will be stored in a database and retrieved by the plugin during its operation. For example, see the ",paraId:2,tocIndex:2},{value:"Custom Brand Plugin",paraId:3,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"As shown above, this configuration page is a form where users can input parameters such as ",paraId:4,tocIndex:2},{value:"Brand",paraId:4,tocIndex:2},{value:" and ",paraId:4,tocIndex:2},{value:"About",paraId:4,tocIndex:2},{value:", and then click the ",paraId:4,tocIndex:2},{value:"Submit",paraId:4,tocIndex:2},{value:" button to save them.",paraId:4,tocIndex:2},{value:"The plugin's configuration consists of a dataset that users can add, delete, or modify within a table. For example, see the ",paraId:5,tocIndex:3},{value:"Users & Permissions Plugin",paraId:6,tocIndex:3},{value:".",paraId:5,tocIndex:3},{value:"As seen above, this configuration page is a table where users can add, delete, and modify user information.",paraId:7,tocIndex:3},{value:"The plugin's configuration consists of a dataset, but multiple forms are available for adding new entries. For example, see the ",paraId:8,tocIndex:4},{value:"File Manager Plugin",paraId:9,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"As shown above, there are multiple forms for adding new entries, allowing users to choose different forms for data input.",paraId:10,tocIndex:4},{value:"There are also other special cases, such as the ",paraId:11,tocIndex:5},{value:"Theme Editor Plugin",paraId:12,tocIndex:5},{value:".",paraId:11,tocIndex:5},{value:"As seen above, this image displays the corresponding theme editor interface.",paraId:13,tocIndex:5},{value:"For the above scenarios, we provide the following examples:",paraId:14,tocIndex:6},{value:"Form Configuration Page",paraId:15,tocIndex:6},{value:"Table Configuration Page",paraId:16,tocIndex:6},{value:"Table Configuration Page (Multiple New Entry Forms)",paraId:17,tocIndex:6},{value:"For special cases, you can develop according to your specific needs.",paraId:18,tocIndex:6},{value:"For plugin routing, refer to:",paraId:19,tocIndex:7},{value:"Plugin Configuration Page (Single Route)",paraId:20,tocIndex:7},{value:"Plugin Configuration Page (Tabs Route)",paraId:21,tocIndex:7},{value:"Plugin Configuration Page (Different Layouts)",paraId:22,tocIndex:7},{value:"This set of plugin examples does not go into detail on routing. Those interested can consult the relevant documentation.",paraId:23,tocIndex:7}]},758780:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"TODO",paraId:0,tocIndex:0}]},739176:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"We can display global content using the ",paraId:0,tocIndex:0},{value:"Provider",paraId:0,tocIndex:0},{value:" component.",paraId:0,tocIndex:0},{value:"We want to implement an announcement feature. If the backend returns announcement information, it will be displayed at the top of the page.",paraId:1,tocIndex:1},{value:"You can view the complete example code in the ",paraId:2,tocIndex:1},{value:"plugin-samples",paraId:2,tocIndex:1},{value:" repository.",paraId:2,tocIndex:1},{value:"Follow the instructions in the ",paraId:3,tocIndex:2},{value:"Writing Your First Plugin",paraId:4,tocIndex:2},{value:" guide. If you don't already have a project, you can create one. If you already have a project or have cloned the source code, you can skip this step.",paraId:3,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:2},{value:"Next, initialize a plugin and add it to the system:",paraId:6,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-provider-content
yarn pm enable @nocobase-sample/plugin-provider-content
`,paraId:7,tocIndex:2},{value:"Now, start the project:",paraId:8,tocIndex:2},{value:`yarn dev
`,paraId:9,tocIndex:2},{value:"After logging in, visit ",paraId:10,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:2},{value:" to verify that the plugin has been installed and enabled.",paraId:10,tocIndex:2},{value:"Provider",paraId:11},{value:"The ",paraId:12,tocIndex:4},{value:"Provider",paraId:12,tocIndex:4},{value:" component is a regular React component, but it is important to remember to render the ",paraId:12,tocIndex:4},{value:"children",paraId:12,tocIndex:4},{value:" as part of it.",paraId:12,tocIndex:4},{value:"Create a new file at ",paraId:13,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-provider-content/src/client/TopAnnouncement.tsx",paraId:13,tocIndex:4},{value:":",paraId:13,tocIndex:4},{value:`import React, { FC, ReactNode } from 'react';
import { Alert, Affix, AlertProps } from 'antd';
import { useRequest } from '@nocobase/client';

const mockRequest = () => new Promise((resolve) => {
  Math.random() > 0.5 ?
    resolve({ data: { message: 'This is an important message.', type: 'info' } }) :
    resolve({ data: undefined })
})

export const TopAnnouncement: FC<{ children: ReactNode }> = ({ children }) => {
  const { data, loading } = useRequest<{ data: { message: string; type: AlertProps['type'] } }>(mockRequest)

  const onClose = () => {
    console.log('onClose')
  }

  return (
    <>
      {
        !loading && !!data.data && <Affix offsetTop={0} style={{ zIndex: 1010 }}>
          <Alert
            message={data.data.message}
            type={data.data.type}
            style={{ borderRadius: 0, borderLeft: 'none', borderRight: 'none' }}
            closable
            onClose={onClose}
          />
        </Affix>
      }
      {children}
    </>
  );
};
`,paraId:14,tocIndex:4},{value:"For the announcement configuration and data, you can refer to the ",paraId:15,tocIndex:4},{value:"Plugin Form Configuration Page",paraId:16,tocIndex:4},{value:". In this example, mock data is used.",paraId:15,tocIndex:4},{value:"Remember to render ",paraId:17,tocIndex:4},{value:"children",paraId:17,tocIndex:4},{value:" within the component.",paraId:17,tocIndex:4},{value:"Modify the ",paraId:18,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-provider-content/src/index.ts",paraId:18,tocIndex:5},{value:" file to register the ",paraId:18,tocIndex:5},{value:"TopAnnouncement",paraId:18,tocIndex:5},{value:" component within the system.",paraId:18,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { TopAnnouncement } from './TopAnnouncement';

export class PluginProviderContentClient extends Plugin {
  async load() {
    this.app.addProvider(TopAnnouncement)
  }
}

export default PluginProviderContentClient;
`,paraId:19,tocIndex:5},{value:"Now, visit ",paraId:20,tocIndex:5},{value:"http://localhost:13000",paraId:20,tocIndex:5},{value:", and you will see the announcement displayed at the top of the page.",paraId:20,tocIndex:5},{value:"Follow the instructions in the ",paraId:21,tocIndex:6},{value:"Build and Package Plugin",paraId:22,tocIndex:6},{value:" document to package the plugin and upload it to the production environment.",paraId:21,tocIndex:6},{value:"If you cloned the source code, run a full build first to package the plugin\u2019s dependencies as well:",paraId:23,tocIndex:6},{value:`yarn build
`,paraId:24,tocIndex:6},{value:"If you used ",paraId:25,tocIndex:6},{value:"create-nocobase-app",paraId:25,tocIndex:6},{value:" to create the project, you can directly run:",paraId:25,tocIndex:6},{value:`yarn build @nocobase-sample/plugin-provider-content --tar
`,paraId:26,tocIndex:6},{value:"You will now see the ",paraId:27,tocIndex:6},{value:"storage/tar/@nocobase-sample/plugin-provider-content.tar.gz",paraId:27,tocIndex:6},{value:" file. You can then install it by ",paraId:27,tocIndex:6},{value:"uploading it",paraId:28,tocIndex:6},{value:`.
]()`,paraId:27,tocIndex:6}]},199098:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In many situations, we need to store data in a global context so that it can be accessed anywhere, such as themes, permissions, and more.",paraId:0,tocIndex:0},{value:"We need to implement a feature toggle plugin to control the activation or deactivation of certain functions.",paraId:1,tocIndex:1},{value:"The full sample code for this document can be viewed in the ",paraId:2,tocIndex:1},{value:"plugin-samples",paraId:2,tocIndex:1},{value:" repository.",paraId:2,tocIndex:1},{value:"Following the instructions in ",paraId:3,tocIndex:2},{value:"Writing Your First Plugin",paraId:4,tocIndex:2},{value:", if you don\u2019t already have a project, you can create one. If you already have a project or have cloned the source code, you can skip this step.",paraId:3,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:2},{value:"Next, initialize a plugin and add it to the system:",paraId:6,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-provider-context
yarn pm enable @nocobase-sample/plugin-provider-context
`,paraId:7,tocIndex:2},{value:"Then, start the project:",paraId:8,tocIndex:2},{value:`yarn dev
`,paraId:9,tocIndex:2},{value:"After logging in, you can visit ",paraId:10,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:2},{value:" to verify that the plugin has been installed and enabled.",paraId:10,tocIndex:2},{value:"The implementation of the global context requires utilizing React\u2019s ",paraId:11,tocIndex:3},{value:"Context",paraId:11,tocIndex:3},{value:" API.",paraId:11,tocIndex:3},{value:`import { useRequest } from '@nocobase/client';
import { Spin } from 'antd';
import React, { FC, createContext, ReactNode } from 'react';

const FeaturesContext = createContext<Record<string, boolean>>({});

const mockRequest = () => new Promise((resolve) => {
  resolve({ data: { feature1: true, feature2: false } })
})

export const FeaturesProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const { loading, data } = useRequest<{ data: Record<string, boolean> }>(mockRequest);

  if (loading) return <Spin />;

  return <FeaturesContext.Provider value={data.data}>{children}</FeaturesContext.Provider>;
};

export const useFeatures = () => React.useContext(FeaturesContext);

export const useFeature = (feature: string) => {
  const features = useFeatures();
  return features[feature];
}
`,paraId:12,tocIndex:4},{value:"Don\u2019t forget to render the ",paraId:13,tocIndex:4},{value:"children",paraId:13,tocIndex:4},{value:" component.",paraId:13,tocIndex:4},{value:"For configuration and data related to ",paraId:14,tocIndex:4},{value:"features",paraId:14,tocIndex:4},{value:", refer to the ",paraId:14,tocIndex:4},{value:"Plugin Form Configuration Page",paraId:15,tocIndex:4},{value:" for example usage. In this case, we're using mock data.",paraId:14,tocIndex:4},{value:"Modify the ",paraId:16,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-provider-context/src/index.ts",paraId:16,tocIndex:5},{value:" file to register the ",paraId:16,tocIndex:5},{value:"FeaturesProvider",paraId:16,tocIndex:5},{value:" component into the system.",paraId:16,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { FeaturesProvider } from './FeaturesProvider';

export class PluginProviderContextClient extends Plugin {
  async load() {
    this.app.addProvider(FeaturesProvider)
  }
}

export default PluginProviderContextClient;
`,paraId:17,tocIndex:5},{value:"To access the context data, you can use the ",paraId:18,tocIndex:6},{value:"useFeatures",paraId:18,tocIndex:6},{value:" and ",paraId:18,tocIndex:6},{value:"useFeature",paraId:18,tocIndex:6},{value:" methods.",paraId:18,tocIndex:6},{value:"There are two cases: using it within this plugin or in other plugins.",paraId:19,tocIndex:6},{value:"Modify the ",paraId:20,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-provider-context/src/index.ts",paraId:20,tocIndex:7},{value:" file to add a test page for checking the context data.",paraId:20,tocIndex:7},{value:`import React from 'react';
import { Plugin } from '@nocobase/client';

import { FeaturesProvider, useFeature } from './FeaturesProvider';

const TestPage = () => {
  const feature1 = useFeature('feature1');
  const feature2 = useFeature('feature2');

  return (
    <div>
      <h1>Feature1: {feature1 ? 'Enabled' : 'Disabled'}</h1>
      <h1>Feature2: {feature2 ? 'Enabled' : 'Disabled'}</h1>
    </div>
  );
};

export class PluginProviderContextClient extends Plugin {
  async load() {
    this.app.addProvider(FeaturesProvider)

    this.app.router.add(\`admin.features-test\`, {
      path: '/admin/features-test',
      Component: TestPage,
    })
  }
}

export default PluginProviderContextClient;
`,paraId:21,tocIndex:7},{value:"Now, visit ",paraId:22,tocIndex:7},{value:"http://localhost:13000/admin/features-test",paraId:22,tocIndex:7},{value:" to see the context data.",paraId:22,tocIndex:7},{value:"If you need to use the context in other plugins, you should export the ",paraId:23,tocIndex:8},{value:"useFeatures",paraId:23,tocIndex:8},{value:" and ",paraId:23,tocIndex:8},{value:"useFeature",paraId:23,tocIndex:8},{value:" methods.",paraId:23,tocIndex:8},{value:"Modify the ",paraId:24,tocIndex:8},{value:"packages/plugins/@nocobase-sample/plugin-provider-context/src/index.ts",paraId:24,tocIndex:8},{value:" file:",paraId:24,tocIndex:8},{value:`export { useFeatures, useFeature } from './FeaturesProvider';
`,paraId:25,tocIndex:8},{value:"Then, you can use the ",paraId:26,tocIndex:8},{value:"useFeatures",paraId:26,tocIndex:8},{value:" and ",paraId:26,tocIndex:8},{value:"useFeature",paraId:26,tocIndex:8},{value:" methods as shown below:",paraId:26,tocIndex:8},{value:`import { useFeature } from '@nocobase-sample/plugin-provider-context/client';
`,paraId:27,tocIndex:8},{value:"Note that the import path should be ",paraId:28,tocIndex:8},{value:"'@nocobase-sample/plugin-provider-context/client'",paraId:28,tocIndex:8},{value:" rather than ",paraId:28,tocIndex:8},{value:"'@nocobase-sample/plugin-provider-context'",paraId:28,tocIndex:8},{value:".",paraId:28,tocIndex:8},{value:"Following the ",paraId:29,tocIndex:9},{value:"Build and Package Plugin",paraId:30,tocIndex:9},{value:" guide, you can package the plugin and upload it to the production environment.",paraId:29,tocIndex:9},{value:"If you cloned the source code, you\u2019ll need to perform a full build to include the plugin's dependencies.",paraId:31,tocIndex:9},{value:`yarn build
`,paraId:32,tocIndex:9},{value:"If the project was created using ",paraId:33,tocIndex:9},{value:"create-nocobase-app",paraId:33,tocIndex:9},{value:", simply run:",paraId:33,tocIndex:9},{value:`yarn build @nocobase-sample/plugin-provider-context --tar
`,paraId:34,tocIndex:9},{value:"This will generate the ",paraId:35,tocIndex:9},{value:"storage/tar/@nocobase-sample/plugin-provider-context.tar.gz",paraId:35,tocIndex:9},{value:" file, which can then be installed by following the ",paraId:35,tocIndex:9},{value:"upload process",paraId:36,tocIndex:9},{value:".",paraId:35,tocIndex:9}]},942595:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"According to the ",paraId:0,tocIndex:0},{value:"Provider Tutorial",paraId:1,tocIndex:0},{value:", the Provider has three main functions:",paraId:0,tocIndex:0},{value:"Providing a globally shared context",paraId:2,tocIndex:0},{value:"Displaying global content",paraId:2,tocIndex:0},{value:"Intercepting and rendering based on conditions",paraId:2,tocIndex:0},{value:"For these functions, we offer the following examples:",paraId:3,tocIndex:0},{value:"Global Content Display",paraId:4,tocIndex:0},{value:"Global Context",paraId:5,tocIndex:0}]},613734:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Add some pages for personalized display.",paraId:0,tocIndex:1},{value:"This example will add 4 pages:",paraId:1,tocIndex:2},{value:"/about",paraId:2,tocIndex:2},{value:": About page, used to display system-related information, accessible without logging in.",paraId:2,tocIndex:2},{value:"/admin/data-view",paraId:2,tocIndex:2},{value:": Data dashboard page, requires login to access.",paraId:2,tocIndex:2},{value:"/admin/material-manage",paraId:2,tocIndex:2},{value:`: Material management center, including image and video management, is a parent route page.
`,paraId:2,tocIndex:2},{value:"/admin/material-manage/image",paraId:3,tocIndex:2},{value:": Image management.",paraId:3,tocIndex:2},{value:"/admin/material-manage/video",paraId:3,tocIndex:2},{value:": Video management.",paraId:3,tocIndex:2},{value:"However, the content development will not be extensive, only for demonstration purposes.",paraId:4,tocIndex:2},{value:"You can find the complete example code in the ",paraId:5,tocIndex:2},{value:"plugin-samples",paraId:5,tocIndex:2},{value:" repository.",paraId:5,tocIndex:2},{value:"Following the instructions in the ",paraId:6,tocIndex:3},{value:"Writing Your First Plugin",paraId:7,tocIndex:3},{value:" documentation, if you don't have a project yet, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:6,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:8,tocIndex:3},{value:"Then initialize a plugin and add it to the application:",paraId:9,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-add-page
yarn pm enable @nocobase-sample/plugin-add-page
`,paraId:10,tocIndex:3},{value:"Then start the project:",paraId:11,tocIndex:3},{value:`yarn dev
`,paraId:12,tocIndex:3},{value:"Then, after logging in, visit ",paraId:13,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:13,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:13,tocIndex:3},{value:"/about",paraId:14},{value:"According to the ",paraId:15,tocIndex:5},{value:"Page Routing and Extension",paraId:16,tocIndex:5},{value:" documentation in the plugin development tutorial, we need to modify the ",paraId:15,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-add-page/src/client/index.tsx",paraId:15,tocIndex:5},{value:" file of the plugin:",paraId:15,tocIndex:5},{value:`import React, { useEffect } from 'react';
import { Plugin, useDocumentTitle } from '@nocobase/client';

const AboutPage = () => {
  const { setTitle } = useDocumentTitle();

  useEffect(() => {
    setTitle('About');
  }, [])

  return <div>About Page</div>;
}

export class PluginAddPageClient extends Plugin {
  async load() {
    this.app.router.add('about', {
      path: '/about',
      Component: AboutPage,
    })
  }
}

export default PluginAddPageClient;
`,paraId:17,tocIndex:5},{value:"The ",paraId:18,tocIndex:5},{value:"router.add()",paraId:18,tocIndex:5},{value:" function takes two parameters. The first parameter is the name of the page, which is used for CRUD operations and hierarchical nesting. The second parameter is the configuration of the page, where ",paraId:18,tocIndex:5},{value:"path",paraId:18,tocIndex:5},{value:" is the path of the page and ",paraId:18,tocIndex:5},{value:"Component",paraId:18,tocIndex:5},{value:" is the component of the page.",paraId:18,tocIndex:5},{value:"useDocumentTitle()",paraId:19,tocIndex:5},{value:" is used to modify the title of the page.",paraId:19,tocIndex:5},{value:"Then, when we visit ",paraId:20,tocIndex:5},{value:"http://localhost:13000/about",paraId:20,tocIndex:5},{value:', we can see that the page displays "About Page".',paraId:20,tocIndex:5},{value:"/admin/data-view",paraId:14},{value:"According to the ",paraId:21,tocIndex:6},{value:"Existing Page Routes",paraId:22,tocIndex:6},{value:" documentation, we know that ",paraId:21,tocIndex:6},{value:"/admin/*",paraId:21,tocIndex:6},{value:" corresponds to the ",paraId:21,tocIndex:6},{value:"name",paraId:21,tocIndex:6},{value:" ",paraId:21,tocIndex:6},{value:"admin",paraId:21,tocIndex:6},{value:". If we want to add a new page under it, we can use the ",paraId:21,tocIndex:6},{value:"admin.",paraId:21,tocIndex:6},{value:" prefix, for example ",paraId:21,tocIndex:6},{value:"admin.dataView",paraId:21,tocIndex:6},{value:".",paraId:21,tocIndex:6},{value:`// ...
const DataViewPage = () => {
  const { setTitle } = useDocumentTitle();

  useEffect(() => {
    setTitle('DataView');
  }, [])

  return <div>DataView</div>
};

export class PluginAddPageClient extends Plugin {
  async load() {
    // ...
    this.app.router.add('admin.dataView', {
      path: '/admin/data-view',
      Component: DataViewPage,
    })
  }
}

export default PluginAddPageClient;
`,paraId:23,tocIndex:6},{value:"Then we visit ",paraId:24,tocIndex:6},{value:"http://localhost:13000/admin/data-view",paraId:24,tocIndex:6},{value:', we can see that the page displays "DataView", and if we visit it again after logging out, it will redirect to the login page.',paraId:24,tocIndex:6},{value:"/admin/material-manage",paraId:14},{value:"We can create a ",paraId:25,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-add-page/src/client/MaterialPage.tsx",paraId:25,tocIndex:7},{value:" file with the following content:",paraId:25,tocIndex:7},{value:`import React, { useEffect } from 'react';
import { Outlet, Link } from 'react-router-dom';
import { useDocumentTitle } from '@nocobase/client';

export const MaterialPage = () => {
  return <div>
    <h1>Material Page</h1>
    <ul>
      <li>
        <Link to="video">Video</Link>
      </li>
      <li>
        <Link to="img">Img</Link>
      </li>
    </ul>
    <Outlet />
  </div>
}

export const MaterialVideo = () => {
  const { setTitle } = useDocumentTitle();

  useEffect(() => {
    setTitle('Material Video');
  }, [])

  return <div>Material Video</div>
}
export const MaterialImg = () => {
  const { setTitle } = useDocumentTitle();

  useEffect(() => {
    setTitle('Material Img');
  }, [])

  return <div>Material Img</div>;
}
`,paraId:26,tocIndex:7},{value:"Then in ",paraId:27,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-add-page/src/client/index.tsx",paraId:27,tocIndex:7},{value:" import and use:",paraId:27,tocIndex:7},{value:`// ...
import { MaterialImg, MaterialPage, MaterialVideo } from './MaterialPage';

export class PluginAddPageClient extends Plugin {
  async load() {
    // ...

    this.app.router.add('admin.material', {
      path: '/admin/material',
      Component: MaterialPage,
    })

    this.app.router.add('admin.material.video', {
      path: '/admin/material/video',
      Component: MaterialVideo,
    })

    this.app.router.add('admin.material.img', {
      path: '/admin/material/img',
      Component: MaterialImg,
    })
  }
}
`,paraId:28,tocIndex:7},{value:"If ",paraId:29,tocIndex:7},{value:"MaterialPage",paraId:29,tocIndex:7},{value:" is used as a parent page and does not need a custom layout, the ",paraId:29,tocIndex:7},{value:"Component",paraId:29,tocIndex:7},{value:" property can be omitted.",paraId:29,tocIndex:7},{value:`this.app.router.add('admin.material', {
  path: '/admin/material',
})
`,paraId:30,tocIndex:7},{value:"Then we visit ",paraId:31,tocIndex:7},{value:"http://localhost:13000/admin/material",paraId:31,tocIndex:7},{value:" and we can see that the ",paraId:31,tocIndex:7},{value:"Material Page",paraId:31,tocIndex:7},{value:" is already displayed on the page, and clicking on the ",paraId:31,tocIndex:7},{value:"Video",paraId:31,tocIndex:7},{value:" and ",paraId:31,tocIndex:7},{value:"Img",paraId:31,tocIndex:7},{value:" links can switch to the corresponding pages.",paraId:31,tocIndex:7},{value:`
      `,paraId:14},{value:"According to the documentation on ",paraId:32,tocIndex:8},{value:"Building and Packaging Plugins",paraId:33,tocIndex:8},{value:", we can package the plugin and upload it to the production environment.",paraId:32,tocIndex:8},{value:"If you have cloned the source code, you need to perform a full build first to build the dependencies of the plugin as well.",paraId:34,tocIndex:8},{value:`yarn build
`,paraId:35,tocIndex:8},{value:"If you are using ",paraId:36,tocIndex:8},{value:"create-nocobase-app",paraId:36,tocIndex:8},{value:" to create your project, you can directly execute:",paraId:36,tocIndex:8},{value:`yarn build @nocobase-sample/plugin-add-page --tar
`,paraId:37,tocIndex:8},{value:"This way you can see the ",paraId:38,tocIndex:8},{value:"storage/tar/@nocobase-sample/plugin-add-page.tar.gz",paraId:38,tocIndex:8},{value:" file, and then install it through the ",paraId:38,tocIndex:8},{value:"upload method",paraId:39,tocIndex:8},{value:".",paraId:38,tocIndex:8}]},736578:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The plugin requires multiple configuration pages, and some pages are not under ",paraId:0,tocIndex:1},{value:"AdminSettingsLayout",paraId:1,tocIndex:1},{value:", usually for detail pages, such as the ",paraId:0,tocIndex:1},{value:"@nocobase/plugin-mobile-client",paraId:0,tocIndex:1},{value:" plugin or the ",paraId:0,tocIndex:1},{value:"@nocobase/plugin-workflow",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"This example will have a configuration page, and inside the configuration page, there will be a detail link that, when clicked, will navigate to a new page.",paraId:2,tocIndex:2},{value:"This document will not go into much detail about the content development. It is only used to demonstrate how to add a plugin configuration page. For specific content and logic of the configuration page, please refer to the ",paraId:3,tocIndex:2},{value:"Plugin Settings plugin example",paraId:4,tocIndex:2},{value:" documentation.",paraId:3,tocIndex:2},{value:"You can find the complete example code for this document in the ",paraId:5,tocIndex:2},{value:"plugin-samples",paraId:5,tocIndex:2},{value:" repository.",paraId:5,tocIndex:2},{value:`
  `,paraId:6},{value:"Following the instructions in the ",paraId:7,tocIndex:3},{value:"Writing Your First Plugin",paraId:8,tocIndex:3},{value:" documentation, if you don't have a project yet, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:7,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:9,tocIndex:3},{value:"Then initialize a plugin and add it to the application:",paraId:10,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-add-setting-page-layout-routes
yarn pm enable @nocobase-sample/plugin-add-setting-page-layout-routes
`,paraId:11,tocIndex:3},{value:"Then start the project:",paraId:12,tocIndex:3},{value:`yarn dev
`,paraId:13,tocIndex:3},{value:"Then, after logging in, visit ",paraId:14,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:14,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:14,tocIndex:3},{value:"Following the instructions in the ",paraId:15,tocIndex:5},{value:"Plugin Setting Page Extension",paraId:16,tocIndex:5},{value:" section of the plugin development tutorial, we need to modify the ",paraId:15,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-add-setting-page-layout-routes/src/client/index.tsx",paraId:15,tocIndex:5},{value:" file:",paraId:15,tocIndex:5},{value:`import React from 'react';
import { Plugin } from '@nocobase/client';

// @ts-ignore
import { name } from '../../package.json';

const PluginSettingPage = () => <div>
  details
</div>

export class PluginAddSettingPageLayoutRoutesClient extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(name, {
      title: 'Different Layout',
      icon: 'ApiOutlined',
      Component: PluginSettingPage,
    });
  }
}

export default PluginAddSettingPageLayoutRoutesClient;
`,paraId:17,tocIndex:5},{value:"Then we can visit ",paraId:18,tocIndex:5},{value:"http://localhost:13000/admin/settings/@nocobase-sample/plugin-add-setting-page-layout-routes",paraId:18,tocIndex:5},{value:" to view the plugin configuration page.",paraId:18,tocIndex:5},{value:"\u6211\u4EEC\u51C6\u5907\u5728 ",paraId:19,tocIndex:6},{value:"AdminLayout",paraId:19,tocIndex:6},{value:" \u4E0B\u9762\u65B0\u589E\u4E00\u4E2A\u8BE6\u60C5\u9875\u9762\uFF0C\u6211\u4EEC\u7EE7\u7EED\u4FEE\u6539 ",paraId:19,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-add-setting-page-layout-routes/src/client/index.tsx",paraId:19,tocIndex:6},{value:"\uFF1A",paraId:19,tocIndex:6},{value:`+ import { Link } from 'react-router-dom'

const PluginSettingPage = () => <div>
- details
+ <Link path={\`/admin/\${name}-detail\`}>details</Link>
</div>

export class PluginAddSettingPageLayoutRoutesClient extends Plugin {
  async load() {
    // ...
+   this.app.router.add(\`admin.\${name}-details\`, {
+     path: \`/admin/\${name}-detail\`,
+     Component: () => <div>detail</div>,
+   });
  }
}
`,paraId:20,tocIndex:6},{value:"When we click on the ",paraId:21,tocIndex:6},{value:"details",paraId:21,tocIndex:6},{value:" link, it will navigate to the ",paraId:21,tocIndex:6},{value:"/admin/@nocobase-sample/plugin-add-setting-page-layout-routes-detail",paraId:21,tocIndex:6},{value:" page.",paraId:21,tocIndex:6},{value:`
  `,paraId:6},{value:"By default, the plugin configuration page does not have any permissions. Anyone can access and configure it. To configure permissions for the plugin, we need to configure them in the plugin settings.",paraId:22,tocIndex:7},{value:"We can visit ",paraId:23,tocIndex:7},{value:"http://localhost:13000/admin/settings/users-permissions/roles",paraId:23,tocIndex:7},{value:" to see all the roles. We can configure permissions in the plugin settings.",paraId:23,tocIndex:7},{value:"According to the documentation on ",paraId:24,tocIndex:8},{value:"Building and Packaging Plugins",paraId:25,tocIndex:8},{value:", we can package the plugin and upload it to the production environment.",paraId:24,tocIndex:8},{value:"If you have cloned the source code, you need to perform a full build first to build the dependencies of the plugin as well.",paraId:26,tocIndex:8},{value:`yarn build
`,paraId:27,tocIndex:8},{value:"If you are using ",paraId:28,tocIndex:8},{value:"create-nocobase-app",paraId:28,tocIndex:8},{value:" to create your project, you can directly execute:",paraId:28,tocIndex:8},{value:`yarn build @nocobase-sample/plugin-add-setting-page-layout-routes --tar
`,paraId:29,tocIndex:8},{value:"This way you can see the ",paraId:30,tocIndex:8},{value:"storage/tar/@nocobase-sample/plugin-add-setting-page-layout-routes.tar.gz",paraId:30,tocIndex:8},{value:" file, and then install it through the ",paraId:30,tocIndex:8},{value:"upload method",paraId:31,tocIndex:8},{value:".",paraId:30,tocIndex:8}]},839649:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The plugin requires a simple configuration page with only one route.",paraId:0,tocIndex:1},{value:"Assuming we integrate with a third-party email service and need to configure the email service token, we need a configuration page.",paraId:1,tocIndex:2},{value:"This document will not go into too much development detail, but only demonstrate how to add a plugin configuration page. For specific configuration page content and logic, please refer to the ",paraId:2,tocIndex:2},{value:"Plugin Settings plugin example",paraId:3,tocIndex:2},{value:" documentation.",paraId:2,tocIndex:2},{value:"You can view the complete example code for this document in the ",paraId:4,tocIndex:2},{value:"plugin-samples",paraId:4,tocIndex:2},{value:" repository.",paraId:4,tocIndex:2},{value:"Following the instructions in the ",paraId:5,tocIndex:3},{value:"Writing Your First Plugin",paraId:6,tocIndex:3},{value:" documentation, if you don't have a project yet, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:5,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:7,tocIndex:3},{value:"Then initialize a plugin and add it to the application:",paraId:8,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-add-setting-page-single-route
yarn pm enable @nocobase-sample/plugin-add-setting-page-single-route
`,paraId:9,tocIndex:3},{value:"Then start the project:",paraId:10,tocIndex:3},{value:`yarn dev
`,paraId:11,tocIndex:3},{value:"Then, after logging in, visit ",paraId:12,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:12,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:12,tocIndex:3},{value:"According to the tutorial on ",paraId:13,tocIndex:4},{value:"Extending Plugin Settings Page",paraId:14,tocIndex:4},{value:" in the plugin development documentation, we need to modify the ",paraId:13,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-add-setting-page-single-route/src/client/index.tsx",paraId:13,tocIndex:4},{value:" file of the plugin:",paraId:13,tocIndex:4},{value:`import React from 'react';
import { Plugin } from '@nocobase/client';

// @ts-ignore
import { name } from '../../package.json';

const MySettingPage = () => <div>Hello Setting page</div>;

export class PluginAddSettingPageSingleRouteClient extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(name, {
      title: 'Single Route',
      icon: 'ApiOutlined',
      Component: MySettingPage,
    });
  }
}

export default PluginAddSettingPageSingleRouteClient;
`,paraId:15,tocIndex:4},{value:"name",paraId:16,tocIndex:4},{value:": The name of the plugin, used to uniquely identify the plugin.",paraId:16,tocIndex:4},{value:"title",paraId:16,tocIndex:4},{value:": The title of the plugin configuration management page menu.",paraId:16,tocIndex:4},{value:"icon",paraId:16,tocIndex:4},{value:": The icon of the plugin configuration management page menu. For more icons, you can refer to the ",paraId:16,tocIndex:4},{value:"Ant Design Icons",paraId:16,tocIndex:4},{value:".",paraId:16,tocIndex:4},{value:"Component",paraId:16,tocIndex:4},{value:": The content of the setting page.",paraId:16,tocIndex:4},{value:"Then we can visit ",paraId:17,tocIndex:4},{value:"http://localhost:13000/admin/settings/@nocobase-sample/plugin-add-setting-page-single-route",paraId:17,tocIndex:4},{value:" to view the plugin configuration page.",paraId:17,tocIndex:4},{value:"By default, the plugin configuration page does not have any permissions. Anyone can access and configure it. To configure permissions for the plugin, we need to configure them in the plugin settings.",paraId:18,tocIndex:5},{value:"We can visit ",paraId:19,tocIndex:5},{value:"http://localhost:13000/admin/settings/users-permissions/roles",paraId:19,tocIndex:5},{value:" to see all the roles. We can configure permissions in the plugin settings.",paraId:19,tocIndex:5},{value:"According to the documentation on ",paraId:20,tocIndex:6},{value:"Building and Packaging Plugins",paraId:21,tocIndex:6},{value:", we can package the plugin and upload it to the production environment.",paraId:20,tocIndex:6},{value:"If you have cloned the source code, you need to perform a full build first to build the dependencies of the plugin as well.",paraId:22,tocIndex:6},{value:`yarn build
`,paraId:23,tocIndex:6},{value:"If you are using ",paraId:24,tocIndex:6},{value:"create-nocobase-app",paraId:24,tocIndex:6},{value:" to create your project, you can directly execute:",paraId:24,tocIndex:6},{value:`yarn build @nocobase-sample/plugin-add-setting-page-single-route --tar
`,paraId:25,tocIndex:6},{value:"This way you can see the ",paraId:26,tocIndex:6},{value:"storage/tar/@nocobase-sample/plugin-add-setting-page-single-route.tar.gz",paraId:26,tocIndex:6},{value:" file, and then install it by ",paraId:26,tocIndex:6},{value:"uploading",paraId:27,tocIndex:6},{value:".",paraId:26,tocIndex:6}]},24635:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The plugin requires multiple configuration pages, with each page corresponding to a tab.",paraId:0,tocIndex:1},{value:"Assuming we integrate with a third-party email service and need to configure the email service token. At the same time, we also need a configuration page to set up email service templates. In this case, we need a configuration page with two tabs.",paraId:1,tocIndex:2},{value:"This document does not go into much detail about the content development. It is only used to demonstrate how to add a plugin configuration page. For specific configuration page content and logic, please refer to the ",paraId:2,tocIndex:2},{value:"Plugin Settings plugin example",paraId:3,tocIndex:2},{value:" documentation.",paraId:2,tocIndex:2},{value:"You can find the complete example code for this document in the ",paraId:4,tocIndex:2},{value:"plugin-samples",paraId:4,tocIndex:2},{value:" repository.",paraId:4,tocIndex:2},{value:`
  `,paraId:5},{value:"Following the instructions in the ",paraId:6,tocIndex:3},{value:"Writing Your First Plugin",paraId:7,tocIndex:3},{value:" documentation, if you don't have a project yet, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:6,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:8,tocIndex:3},{value:"Then initialize a plugin and add it to the application:",paraId:9,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-add-setting-page-tabs-routes
yarn pm enable @nocobase-sample/plugin-add-setting-page-tabs-routes
`,paraId:10,tocIndex:3},{value:"Then start the project:",paraId:11,tocIndex:3},{value:`yarn dev
`,paraId:12,tocIndex:3},{value:"Then, after logging in, visit ",paraId:13,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:13,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:13,tocIndex:3},{value:"According to the tutorial on plugin development ",paraId:14,tocIndex:4},{value:"Extending Plugin Settings Page",paraId:15,tocIndex:4},{value:", we need to modify the ",paraId:14,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-add-setting-page-tabs-routes/src/client/index.tsx",paraId:14,tocIndex:4},{value:" file of the plugin:",paraId:14,tocIndex:4},{value:`import React from 'react';
import { Outlet } from 'react-router-dom';
import { Plugin } from '@nocobase/client';

// @ts-ignore
import { name } from '../../package.json';

const TokenPage = () => <div>Token Page</div>

const TemplatePage = () => <div>Template Page</div>

export class PluginAddSettingPageTabsRoutesClient extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add(name, {
      title: 'Tabs Routes',
      icon: 'ApiOutlined',
      Component: Outlet, // Can be omitted or use a custom component
    });

    this.app.pluginSettingsManager.add(\`\${name}.token\`, {
      title: 'Token Page',
      Component: TokenPage,
      sort: 1,
    });

    this.app.pluginSettingsManager.add(\`\${name}.template\`, {
      title: 'Template Page',
      Component: TemplatePage,
      sort: 2,
    });

    this.app.pluginSettingsManager.add(\`\${name}.nestedRoute\`, {
      title: 'Test',
      Component: Outlet, // Can be omitted or use a custom component
      sort: 3,
    });

    this.app.pluginSettingsManager.add(\`\${name}.nestedRoute.a\`, {
      title: 'Test A',
      Component: () => <div>Test A page</div>
    });

    this.app.pluginSettingsManager.add(\`\${name}.nestedRoute.b\`, {
      title: 'Test B',
      Component: () => <div>Test B page</div>
    });
  }
}

export default PluginAddSettingPageTabsRoutesClient;
`,paraId:16,tocIndex:4},{value:"In scenarios where there are multiple configuration pages, the ",paraId:17,tocIndex:4},{value:"name",paraId:17,tocIndex:4},{value:" attribute of ",paraId:17,tocIndex:4},{value:"pluginSettingsManager.add()",paraId:17,tocIndex:4},{value:" needs to be separated by ",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4},{value:". For example, ",paraId:17,tocIndex:4},{value:"pluginName.pageName",paraId:17,tocIndex:4},{value:" can be used to achieve multiple configuration pages as tabs.",paraId:17,tocIndex:4},{value:"Then we can visit ",paraId:18,tocIndex:4},{value:"http://localhost:13000/admin/settings/@nocobase-sample/plugin-add-setting-page-tabs-routes",paraId:18,tocIndex:4},{value:" to view the plugin configuration page.",paraId:18,tocIndex:4},{value:`
  `,paraId:5},{value:"By default, the plugin configuration page does not have any permissions. Anyone can access and configure it. To configure permissions for the plugin, we need to configure them in the plugin settings.",paraId:19,tocIndex:5},{value:"We can visit ",paraId:20,tocIndex:5},{value:"http://localhost:13000/admin/settings/users-permissions/roles",paraId:20,tocIndex:5},{value:" to see all the roles. We can configure permissions in the plugin settings.",paraId:20,tocIndex:5},{value:"According to the documentation on ",paraId:21,tocIndex:6},{value:"Building and Packaging Plugins",paraId:22,tocIndex:6},{value:", we can package the plugin and upload it to the production environment.",paraId:21,tocIndex:6},{value:"If you have cloned the source code, you need to perform a full build first to build the dependencies of the plugin as well.",paraId:23,tocIndex:6},{value:`yarn build
`,paraId:24,tocIndex:6},{value:"If you are using ",paraId:25,tocIndex:6},{value:"create-nocobase-app",paraId:25,tocIndex:6},{value:" to create your project, you can directly execute:",paraId:25,tocIndex:6},{value:`yarn build @nocobase-sample/plugin-add-setting-page-tabs-routes --tar
`,paraId:26,tocIndex:6},{value:"This way you can see the ",paraId:27,tocIndex:6},{value:"storage/tar/@nocobase-sample/plugin-add-setting-page-tabs-routes.tar.gz",paraId:27,tocIndex:6},{value:" file, and then install it through the ",paraId:27,tocIndex:6},{value:"upload method",paraId:28,tocIndex:6},{value:".",paraId:27,tocIndex:6}]},651866:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase's frontend pages currently include the following ",paraId:0,tocIndex:0},{value:"page routes",paraId:1,tocIndex:0},{value:":",paraId:0,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Path",paraId:2,tocIndex:0},{value:"Component",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"admin",paraId:2,tocIndex:0},{value:"/admin/*",paraId:2,tocIndex:0},{value:"AdminLayout",paraId:2,tocIndex:0},{value:"Backend management page",paraId:2,tocIndex:0},{value:"admin.page",paraId:2,tocIndex:0},{value:"/admin/:name",paraId:2,tocIndex:0},{value:"AdminDynamicPage",paraId:2,tocIndex:0},{value:"Dynamically created page",paraId:2,tocIndex:0},{value:"admin.settings",paraId:2,tocIndex:0},{value:"/admin/settings/*",paraId:2,tocIndex:0},{value:"AdminSettingsLayout",paraId:2,tocIndex:0},{value:"Plugin configuration page",paraId:2,tocIndex:0},{value:"admin.pm.list",paraId:2,tocIndex:0},{value:"/admin/pm/list/*",paraId:2,tocIndex:0},{value:"PluginManager",paraId:2,tocIndex:0},{value:"Plugin management page",paraId:2,tocIndex:0},{value:"However, these pages may not meet all requirements, for example:",paraId:3,tocIndex:0},{value:"add",paraId:4,tocIndex:0},{value:"Add a new page for frontend display only, such as ",paraId:5,tocIndex:0},{value:"/about",paraId:5,tocIndex:0},{value:", to show information about the website.",paraId:5,tocIndex:0},{value:"Extend a new page under ",paraId:5,tocIndex:0},{value:"/admin/*",paraId:5,tocIndex:0},{value:", which requires login to access.",paraId:5,tocIndex:0},{value:"Add a configuration page for a newly added plugin.",paraId:5,tocIndex:0},{value:"change",paraId:6,tocIndex:0},{value:"Completely replace an existing page, for example, customize the login page instead of using the default one.",paraId:7,tocIndex:0},{value:"Modify the layout of an existing page, for example, modify the layout of ",paraId:7,tocIndex:0},{value:"/admin/*",paraId:7,tocIndex:0},{value:" without the top menu bar.",paraId:7,tocIndex:0},{value:"delete",paraId:8,tocIndex:0},{value:"For example, if we no longer need a registered page, we can delete it.",paraId:9,tocIndex:0},{value:"To address the above scenarios, we can use NocoBase's frontend router extension feature. We provide the following examples:",paraId:10,tocIndex:0},{value:"Add Page",paraId:11,tocIndex:0},{value:" (Add a new page)",paraId:12,tocIndex:0},{value:"Replace Page",paraId:13,tocIndex:0},{value:" (Modify a page)",paraId:12,tocIndex:0},{value:"Add Plugin Setting Page (Single Route)",paraId:14,tocIndex:0},{value:" (Plugin configuration page - single route)",paraId:12,tocIndex:0},{value:"Add Plugin Setting Page (Tabs Routes)",paraId:15,tocIndex:0},{value:" (Plugin configuration page - tabs routes)",paraId:12,tocIndex:0},{value:"Add Plugin Setting Page (different Routes)",paraId:16,tocIndex:0},{value:" (Plugin configuration page - different layouts)",paraId:12,tocIndex:0}]},848292:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Scene where the layout of an existing page needs to be changed or the entire content of the page needs to be replaced.",paraId:0,tocIndex:1},{value:"We need to customize the layout of the login and registration pages. Currently, there is only a form, but we want to change it to a left-right layout, with an image on the left and the form on the right.",paraId:1,tocIndex:2},{value:"You can find the complete example code for this documentation in the ",paraId:2,tocIndex:2},{value:"plugin-samples",paraId:2,tocIndex:2},{value:" repository.",paraId:2,tocIndex:2},{value:"Following the instructions in the ",paraId:3,tocIndex:3},{value:"Writing Your First Plugin",paraId:4,tocIndex:3},{value:" documentation, if you don't have a project yet, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:3,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:3},{value:"Then initialize a plugin and add it to the application:",paraId:6,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-replace-page
yarn pm enable @nocobase-sample/plugin-replace-page
`,paraId:7,tocIndex:3},{value:"Then start the project:",paraId:8,tocIndex:3},{value:`yarn dev
`,paraId:9,tocIndex:3},{value:"Then, after logging in, visit ",paraId:10,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:3},{value:" to see that the plugin has been installed and enabled.",paraId:10,tocIndex:3},{value:"The login and registration pages are registered by the ",paraId:11,tocIndex:5},{value:"Auth plugin",paraId:12,tocIndex:5},{value:", which registers the following routes:",paraId:11,tocIndex:5},{value:"Auth layout",paraId:13,tocIndex:5},{value:"name: ",paraId:14,tocIndex:5},{value:"auth",paraId:14,tocIndex:5},{value:"path: ",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"component: ",paraId:14,tocIndex:5},{value:"AuthLayout",paraId:14,tocIndex:5},{value:"Sign-in page",paraId:15,tocIndex:5},{value:"name: ",paraId:16,tocIndex:5},{value:"auth.signin",paraId:16,tocIndex:5},{value:"path: ",paraId:16,tocIndex:5},{value:"/signin",paraId:16,tocIndex:5},{value:"component: ",paraId:16,tocIndex:5},{value:"SignInPage",paraId:16,tocIndex:5},{value:"Sign-up page",paraId:17,tocIndex:5},{value:"name: ",paraId:18,tocIndex:5},{value:"auth.signup",paraId:18,tocIndex:5},{value:"path: ",paraId:18,tocIndex:5},{value:"/signup",paraId:18,tocIndex:5},{value:"component: ",paraId:18,tocIndex:5},{value:"SignUpPage",paraId:18,tocIndex:5},{value:"The ",paraId:19,tocIndex:5},{value:"AuthLayout",paraId:19,tocIndex:5},{value:" is the layout for the entire login and registration pages. We can achieve custom layout by replacing the ",paraId:19,tocIndex:5},{value:"AuthLayout",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"To understand how to implement this, we need to refer to the source code of the original ",paraId:20,tocIndex:5},{value:"AuthLayout",paraId:20,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:`export function AuthLayout() {
  const { data } = useSystemSettings();

  return (
    <div
      style={{
        maxWidth: 320,
        margin: '0 auto',
        paddingTop: '20vh',
      }}
    >
      <h1>{data?.data?.title}</h1>
      <AuthenticatorsContextProvider>
        <Outlet />
      </AuthenticatorsContextProvider>
      <div
        className={css\`
          position: absolute;
          bottom: 24px;
          width: 100%;
          left: 0;
          text-align: center;
        \`}
      >
        <PoweredBy />
      </div>
    </div>
  );
}
`,paraId:21,tocIndex:5},{value:"The overall source code is relatively simple. What we need to implement is a layout with a left and right side. The left side will contain an image, and the right side will contain the login and registration forms. We can either copy the existing ",paraId:22,tocIndex:5},{value:"AuthLayout",paraId:22,tocIndex:5},{value:" and place it on the right side, or directly import the original ",paraId:22,tocIndex:5},{value:"AuthLayout",paraId:22,tocIndex:5},{value:" and place an image on the left side.",paraId:22,tocIndex:5},{value:"We create ",paraId:23,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-replace-page/src/client/AuthLayout.tsx",paraId:23,tocIndex:6},{value:" with the following content:",paraId:23,tocIndex:6},{value:`import React from 'react';
import { Col, Row } from 'antd';
import { Outlet } from 'react-router-dom';
import { PoweredBy, css, useSystemSettings } from '@nocobase/client';
import { AuthenticatorsContextProvider } from '@nocobase/plugin-auth/client'

import authImg from './auth-image.jpg'

export function CustomAuthLayout() {
  const { data } = useSystemSettings();

  return <Row style={{ height: '100%' }}>
    <Col xs={{ span: 0 }} md={{ span: 12 }}>
      <img src={authImg} style={{
        objectFit: 'cover',
        objectPosition: 'center',
        width: '100%',
        height: '100%',
        maxWidth: '100%',
        display: 'block',
        verticalAlign: 'middle'
      }} />
    </Col>
    <Col xs={{ span: 24 }} md={{ span: 12 }}>
      <div
        style={{
          maxWidth: 320,
          margin: '0 auto',
          paddingTop: '20vh',
        }}
      >
        <h1>{data?.data?.title}</h1>
        <AuthenticatorsContextProvider>
          <Outlet />
        </AuthenticatorsContextProvider>
        <div
          className={css\`
          position: absolute;
          bottom: 24px;
          width: 100%;
          left: 0;
          text-align: center;
        \`}
        >
          <PoweredBy />
        </div>
      </div>
    </Col>
  </Row>
}
`,paraId:24,tocIndex:6},{value:"Then place the left background image ",paraId:25,tocIndex:6},{value:"auth-image.jpg",paraId:25,tocIndex:6},{value:" in the ",paraId:25,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-replace-page/src/client",paraId:25,tocIndex:6},{value:" directory.",paraId:25,tocIndex:6},{value:"This completes the implementation of a login page with a left and right layout.",paraId:26,tocIndex:6},{value:"AuthLayout",paraId:27},{value:"CustomAuthLayout",paraId:27},{value:"Next, we need to import and use ",paraId:28,tocIndex:7},{value:"CustomAuthLayout",paraId:28,tocIndex:7},{value:" in ",paraId:28,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-replace-page/src/client/index.tsx",paraId:28,tocIndex:7},{value:".",paraId:28,tocIndex:7},{value:"There are two ways to replace ",paraId:29,tocIndex:7},{value:"AuthLayout",paraId:29,tocIndex:7},{value:": through route override and component override.",paraId:29,tocIndex:7},{value:"As mentioned earlier, the route name for ",paraId:30,tocIndex:8},{value:"AuthLayout",paraId:30,tocIndex:8},{value:" is ",paraId:30,tocIndex:8},{value:"auth",paraId:30,tocIndex:8},{value:". We can override it using routes:",paraId:30,tocIndex:8},{value:`import { Plugin } from '@nocobase/client';
import { CustomAuthLayout } from './AuthLayout';

export class PluginReplacePageClient extends Plugin {
  async load() {
    this.app.router.add('auth', {
      Component: CustomAuthLayout,
    })
  }
}

export default PluginReplacePageClient;
`,paraId:31,tocIndex:8},{value:"The first parameter of the ",paraId:32,tocIndex:8},{value:"router.add()",paraId:32,tocIndex:8},{value:" method is the name of the route. If it is added repeatedly, it will override the existing route.",paraId:32,tocIndex:8},{value:`import { Plugin } from '@nocobase/client';
import { CustomAuthLayout } from './AuthLayout';

export class PluginChangePageClient extends Plugin {
  async load() {
   this.app.addComponents({ AuthLayout: CustomAuthLayout })
  }
}
`,paraId:33,tocIndex:9},{value:"It should be noted that this method of overriding must be done using ",paraId:34,tocIndex:9},{value:"string Component",paraId:34,tocIndex:9},{value:" to register the route. For example, the source code of the ",paraId:34,tocIndex:9},{value:"auth plugin",paraId:34,tocIndex:9},{value:" is as follows:",paraId:34,tocIndex:9},{value:`this.app.router.add('auth', {
  Component: 'AuthLayout',
})

this.app.addComponents({ AuthLayout })
`,paraId:35,tocIndex:9},{value:"If the source code of the ",paraId:36,tocIndex:9},{value:"auth",paraId:36,tocIndex:9},{value:" plugin is registered in the following way, it cannot be overridden:",paraId:36,tocIndex:9},{value:`this.app.router.add('auth', {
  Component: AuthLayout,
})
`,paraId:37,tocIndex:9},{value:"Then we log out and visit ",paraId:38,tocIndex:9},{value:"http://localhost:13000/signin",paraId:38,tocIndex:9},{value:" to see that the layout of the login page has been changed.",paraId:38,tocIndex:9},{value:"According to the documentation on ",paraId:39,tocIndex:10},{value:"Building and Packaging Plugins",paraId:40,tocIndex:10},{value:", we can package the plugin and upload it to the production environment.",paraId:39,tocIndex:10},{value:"If you have cloned the source code, you need to perform a full build first to build the dependencies of the plugin as well.",paraId:41,tocIndex:10},{value:`yarn build
`,paraId:42,tocIndex:10},{value:"If you are using ",paraId:43,tocIndex:10},{value:"create-nocobase-app",paraId:43,tocIndex:10},{value:" to create your project, you can directly execute:",paraId:43,tocIndex:10},{value:`yarn build @nocobase-sample/plugin-replace-page --tar
`,paraId:44,tocIndex:10},{value:"This way, you can see the ",paraId:45,tocIndex:10},{value:"storage/tar/@nocobase-sample/plugin-replace-page.tar.gz",paraId:45,tocIndex:10},{value:" file, and then install it using the ",paraId:45,tocIndex:10},{value:"upload method",paraId:46,tocIndex:10},{value:".",paraId:45,tocIndex:10}]},273980:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The functionality to be implemented is similar to the ",paraId:0,tocIndex:1},{value:"Global Registration of Component and Scope",paraId:1,tocIndex:1},{value:" example, but this time, the component and scope will be registered within the plugin itself, instead of globally.",paraId:0,tocIndex:1},{value:"You can view the complete sample code for this document in ",paraId:2,tocIndex:1},{value:"plugin-samples",paraId:2,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"Following the guide on ",paraId:3,tocIndex:2},{value:"Writing Your First Plugin",paraId:4,tocIndex:2},{value:", if you do not yet have a project, you can create one first. If you already have a project or have cloned the source code, you can skip this step.",paraId:3,tocIndex:2},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:5,tocIndex:2},{value:"Next, initialize a plugin and add it to the system:",paraId:6,tocIndex:2},{value:`yarn pm create @nocobase-sample/plugin-component-and-scope-local
yarn pm enable @nocobase-sample/plugin-component-and-scope-local
`,paraId:7,tocIndex:2},{value:"Then, start the project:",paraId:8,tocIndex:2},{value:`yarn dev
`,paraId:9,tocIndex:2},{value:"After logging in, go to ",paraId:10,tocIndex:2},{value:"http://localhost:13000/admin/pm/list/local/",paraId:10,tocIndex:2},{value:" to confirm that the plugin has been installed and enabled.",paraId:10,tocIndex:2},{value:"Create a new file ",paraId:11,tocIndex:4},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/client/CustomPage.tsx",paraId:11,tocIndex:4},{value:" with the following content:",paraId:11,tocIndex:4},{value:`import React from "react"

export const SamplesCustomPage = () => {
  return <div>TODO</div>
}
`,paraId:12,tocIndex:4},{value:"Component",paraId:13},{value:"For more details on custom page creation, refer to the ",paraId:14,tocIndex:5},{value:"Add New Page",paraId:15,tocIndex:5},{value:" guide.",paraId:14,tocIndex:5},{value:"Next, modify the file ",paraId:16,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/index.ts",paraId:16,tocIndex:5},{value:" as follows:",paraId:16,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { SamplesCustomPage } from './CustomPage'

export class PluginComponentAndScopeLocalClient extends Plugin {
  async load() {
    this.app.router.add('admin.custom-page2', {
      path: '/admin/custom-page2',
      Component: SamplesCustomPage,
    })
  }
}

export default PluginComponentAndScopeLocalClient;
`,paraId:17,tocIndex:5},{value:"Unlike global registration, here we directly use the ",paraId:18,tocIndex:5},{value:"Component: SamplesCustomPage",paraId:18,tocIndex:5},{value:" instead of passing a string as the component type.",paraId:18,tocIndex:5},{value:"Next, go to ",paraId:19,tocIndex:5},{value:"http://localhost:13000/admin/custom-page2",paraId:19,tocIndex:5},{value:" to see the content of the ",paraId:19,tocIndex:5},{value:"SamplesCustomPage",paraId:19,tocIndex:5},{value:" component.",paraId:19,tocIndex:5},{value:"SchemaComponent",paraId:13},{value:"You\u2019ll need to understand the following concepts:",paraId:20,tocIndex:6},{value:"Schema Protocol",paraId:21,tocIndex:6},{value:"SchemaComponent",paraId:22,tocIndex:6},{value:"withDynamicSchemaProps",paraId:23,tocIndex:6},{value:"useFieldSchema()",paraId:22,tocIndex:6},{value:"Now, modify the file ",paraId:24,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-component-and-scope-local/src/client/CustomPage.tsx",paraId:24,tocIndex:6},{value:" as follows:",paraId:24,tocIndex:6},{value:`import { ISchema, SchemaComponent, withDynamicSchemaProps } from "@nocobase/client"
import { uid } from '@formily/shared'
import { useFieldSchema } from '@formily/react'
import React, { FC } from "react"

const SamplesHello: FC<{ name: string }> = withDynamicSchemaProps(({ name }) => {
  return <div>hello {name}</div>
})

const useSamplesHelloProps = () => {
  const schema = useFieldSchema();
  return { name: schema.name }
}

const schema: ISchema = {
  type: 'void',
  name: uid(),
  properties: {
    demo1: {
      type: 'void',
      'x-component': SamplesHello,
      'x-component-props': {
        name: 'demo1',
      },
    },
    demo2: {
      type: 'void',
      'x-component': SamplesHello,
      'x-use-component-props': useSamplesHelloProps,
    },
    demo3: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-component-props': {
        name: 'demo3',
      },
    },
    demo4: {
      type: 'void',
      'x-component': 'SamplesHello',
      'x-use-component-props': 'useSamplesHelloProps',
    },
  }
}

export const SamplesCustomPage = () => {
  return <SchemaComponent schema={schema} components={{ SamplesHello }} scope={{ useSamplesHelloProps }}></SchemaComponent>
}
`,paraId:25,tocIndex:6},{value:"We defined the ",paraId:26,tocIndex:6},{value:"SamplesHello",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"useSamplesHelloProps",paraId:26,tocIndex:6},{value:" components.",paraId:26,tocIndex:6},{value:"Then, we created a ",paraId:26,tocIndex:6},{value:"schema",paraId:26,tocIndex:6},{value:" object where the ",paraId:26,tocIndex:6},{value:"demo1",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"demo2",paraId:26,tocIndex:6},{value:" fields use corresponding components and scope, while the ",paraId:26,tocIndex:6},{value:"demo3",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"demo4",paraId:26,tocIndex:6},{value:" fields use string-type components and scope.",paraId:26,tocIndex:6},{value:"Finally, we used the ",paraId:26,tocIndex:6},{value:"SchemaComponent",paraId:26,tocIndex:6},{value:"'s ",paraId:26,tocIndex:6},{value:"components",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"scope",paraId:26,tocIndex:6},{value:" attributes to locally register ",paraId:26,tocIndex:6},{value:"SamplesHello",paraId:26,tocIndex:6},{value:" and ",paraId:26,tocIndex:6},{value:"useSamplesHelloProps",paraId:26,tocIndex:6},{value:".",paraId:26,tocIndex:6},{value:"Visit ",paraId:27,tocIndex:6},{value:"http://localhost:13000/admin/custom-page2",paraId:27,tocIndex:6},{value:" to see the content of the ",paraId:27,tocIndex:6},{value:"CustomPage",paraId:27,tocIndex:6},{value:" component.",paraId:27,tocIndex:6},{value:"Following the guide on ",paraId:28,tocIndex:7},{value:"Building and Packaging Plugins",paraId:29,tocIndex:7},{value:", you can package the plugin and upload it to the production environment.",paraId:28,tocIndex:7},{value:"If you cloned the source code, you need to perform a full build to package the plugin's dependencies:",paraId:30,tocIndex:7},{value:`yarn build
`,paraId:31,tocIndex:7},{value:"If you used ",paraId:32,tocIndex:7},{value:"create-nocobase-app",paraId:32,tocIndex:7},{value:" to create the project, simply run:",paraId:32,tocIndex:7},{value:`yarn build @nocobase-sample/plugin-component-and-scope-local --tar
`,paraId:33,tocIndex:7},{value:"This will generate the file ",paraId:34,tocIndex:7},{value:"storage/tar/@nocobase-sample/plugin-component-and-scope-local.tar.gz",paraId:34,tocIndex:7},{value:", which you can then upload using the ",paraId:34,tocIndex:7},{value:"plugin upload method",paraId:35,tocIndex:7},{value:".",paraId:34,tocIndex:7}]},676802:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"SchemaInitializer",paraId:0,tocIndex:0},{value:" \u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49\u3002",paraId:1,tocIndex:0},{value:"\u6839\u636E\u9700\u6C42\u4E0D\u540C\u53EF\u80FD\u6709\u4EE5\u4E0B\u6269\u5C55\u573A\u666F\uFF1A",paraId:2,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 Initializer \u4E2D\u6DFB\u52A0\u5B50\u9879",paraId:3,tocIndex:0},{value:"\u521B\u5EFA\u65B0\u7684 Initializer",paraId:3,tocIndex:0},{value:"\u6839\u636E\u4EE5\u4E0A\u573A\u666F\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E86\u5982\u4E0B\u793A\u4F8B\uFF1A",paraId:4,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 Add block \u91CC\u6DFB\u52A0\u65B0\u5B50\u9879",paraId:5,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 Configure actions \u91CC\u6DFB\u52A0\u65B0\u5B50\u9879",paraId:6,tocIndex:0},{value:"\u590D\u7528\u5DF2\u6709\u7684 Initializer \u5B50\u9879",paraId:7,tocIndex:0},{value:"\u521B\u5EFA\u5E76\u4F7F\u7528\u65B0\u7684 Initializer",paraId:8,tocIndex:0}]},295032:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In NocoBase, there are many ",paraId:0,tocIndex:1},{value:"Configure actions",paraId:0,tocIndex:1},{value:" used to add operation buttons to the interface.",paraId:0,tocIndex:1},{value:"If the existing action buttons do not fully meet our needs, we can add sub-items to the current ",paraId:1,tocIndex:1},{value:"Configure actions",paraId:1,tocIndex:1},{value:" to create new action buttons.",paraId:1,tocIndex:1},{value:"In this example, we will create a button that, when clicked, opens a popup. The popup contains a document embedded in an iframe. This button will be added to the ",paraId:2,tocIndex:2},{value:"Table",paraId:2,tocIndex:2},{value:", ",paraId:2,tocIndex:2},{value:"Details",paraId:2,tocIndex:2},{value:", and ",paraId:2,tocIndex:2},{value:"Form",paraId:2,tocIndex:2},{value:" blocks within the ",paraId:2,tocIndex:2},{value:"Configure actions",paraId:2,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"The complete example code can be found in ",paraId:3,tocIndex:2},{value:"plugin-samples",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Follow the instructions in ",paraId:4,tocIndex:3},{value:"Creating Your First Plugin",paraId:5,tocIndex:3},{value:". If you don\u2019t already have a project, you can create one. If you already have one or have cloned the source code, you can skip this step.",paraId:4,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:6,tocIndex:3},{value:"Next, initialize a plugin and add it to the system:",paraId:7,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-initializer-action-modal
yarn pm enable @nocobase-sample/plugin-initializer-action-modal
`,paraId:8,tocIndex:3},{value:"Then, start the project:",paraId:9,tocIndex:3},{value:`yarn dev
`,paraId:10,tocIndex:3},{value:"After logging in, visit ",paraId:11,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:11,tocIndex:3},{value:" to verify that the plugin is installed and enabled.",paraId:11,tocIndex:3},{value:"Before implementing this example, we need to understand some foundational knowledge:",paraId:12,tocIndex:4},{value:"Action Component",paraId:13,tocIndex:4},{value:"SchemaInitializer Tutorial",paraId:14,tocIndex:4},{value:": Used to add blocks, fields, actions, etc., to the interface",paraId:13,tocIndex:4},{value:"SchemaInitializer API",paraId:13,tocIndex:4},{value:": Also for adding blocks, fields, actions, etc., to the interface",paraId:13,tocIndex:4},{value:"UI Schema",paraId:15,tocIndex:4},{value:": Defines the structure and style of the interface",paraId:13,tocIndex:4},{value:"Designable Designer",paraId:16,tocIndex:4},{value:": Used to modify the schema",paraId:13,tocIndex:4},{value:`.
\u251C\u2500\u2500 client # Client-side plugin
\u2502   \u251C\u2500\u2500 initializer # Initializer
\u2502   \u251C\u2500\u2500 index.tsx # Client-side plugin entry point
\u2502   \u251C\u2500\u2500 locale.ts # Localization utility functions
\u2502   \u251C\u2500\u2500 constants.ts # Constants
\u2502   \u251C\u2500\u2500 schema # Schema
\u2502   \u2514\u2500\u2500 settings # Schema Settings
\u251C\u2500\u2500 locale # Localization files
\u2502   \u251C\u2500\u2500 en-US.json # English
\u2502   \u2514\u2500\u2500 zh-CN.json # Chinese
\u251C\u2500\u2500 index.ts # Server-side plugin entry point
\u2514\u2500\u2500 server # Server-side plugin
`,paraId:17,tocIndex:4},{value:"First, we need to define the action name, which will be used in several places.",paraId:18,tocIndex:5},{value:"Create the file ",paraId:19,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/constants.ts",paraId:19,tocIndex:5},{value:":",paraId:19,tocIndex:5},{value:`export const ActionName = 'Open Document';
export const ActionNameLowercase = 'open-document';
`,paraId:20,tocIndex:5},{value:"NocoBase\u2019s dynamic pages are rendered using schemas, so we need to define a schema for later use to add elements to the interface. Before proceeding, we need to understand the following concepts:",paraId:21,tocIndex:7},{value:"Action Component",paraId:22,tocIndex:7},{value:"Action.Drawer Component",paraId:22,tocIndex:7},{value:"UI Schema Protocol",paraId:23,tocIndex:7},{value:": This document explains the structure of the schema and the purpose of each attribute",paraId:22,tocIndex:7},{value:"We will create a new file, ",paraId:24,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/schema/index.ts",paraId:24,tocIndex:7},{value:", with the following content:",paraId:24,tocIndex:7},{value:`import { ISchema } from "@nocobase/client"
import { tStr } from "../locale";
import { ActionName } from "../constants";

export const createDocumentActionModalSchema = (blockComponent: string): ISchema => {
  return {
    type: 'void',
    'x-component': 'Action',
    title: tStr(ActionName),
    'x-component-props': {
      type: 'primary'
    },
    properties: {
      drawer: {
        type: 'void',
        'x-component': 'Action.Drawer',
        'x-component-props': {
          size: 'large'
        },
        properties: {
          iframe: {
            type: 'void',
            'x-component': 'iframe',
            'x-component-props': {
              src: \`https://client.docs.nocobase.com/components/\${blockComponent}\`,
              style: {
                border: 'none',
                width: '100%',
                height: '100%'
              }
            },
          }
        }
      },
    },
  }
}
`,paraId:25,tocIndex:7},{value:"The ",paraId:26,tocIndex:7},{value:"createDocumentActionModalSchema",paraId:26,tocIndex:7},{value:" component accepts a ",paraId:26,tocIndex:7},{value:"blockComponent",paraId:26,tocIndex:7},{value:" parameter and returns a schema. This schema adds a button to the interface that, when clicked, opens a popup. The popup contains an iframe with the block's document as its source.",paraId:26,tocIndex:7},{value:"createDocumentActionModalSchema",paraId:27,tocIndex:7},{value:":",paraId:27,tocIndex:7},{value:"type",paraId:28,tocIndex:7},{value:": Specifies the type of component. Here, it\u2019s ",paraId:28,tocIndex:7},{value:"void",paraId:28,tocIndex:7},{value:", meaning it\u2019s a purely UI component",paraId:28,tocIndex:7},{value:"x-component: 'Action'",paraId:28,tocIndex:7},{value:": ",paraId:28,tocIndex:7},{value:"Action Component",paraId:28,tocIndex:7},{value:", used to generate a button",paraId:28,tocIndex:7},{value:"title: 'Open Document'",paraId:28,tocIndex:7},{value:": The title of the button",paraId:28,tocIndex:7},{value:"properties",paraId:28,tocIndex:7},{value:`: Child nodes
`,paraId:28,tocIndex:7},{value:"'x-component': 'Action.Drawer'",paraId:29,tocIndex:7},{value:": Refers to the Action.Drawer component",paraId:29,tocIndex:7},{value:"For more details on the schema, refer to the ",paraId:30,tocIndex:7},{value:"UI Schema",paraId:31,tocIndex:7},{value:" documentation.",paraId:30,tocIndex:7},{value:"There are two methods for validating the schema:",paraId:32,tocIndex:8},{value:"Temporary page validation: You can create a temporary page, render the schema, and check if it meets the requirements",paraId:33,tocIndex:8},{value:"Documentation example validation: Start the documentation by running ",paraId:33,tocIndex:8},{value:"yarn doc plugins/@nocobase-sample/plugin-initializer-action-modal",paraId:33,tocIndex:8},{value:", and validate by creating a documentation example (TODO)",paraId:33,tocIndex:8},{value:"We\u2019ll use the ",paraId:34,tocIndex:8},{value:"Temporary Page Validation",paraId:34,tocIndex:8},{value:" method. Create a new page, add one or more examples based on the attribute parameters, and check if they meet the requirements.",paraId:34,tocIndex:8},{value:`import React from 'react';
import { Plugin, SchemaComponent } from '@nocobase/client';
import { createDocumentActionModalSchema } from './schema';

export class PluginInitializerActionModalClient extends Plugin {
  async load() {
    this.app.router.add('admin.open-document-schema', {
      path: '/admin/open-document-schema',
      Component: () => {
        return <>
          <div style={{ marginTop: 20, marginBottom: 20 }}>
            <SchemaComponent schema={{ properties: { test1: createDocumentActionModalSchema('table-v2') } }} />
          </div>
          <div style={{ marginTop: 20, marginBottom: 20 }}>
            <SchemaComponent schema={{ properties: { test2: createDocumentActionModalSchema('details') } }} />
          </div>
        </>
      }
    })
  }
}

export default PluginInitializerActionModalClient;
`,paraId:35,tocIndex:8},{value:"Afterward, visit ",paraId:36,tocIndex:8},{value:"http://localhost:13000/admin/open-document-schema",paraId:36,tocIndex:8},{value:" to view the temporary page we\u2019ve added.",paraId:36,tocIndex:8},{value:"For detailed information on ",paraId:37,tocIndex:8},{value:"SchemaComponent",paraId:37,tocIndex:8},{value:", refer to the ",paraId:37,tocIndex:8},{value:"SchemaComponent",paraId:37,tocIndex:8},{value:" documentation.",paraId:37,tocIndex:8},{value:"Once validation is complete, be sure to remove the test page.",paraId:38,tocIndex:8},{value:"We will add a new file ",paraId:39,tocIndex:9},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/initializer/index.ts",paraId:39,tocIndex:9},{value:":",paraId:39,tocIndex:9},{value:`import { SchemaInitializerItemType, useSchemaInitializer } from "@nocobase/client"

import { useT } from "../locale";
import { createDocumentActionModalSchema } from '../schema';
import { ActionName, ActionNameLowercase } from "../constants";

export const createDocumentActionModalInitializerItem = (blockComponent: string): SchemaInitializerItemType => ({
  type: 'item',
  title: ActionName,
  name: ActionNameLowercase,
  useComponentProps() {
    const { insert } = useSchemaInitializer();
    const t = useT();
    return {
      title: t(ActionName),
      onClick: () => {
        insert(createDocumentActionModalSchema(blockComponent));
      },
    };
  },
})
`,paraId:40,tocIndex:9},{value:"Since we need to generate different ",paraId:41,tocIndex:9},{value:"DocumentActionModal",paraId:41,tocIndex:9},{value:" instances based on various ",paraId:41,tocIndex:9},{value:"blockComponent",paraId:41,tocIndex:9},{value:" values, we define the ",paraId:41,tocIndex:9},{value:"createDocumentActionModalInitializerItem",paraId:41,tocIndex:9},{value:" function to generate the corresponding Schema Initializer Item.",paraId:41,tocIndex:9},{value:"type",paraId:42,tocIndex:9},{value:": This is set as ",paraId:42,tocIndex:9},{value:"item",paraId:42,tocIndex:9},{value:", indicating a text element that triggers an event upon clicking, inserting a new Schema.",paraId:42,tocIndex:9},{value:"name",paraId:42,tocIndex:9},{value:": A unique identifier that helps distinguish between different Schema Items and operations, such as creating, reading, updating, and deleting.",paraId:42,tocIndex:9},{value:"useComponentProps",paraId:42,tocIndex:9},{value:": Returns an object that includes the ",paraId:42,tocIndex:9},{value:"title",paraId:42,tocIndex:9},{value:" and ",paraId:42,tocIndex:9},{value:"onClick",paraId:42,tocIndex:9},{value:" properties. The ",paraId:42,tocIndex:9},{value:"title",paraId:42,tocIndex:9},{value:" is the displayed text, and ",paraId:42,tocIndex:9},{value:"onClick",paraId:42,tocIndex:9},{value:" is the callback function executed when clicked.",paraId:42,tocIndex:9},{value:"useSchemaInitializer",paraId:42,tocIndex:9},{value:": Retrieves the ",paraId:42,tocIndex:9},{value:"SchemaInitializerContext",paraId:42,tocIndex:9},{value:", which provides methods for operational tasks.",paraId:42,tocIndex:9},{value:"For further details on defining Schema Items, refer to the ",paraId:43,tocIndex:9},{value:"Schema Initializer Item",paraId:43,tocIndex:9},{value:" documentation.",paraId:43,tocIndex:9},{value:"At the moment, once added via ",paraId:44,tocIndex:11},{value:"createDocumentActionInitializerItem()",paraId:44,tocIndex:11},{value:", items cannot be removed. We can address this by using ",paraId:44,tocIndex:11},{value:"Schema Settings",paraId:44,tocIndex:11},{value:".",paraId:44,tocIndex:11},{value:"We will add a new file: ",paraId:45,tocIndex:11},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/settings/index.ts",paraId:45,tocIndex:11},{value:":",paraId:45,tocIndex:11},{value:`import { SchemaSettings } from "@nocobase/client";
import { ActionNameLowercase } from "../constants";

export const documentActionModalSettings = new SchemaSettings({
  name: \`actionSettings:\${ActionNameLowercase}\`,
  items: [
    {
      name: 'remove',
      type: 'remove',
    }
  ]
});
`,paraId:46,tocIndex:11},{value:`import { Plugin } from '@nocobase/client';
import { documentActionModalSettings } from './settings';

export class PluginInitializerActionModalClient extends Plugin {
  async load() {
    this.app.schemaSettingsManager.add(documentActionModalSettings);
  }
}

export default PluginInitializerActionModalClient;
`,paraId:47,tocIndex:12},{value:"We will modify the ",paraId:48,tocIndex:13},{value:"createDocumentActionModalSchema",paraId:48,tocIndex:13},{value:" function in ",paraId:48,tocIndex:13},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/schema/index.ts",paraId:48,tocIndex:13},{value:", adding ",paraId:48,tocIndex:13},{value:"documentActionModalSettings",paraId:48,tocIndex:13},{value:" to ",paraId:48,tocIndex:13},{value:"x-settings",paraId:48,tocIndex:13},{value:".",paraId:48,tocIndex:13},{value:`export const createDocumentActionModalSchema = (blockComponent: string): ISchema => {
  return {
    type: 'void',
    'x-component': 'Action',
+   'x-settings': documentActionModalSettings.name,
    // ..
  }
}
`,paraId:49,tocIndex:13},{value:"There are several ",paraId:50,tocIndex:14},{value:"Configure actions",paraId:50,tocIndex:14},{value:" buttons in the system, but their ",paraId:50,tocIndex:14},{value:"names differ",paraId:50,tocIndex:14},{value:". We will add the necessary items to the ",paraId:50,tocIndex:14},{value:"Table",paraId:50,tocIndex:14},{value:", ",paraId:50,tocIndex:14},{value:"Details",paraId:50,tocIndex:14},{value:", and ",paraId:50,tocIndex:14},{value:"Form",paraId:50,tocIndex:14},{value:" sections' ",paraId:50,tocIndex:14},{value:"Configure actions",paraId:50,tocIndex:14},{value:".",paraId:50,tocIndex:14},{value:"First, we will identify the appropriate names:",paraId:51,tocIndex:14},{value:"TODO",paraId:52,tocIndex:14},{value:"Then, modify the ",paraId:53,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-modal/src/client/index.tsx",paraId:53,tocIndex:14},{value:" file:",paraId:53,tocIndex:14},{value:`import { Plugin } from '@nocobase/client';
import { documentActionModalSettings } from './documentActionModalSettings';
import { createDocumentActionModalInitializerItem } from './documentActionModalInitializerItem';

export class PluginInitializerActionModalClient extends Plugin {
  async load() {
    this.app.schemaSettingsManager.add(documentActionModalSettings);
+   this.app.schemaInitializerManager.addItem('table:configureActions', 'open-document', createDocumentActionModalInitializerItem('table-v2'));
+   this.app.schemaInitializerManager.addItem('details:configureActions', 'open-document', createDocumentActionModalInitializerItem('details'));
+   this.app.schemaInitializerManager.addItem('createForm:configureActions', 'open-document', createDocumentActionModalInitializerItem('form-v2'));
  }
}

export default PluginInitializerActionModalClient;
`,paraId:54,tocIndex:14},{value:"Changes to the language files will take effect only after restarting the service.",paraId:55},{value:"We will edit the file ",paraId:56,tocIndex:16},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/locale/en-US.json",paraId:56,tocIndex:16},{value:":",paraId:56,tocIndex:16},{value:`{
  "Document": "Document"
}
`,paraId:57,tocIndex:16},{value:"We will edit the file ",paraId:58,tocIndex:17},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/locale/zh-CN.json",paraId:58,tocIndex:17},{value:":",paraId:58,tocIndex:17},{value:`{
  "Document": "\u6587\u6863"
}
`,paraId:59,tocIndex:17},{value:"If additional language support is required, more languages can be added.",paraId:60,tocIndex:17},{value:"You can manage multiple languages and switch between them through the UI at ",paraId:61,tocIndex:17},{value:"http://localhost:13000/admin/settings/system-settings",paraId:61,tocIndex:17},{value:".",paraId:61,tocIndex:17},{value:"Following the guidelines outlined in the ",paraId:62,tocIndex:18},{value:"Build and Package Plugins",paraId:63,tocIndex:18},{value:" documentation, we can package the plugin and deploy it to the production environment.",paraId:62,tocIndex:18},{value:"For cloned source code, ensure a full build is executed first to compile plugin dependencies:",paraId:64,tocIndex:18},{value:`yarn build
`,paraId:65,tocIndex:18},{value:"For projects created using ",paraId:66,tocIndex:18},{value:"create-nocobase-app",paraId:66,tocIndex:18},{value:", execute the following:",paraId:66,tocIndex:18},{value:`yarn build @nocobase-sample/plugin-initializer-action-modal --tar
`,paraId:67,tocIndex:18},{value:"This will generate the file ",paraId:68,tocIndex:18},{value:"storage/tar/@nocobase-sample/plugin-initializer-action-modal.tar.gz",paraId:68,tocIndex:18},{value:", which can then be installed by following the ",paraId:68,tocIndex:18},{value:"upload process",paraId:69,tocIndex:18},{value:".",paraId:68,tocIndex:18}]},184830:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase provides various ",paraId:0,tocIndex:1},{value:"Configure actions",paraId:0,tocIndex:1},{value:" for adding action buttons to the interface.",paraId:0,tocIndex:1},{value:"If the existing action buttons do not fully meet our needs, we can add new buttons by creating sub-items within the ",paraId:1,tocIndex:1},{value:"Configure actions",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:'The term "simple action" in the title refers to actions that do not require a popup. For details on how to add a popup action, refer to ',paraId:2,tocIndex:1},{value:"Adding a Popup Action",paraId:3,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"This example creates a button that opens the corresponding block's documentation when clicked. This button will be added to the ",paraId:4,tocIndex:2},{value:"Table",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Details",paraId:4,tocIndex:2},{value:", and ",paraId:4,tocIndex:2},{value:"Form",paraId:4,tocIndex:2},{value:" blocks within the ",paraId:4,tocIndex:2},{value:"Configure actions",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:"You can view the complete sample code in ",paraId:5,tocIndex:2},{value:"plugin-samples",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:`
  `,paraId:6},{value:"Following the instructions in the ",paraId:7,tocIndex:3},{value:"Writing Your First Plugin",paraId:8,tocIndex:3},{value:" document, you can create a project if one does not already exist. If you have an existing project or cloned the source code, skip this step.",paraId:7,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:9,tocIndex:3},{value:"Next, initialize a plugin and add it to the system:",paraId:10,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-initializer-action-simple
yarn pm enable @nocobase-sample/plugin-initializer-action-simple
`,paraId:11,tocIndex:3},{value:"Then, start the project:",paraId:12,tocIndex:3},{value:`yarn dev
`,paraId:13,tocIndex:3},{value:"Once logged in, visit ",paraId:14,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:14,tocIndex:3},{value:" to confirm that the plugin is installed and enabled.",paraId:14,tocIndex:3},{value:"Before implementing this example, we need to understand some basic concepts:",paraId:15,tocIndex:4},{value:"Action Component",paraId:16,tocIndex:4},{value:"SchemaInitializer Tutorial",paraId:17,tocIndex:4},{value:": Used for adding various blocks, fields, and actions to the interface.",paraId:16,tocIndex:4},{value:"SchemaInitializer API",paraId:16,tocIndex:4},{value:": Used for adding various blocks, fields, and actions to the interface.",paraId:16,tocIndex:4},{value:"UI Schema",paraId:18,tocIndex:4},{value:": Defines the structure and style of the interface.",paraId:16,tocIndex:4},{value:"Designable Designer",paraId:19,tocIndex:4},{value:": Used for modifying the schema.",paraId:16,tocIndex:4},{value:`.
\u251C\u2500\u2500 client # Client-side plugin
\u2502   \u251C\u2500\u2500 initializer # Initializer
\u2502   \u251C\u2500\u2500 index.tsx # Client-side plugin entry
\u2502   \u251C\u2500\u2500 locale.ts # Multilingual utility functions
\u2502   \u251C\u2500\u2500 constants.ts # Constants
\u2502   \u251C\u2500\u2500 schema # Schema
\u2502   \u2514\u2500\u2500 settings # Schema Settings
\u251C\u2500\u2500 locale # Multilingual files
\u2502   \u251C\u2500\u2500 en-US.json # English
\u2502   \u2514\u2500\u2500 zh-CN.json # Chinese
\u251C\u2500\u2500 index.ts # Server-side plugin entry
\u2514\u2500\u2500 server # Server-side plugin
`,paraId:20,tocIndex:4},{value:"First, we need to define the action name, which will be used in various places.",paraId:21,tocIndex:5},{value:"Create the file ",paraId:22,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/client/constants.ts",paraId:22,tocIndex:5},{value:":",paraId:22,tocIndex:5},{value:`export const ActionName = 'Document';
export const ActionNameLowercase = ActionName.toLowerCase();
`,paraId:23,tocIndex:5},{value:"NocoBase\u2019s dynamic pages are rendered through schemas, so we need to define a schema that will be used to add the button to the interface. Before proceeding, it's important to understand some basic concepts:",paraId:24,tocIndex:7},{value:"Action Component",paraId:25,tocIndex:7},{value:"UI Schema Protocol",paraId:26,tocIndex:7},{value:": Detailed introduction to the structure and functionality of schema attributes.",paraId:25,tocIndex:7},{value:"Create the file ",paraId:27,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/client/schema/index.ts",paraId:27,tocIndex:7},{value:" with the following content:",paraId:27,tocIndex:7},{value:`import { useFieldSchema } from '@formily/react';
import { ISchema } from "@nocobase/client"
import { useT } from '../locale';
import { ActionName } from '../constants';

export function useDocumentActionProps() {
  const fieldSchema = useFieldSchema();
  const t = useT();
  return {
    title: t(ActionName),
    type: 'primary',
    onClick() {
      window.open(fieldSchema['x-doc-url'])
    }
  }
}

export const createDocumentActionSchema = (blockComponent: string): ISchema & { 'x-doc-url': string } => {
  return {
    type: 'void',
    'x-component': 'Action',
    'x-doc-url': \`https://client.docs.nocobase.com/components/\${blockComponent}\`,
    'x-use-component-props': 'useDocumentActionProps',
  }
}
`,paraId:28,tocIndex:7},{value:"The ",paraId:29,tocIndex:7},{value:"createDocumentActionSchema",paraId:29,tocIndex:7},{value:" component takes a ",paraId:29,tocIndex:7},{value:"blockComponent",paraId:29,tocIndex:7},{value:" parameter and returns a schema that adds a button to the interface, which opens the corresponding block\u2019s documentation when clicked.",paraId:29,tocIndex:7},{value:"createDocumentActionSchema",paraId:30,tocIndex:7},{value:":",paraId:30,tocIndex:7},{value:"type",paraId:31,tocIndex:7},{value:": Type, here it's ",paraId:31,tocIndex:7},{value:"void",paraId:31,tocIndex:7},{value:", meaning a pure UI component.",paraId:31,tocIndex:7},{value:"x-component: 'Action'",paraId:31,tocIndex:7},{value:": ",paraId:31,tocIndex:7},{value:"Action Component",paraId:31,tocIndex:7},{value:" used to create a button.",paraId:31,tocIndex:7},{value:"title: 'Document'",paraId:31,tocIndex:7},{value:": Button title.",paraId:31,tocIndex:7},{value:"x-doc-url",paraId:31,tocIndex:7},{value:": A custom schema property representing the documentation URL.",paraId:31,tocIndex:7},{value:"x-use-component-props: 'useDocumentActionProps'",paraId:31,tocIndex:7},{value:": Dynamic properties, more details can be found in ",paraId:31,tocIndex:7},{value:"the documentation",paraId:32,tocIndex:7},{value:".",paraId:31,tocIndex:7},{value:"useDocumentActionProps()",paraId:33,tocIndex:7},{value:":",paraId:33,tocIndex:7},{value:"useFieldSchema()",paraId:34,tocIndex:7},{value:": Retrieves the schema of the current node.",paraId:34,tocIndex:7},{value:"type: 'primary'",paraId:34,tocIndex:7},{value:": Button type.",paraId:34,tocIndex:7},{value:"onClick",paraId:34,tocIndex:7},{value:": Click event, opens the corresponding block\u2019s documentation.",paraId:34,tocIndex:7},{value:"For more details on schemas, refer to the ",paraId:35,tocIndex:7},{value:"UI Schema",paraId:36,tocIndex:7},{value:" documentation.",paraId:35,tocIndex:7},{value:"Currently, after adding through ",paraId:37,tocIndex:9},{value:"createDocumentActionInitializerItem()",paraId:37,tocIndex:9},{value:", items cannot be deleted. We can use ",paraId:37,tocIndex:9},{value:"Schema Settings",paraId:37,tocIndex:9},{value:" for configuration.",paraId:37,tocIndex:9},{value:"We add a new file ",paraId:38,tocIndex:9},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/client/settings/index.ts",paraId:38,tocIndex:9},{value:":",paraId:38,tocIndex:9},{value:`import { SchemaSettings } from "@nocobase/client";

import { ActionNameLowercase } from "../constants";

export const documentActionSettings = new SchemaSettings({
  name: \`actionSettings:\${ActionNameLowercase}\`,
  items: [
    {
      name: 'remove',
      type: 'remove',
    }
  ]
});
`,paraId:39,tocIndex:9},{value:`import { Plugin } from '@nocobase/client';
import { useDocumentActionProps } from './schema';
+ import { documentActionSettings } from './settings';

export class PluginInitializerActionSimpleClient extends Plugin {
  async load() {
    this.app.addScopes({ useDocumentActionProps });
+   this.app.schemaSettingsManager.add(documentActionSettings);
  }
}

export default PluginInitializerActionSimpleClient;
`,paraId:40,tocIndex:10},{value:"We modify the ",paraId:41,tocIndex:11},{value:"createDocumentActionSchema",paraId:41,tocIndex:11},{value:" in ",paraId:41,tocIndex:11},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/client/schema/index.ts",paraId:41,tocIndex:11},{value:":",paraId:41,tocIndex:11},{value:`+ import { documentActionSettings } from '../settings';

export const createDocumentActionSchema = (blockComponent: string): ISchema & { 'x-doc-url': string } => {
  return {
    type: 'void',
    'x-component': 'Action',
+   'x-settings': documentActionSettings.name,
    // ...
  }
}
`,paraId:42,tocIndex:11},{value:"There are many ",paraId:43,tocIndex:12},{value:"Configure actions",paraId:43,tocIndex:12},{value:" buttons in the system, but their ",paraId:43,tocIndex:12},{value:"names are different",paraId:43,tocIndex:12},{value:". We need to add them to the ",paraId:43,tocIndex:12},{value:"Table",paraId:43,tocIndex:12},{value:", ",paraId:43,tocIndex:12},{value:"Details",paraId:43,tocIndex:12},{value:", and ",paraId:43,tocIndex:12},{value:"Form",paraId:43,tocIndex:12},{value:" blocks based on specific requirements.",paraId:43,tocIndex:12},{value:"First, let's find the corresponding names:",paraId:44,tocIndex:12},{value:"TODO",paraId:45,tocIndex:12},{value:"Next, we modify the ",paraId:46,tocIndex:12},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/client/index.tsx",paraId:46,tocIndex:12},{value:" file:",paraId:46,tocIndex:12},{value:`import { Plugin } from '@nocobase/client';
import { useDocumentActionProps } from './schema';
import { documentActionSettings } from './settings';
+ import { createDocumentActionInitializerItem } from './initializer';

export class PluginInitializerActionSimpleClient extends Plugin {
  async load() {
    this.app.addScopes({ useDocumentActionProps });
    this.app.schemaSettingsManager.add(documentActionSettings);
+   this.app.schemaInitializerManager.addItem('table:configureActions', 'document', createDocumentActionInitializerItem('table-v2'));
+   this.app.schemaInitializerManager.addItem('details:configureActions', 'document', createDocumentActionInitializerItem('details'));
+   this.app.schemaInitializerManager.addItem('createForm:configureActions', 'document', createDocumentActionInitializerItem('form-v2'));
  }
}

export default PluginInitializerActionSimpleClient;
`,paraId:47,tocIndex:12},{value:`
  `,paraId:6},{value:"After modifying the multi-language files, you need to restart the service for the changes to take effect.",paraId:48},{value:"We edit the ",paraId:49,tocIndex:14},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/locale/en-US.json",paraId:49,tocIndex:14},{value:" file:",paraId:49,tocIndex:14},{value:`{
  "Document": "Document"
}
`,paraId:50,tocIndex:14},{value:"We edit the ",paraId:51,tocIndex:15},{value:"packages/plugins/@nocobase-sample/plugin-initializer-action-simple/src/locale/zh-CN.json",paraId:51,tocIndex:15},{value:" file:",paraId:51,tocIndex:15},{value:`{
  "Document": "\u6587\u6863"
}
`,paraId:52,tocIndex:15},{value:"If more language support is needed, additional entries can be added.",paraId:53,tocIndex:15},{value:"You can add multiple languages via ",paraId:54,tocIndex:15},{value:"http://localhost:13000/admin/settings/system-settings",paraId:54,tocIndex:15},{value:" and switch languages in the upper right corner.",paraId:54,tocIndex:15},{value:"Following the ",paraId:55,tocIndex:16},{value:"Build and Package Plugin",paraId:56,tocIndex:16},{value:" guide, we can package the plugin and upload it to the production environment.",paraId:55,tocIndex:16},{value:"If the source code was cloned, a full build is needed first to construct the plugin dependencies.",paraId:57,tocIndex:16},{value:`yarn build
`,paraId:58,tocIndex:16},{value:"If the project was created using ",paraId:59,tocIndex:16},{value:"create-nocobase-app",paraId:59,tocIndex:16},{value:", simply run:",paraId:59,tocIndex:16},{value:`yarn build @nocobase-sample/plugin-initializer-action-simple --tar
`,paraId:60,tocIndex:16},{value:"Afterward, you will see the file ",paraId:61,tocIndex:16},{value:"storage/tar/@nocobase-sample/plugin-initializer-action-simple.tar.gz",paraId:61,tocIndex:16},{value:", which can be uploaded for installation following the ",paraId:61,tocIndex:16},{value:"upload guide",paraId:62,tocIndex:16},{value:".",paraId:61,tocIndex:16}]},302384:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5982\u679C\u65B0\u521B\u5EFA\u7684\u533A\u5757\u662F\u4E00\u4E2A\u590D\u6742\u7684\u6570\u636E\u533A\u5757\uFF0C\u90A3\u4E48\u5B83\u5185\u90E8\u53EF\u80FD\u5305\u542B\u591A\u4E2A\u52A8\u6001\u6DFB\u52A0\u7684\u90E8\u5206\uFF0C\u5176\u4E2D\u91CD\u70B9\u5C31\u662F\u901A\u8FC7 ",paraId:0,tocIndex:1},{value:"Configure fields",paraId:0,tocIndex:1},{value:" \u5BF9\u5E94\u7684 initializer \u52A8\u6001\u6DFB\u52A0\u5B57\u6BB5\u3002\u4F8B\u5982 ",paraId:0,tocIndex:1},{value:"Form",paraId:0,tocIndex:1},{value:" \u533A\u5757\uFF0C\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7 ",paraId:0,tocIndex:1},{value:"Configure fields",paraId:0,tocIndex:1},{value:" \u6765\u914D\u7F6E\u663E\u793A\u7684\u5B57\u6BB5\u3002",paraId:0,tocIndex:1},{value:"\u672C\u5B9E\u4F8B\u4F1A\u5728 ",paraId:1,tocIndex:2},{value:"\u6DFB\u52A0\u6570\u636E\u533A\u5757 Data Block",paraId:2,tocIndex:2},{value:" \u57FA\u7840\u4E0A\u7EE7\u7EED\u5B9E\u73B0\u7C7B\u4F3C ",paraId:1,tocIndex:2},{value:"Form",paraId:1,tocIndex:2},{value:" \u533A\u5757\u7684\u6548\u679C\uFF0C\u901A\u8FC7 ",paraId:1,tocIndex:2},{value:"Configure fields",paraId:1,tocIndex:2},{value:" \u6765\u914D\u7F6E\u663E\u793A\u7684\u5B57\u6BB5\u3002",paraId:1,tocIndex:2},{value:"\u672C\u6587\u6863\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801\u53EF\u4EE5\u5728 ",paraId:3,tocIndex:2},{value:"plugin-samples",paraId:3,tocIndex:2},{value:" \u4E2D\u67E5\u770B\u3002",paraId:3,tocIndex:2},{value:`
  `,paraId:4},{value:"\u6211\u4EEC\u6309\u7167 ",paraId:5,tocIndex:3},{value:"\u7F16\u5199\u7B2C\u4E00\u4E2A\u63D2\u4EF6",paraId:6,tocIndex:3},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u5982\u679C\u6CA1\u6709\u4E00\u4E2A\u9879\u76EE\uFF0C\u53EF\u4EE5\u5148\u521B\u5EFA\u4E00\u4E2A\u9879\u76EE\uFF0C\u5982\u679C\u5DF2\u7ECF\u6709\u4E86\u6216\u8005\u662F clone \u7684\u6E90\u7801\uFF0C\u5219\u8DF3\u8FC7\u8FD9\u4E00\u6B65\u3002",paraId:5,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:7,tocIndex:3},{value:"\u7136\u540E\u521D\u59CB\u5316\u4E00\u4E2A\u63D2\u4EF6\uFF0C\u5E76\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\uFF1A",paraId:8,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-initializer-configure-fields
yarn pm enable @nocobase-sample/plugin-initializer-configure-fields
`,paraId:9,tocIndex:3},{value:"\u7136\u540E\u542F\u52A8\u9879\u76EE\u5373\u53EF\uFF1A",paraId:10,tocIndex:3},{value:`yarn dev
`,paraId:11,tocIndex:3},{value:"\u7136\u540E\u767B\u5F55\u540E\u8BBF\u95EE ",paraId:12,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:12,tocIndex:3},{value:" \u5C31\u53EF\u4EE5\u770B\u5230\u63D2\u4EF6\u5DF2\u7ECF\u5B89\u88C5\u5E76\u542F\u7528\u4E86\u3002",paraId:12,tocIndex:3},{value:"\u5728\u5B9E\u73B0\u672C\u793A\u4F8B\u4E4B\u524D\uFF0C\u6211\u4EEC\u9700\u8981\u5148\u4E86\u89E3\u4E00\u4E9B\u57FA\u7840\u77E5\u8BC6\uFF1A",paraId:13,tocIndex:4},{value:"SchemaInitializer \u6559\u7A0B",paraId:14,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49",paraId:15,tocIndex:4},{value:"SchemaInitializer API",paraId:15,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49",paraId:15,tocIndex:4},{value:"UI Schema",paraId:16,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u5B9A\u4E49\u754C\u9762\u7684\u7ED3\u6784\u548C\u6837\u5F0F",paraId:15,tocIndex:4},{value:"Designable \u8BBE\u8BA1\u5668",paraId:17,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u4FEE\u6539 Schema",paraId:15,tocIndex:4},{value:"\u524D\u9762\u5DF2\u7ECF\u8BF4\u660E\u672C\u793A\u4F8B\u4F1A\u5728 ",paraId:18,tocIndex:5},{value:"\u6DFB\u52A0\u6570\u636E\u533A\u5757 Data Block",paraId:19,tocIndex:5},{value:" \u57FA\u7840\u4E0A\u7EE7\u7EED\u5B9E\u73B0\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u590D\u5236 ",paraId:18,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-initializer-block-data/src/client",paraId:18,tocIndex:5},{value:" \u76EE\u5F55\u8986\u76D6 ",paraId:18,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client",paraId:18,tocIndex:5},{value:"\u3002",paraId:18,tocIndex:5},{value:"\u7136\u540E\u4FEE\u6539 ",paraId:20,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/index.tsx",paraId:20,tocIndex:5},{value:"\uFF1A",paraId:20,tocIndex:5},{value:`import { Plugin } from '@nocobase/client';
import { InfoBlock, infoBlockSettings, infoBlockInitializerItem } from './InfoBlock';

- export class PluginInitializerBlockDataClient extends Plugin {
+ export class PluginInitializerConfigureFieldsClient extends Plugin {
  async load() {
    // ...
  }
}

- export default PluginInitializerBlockDataClient;
+ export default PluginInitializerConfigureFieldsClient;
`,paraId:21,tocIndex:5},{value:"\u4E3A\u4E86\u907F\u514D\u548C\u5176\u4ED6\u793A\u4F8B\u51B2\u7A81\uFF0C\u628A\u6240\u6709 ",paraId:22,tocIndex:5},{value:"InfoBlock",paraId:22,tocIndex:5},{value:" \u6539\u4E3A\u4E86 ",paraId:22,tocIndex:5},{value:"InfoBlock2",paraId:22,tocIndex:5},{value:"\uFF0C\u4F46\u662F\u672C\u793A\u4F8B\u6587\u6863\u4E2D\u4ECD\u7136\u6309\u7167 ",paraId:22,tocIndex:5},{value:"InfoBlock",paraId:22,tocIndex:5},{value:" \u6765\u8BF4\u660E\u3002",paraId:22,tocIndex:5},{value:"Configure fields",paraId:4},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:23,tocIndex:6},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/configureFields.tsx",paraId:23,tocIndex:6},{value:" \u6587\u4EF6\uFF1A",paraId:23,tocIndex:6},{value:`import { Grid, SchemaInitializer, useSchemaInitializer } from "@nocobase/client";

export const configureFields = new SchemaInitializer({
  name: 'info:configureFields',
  icon: 'SettingOutlined',
  title: 'Configure fields',
  items: [
    {
      type: 'itemGroup',
      name: 'fields',
      title: 'Display fields',
      useChildren() {
        const { insert } = useSchemaInitializer();

        return []
      },
    }
  ]
});
`,paraId:24,tocIndex:6},{value:"SchemaInitializer",paraId:25,tocIndex:6},{value:"\uFF1A\u7528\u4E8E\u521B\u5EFA\u4E00\u4E2A Schema Initializer \u5B9E\u4F8B",paraId:25,tocIndex:6},{value:"icon",paraId:25,tocIndex:6},{value:"\uFF1A\u56FE\u6807\uFF0C\u66F4\u591A\u56FE\u6807\u53EF\u53C2\u8003 Ant Design ",paraId:25,tocIndex:6},{value:"Icons",paraId:25,tocIndex:6},{value:"title",paraId:25,tocIndex:6},{value:"\uFF1A\u6309\u94AE\u6807\u9898",paraId:25,tocIndex:6},{value:"items",paraId:25,tocIndex:6},{value:`\uFF1A\u6309\u94AE\u4E0B\u7684\u5B50\u9879
`,paraId:25,tocIndex:6},{value:"type: 'itemGroup'",paraId:26,tocIndex:6},{value:"\uFF1A\u5B50\u9879\u7C7B\u578B\uFF0C\u7528\u4E8E\u5305\u88C5\u591A\u4E2A\u5B50\u9879",paraId:26,tocIndex:6},{value:"name: 'fields'",paraId:26,tocIndex:6},{value:"\uFF1A\u5B50\u9879\u540D\u79F0",paraId:26,tocIndex:6},{value:"title: 'Display fields'",paraId:26,tocIndex:6},{value:"\uFF1A\u5B50\u9879\u6807\u9898",paraId:26,tocIndex:6},{value:"useChildren",paraId:26,tocIndex:6},{value:"\uFF1A\u5B50\u9879\u7684\u5B50\u9879\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6570\u7EC4\u4E2D\u7684\u6BCF\u4E00\u9879\u90FD\u662F\u4E00\u4E2A\u5B50\u9879",paraId:26,tocIndex:6},{value:"Configure fields",paraId:4},{value:"\u7136\u540E\u4FEE\u6539 ",paraId:27,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/index.tsx",paraId:27,tocIndex:7},{value:" \u6587\u4EF6\uFF0C\u5BFC\u5165\u5E76\u6CE8\u518C\u8FD9\u4E2A initializer\uFF1A",paraId:27,tocIndex:7},{value:`import { configureFields } from './configureFields'

export class PluginInitializerConfigureFieldsClient extends Plugin {
  async load() {
    this.app.schemaInitializerManager.add(configureFields)
  }
}
`,paraId:28,tocIndex:7},{value:"getInfoBlockSchema()",paraId:4},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:29,tocIndex:8},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/InfoBlock.tsx",paraId:29,tocIndex:8},{value:" \u6587\u4EF6\uFF0C\u5C06 ",paraId:29,tocIndex:8},{value:"getInfoBlockSchema()",paraId:29,tocIndex:8},{value:" \u533A\u5757\u4FEE\u6539\u4E3A\uFF1A",paraId:29,tocIndex:8},{value:`function getInfoBlockSchema({ dataSource, collection }) {
  return {
    // ...
    properties: {
      info: {
        type: 'void',
        'x-component': 'InfoBlock',
+       properties: {
+         fields: {
+           type: 'void',
+           'x-component': 'Grid',
+           'x-initializer': 'info:configureFields',
+         }
+       }
      }
    }
  }
}
`,paraId:30,tocIndex:8},{value:"\u6211\u4EEC\u5728 ",paraId:31,tocIndex:8},{value:"InfoBlock",paraId:31,tocIndex:8},{value:" \u7684\u5B50\u8282\u70B9\u4E2D\u6DFB\u52A0\u4E86\u4E00\u4E2A ",paraId:31,tocIndex:8},{value:"fields",paraId:31,tocIndex:8},{value:" \u5B57\u6BB5\uFF0C\u4E3A\u4E86\u66F4\u597D\u7684\u5E03\u5C40\uFF0C\u6211\u4EEC\u4F7F\u7528 ",paraId:31,tocIndex:8},{value:"Grid",paraId:31,tocIndex:8},{value:" \u7EC4\u4EF6\u5305\u88F9\u4E86\u4E00\u4E0B\uFF0C\u5E76\u4E14\u6307\u5B9A\u4E86 ",paraId:31,tocIndex:8},{value:"x-initializer",paraId:31,tocIndex:8},{value:" \u4E3A ",paraId:31,tocIndex:8},{value:"info:configureFields",paraId:31,tocIndex:8},{value:"\uFF0C\u56E0\u4E3A ",paraId:31,tocIndex:8},{value:"Grid",paraId:31,tocIndex:8},{value:" \u5185\u7F6E\u4E86 ",paraId:31,tocIndex:8},{value:"useSchemaInitializerRender()",paraId:31,tocIndex:8},{value:" \u7684\u6E32\u67D3\u903B\u8F91\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\uFF0C\u5982\u679C\u662F\u4E00\u4E2A\u81EA\u5B9A\u4E49\u7684\u7EC4\u4EF6\uFF0C\u9700\u8981\u81EA\u5DF1\u901A\u8FC7 ",paraId:31,tocIndex:8},{value:"useSchemaInitializerRender()",paraId:31,tocIndex:8},{value:" \u5B9E\u73B0\u6E32\u67D3\u903B\u8F91\u3002",paraId:31,tocIndex:8},{value:"InfoBlock",paraId:4},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:32,tocIndex:9},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/InfoBlock.tsx",paraId:32,tocIndex:9},{value:" \u6587\u4EF6\uFF0C\u5C06 ",paraId:32,tocIndex:9},{value:"InfoBlock",paraId:32,tocIndex:9},{value:" \u7EC4\u4EF6\u4FEE\u6539\u4E3A\uFF1A",paraId:32,tocIndex:9},{value:`export const InfoBlock = ({ children }) => {
  return <div>{children}</div>
}
`,paraId:33,tocIndex:9},{value:"properties",paraId:34,tocIndex:9},{value:" \u7684\u5185\u5BB9\u4F1A\u88AB\u4F20\u5165\u5230 ",paraId:34,tocIndex:9},{value:"InfoBlock",paraId:34,tocIndex:9},{value:" \u7EC4\u4EF6\u7684 ",paraId:34,tocIndex:9},{value:"children",paraId:34,tocIndex:9},{value:" \u4E2D\uFF0C\u6240\u4EE5\u6211\u4EEC\u76F4\u63A5\u5C06 ",paraId:34,tocIndex:9},{value:"children",paraId:34,tocIndex:9},{value:" \u6E32\u67D3\u51FA\u6765\u5373\u53EF\u3002",paraId:34,tocIndex:9},{value:`
  `,paraId:4},{value:"Configure fields",paraId:4},{value:"\u6211\u4EEC\u7EE7\u7EED\u4FEE\u6539 ",paraId:35,tocIndex:10},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/configureFields.tsx",paraId:35,tocIndex:10},{value:" \u6587\u4EF6\uFF1A",paraId:35,tocIndex:10},{value:`interface GetFieldInitializerItemOptions {
  collectionField: CollectionFieldOptions;
}

function getFieldInitializerItem(options: GetFieldInitializerItemOptions) {
  const { collectionField } = options;
  const title = collectionField.uiSchema?.title || collectionField.name;
  const name = collectionField.name;
  return {
    name: collectionField.name,
    title: collectionField.uiSchema?.title || collectionField.name,
    type: 'switch',
    onClick() {
      // TODO
    }
  } as SchemaInitializerItemType;
}

export const configureFields = new SchemaInitializer({
  name: 'info:configureFields',
  icon: 'SettingOutlined',
  title: 'Configure fields',
  items: [
    {
      type: 'itemGroup',
      name: 'fields',
      title: 'Display fields',
      useChildren() {
        const collection = useCollection();

        const schemaItems = collection
          .getFields()
          .map<SchemaInitializerItemType>(getFieldInitializerItem({
            collectionField,
          }))

        return schemaItems;
      },
    }
  ]
});
`,paraId:36,tocIndex:10},{value:"useCollection()",paraId:37,tocIndex:10},{value:"\uFF1A\u7528\u4E8E\u83B7\u53D6\u5F53\u524D\u6570\u636E\u8868\u7684\u5B9E\u4F8B\u3002\u5728 ",paraId:37,tocIndex:10},{value:"getInfoBlockSchema()",paraId:37,tocIndex:10},{value:" \u4E2D\u6211\u4EEC\u4F7F\u7528\u4E86 ",paraId:37,tocIndex:10},{value:"DataBlockProvider",paraId:37,tocIndex:10},{value:" \uFF0C\u5176\u5185\u90E8\u5305\u542B\u4E86 ",paraId:37,tocIndex:10},{value:"CollectionProvider",paraId:37,tocIndex:10},{value:" \uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u3002",paraId:37,tocIndex:10},{value:"collection.getFields()",paraId:38,tocIndex:10},{value:"\uFF1A\u83B7\u53D6\u6570\u636E\u8868\u7684\u5B57\u6BB5",paraId:38,tocIndex:10},{value:"getFieldInitializerItem\uFF1A\u7528\u4E8E\u83B7\u53D6\u5B57\u6BB5\u7684 Schema Initializer Item",paraId:39,tocIndex:10},{value:"name",paraId:40,tocIndex:10},{value:"\uFF1A\u5B50\u9879\u540D\u79F0\uFF0C\u7528\u4E8E\u552F\u4E00\u6807\u8BC6",paraId:40,tocIndex:10},{value:"title",paraId:40,tocIndex:10},{value:"\uFF1A\u5B50\u9879\u6807\u9898\uFF0C\u7528\u4E8E\u663E\u793A\uFF0C\u5982\u679C\u5B57\u6BB5\u6709 ",paraId:40,tocIndex:10},{value:"uiSchema.title",paraId:40,tocIndex:10},{value:" \u5219\u4F7F\u7528 ",paraId:40,tocIndex:10},{value:"uiSchema.title",paraId:40,tocIndex:10},{value:"\uFF0C\u5426\u5219\u4F7F\u7528\u5B57\u6BB5\u540D\u79F0\uFF0C\u5173\u4E8E ",paraId:40,tocIndex:10},{value:"field.uiSchema",paraId:40,tocIndex:10},{value:" \u7684\u6570\u636E\u7ED3\u6784\u53EF\u4EE5\u53C2\u8003 ",paraId:40,tocIndex:10},{value:"CollectionField",paraId:40,tocIndex:10},{value:"type: 'switch'",paraId:40,tocIndex:10},{value:"\uFF1A\u5B50\u9879\u7C7B\u578B\uFF0C",paraId:40,tocIndex:10},{value:"Switch \u7C7B\u578B",paraId:40,tocIndex:10},{value:"\uFF0C\u5176\u6838\u5FC3\u662F\u8981\u5B9E\u73B0 ",paraId:40,tocIndex:10},{value:"onClick",paraId:40,tocIndex:10},{value:" \u65B9\u6CD5\uFF0C\u5F53\u70B9\u51FB\u540E\u5982\u679C\u5DF2\u7ECF\u5B58\u5728\u5219\u5220\u9664\uFF0C\u5982\u679C\u4E0D\u5B58\u5728\u5219\u6DFB\u52A0\u3002",paraId:40,tocIndex:10},{value:"onClick",paraId:40,tocIndex:10},{value:"\uFF1A\u70B9\u51FB\u4E8B\u4EF6\uFF0C\u6211\u4EEC\u8FD9\u91CC\u6682\u65F6\u4E0D\u5B9E\u73B0\uFF0C\u540E\u7EED\u4F1A\u5B9E\u73B0\u3002",paraId:40,tocIndex:10},{value:"switch",paraId:4},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:41,tocIndex:11},{value:"packages/plugins/@nocobase-sample/plugin-initializer-configure-fields/src/client/configureFields.tsx",paraId:41,tocIndex:11},{value:" \u6587\u4EF6\uFF1A",paraId:41,tocIndex:11},{value:`+ import { CollectionFieldOptions, ISchema, SchemaInitializer, SchemaInitializerItemType, SchemaSettings, useCollection, useDesignable, useSchemaInitializer } from "@nocobase/client";

export const configureFields = new SchemaInitializer({
  name: 'info:configureFields',
  icon: 'SettingOutlined',
  title: 'Configure fields',
  items: [
    {
      type: 'itemGroup',
      name: 'fields',
      title: 'Display fields',
      useChildren() {
+       const { insert } = useSchemaInitializer();
+       const { remove } = useDesignable();
+       const schema = useFieldSchema();
        const collection = useCollection();

        const schemaItems = collection
          .getFields()
          .map<SchemaInitializerItemType>((collectionField) => getFieldInitializerItem({
            collectionField,
+           schema,
+           remove,
+           insert
+         }))

        return schemaItems;
      },
    }
  ]
});
`,paraId:42,tocIndex:11},{value:"useDesignable()",paraId:43,tocIndex:11},{value:"\uFF1A\u53EF\u4EE5\u589E\u5220\u6539\u67E5 Schema \u7684\u65B9\u6CD5",paraId:43,tocIndex:11},{value:"useSchemaInitializer()",paraId:43,tocIndex:11},{value:`\uFF1A\u7528\u4E8E\u63D0\u4F9B SchemaInitializer \u4E0A\u4E0B\u6587
`,paraId:43,tocIndex:11},{value:"insert",paraId:44,tocIndex:11},{value:"\uFF1A\u7528\u4E8E\u63D2\u5165 Schema\u3002\u8FD9\u91CC\u4E4B\u6240\u4EE5\u4F7F\u7528 ",paraId:44,tocIndex:11},{value:"useSchemaInitializer()",paraId:44,tocIndex:11},{value:" \u6240\u63D0\u4F9B\u7684 insert \u65B9\u6CD5\uFF0C\u800C\u4E0D\u662F ",paraId:44,tocIndex:11},{value:"useDesignable()",paraId:44,tocIndex:11},{value:" \u63D0\u4F9B\u7684 insert \u65B9\u6CD5\uFF0C\u662F\u56E0\u4E3A Schema \u662F\u6709\u5C42\u7EA7\u7684\uFF0C",paraId:44,tocIndex:11},{value:"useSchemaInitializer()",paraId:44,tocIndex:11},{value:" \u83B7\u53D6\u7684\u662F ",paraId:44,tocIndex:11},{value:"SchemaInitializer",paraId:44,tocIndex:11},{value:" \u6240\u5728\u5C42\u7EA7\uFF0C\u800C ",paraId:44,tocIndex:11},{value:"useDesignable()",paraId:44,tocIndex:11},{value:" \u83B7\u53D6\u7684\u662F\u5F53\u524D Schema \u6240\u5728\u5C42\u7EA7\uFF0C\u6211\u4EEC\u9700\u8981\u63D2\u5165\u5230 ",paraId:44,tocIndex:11},{value:"SchemaInitializer",paraId:44,tocIndex:11},{value:" \u6240\u5728\u5C42\u7EA7\u7684\u5144\u5F1F\u5C42\uFF0C\u6240\u4EE5\u5E94\u8BE5\u4F7F\u7528 ",paraId:44,tocIndex:11},{value:"useSchemaInitializer()",paraId:44,tocIndex:11},{value:" \u63D0\u4F9B\u7684 insert \u65B9\u6CD5\u3002",paraId:44,tocIndex:11},{value:`function getInfoItemSchema(collectionFieldName: string) {
  return {
     type: 'void',
    'x-collection-field': collectionFieldName,
    // TODO
  }
}

interface GetFieldInitializerItemOptions {
  collectionField: CollectionFieldOptions;
  schema: ISchema;
  remove: (schema: ISchema) => void;
  insert: (schema: ISchema) => void;
}

function getFieldInitializerItem(options: GetFieldInitializerItemOptions) {
  const { collectionField, schema, remove, insert } = options;
  const title = collectionField.uiSchema?.title || collectionField.name;
  const name = collectionField.name;
  const collectionFieldSchema = Object.values(schema.properties || {}).find((item) => item['x-collection-field'] === name);
  return {
    name,
    type: 'switch',
    title,
    checked: !!collectionFieldSchema,
    onClick() {
      if (collectionFieldSchema) {
        remove(collectionFieldSchema)
        return;
      }
      insert(getInfoItemSchema(name))
    }
  } as SchemaInitializerItemType;
}
`,paraId:45,tocIndex:11},{value:"\u9996\u5148 ",paraId:46,tocIndex:11},{value:"getInfoItemSchema",paraId:46,tocIndex:11},{value:" \u7528\u4E8E\u8FD4\u56DE\u4E00\u4E2A\u5B57\u6BB5\u7684 Schema\uFF0C\u5176\u4E2D\u4E00\u4E2A\u5173\u952E\u70B9\u662F ",paraId:46,tocIndex:11},{value:"x-collection-field",paraId:46,tocIndex:11},{value:" \u5B57\u6BB5\uFF0C\u7528\u4E8E\u6807\u8BC6\u8FD9\u4E2A Schema \u662F\u54EA\u4E2A\u5B57\u6BB5\u7684\u3002",paraId:46,tocIndex:11},{value:"\u7136\u540E\u6211\u4EEC\u901A\u8FC7\u8BFB\u53D6 ",paraId:47,tocIndex:11},{value:"schema.properties",paraId:47,tocIndex:11},{value:" \u4E2D\u7684\u6570\u636E\uFF0C\u627E\u5230\u5BF9\u5E94\u7684\u5B57\u6BB5\u7684 Schema\uFF0C\u5982\u679C\u5B58\u5728\u5219\u5220\u9664\uFF0C\u5982\u679C\u4E0D\u5B58\u5728\u5219\u63D2\u5165\u3002",paraId:47,tocIndex:11},{value:`export const infoItemSettings = new SchemaSettings({
  name: 'fieldSettings:info',
  items: [
    {
      name: 'remove',
      type: 'remove',
      componentProps: {
        removeParentsIfNoChildren: true,
        breakRemoveOn(s) {
          return s['x-component'] === 'Grid';
        },
      },
    }
  ]
})

export const InfoItem = () => {
  const fieldSchema = useFieldSchema();
  const collection = useCollection();
  const collectionFieldName = fieldSchema.name;
  return <pre>{JSON.stringify(collection.getField(collectionFieldName), null, 2)}</pre>
}

function getInfoItemSchema(collectionFieldName: string) {
  return {
    type: 'void',
    'x-collection-field': collectionFieldName,
    'x-component': 'Grid.Row',
    properties: {
      [uid()]: {
        type: 'void',
        'x-component': 'Grid.Col',
        properties: {
          [collectionFieldName]: {
            type: 'void',
            'x-component': 'InfoItem',
            'x-decorator': 'CardItem',
            'x-settings': infoItemSettings.name,
          },
        },
      },
    },
  } as ISchema;
}
`,paraId:48,tocIndex:12},{value:"\u6211\u4EEC\u5728 ",paraId:49,tocIndex:12},{value:"getInfoBlockSchema()",paraId:49,tocIndex:12},{value:" \u4E2D\u4F7F\u7528 ",paraId:49,tocIndex:12},{value:"Grid",paraId:49,tocIndex:12},{value:" \u7EC4\u4EF6\u4F5C\u4E3A\u7236\u7EA7\uFF0C\u90A3\u4E48\u5B50\u8282\u70B9\u5C31\u9700\u8981\u4F7F\u7528 ",paraId:49,tocIndex:12},{value:"Grid.Row",paraId:49,tocIndex:12},{value:" \u548C ",paraId:49,tocIndex:12},{value:"Grid.Col",paraId:49,tocIndex:12},{value:" \u7EC4\u4EF6\uFF0C\u7136\u540E\u5728 ",paraId:49,tocIndex:12},{value:"Grid.Col",paraId:49,tocIndex:12},{value:" \u4E2D\u4F7F\u7528 ",paraId:49,tocIndex:12},{value:"InfoItem",paraId:49,tocIndex:12},{value:" \u7EC4\u4EF6\u3002",paraId:49,tocIndex:12},{value:"InfoItem",paraId:50,tocIndex:12},{value:" \u5C31\u662F\u5177\u4F53\u7684\u5B57\u6BB5\u4FE1\u606F\u5C55\u793A\u7EC4\u4EF6\uFF0C\u6211\u4EEC\u8FD9\u91CC\u505A\u7684\u4E8B\u60C5\u5F88\u7B80\u5355\uFF0C\u9996\u5148\u8BFB\u53D6\u5F53\u524D\u5B57\u6BB5\u7684 Schema\uFF0C\u5176\u4E2D ",paraId:50,tocIndex:12},{value:"schema.name",paraId:50,tocIndex:12},{value:" \u5BF9\u5E94 ",paraId:50,tocIndex:12},{value:"collectionFieldName",paraId:50,tocIndex:12},{value:"\uFF0C\u7136\u540E\u901A\u8FC7 ",paraId:50,tocIndex:12},{value:"collection.getField(collectionFieldName)",paraId:50,tocIndex:12},{value:" \u83B7\u53D6\u5B57\u6BB5\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u7136\u540E\u5C55\u793A\u51FA\u6765\u3002",paraId:50,tocIndex:12},{value:"\u7136\u540E\u6211\u4EEC\u5C06 ",paraId:51,tocIndex:12},{value:"InfoItem",paraId:51,tocIndex:12},{value:" \u548C ",paraId:51,tocIndex:12},{value:"infoItemSettings",paraId:51,tocIndex:12},{value:" \u7EC4\u4EF6\u6CE8\u518C\u5230\u7CFB\u7EDF\u4E2D\uFF1A",paraId:51,tocIndex:12},{value:`export class PluginInitializerComplexDataBlockClient extends Plugin {
  async load() {
    this.app.addComponents({ InfoBlock, InfoItem });
    this.app.schemaSettingsManager.add(infoBlockSettings, infoItemSettings);
  }
}
`,paraId:52,tocIndex:12},{value:`
  `,paraId:4},{value:"\u6309\u7167 ",paraId:53,tocIndex:13},{value:"\u6784\u5EFA\u5E76\u6253\u5305\u63D2\u4EF6",paraId:54,tocIndex:13},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6253\u5305\u63D2\u4EF6\u5E76\u4E0A\u4F20\u5230\u751F\u4EA7\u73AF\u5883\u3002",paraId:53,tocIndex:13},{value:"\u5982\u679C\u662F clone \u7684\u6E90\u7801\uFF0C\u9700\u8981\u5148\u6267\u884C\u4E00\u6B21\u5168\u91CF build\uFF0C\u5C06\u63D2\u4EF6\u7684\u4F9D\u8D56\u4E5F\u6784\u5EFA\u597D\u3002",paraId:55,tocIndex:13},{value:`yarn build
`,paraId:56,tocIndex:13},{value:"\u5982\u679C\u662F\u4F7F\u7528\u7684 ",paraId:57,tocIndex:13},{value:"create-nocobase-app",paraId:57,tocIndex:13},{value:" \u521B\u5EFA\u7684\u9879\u76EE\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6267\u884C\uFF1A",paraId:57,tocIndex:13},{value:`yarn build @nocobase-sample/plugin-initializer-configure-fields --tar
`,paraId:58,tocIndex:13},{value:"\u8FD9\u6837\u5C31\u53EF\u4EE5\u770B\u5230 ",paraId:59,tocIndex:13},{value:"storage/tar/@nocobase-sample/plugin-initializer-configure-fields.tar.gz",paraId:59,tocIndex:13},{value:" \u6587\u4EF6\u4E86\uFF0C\u7136\u540E\u901A\u8FC7",paraId:59,tocIndex:13},{value:"\u4E0A\u4F20\u7684\u65B9\u5F0F",paraId:60,tocIndex:13},{value:"\u8FDB\u884C\u5B89\u88C5\u3002",paraId:59,tocIndex:13}]},417115:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"TODO",paraId:0,tocIndex:0}]},578531:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"SchemaInitializer",paraId:0,tocIndex:0},{value:" \u7528\u4E8E\u5411\u754C\u9762\u5185\u6DFB\u52A0\u5404\u79CD\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49\u3002",paraId:1,tocIndex:0},{value:"\u6839\u636E\u9700\u6C42\u4E0D\u540C\u53EF\u80FD\u6709\u4EE5\u4E0B\u6269\u5C55\u573A\u666F\uFF1A",paraId:2,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 Initializer \u4E2D\u6DFB\u52A0\u5B50\u9879",paraId:3,tocIndex:0},{value:"\u521B\u5EFA\u65B0\u7684 Initializer",paraId:3,tocIndex:0},{value:"\u6839\u636E\u4EE5\u4E0A\u573A\u666F\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E86\u5982\u4E0B\u793A\u4F8B\uFF1A",paraId:4,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 Initializer \u4E2D\u6DFB\u52A0\u5B50\u9879",paraId:5,tocIndex:0},{value:"\u6DFB\u52A0\u7B80\u5355\u533A\u5757 Simple Block",paraId:6,tocIndex:0},{value:"\u6DFB\u52A0\u6570\u636E\u533A\u5757 Data Block",paraId:7,tocIndex:0},{value:"\u6DFB\u52A0\u5E26\u5F39\u7A97\u7684\u6570\u636E\u533A\u5757 Data Block Modal",paraId:8,tocIndex:0},{value:"\u6DFB\u52A0\u7B80\u5355 Action",paraId:9,tocIndex:0},{value:"\u6DFB\u52A0\u5F39\u7A97 Action",paraId:10,tocIndex:0},{value:"\u521B\u5EFA\u65B0\u7684 Initializer",paraId:11,tocIndex:0},{value:"\u533A\u5757\u5185\u5D4C\u7684 Initializer - \u914D\u7F6E\u5B57\u6BB5",paraId:12,tocIndex:0},{value:"\u533A\u5757\u5185\u5D4C\u7684 Initializer - \u914D\u7F6E\u64CD\u4F5C",paraId:13,tocIndex:0}]},531220:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5728\u5B9E\u9645\u5F00\u53D1\u4E2D\uFF0C\u6211\u4EEC\u533A\u5757\u3001\u64CD\u4F5C\u3001\u5B57\u6BB5\u90FD\u9700\u8981\u914D\u7F6E\u4E00\u4E9B\u5C5E\u6027\uFF0C\u4F46\u662F\u5DF2\u6709\u7684\u914D\u7F6E\u4E0D\u4E00\u5B9A\u6EE1\u8DB3\u6211\u4EEC\u7684\u9700\u6C42\uFF0C\u6211\u4EEC\u5C31\u9700\u8981\u6839\u636E\u9700\u6C42\u6DFB\u52A0\u4E00\u4E9B\u65B0\u7684\u914D\u7F6E\u9879\u3002",paraId:0,tocIndex:1},{value:"\u76EE\u524D Table \u533A\u5757\u7684\u914D\u7F6E\u9879\u4E2D\u6CA1\u6709 ",paraId:1,tocIndex:2},{value:"showIndex",paraId:1,tocIndex:2},{value:" \u5C5E\u6027\uFF0C\u6211\u4EEC\u9700\u8981\u6DFB\u52A0\u4E00\u4E2A ",paraId:1,tocIndex:2},{value:"showIndex",paraId:1,tocIndex:2},{value:" \u5C5E\u6027\uFF0C\u7528\u4E8E\u63A7\u5236\u662F\u5426\u663E\u793A\u5E8F\u53F7\u3002",paraId:1,tocIndex:2},{value:"\u672C\u5B9E\u4F8B\u4E3B\u8981\u4E3A\u4E86\u6F14\u793A SchemaSettings \u7684\u4F7F\u7528\uFF0C\u66F4\u591A\u5173\u4E8E\u533A\u5757\u6269\u5C55\u53EF\u4EE5\u67E5\u770B ",paraId:2,tocIndex:2},{value:"\u533A\u5757\u6269\u5C55",paraId:3,tocIndex:2},{value:" \u6587\u6863\u3002",paraId:2,tocIndex:2},{value:"\u672C\u6587\u6863\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801\u53EF\u4EE5\u5728 ",paraId:4,tocIndex:2},{value:"plugin-samples",paraId:4,tocIndex:2},{value:" \u4E2D\u67E5\u770B\u3002",paraId:4,tocIndex:2},{value:`
  `,paraId:5},{value:"\u6211\u4EEC\u6309\u7167 ",paraId:6,tocIndex:3},{value:"\u7F16\u5199\u7B2C\u4E00\u4E2A\u63D2\u4EF6",paraId:7,tocIndex:3},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u5982\u679C\u6CA1\u6709\u4E00\u4E2A\u9879\u76EE\uFF0C\u53EF\u4EE5\u5148\u521B\u5EFA\u4E00\u4E2A\u9879\u76EE\uFF0C\u5982\u679C\u5DF2\u7ECF\u6709\u4E86\u6216\u8005\u662F clone \u7684\u6E90\u7801\uFF0C\u5219\u8DF3\u8FC7\u8FD9\u4E00\u6B65\u3002",paraId:6,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres
cd my-nocobase-app
yarn install
yarn nocobase install
`,paraId:8,tocIndex:3},{value:"\u7136\u540E\u521D\u59CB\u5316\u4E00\u4E2A\u63D2\u4EF6\uFF0C\u5E76\u6DFB\u52A0\u5230\u7CFB\u7EDF\u4E2D\uFF1A",paraId:9,tocIndex:3},{value:`yarn pm create @nocobase-sample/plugin-schema-settings-add-item
yarn pm enable @nocobase-sample/plugin-schema-settings-add-item
`,paraId:10,tocIndex:3},{value:"\u7136\u540E\u542F\u52A8\u9879\u76EE\u5373\u53EF\uFF1A",paraId:11,tocIndex:3},{value:`yarn dev
`,paraId:12,tocIndex:3},{value:"\u7136\u540E\u767B\u5F55\u540E\u8BBF\u95EE ",paraId:13,tocIndex:3},{value:"http://localhost:13000/admin/pm/list/local/",paraId:13,tocIndex:3},{value:" \u5C31\u53EF\u4EE5\u770B\u5230\u63D2\u4EF6\u5DF2\u7ECF\u5B89\u88C5\u5E76\u542F\u7528\u4E86\u3002",paraId:13,tocIndex:3},{value:"\u5728\u5B9E\u73B0\u672C\u793A\u4F8B\u4E4B\u524D\uFF0C\u6211\u4EEC\u9700\u8981\u5148\u4E86\u89E3\u4E00\u4E9B\u57FA\u7840\u77E5\u8BC6\uFF1A",paraId:14,tocIndex:4},{value:"SchemaSettings \u6559\u7A0B",paraId:15,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u914D\u7F6E\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49\u7684\u5C5E\u6027",paraId:16,tocIndex:4},{value:"SchemaSettings API",paraId:16,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u914D\u7F6E\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49\u7684\u5C5E\u6027",paraId:16,tocIndex:4},{value:"UI Schema \u534F\u8BAE",paraId:17,tocIndex:4},{value:"\uFF1A\u8BE6\u7EC6\u4ECB\u7ECD Schema \u7684\u7ED3\u6784\u548C\u6BCF\u4E2A\u5C5E\u6027\u7684\u4F5C\u7528",paraId:16,tocIndex:4},{value:"Designable \u8BBE\u8BA1\u5668",paraId:18,tocIndex:4},{value:"\uFF1A\u7528\u4E8E\u4FEE\u6539 Schema",paraId:16,tocIndex:4},{value:"TableV2",paraId:16,tocIndex:4},{value:"\uFF1ATable \u533A\u5757\u7684\u6587\u6863",paraId:16,tocIndex:4},{value:"\u60F3\u8981\u5B9E\u73B0\u5411\u5DF2\u6709\u7684\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7B49\u6DFB\u52A0\u65B0\u7684\u914D\u7F6E\u9879\uFF0C\u9700\u8981\u6709 3 \u4E2A\u524D\u63D0\uFF1A",paraId:19,tocIndex:4},{value:"\u7EC4\u4EF6\u9700\u8981\u652F\u6301\u65B0\u7684\u914D\u7F6E",paraId:20,tocIndex:4},{value:"\u9700\u8981\u6B63\u786E\u8BBE\u7F6E Schema",paraId:20,tocIndex:4},{value:"Schema \u7684\u5C5E\u6027\u9700\u8981\u5230\u4F20\u9012\u5230\u7EC4\u4EF6\u4E2D",paraId:20,tocIndex:4},{value:"\u4EE5\u672C\u793A\u4F8B\u4E3A\u4F8B\uFF0C\u6211\u4EEC\u9700\u8981\u5728 Table \u533A\u5757\u4E2D\u6DFB\u52A0 ",paraId:21,tocIndex:4},{value:"showIndex",paraId:21,tocIndex:4},{value:" \u5C5E\u6027\uFF0C\u7528\u4E8E\u63A7\u5236\u662F\u5426\u663E\u793A\u5E8F\u53F7\u3002",paraId:21,tocIndex:4},{value:"\u9996\u5148\u9700\u8981\u786E\u8BA4 ",paraId:22,tocIndex:4},{value:"TableV2",paraId:22,tocIndex:4},{value:" \u533A\u5757\u662F\u5426\u652F\u6301 ",paraId:22,tocIndex:4},{value:"showIndex",paraId:22,tocIndex:4},{value:" \u5C5E\u6027\uFF1A\u6211\u4EEC\u901A\u8FC7 ",paraId:22,tocIndex:4},{value:"\u6587\u6863",paraId:22,tocIndex:4},{value:" \u53EF\u4EE5\u5F97\u77E5 Table \u533A\u5757\u652F\u6301 ",paraId:22,tocIndex:4},{value:"showIndex",paraId:22,tocIndex:4},{value:" \u5C5E\u6027",paraId:22,tocIndex:4},{value:"\u7136\u540E\u9700\u8981\u786E\u8BA4 ",paraId:22,tocIndex:4},{value:"Table Block Schema",paraId:22,tocIndex:4},{value:" \u4E2D ",paraId:22,tocIndex:4},{value:"TableV2",paraId:22,tocIndex:4},{value:" \u7EC4\u4EF6\u7684\u5C5E\u6027\u5B58\u50A8\u4F4D\u7F6E\uFF1A \u6211\u4EEC\u901A\u8FC7 ",paraId:22,tocIndex:4},{value:"\u6587\u6863",paraId:22,tocIndex:4},{value:" \u5728 ",paraId:22,tocIndex:4},{value:"x-decorator-props",paraId:22,tocIndex:4},{value:" \u4E2D",paraId:22,tocIndex:4},{value:"\u6700\u540E\u9700\u8981\u786E\u8BA4 ",paraId:22,tocIndex:4},{value:"showIndex",paraId:22,tocIndex:4},{value:" \u5C5E\u6027\u7684\u503C\u662F\u5426\u4F20\u9012\u5230 ",paraId:22,tocIndex:4},{value:"TableV2",paraId:22,tocIndex:4},{value:" \u7EC4\u4EF6\u4E2D\uFF1A\u6211\u4EEC\u901A\u8FC7 ",paraId:22,tocIndex:4},{value:"\u6587\u6863",paraId:22,tocIndex:4},{value:" \u53EF\u4EE5\u5F97\u77E5 ",paraId:22,tocIndex:4},{value:"showIndex",paraId:22,tocIndex:4},{value:" \u5C5E\u6027\u662F\u901A\u8FC7 ",paraId:22,tocIndex:4},{value:"useTableBlockProps",paraId:22,tocIndex:4},{value:" \u4F20\u9012\u5230 ",paraId:22,tocIndex:4},{value:"TableV2",paraId:22,tocIndex:4},{value:" \u7EC4\u4EF6\u4E2D",paraId:22,tocIndex:4},{value:"\u6211\u4EEC\u65B0\u5EFA ",paraId:23,tocIndex:5},{value:"packages/plugins/@nocobase-sample/plugin-schema-settings-add-item/src/client/tableShowIndexSettingsItem.tsx",paraId:23,tocIndex:5},{value:" \u6587\u4EF6\uFF1A",paraId:23,tocIndex:5},{value:`import { SchemaSettingsItemType, useDesignable } from '@nocobase/client';
import { useFieldSchema } from '@formily/react';

export const tableShowIndexSettingsItem: SchemaSettingsItemType = {
  name: 'showIndex',
  type: 'switch',
  useComponentProps() {
    return {};
  },
};
`,paraId:24,tocIndex:5},{value:"\u6211\u4EEC\u5B9A\u4E49\u4E86\u4E00\u4E2A ",paraId:25,tocIndex:5},{value:"showIndex",paraId:25,tocIndex:5},{value:" \u7684\u914D\u7F6E\u9879\uFF0C\u7C7B\u578B\u4E3A ",paraId:25,tocIndex:5},{value:"switch",paraId:25,tocIndex:5},{value:"\u3002",paraId:25,tocIndex:5},{value:"name",paraId:26,tocIndex:5},{value:"\uFF1A\u914D\u7F6E\u9879\u7684\u540D\u79F0\uFF0C\u7528\u4E8E\u589E\u5220\u6539\u67E5",paraId:26,tocIndex:5},{value:"type",paraId:26,tocIndex:5},{value:"\uFF1A\u914D\u7F6E\u9879\u7684\u7C7B\u578B\uFF0C\u7528\u4E8E\u6E32\u67D3\u4E0D\u540C\u7684\u7EC4\u4EF6\uFF0C\u66F4\u591A\u7C7B\u578B\u53EF\u4EE5\u67E5\u770B ",paraId:26,tocIndex:5},{value:"SchemaSettings API",paraId:26,tocIndex:5},{value:"useComponentProps",paraId:26,tocIndex:5},{value:"\uFF1A\u7528\u4E8E\u914D\u7F6E\u7EC4\u4EF6\u7684\u5C5E\u6027",paraId:26,tocIndex:5},{value:`import { SchemaSettingsItemType, useDesignable } from '@nocobase/client';
import { useFieldSchema } from '@formily/react';

export const tableShowIndexSettingsItem: SchemaSettingsItemType = {
  name: 'showIndex',
  type: 'switch',
  useComponentProps() {
+   const fieldSchema = useFieldSchema();
+   const dn = useDesignable();
+   return {
+     title: 'Show Index',
+     checked: !!fieldSchema['x-decorator-props'].showIndex,
+     onChange(v: boolean) {
+       dn.deepMerge({
+         'x-uid': fieldSchema['x-uid'],
+         'x-decorator-props': {
+           ...fieldSchema['x-decorator-props'],
+           showIndex: v,
+         },
+       });
+     },
+   };
  },
};
`,paraId:27,tocIndex:6},{value:"Hooks\uFF1A",paraId:28,tocIndex:6},{value:"useFieldSchema",paraId:29,tocIndex:6},{value:"\uFF1A\u7528\u4E8E\u83B7\u53D6\u5F53\u524D\u5B57\u6BB5\u7684 Schema",paraId:29,tocIndex:6},{value:"useDesignable",paraId:29,tocIndex:6},{value:"\uFF1A\u7528\u4E8E\u4FEE\u6539 Schema",paraId:29,tocIndex:6},{value:"Props\uFF1A",paraId:30,tocIndex:6},{value:"title",paraId:31,tocIndex:6},{value:"\uFF1ASwitch \u7EC4\u4EF6\u7684\u6807\u9898",paraId:31,tocIndex:6},{value:"checked",paraId:31,tocIndex:6},{value:"\uFF1ASwitch \u7EC4\u4EF6\u7684\u9009\u4E2D\u72B6\u6001\uFF0C\u901A\u8FC7 ",paraId:31,tocIndex:6},{value:"fieldSchema['x-decorator-props'].showIndex",paraId:31,tocIndex:6},{value:" \u83B7\u53D6\uFF0C\u5177\u4F53\u53EF\u4EE5\u67E5\u770B ",paraId:31,tocIndex:6},{value:"Table Block Schema",paraId:31,tocIndex:6},{value:"onChange",paraId:31,tocIndex:6},{value:"\uFF1ASwitch \u7EC4\u4EF6\u7684\u503C\u6539\u53D8\u4E8B\u4EF6\uFF0C\u901A\u8FC7 ",paraId:31,tocIndex:6},{value:"dn.deepMerge",paraId:31,tocIndex:6},{value:" \u4FEE\u6539 Schema",paraId:31,tocIndex:6},{value:"dn.deepMerge",paraId:32,tocIndex:6},{value:"\uFF1A\u7528\u4E8E\u4FEE\u6539 Schema",paraId:32,tocIndex:6},{value:"x-uid",paraId:33,tocIndex:6},{value:"\uFF1A\u5B57\u6BB5\u7684\u552F\u4E00\u6807\u8BC6\uFF0C\u7528\u4E8E\u670D\u52A1\u7AEF\u7684\u67E5\u8BE2\u548C\u4FEE\u6539",paraId:33,tocIndex:6},{value:"x-decorator-props",paraId:33,tocIndex:6},{value:"\uFF1A\u5B57\u6BB5\u7684\u5C5E\u6027\uFF0C\u7528\u4E8E\u914D\u7F6E\u7EC4\u4EF6\u7684\u5C5E\u6027",paraId:33,tocIndex:6},{value:"\u6211\u4EEC\u4FEE\u6539 ",paraId:34,tocIndex:7},{value:"packages/plugins/@nocobase-sample/plugin-schema-settings-add-item/src/client/index.ts",paraId:34,tocIndex:7},{value:" \u6587\u4EF6\uFF1A",paraId:34,tocIndex:7},{value:`import { Plugin } from '@nocobase/client';
import { tableShowIndexSettingsItem } from './tableShowIndexSettingsItem'

export class PluginSchemaSettingsAddItemClient extends Plugin {
  async load() {
    this.schemaSettingsManager.addItem('blockSettings:table', tableShowIndexSettingsItem.name, tableShowIndexSettingsItem)
  }
}

export default PluginSchemaSettingsAddItemClient;
`,paraId:35,tocIndex:7},{value:"\u7136\u540E\u6211\u4EEC\u5C31\u53EF\u4EE5\u770B\u5230 Table \u533A\u5757\u7684\u914D\u7F6E\u9879\u4E2D\u591A\u4E86\u4E00\u4E2A ",paraId:36,tocIndex:7},{value:"Show Index",paraId:36,tocIndex:7},{value:" \u7684\u914D\u7F6E\u9879\u3002",paraId:36,tocIndex:7},{value:`
  `,paraId:5},{value:"\u6309\u7167 ",paraId:37,tocIndex:8},{value:"\u6784\u5EFA\u5E76\u6253\u5305\u63D2\u4EF6",paraId:38,tocIndex:8},{value:" \u6587\u6863\u8BF4\u660E\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6253\u5305\u63D2\u4EF6\u5E76\u4E0A\u4F20\u5230\u751F\u4EA7\u73AF\u5883\u3002",paraId:37,tocIndex:8},{value:"\u5982\u679C\u662F clone \u7684\u6E90\u7801\uFF0C\u9700\u8981\u5148\u6267\u884C\u4E00\u6B21\u5168\u91CF build\uFF0C\u5C06\u63D2\u4EF6\u7684\u4F9D\u8D56\u4E5F\u6784\u5EFA\u597D\u3002",paraId:39,tocIndex:8},{value:`yarn build
`,paraId:40,tocIndex:8},{value:"\u5982\u679C\u662F\u4F7F\u7528\u7684 ",paraId:41,tocIndex:8},{value:"create-nocobase-app",paraId:41,tocIndex:8},{value:" \u521B\u5EFA\u7684\u9879\u76EE\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6267\u884C\uFF1A",paraId:41,tocIndex:8},{value:`yarn build nocobase-sample/plugin-schema-settings-add-item --tar
`,paraId:42,tocIndex:8},{value:"\u8FD9\u6837\u5C31\u53EF\u4EE5\u770B\u5230 ",paraId:43,tocIndex:8},{value:"storage/tar/nocobase-sample/plugin-schema-settings-add-item.tar.gz",paraId:43,tocIndex:8},{value:" \u6587\u4EF6\u4E86\uFF0C\u7136\u540E\u901A\u8FC7",paraId:43,tocIndex:8},{value:"\u4E0A\u4F20\u7684\u65B9\u5F0F",paraId:44,tocIndex:8},{value:"\u8FDB\u884C\u5B89\u88C5\u3002",paraId:43,tocIndex:8}]},381451:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"SchemaSettings",paraId:0,tocIndex:0},{value:" \u901A\u8FC7\u4FEE\u6539 Schema \u52A8\u6001\u914D\u7F6E\u533A\u5757\u3001\u5B57\u6BB5\u3001\u64CD\u4F5C\u7684\u5C5E\u6027\u3002",paraId:1,tocIndex:0},{value:"\u6839\u636E\u9700\u6C42\u4E0D\u540C\u53EF\u80FD\u6709\u4EE5\u4E0B\u6269\u5C55\u573A\u666F\uFF1A",paraId:2,tocIndex:0},{value:"\u5411\u5DF2\u6709\u7684 SchemaSettings \u4E2D\u6DFB\u52A0\u5B50\u9879",paraId:3,tocIndex:0},{value:"\u521B\u5EFA\u65B0\u7684 SchemaSettings",paraId:3,tocIndex:0},{value:"\u6839\u636E\u4EE5\u4E0A\u573A\u666F\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E86\u5982\u4E0B\u793A\u4F8B\uFF1A",paraId:4,tocIndex:0},{value:"\u521B\u5EFA\u65B0\u7684 SchemaSettings",paraId:5,tocIndex:0},{value:"\u6DFB\u52A0\u5B50\u9879\u5230\u5DF2\u6709\u7684 SchemaSettings",paraId:6,tocIndex:0}]},248336:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u7248\u672C\u53F7\uFF1A",paraId:0,tocIndex:0},{value:"Release Version\uFF1Ax.y.z",paraId:1,tocIndex:0},{value:"Pre-release Version\uFF1A1.x.y-alpha.z",paraId:1,tocIndex:0},{value:"\u76F8\u5173\u8BF4\u660E\uFF1A",paraId:2,tocIndex:0},{value:"\u517C\u5BB9\u6027\u53D8\u66F4\uFF1Ax + 1",paraId:3,tocIndex:0},{value:"\u65B0\u63D2\u4EF6\u3001\u65B0\u529F\u80FD\u53D1\u5E03\uFF1Ay + 1",paraId:3,tocIndex:0},{value:"\u7F3A\u9677\u4FEE\u590D\uFF1Az + 1",paraId:3,tocIndex:0},{value:"alpha -> beta -> rc",paraId:3,tocIndex:0},{value:"\u66F4\u65B0\u65E5\u5FD7\u6BCF\u5468\u4E00\u7BC7\uFF0C\u6587\u4EF6\u540D\u683C\u5F0F\uFF1A",paraId:4,tocIndex:0},{value:`- docs/zh-CN/welcome/changelog/<YYYYMMDD>.md
- docs/eh-US/welcome/changelog/<YYYYMMDD>.md
`,paraId:5,tocIndex:0},{value:"\u6807\u9898\u683C\u5F0F\u4E3A\uFF1A",paraId:6,tocIndex:0},{value:`# <\u7248\u672C\u53F7>\uFF1A<\u65E5\u671F>
<!-- \u4F8B\u5982 -->
# v1.0.0-alpha.15\uFF1A2024-05-19
`,paraId:7,tocIndex:0},{value:"\u5206\u4E3A\u65B0\u589E\u3001\u6539\u8FDB\u3001\u4FEE\u590D\u4E09\u5757\u5185\u5BB9\uFF0C\u5185\u5BB9\u683C\u5F0F\uFF1A",paraId:8,tocIndex:0},{value:`## <scope>\uFF1A<title> (<a href="pr-url" target="_blank">#<pr-number></a>)
<!-- title \u5FC5\u586B\uFF0Cscope \u6CA1\u6709\u53EF\u4EE5\u4E0D\u5199\uFF0Cpr \u6CA1\u6709\u4E5F\u53EF\u4EE5\u4E0D\u5199 -->

<description> <!-- \u6CA1\u6709\u63CF\u8FF0\u53EF\u4EE5\u4E0D\u5199 -->

![](<img-url>) <!-- \u622A\u56FE\u5FC5\u987B\u6709\uFF0C\u5C3A\u5BF8\u4E3A 1440x900 -->
`,paraId:9,tocIndex:0},{value:"#4260",paraId:10},{value:"\u4E00\u53E5\u8BDD\u6982\u62EC\uFF0C\u7136\u540E\u540E\u9762\u653E\u4E00\u5F20\u622A\u56FE\u3001\u52A8\u56FE\u6216\u89C6\u9891\u8BF4\u660E\uFF0C\u5728\u8FD9\u91CC\u5185\u5BB9\u4E0D\u8981\u5199\u592A\u591A\u4E86\uFF0C\u66F4\u591A\u5185\u5BB9\u5E94\u8BE5\u653E\u5230\u4F7F\u7528\u624B\u518C\u91CC\u4ECB\u7ECD\u3002",paraId:11,tocIndex:2},{value:"#4260",paraId:10},{value:"\u652F\u6301\u7528\u6237\u4F7F\u7528 LDAP \u670D\u52A1\u5668\u8D26\u53F7\u5BC6\u7801\u767B\u5F55 NocoBase\uFF0C\u8BE6\u60C5\u53C2\u8003 ",paraId:12,tocIndex:3},{value:"\u8BA4\u8BC1\uFF1ALDAP",paraId:13,tocIndex:3},{value:" \u6587\u6863\u3002",paraId:12,tocIndex:3},{value:"#4260",paraId:10},{value:"\u4E00\u53E5\u8BDD\u6982\u62EC\uFF0C\u7136\u540E\u540E\u9762\u653E\u4E00\u5F20\u622A\u56FE\u3001\u52A8\u56FE\u6216\u89C6\u9891\u8BF4\u660E\uFF0C\u5728\u8FD9\u91CC\u5185\u5BB9\u4E0D\u8981\u5199\u592A\u591A\u4E86\uFF0C\u5982\u679C\u5185\u5BB9\u8F83\u591A\u53EF\u4EE5\u6982\u62EC\u6027\u603B\u7ED3\uFF0C\u4F8B\u5982\uFF1A",paraId:14,tocIndex:5},{value:"\u4E8B\u98791",paraId:15,tocIndex:5},{value:"\u4E8B\u98792",paraId:15,tocIndex:5},{value:"#4260",paraId:10},{value:"\u4E0B\u62C9\u83DC\u5355\u91CC\u6240\u6709\u64CD\u4F5C\u7EDF\u4E00\u663E\u793A\u5728\u4E00\u4E2A\u5217\u8868\u4E2D\uFF0C\u4E0D\u518D\u533A\u5206\u201C\u542F\u7528\u64CD\u4F5C\u201D\u548C\u201C\u81EA\u5B9A\u4E49\u201D\u3002",paraId:16,tocIndex:6},{value:"\u53EA\u80FD\u6DFB\u52A0\u4E00\u6B21\u7684\u64CD\u4F5C\uFF1A\u8FD9\u4E9B\u64CD\u4F5C\u4FDD\u7559 Switch \u6548\u679C\uFF0C\u7528\u6237\u53EA\u80FD\u542F\u7528\u6216\u7981\u7528\u3002",paraId:17,tocIndex:6},{value:"\u53EF\u4EE5\u91CD\u590D\u6DFB\u52A0\u7684\u64CD\u4F5C\uFF1A\u8FD9\u4E9B\u64CD\u4F5C\u4E0D\u518D\u4F7F\u7528 Switch \u4EA4\u4E92\uFF0C\u53EF\u4EE5\u591A\u6B21\u6DFB\u52A0\u3002",paraId:17,tocIndex:6},{value:`\u5408\u5E76\u529F\u80FD\u76F8\u4F3C\u7684\u64CD\u4F5C
`,paraId:17,tocIndex:6},{value:"\u201CAdd new\u201D \u548C \u201CAdd record\u201D",paraId:18,tocIndex:6},{value:"\u201CSubmit\u201D \u548C \u201CSave record\u201D",paraId:18,tocIndex:6},{value:"#4260",paraId:10},{value:"\u4E00\u53E5\u8BDD\u6982\u62EC\uFF0C\u7136\u540E\u540E\u9762\u653E\u4E00\u5F20\u622A\u56FE\u3001\u52A8\u56FE\u6216\u89C6\u9891\u8BF4\u660E\u3002",paraId:19,tocIndex:8}]},472019:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Supports users logging in to NocoBase using their LDAP server credentials. For more information, refer to the ",paraId:0,tocIndex:2},{value:"Authentication: LDAP",paraId:1,tocIndex:2},{value:" documentation.",paraId:0,tocIndex:2},{value:"When CRUD actions cannot satisfy your needs, you can use the custom action trigger of the workflow to orchestrate your own data processing logic. For more information, refer to the ",paraId:2,tocIndex:3},{value:"Workflow / Custom action trigger",paraId:3,tocIndex:3},{value:" documentation.",paraId:2,tocIndex:3},{value:"Allows configuring the visible and hidden properties of fields.",paraId:4,tocIndex:6},{value:"application/www-x-form-urlencoded",paraId:5},{value:"View the documentation for ",paraId:6,tocIndex:9},{value:"plugin examples",paraId:7,tocIndex:9},{value:".",paraId:6,tocIndex:9},{value:'All actions are displayed in a single list in the dropdown menu, no longer distinguishing between "Enable actions" and "Customize".',paraId:8,tocIndex:11},{value:"Actions that can only be added once: These actions retain the switch effect.",paraId:9,tocIndex:11},{value:"Actions that can be added repeatedly: These actions no longer use the switch interaction and can be added multiple times.",paraId:9,tocIndex:11},{value:`Merged similar actions
`,paraId:9,tocIndex:11},{value:"\u201CAdd new\u201D and \u201CAdd record\u201D",paraId:10,tocIndex:11},{value:"\u201CSubmit\u201D and \u201CSave record\u201D",paraId:10,tocIndex:11},{value:`{
  config: {},
  headers: {},
  status: 500,
  statusText: 'xxx',
  data: {}
}
`,paraId:11,tocIndex:12},{value:"When there are multiple applications:",paraId:12,tocIndex:15},{value:"The log plugin only displays the log file list for the current application.",paraId:13,tocIndex:15},{value:"Workflow and custom request folders are placed within the application folder.",paraId:13,tocIndex:15},{value:"Other major fixes include:",paraId:14,tocIndex:15},{value:"Charts did not convert date fields to client time zone when querying aggregated data by date field. ",paraId:15,tocIndex:15},{value:"fix(data-vi): should use local timezone when formatting date #4366",paraId:15,tocIndex:15},{value:"View refresh issue, where the view needed to be exited and re-entered after syncing with the database. ",paraId:15,tocIndex:15},{value:"fix: collection fields should be refreshed after editing sync from database #4224",paraId:15,tocIndex:15},{value:"Tree table block did not collapse all nodes when adding a child node. ",paraId:15,tocIndex:15},{value:"fix: do not collapse all nodes when adding a child node in the tree table block #4289",paraId:15,tocIndex:15},{value:"Data table title field settings were invalid. ",paraId:15,tocIndex:15},{value:"fix: collection title field setting is invalid #4358",paraId:15,tocIndex:15},{value:"Bigint field lost precision in read-only mode. ",paraId:15,tocIndex:15},{value:"fix: bigint field loses precision in read pretty mode #4360",paraId:15,tocIndex:15},{value:"Open log files were not closed after stopping a sub-application. ",paraId:15,tocIndex:15},{value:"fix(logger): should close log stream after destroying app #4380",paraId:15,tocIndex:15},{value:"Workflow aggregate node relationship data model selection bug. ",paraId:15,tocIndex:15},{value:"fix(plugin-workflow-aggregate): fix association field select #4315",paraId:15,tocIndex:15},{value:"Ignoring errors option was ineffective in synchronous mode for workflow HTTP request node. ",paraId:15,tocIndex:15},{value:"fix(plugin-workflow-request): fix ignoreFail in sync mode #4334",paraId:15,tocIndex:15},{value:"Workflow HTTP request node value input box overflowed. ",paraId:15,tocIndex:15},{value:"fix(plugin-workflow-request): fix value fields overflowing #4354",paraId:15,tocIndex:15},{value:"Special characters caused workflow HTTP request node to hang. ",paraId:15,tocIndex:15},{value:"fix(plugin-workflow-request): fix request hanging when invalid header value #4376",paraId:15,tocIndex:15},{value:"Fixed issue where setting marginBlock in the theme editor affected form field spacing. ",paraId:15,tocIndex:15},{value:"fix(theme-editor): form field spacing should not be affected by token.marginBlock #4374",paraId:15,tocIndex:15},{value:'Fixed issue where clicking the "License" option in the top right corner of the page redirected incorrectly. ',paraId:15,tocIndex:15},{value:"PR #4415",paraId:15,tocIndex:15},{value:"Fixed issue where the field operator was invalid when saving a filter form as a block template. ",paraId:15,tocIndex:15},{value:"PR #4390",paraId:15,tocIndex:15}]},717985:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"#4441",paraId:0},{value:"Reference document:",paraId:1,tocIndex:2},{value:"set block height",paraId:2,tocIndex:2},{value:"#4506",paraId:0},{value:"Support configuring variables in the URL or search params.",paraId:3,tocIndex:3},{value:`
 `,paraId:0},{value:"Reference document:",paraId:4,tocIndex:3},{value:"Link action",paraId:5,tocIndex:3},{value:"#4506",paraId:0},{value:"The variable is only available when there is a query string in the page URL, making it more convenient to use in conjunction with ",paraId:6,tocIndex:4},{value:"link action",paraId:7,tocIndex:4},{value:".",paraId:6,tocIndex:4},{value:"Reference document:",paraId:8,tocIndex:4},{value:"URL search params",paraId:9,tocIndex:4},{value:"Link action",paraId:10,tocIndex:4},{value:"#4512",paraId:0},{value:"Reference document:",paraId:11,tocIndex:5},{value:"iframe block",paraId:12,tocIndex:5},{value:"#4118",paraId:0},{value:"Reference document:",paraId:13,tocIndex:6},{value:"File Storage",paraId:14,tocIndex:6},{value:"#4559",paraId:0},{value:"Currently only support image preview.",paraId:15,tocIndex:8},{value:"#4586",paraId:0},{value:"#4468",paraId:0},{value:"Improved the stability of import and export function, increased the limit of import and export to 2000 records. Supports extended import and export logic of custom field types.",paraId:16,tocIndex:11},{value:"#4452",paraId:0},{value:'Except for the "current time", the variables representing dates are intervals (arrays) rather than moments (strings). They can be used for filtering, but cannot be directly used as default values.',paraId:17,tocIndex:12},{value:"#4492",paraId:0},{value:"Multi-select fields do not show assignment options. If a single-select field is selected and assigned, then switching to a multi-select field will clear the configuration",paraId:18,tocIndex:13},{value:"#4538",paraId:0},{value:"#4459",paraId:0},{value:"Refining error fallback for different components in the frontend to prevent the entrie page from becoming unusable due to a frontend error.",paraId:19,tocIndex:15},{value:"#4524",paraId:0},{value:"Modify character length limit of username to 1-50 (",paraId:20,tocIndex:17},{value:"#4502",paraId:20,tocIndex:17},{value:")",paraId:20,tocIndex:17},{value:"Do not hide foreign key fields\uFF08",paraId:20,tocIndex:17},{value:"#4499",paraId:20,tocIndex:17},{value:"\uFF09",paraId:20,tocIndex:17},{value:"#4484",paraId:0},{value:"#4439",paraId:0},{value:"#4458",paraId:0},{value:"Fix the issue of content in the sub-table not being cleared after form submission. (",paraId:21,tocIndex:22},{value:"#4475",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:'Fix the issue of abnormal use of the "Current object" variable in the sub-table. (',paraId:21,tocIndex:22},{value:"#4521",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"add 'Set default zoom level' option for map fields. (",paraId:21,tocIndex:22},{value:"#4527",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Fix the issue of block not being displayed when adding a block using block templates in a popup window. (",paraId:21,tocIndex:22},{value:"#4531",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Fix the style issue of form data templates. (",paraId:21,tocIndex:22},{value:"#4536",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Workflow: expression box style disappeared in calculation node. (",paraId:21,tocIndex:22},{value:"#4513",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Workflow: field type incorrect when created in custom form of manual node. (",paraId:21,tocIndex:22},{value:"#4519",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Workflow: permission issue of triggering custom action event. (",paraId:21,tocIndex:22},{value:"#4522",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Workflow: incorrect depth configuration of preloading assoacition for multiple data source. (",paraId:21,tocIndex:22},{value:"#4526",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"json-templates",paraId:21,tocIndex:22},{value:" library bug. (",paraId:21,tocIndex:22},{value:"#4525",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"File manager: error when uploading or deleting file on COS. (",paraId:21,tocIndex:22},{value:"#4529",paraId:21,tocIndex:22},{value:", ",paraId:21,tocIndex:22},{value:"#4537",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Form linkage rule displays [object Object] when assigning a value of 0.00 to a numeric field. (",paraId:21,tocIndex:22},{value:"#4482",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Subtable is missing the control setting item for the add new button. (",paraId:21,tocIndex:22},{value:"#4498",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Submit button in the table edit form is missing the linkage rule setting item. (",paraId:21,tocIndex:22},{value:"#4515",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Data-visualization: fix the issue of field components invisible when setting default values for chart filter fields (",paraId:21,tocIndex:22},{value:"#4509",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Authentication: fix the issue where the sign up page is not found for newly created basic authenticator. (",paraId:21,tocIndex:22},{value:"#4556",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Localization: fix the issue where the page titles is not translated when translating the menu texts. (",paraId:21,tocIndex:22},{value:"#4557",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22},{value:"Map: fix the issue where AMap shows a key error despite correct configuration. (",paraId:21,tocIndex:22},{value:"#4574",paraId:21,tocIndex:22},{value:")",paraId:21,tocIndex:22}]},240264:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Fork the source code to your own repository",paraId:0,tocIndex:0},{value:"Modify source code",paraId:0,tocIndex:0},{value:"Submit pull request",paraId:0,tocIndex:0},{value:"Sign the CLA",paraId:0,tocIndex:0},{value:`# Replace the following git address with your own repo
git clone https://github.com/nocobase/nocobase.git
cd nocobase
yarn install
`,paraId:1,tocIndex:1},{value:`# Install and start the application
yarn dev
# Run all tests
yarn test
# Run all test files in the folder
yarn test <dir>
# Run a single test file
yarn test <file>
`,paraId:2,tocIndex:2},{value:`# Start documentation
yarn doc --lang=zh-CN
yarn doc --lang=en-US
`,paraId:3,tocIndex:3},{value:"The documentation is in the docs directory and follows Markdown syntax",paraId:4,tocIndex:3},{value:`|- /docs/
  |- en-US
  |- zh-CN
`,paraId:5,tocIndex:3},{value:"For more CLI instructions, please ",paraId:6,tocIndex:4},{value:"refer to the NocoBase CLI chapter",paraId:6,tocIndex:4},{value:".",paraId:6,tocIndex:4}]},854935:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},144293:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase uses excellent and proven open source products, to whom we express our sincere gratitude.",paraId:0,tocIndex:0},{value:"Ant Design",paraId:1,tocIndex:0},{value:"Dnd Kit",paraId:1,tocIndex:0},{value:"Formily",paraId:1,tocIndex:0},{value:"I18next",paraId:1,tocIndex:0},{value:"Koa",paraId:1,tocIndex:0},{value:"React",paraId:1,tocIndex:0},{value:"Sequelize",paraId:1,tocIndex:0},{value:"UmiJS",paraId:1,tocIndex:0}]},755506:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The default language of NocoBase is English. Currently, the main application supports English, Italian, Dutch, Simplified Chinese, and Japanese. We sincerely invite you to contribute translations for additional languages, enabling users around the world to enjoy an even more convenient NocoBase experience.",paraId:0,tocIndex:0},{value:"This applies only to the localization of the NocoBase system interface and plugins, and does not cover other custom content (such as data tables or Markdown blocks).",paraId:1,tocIndex:3},{value:`NocoBase uses Git to manage its localization content. The primary repository is:
`,paraId:2,tocIndex:4},{value:"https://github.com/nocobase/locales",paraId:2,tocIndex:4},{value:"Each language is represented by a JSON file named according to its language code (e.g., de-DE.json, fr-FR.json). The file structure is organized by plugin modules, using key-value pairs to store translations. For example:",paraId:3,tocIndex:4},{value:`{
  // Client plugin
  "@nocobase/client": {
    "(Fields only)": "(Fields only)",
    "12 hour": "12 hour",
    "24 hour": "24 hour"
    // ...other key-value pairs
  },
  "@nocobase/plugin-acl": {
    // Key-value pairs for this plugin
  }
  // ...other plugin modules
}
`,paraId:4,tocIndex:4},{value:"When translating, please gradually convert it to a structure similar to the following:",paraId:5,tocIndex:4},{value:`{
  // Client plugin
  "@nocobase/client": {
    "(Fields only)": "(Fields only - translated)",
    "12 hour": "12 hour - translated",
    "24 hour": "24 hour - translated"
    // ...other key-value pairs
  },
  "@nocobase/plugin-acl": {
    // Key-value pairs for this plugin
  }
  // ...other plugin modules
}
`,paraId:6,tocIndex:4},{value:`After completing your translation, please test and verify that all texts display correctly.
We've also released a translation validation plugin - search for `,paraId:7,tocIndex:5},{value:"Locale tester",paraId:7,tocIndex:5},{value:` in the plugin marketplace.
`,paraId:7,tocIndex:5},{value:`
After installation, copy the JSON content from the corresponding localization file in the git repository, paste it inside, and click OK to verify if the translation content is effective.
`,paraId:7,tocIndex:5},{value:"Once submitted, system scripts will automatically synchronize the localization content to the code repository.",paraId:8,tocIndex:5},{value:`The localization content for documentation and user manuals is stored in:
`,paraId:9,tocIndex:6},{value:"https://github.com/nocobase/docs",paraId:9,tocIndex:6},{value:`Localization is implemented by adding separate directories for each language, for example:
`,paraId:10,tocIndex:6},{value:"https://github.com/nocobase/docs/blob/main/docs/en-US/",paraId:10,tocIndex:6},{value:"Notes:",paraId:11,tocIndex:6},{value:`For directory text modifications, please refer to:
`,paraId:12,tocIndex:6},{value:"https://github.com/nocobase/docs/blob/main/docs/config/",paraId:12,tocIndex:6},{value:`Global component text modifications can be found at:
`,paraId:13,tocIndex:6},{value:"https://github.com/nocobase/docs/blob/main/.dumi/theme/builtins/",paraId:13,tocIndex:6},{value:`For example, plugin information text:
`,paraId:14,tocIndex:6},{value:"https://github.com/nocobase/docs/blob/main/.dumi/theme/builtins/PluginInfo.tsx",paraId:14,tocIndex:6},{value:`The website pages and all content are stored in:
`,paraId:15,tocIndex:7},{value:"https://github.com/nocobase/website",paraId:15,tocIndex:7},{value:"When adding a new language, please refer to the existing language pages:",paraId:16,tocIndex:8},{value:"English: ",paraId:17,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/en/",paraId:17,tocIndex:8},{value:"Chinese: ",paraId:17,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/cn/",paraId:17,tocIndex:8},{value:"Japanese: ",paraId:17,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/ja/",paraId:17,tocIndex:8},{value:"Global style modifications are located at:",paraId:18,tocIndex:8},{value:"English: ",paraId:19,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/layouts/BaseEN.astro",paraId:19,tocIndex:8},{value:"Chinese: ",paraId:19,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/layouts/BaseCN.astro",paraId:19,tocIndex:8},{value:"Japanese: ",paraId:19,tocIndex:8},{value:"https://github.com/nocobase/website/blob/main/src/layouts/BaseJA.astro",paraId:19,tocIndex:8},{value:`The website's global component localization is available at:
`,paraId:20,tocIndex:8},{value:"https://github.com/nocobase/website/tree/main/src/components",paraId:20,tocIndex:8},{value:"We use a mixed content management approach. English, Chinese, and Japanese content and resources are regularly synchronized from the CMS system and overwritten, while other languages can be edited directly in local files. Local content is stored in the ",paraId:21,tocIndex:9},{value:"content",paraId:21,tocIndex:9},{value:" directory, organized as follows:",paraId:21,tocIndex:9},{value:`/content
  /articles        # Blog articles
    /article-slug
      index.md     # English content (default)
      index.cn.md  # Chinese content 
      index.ja.md  # Japanese content
      metadata.json # Metadata and other localization properties
  /tutorials       # Tutorials
  /releases        # Release information
  /pages           # Some static pages
  /categories      # Category information
    /article-categories.json  # Article category list
    /category-slug            # Individual category details
      /category.json
  /tags            # Tag information
    /article-tags.json        # Article tag list
    /release-tags.json        # Release tag list
    /tag-slug                 # Individual tag details
      /tag.json
  /help-center     # Help center content
    /help-center-tree.json    # Help center navigation structure
  ....
`,paraId:22,tocIndex:9},{value:"About Markdown Content Translation",paraId:23,tocIndex:10},{value:"Create a new language file based on the default file (e.g., ",paraId:24,tocIndex:10},{value:"index.md",paraId:24,tocIndex:10},{value:" to ",paraId:24,tocIndex:10},{value:"index.fr.md",paraId:24,tocIndex:10},{value:")",paraId:24,tocIndex:10},{value:"Add localized properties in the corresponding fields in the JSON file",paraId:24,tocIndex:10},{value:"Maintain consistency in file structure, links, and image references",paraId:24,tocIndex:10},{value:`JSON Content Translation
Many content metadata are stored in JSON files, which typically contain multilingual fields:`,paraId:25,tocIndex:10},{value:`{
  "id": 123,
  "title": "English Title",       // English title (default)
  "title_cn": "\u4E2D\u6587\u6807\u9898",          // Chinese title
  "title_ja": "\u65E5\u672C\u8A9E\u30BF\u30A4\u30C8\u30EB",    // Japanese title
  "description": "English description",
  "description_cn": "\u4E2D\u6587\u63CF\u8FF0",
  "description_ja": "\u65E5\u672C\u8A9E\u306E\u8AAC\u660E",
  "slug": "article-slug",         // URL path (usually not translated)
  "status": "published",
  "publishedAt": "2025-03-19T12:00:00Z"
}
`,paraId:26,tocIndex:10},{value:"Translation Notes:",paraId:27,tocIndex:10},{value:"Field Naming Convention",paraId:28,tocIndex:10},{value:": Translation fields typically use the ",paraId:28,tocIndex:10},{value:"{original_field}_{language_code}",paraId:28,tocIndex:10},{value:" format",paraId:28,tocIndex:10},{value:"For example: title_fr (French title), description_de (German description)",paraId:29,tocIndex:10},{value:"When Adding a New Language",paraId:30,tocIndex:10},{value:":",paraId:30,tocIndex:10},{value:"Add a corresponding language suffix version for each field that needs translation",paraId:31,tocIndex:10},{value:"Do not modify the original field values (such as title, description, etc.), as they serve as default language (English) content",paraId:31,tocIndex:10},{value:"CMS Synchronization Mechanism",paraId:32,tocIndex:10},{value:":",paraId:32,tocIndex:10},{value:"The CMS system periodically updates English, Chinese and Japanese content",paraId:33,tocIndex:10},{value:"The system will only update/overwrite content for these three languages (some properties in the JSON), and ",paraId:33,tocIndex:10},{value:"will not delete",paraId:33,tocIndex:10},{value:" language fields added by other contributors",paraId:33,tocIndex:10},{value:"For example: if you added a French translation (title_fr), CMS synchronization will not affect this field",paraId:33,tocIndex:10},{value:"To add support for a new language, you need to modify the ",paraId:34,tocIndex:11},{value:"SUPPORTED_LANGUAGES",paraId:34,tocIndex:11},{value:" configuration in the ",paraId:34,tocIndex:11},{value:"src/utils/index.ts",paraId:34,tocIndex:11},{value:" file:",paraId:34,tocIndex:11},{value:`export const SUPPORTED_LANGUAGES = {
  en: {
    code: 'en',
    locale: 'en-US',
    name: 'English',
    default: true
  },
  cn: {
    code: 'cn',
    locale: 'zh-CN',
    name: 'Chinese'
  },
  ja: {
    code: 'ja',
    locale: 'ja-JP',
    name: 'Japanese'
  },
  // Example of adding a new language:
  fr: {
    code: 'fr',
    locale: 'fr-FR',
    name: 'French'
  }
};
`,paraId:35,tocIndex:11},{value:"Each language needs corresponding layout files:",paraId:36,tocIndex:12},{value:"Create a new layout file (e.g., for French, create ",paraId:37,tocIndex:12},{value:"src/layouts/BaseFR.astro",paraId:37,tocIndex:12},{value:")",paraId:37,tocIndex:12},{value:"You can copy an existing layout file (such as ",paraId:37,tocIndex:12},{value:"BaseEN.astro",paraId:37,tocIndex:12},{value:") and translate it",paraId:37,tocIndex:12},{value:"The layout file contains translations for global elements like navigation menus, footers, etc.",paraId:37,tocIndex:12},{value:"Be sure to update the language switcher configuration to properly switch to the newly added language",paraId:37,tocIndex:12},{value:"Create independent page directories for the new language:",paraId:38,tocIndex:13},{value:"Create a folder named with the language code in the ",paraId:39,tocIndex:13},{value:"src",paraId:39,tocIndex:13},{value:" directory (e.g., ",paraId:39,tocIndex:13},{value:"src/fr/",paraId:39,tocIndex:13},{value:")",paraId:39,tocIndex:13},{value:"Copy the page structure from other language directories (e.g., ",paraId:39,tocIndex:13},{value:"src/en/",paraId:39,tocIndex:13},{value:")",paraId:39,tocIndex:13},{value:"Update page content, translating titles, descriptions and text into the target language",paraId:39,tocIndex:13},{value:"Ensure pages use the correct layout component (e.g., ",paraId:39,tocIndex:13},{value:".layout: '@/layouts/BaseFR.astro'",paraId:39,tocIndex:13},{value:")",paraId:39,tocIndex:13},{value:"Some common components also need translation:",paraId:40,tocIndex:14},{value:"Check components in the ",paraId:41,tocIndex:14},{value:"src/components/",paraId:41,tocIndex:14},{value:" directory",paraId:41,tocIndex:14},{value:"Pay special attention to components with fixed text (like navigation bars, footers, etc.)",paraId:41,tocIndex:14},{value:"Components may use conditional rendering to display content in different languages:",paraId:41,tocIndex:14},{value:`{Astro.url.pathname.startsWith('/en') && <p>English content</p>}
{Astro.url.pathname.startsWith('/cn') && <p>\u4E2D\u6587\u5185\u5BB9</p>}
{Astro.url.pathname.startsWith('/fr') && <p>Contenu fran\xE7ais</p>}
`,paraId:42,tocIndex:14},{value:"After completing the translation, conduct thorough testing:",paraId:43,tocIndex:15},{value:"Run the website locally (usually using ",paraId:44,tocIndex:15},{value:"yarn dev",paraId:44,tocIndex:15},{value:")",paraId:44,tocIndex:15},{value:"Check how all pages display in the new language",paraId:44,tocIndex:15},{value:"Verify that the language switching functionality works properly",paraId:44,tocIndex:15},{value:"Ensure all links point to the correct language version pages",paraId:44,tocIndex:15},{value:"Check responsive layouts to ensure translated text doesn't break page design",paraId:44,tocIndex:15},{value:"If you want to contribute a new language translation to NocoBase, please follow these steps:",paraId:45,tocIndex:16},{value:"For the system interface, clone the ",paraId:46,tocIndex:16},{value:"https://github.com/nocobase/locales",paraId:46,tocIndex:16},{value:" repository and create a new language JSON file based on an existing file.",paraId:46,tocIndex:16},{value:"For documentation, clone the ",paraId:46,tocIndex:16},{value:"https://github.com/nocobase/docs",paraId:46,tocIndex:16},{value:" repository, create a new language directory, and begin translating.",paraId:46,tocIndex:16},{value:"For the website, clone the ",paraId:46,tocIndex:16},{value:"https://github.com/nocobase/website",paraId:46,tocIndex:16},{value:" repository and create new language pages by referencing existing ones.",paraId:46,tocIndex:16},{value:"After completing your translation, please submit a Pull Request to NocoBase. The new languages will appear in the system configuration, allowing you to select which languages to display.",paraId:47,tocIndex:16},{value:"The NocoBase language files are located at the following locations:",paraId:48,tocIndex:17},{value:`packages/core/**/src/locale
packages/plugins/**/src/locale
`,paraId:49,tocIndex:17},{value:"The core translations are primarily located here:",paraId:50,tocIndex:17},{value:"https://github.com/nocobase/nocobase/tree/main/packages/core/client/src/locale",paraId:51,tocIndex:17},{value:"Please copy en_US.ts, rename it with the language code you wish to add, and translate its strings. Once completed, submit a Pull Request, and the language will be added to the system configuration.",paraId:52,tocIndex:17},{value:"The following table lists available languages and localization progress for your reference:",paraId:53,tocIndex:18},{value:"Language Culture Name",paraId:54,tocIndex:18},{value:"Display Name",paraId:54,tocIndex:18},{value:"Progress",paraId:54,tocIndex:18},{value:"Contributors",paraId:54,tocIndex:18},{value:"ar-EG",paraId:54,tocIndex:18},{value:"\u0627\u0644\u0639\u0631\u0628\u064A\u0629",paraId:54,tocIndex:18},{value:"az-AZ",paraId:54,tocIndex:18},{value:"Az\u0259rbaycan dili",paraId:54,tocIndex:18},{value:"bg-BG",paraId:54,tocIndex:18},{value:"\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",paraId:54,tocIndex:18},{value:"bn-BD",paraId:54,tocIndex:18},{value:"Bengali",paraId:54,tocIndex:18},{value:"by-BY",paraId:54,tocIndex:18},{value:"\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0456",paraId:54,tocIndex:18},{value:"ca-ES",paraId:54,tocIndex:18},{value:"\u0421atal\xE0/Espanya",paraId:54,tocIndex:18},{value:"cs-CZ",paraId:54,tocIndex:18},{value:"\u010Cesky",paraId:54,tocIndex:18},{value:"da-DK",paraId:54,tocIndex:18},{value:"Dansk",paraId:54,tocIndex:18},{value:"de-DE",paraId:54,tocIndex:18},{value:"Deutsch",paraId:54,tocIndex:18},{value:"el-GR",paraId:54,tocIndex:18},{value:"\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",paraId:54,tocIndex:18},{value:"en-GB",paraId:54,tocIndex:18},{value:"English(GB)",paraId:54,tocIndex:18},{value:"en-US",paraId:54,tocIndex:18},{value:"English",paraId:54,tocIndex:18},{value:"es-ES",paraId:54,tocIndex:18},{value:"Espa\xF1ol",paraId:54,tocIndex:18},{value:"et-EE",paraId:54,tocIndex:18},{value:"Estonian (Eesti)",paraId:54,tocIndex:18},{value:"fa-IR",paraId:54,tocIndex:18},{value:"\u0641\u0627\u0631\u0633\u06CC",paraId:54,tocIndex:18},{value:"fi-FI",paraId:54,tocIndex:18},{value:"Suomi",paraId:54,tocIndex:18},{value:"fr-BE",paraId:54,tocIndex:18},{value:"Fran\xE7ais(BE)",paraId:54,tocIndex:18},{value:"fr-CA",paraId:54,tocIndex:18},{value:"Fran\xE7ais(CA)",paraId:54,tocIndex:18},{value:"fr-FR",paraId:54,tocIndex:18},{value:"Fran\xE7ais",paraId:54,tocIndex:18},{value:"ga-IE",paraId:54,tocIndex:18},{value:"Gaeilge",paraId:54,tocIndex:18},{value:"gl-ES",paraId:54,tocIndex:18},{value:"Galego",paraId:54,tocIndex:18},{value:"he-IL",paraId:54,tocIndex:18},{value:"\u05E2\u05D1\u05E8\u05D9\u05EA",paraId:54,tocIndex:18},{value:"hi-IN",paraId:54,tocIndex:18},{value:"\u0939\u093F\u0928\u094D\u0926\u0940",paraId:54,tocIndex:18},{value:"hr-HR",paraId:54,tocIndex:18},{value:"Hrvatski jezik",paraId:54,tocIndex:18},{value:"hu-HU",paraId:54,tocIndex:18},{value:"Magyar",paraId:54,tocIndex:18},{value:"hy-AM",paraId:54,tocIndex:18},{value:"\u0540\u0561\u0575\u0565\u0580\u0565\u0576",paraId:54,tocIndex:18},{value:"id-ID",paraId:54,tocIndex:18},{value:"Bahasa Indonesia",paraId:54,tocIndex:18},{value:"is-IS",paraId:54,tocIndex:18},{value:"\xCDslenska",paraId:54,tocIndex:18},{value:"it-IT",paraId:54,tocIndex:18},{value:"Italiano",paraId:54,tocIndex:18},{value:"@N3tN00b3r",paraId:54,tocIndex:18},{value:"ja-JP",paraId:54,tocIndex:18},{value:"\u65E5\u672C\u8A9E",paraId:54,tocIndex:18},{value:"ka-GE",paraId:54,tocIndex:18},{value:"\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8",paraId:54,tocIndex:18},{value:"kk-KZ",paraId:54,tocIndex:18},{value:"\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456",paraId:54,tocIndex:18},{value:"km-KH",paraId:54,tocIndex:18},{value:"\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",paraId:54,tocIndex:18},{value:"kn-IN",paraId:54,tocIndex:18},{value:"\u0C95\u0CA8\u0CCD\u0CA8\u0CA1",paraId:54,tocIndex:18},{value:"ko-KR",paraId:54,tocIndex:18},{value:"\uD55C\uAD6D\uC5B4",paraId:54,tocIndex:18},{value:"ku-IQ",paraId:54,tocIndex:18},{value:"\u06A9\u0648\u0631\u062F\u06CC",paraId:54,tocIndex:18},{value:"lt-LT",paraId:54,tocIndex:18},{value:"lietuvi\u0173",paraId:54,tocIndex:18},{value:"lv-LV",paraId:54,tocIndex:18},{value:"Latvie\u0161u valoda",paraId:54,tocIndex:18},{value:"mk-MK",paraId:54,tocIndex:18},{value:"\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 \u0458\u0430\u0437\u0438\u043A",paraId:54,tocIndex:18},{value:"ml-IN",paraId:54,tocIndex:18},{value:"\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02",paraId:54,tocIndex:18},{value:"mn-MN",paraId:54,tocIndex:18},{value:"\u041C\u043E\u043D\u0433\u043E\u043B \u0445\u044D\u043B",paraId:54,tocIndex:18},{value:"ms-MY",paraId:54,tocIndex:18},{value:"\u0628\u0647\u0627\u0633 \u0645\u0644\u0627\u064A\u0648",paraId:54,tocIndex:18},{value:"nb-NO",paraId:54,tocIndex:18},{value:"Norsk bokm\xE5l",paraId:54,tocIndex:18},{value:"ne-NP",paraId:54,tocIndex:18},{value:"\u0928\u0947\u092A\u093E\u0932\u0940",paraId:54,tocIndex:18},{value:"nl-BE",paraId:54,tocIndex:18},{value:"Vlaams",paraId:54,tocIndex:18},{value:"nl-NL",paraId:54,tocIndex:18},{value:"Nederlands",paraId:54,tocIndex:18},{value:"@mathyvds",paraId:54,tocIndex:18},{value:"pl-PL",paraId:54,tocIndex:18},{value:"Polski",paraId:54,tocIndex:18},{value:"pt-BR",paraId:54,tocIndex:18},{value:"Portugu\xEAs brasileiro",paraId:54,tocIndex:18},{value:"pt-PT",paraId:54,tocIndex:18},{value:"Portugu\xEAs",paraId:54,tocIndex:18},{value:"ro-RO",paraId:54,tocIndex:18},{value:"Rom\xE2nia",paraId:54,tocIndex:18},{value:"ru-RU",paraId:54,tocIndex:18},{value:"\u0420\u0443\u0441\u0441\u043A\u0438\u0439",paraId:54,tocIndex:18},{value:"si-LK",paraId:54,tocIndex:18},{value:"\u0DC3\u0DD2\u0D82\u0DC4\u0DBD",paraId:54,tocIndex:18},{value:"sk-SK",paraId:54,tocIndex:18},{value:"Sloven\u010Dina",paraId:54,tocIndex:18},{value:"sl-SI",paraId:54,tocIndex:18},{value:"Sloven\u0161\u010Dina",paraId:54,tocIndex:18},{value:"sr-RS",paraId:54,tocIndex:18},{value:"\u0441\u0440\u043F\u0441\u043A\u0438 \u0458\u0435\u0437\u0438\u043A",paraId:54,tocIndex:18},{value:"sv-SE",paraId:54,tocIndex:18},{value:"Svenska",paraId:54,tocIndex:18},{value:"ta-IN",paraId:54,tocIndex:18},{value:"Tamil",paraId:54,tocIndex:18},{value:"th-TH",paraId:54,tocIndex:18},{value:"\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22",paraId:54,tocIndex:18},{value:"tk-TK",paraId:54,tocIndex:18},{value:"Turkmen",paraId:54,tocIndex:18},{value:"tr-TR",paraId:54,tocIndex:18},{value:"T\xFCrk\xE7e",paraId:54,tocIndex:18},{value:"uk-UA",paraId:54,tocIndex:18},{value:"\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",paraId:54,tocIndex:18},{value:"ur-PK",paraId:54,tocIndex:18},{value:"O\u02BBzbekcha",paraId:54,tocIndex:18},{value:"vi-VN",paraId:54,tocIndex:18},{value:"Ti\u1EBFng Vi\u1EC7t",paraId:54,tocIndex:18},{value:"zh-CN",paraId:54,tocIndex:18},{value:"\u7B80\u4F53\u4E2D\u6587",paraId:54,tocIndex:18},{value:"zh-HK",paraId:54,tocIndex:18},{value:"\u7E41\u9AD4\u4E2D\u6587\uFF08\u9999\u6E2F\uFF09",paraId:54,tocIndex:18},{value:"zh-TW",paraId:54,tocIndex:18},{value:"\u7E41\u9AD4\u4E2D\u6587\uFF08\u53F0\u6E7E\uFF09",paraId:54,tocIndex:18}]},609859:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Starting from version v1.6.0, NocoBase supports running applications in cluster mode. When an application runs in cluster mode, its performance in handling concurrent accesses can be improved through multiple instances and using a multi-core mode.",paraId:0},{value:"The current cluster mode is focused solely on application instances. Other system components in the distributed architecture can be selected by the operations personnel of different teams according to their operational requirements, as long as they comply with the current constraints.",paraId:1,tocIndex:2},{value:"The application cluster is a collection of instances of NocoBase applications, where each instance can be an independent node or multiple application processes running on a single machine in multi-core mode, or a combination of both.",paraId:2,tocIndex:3},{value:"Since the current cluster mode only targets application instances, the database currently only supports a single node. For setups such as master-slave databases, it must be implemented through middleware independently, ensuring transparency to the NocoBase application.",paraId:3,tocIndex:4},{value:"The NocoBase cluster mode relies on middleware such as caching, synchronization messages, message queues, and distributed locks to achieve communication and coordination between clusters. Currently, Redis is preliminarily supported as middleware for these functionalities.",paraId:4,tocIndex:5},{value:"The NocoBase cluster mode requires a load balancer to distribute requests and perform health checks and failover for application instances. This part should be selected and configured according to the operations needs of the team.",paraId:5,tocIndex:6},{value:"Taking a self-built Nginx as an example, add the following content to the configuration file:",paraId:6,tocIndex:9},{value:`upstream myapp {
    # ip_hash; # Can be used for session persistence, once enabled, requests from the same client will always be sent to the same backend server.
    server 172.31.0.1:13000; # Internal node 1
    server 172.31.0.2:13000; # Internal node 2
    server 172.31.0.3:13000; # Internal node 3
}

server {
    listen 80;

    location / {
        # Use the defined upstream for load balancing
        proxy_pass http://myapp;
        # ... other configurations
    }
}
`,paraId:7,tocIndex:9},{value:"This means that requests are reverse proxied and distributed to different server nodes for processing. The configurations for load balancing middleware provided by other cloud service providers can be referenced in the specific configuration documentation provided by them.",paraId:8,tocIndex:9},{value:"Start a Redis service within the cluster's internal network (or k8s). Alternatively, enable separate Redis services based on different functionalities (caching, synchronization messages, and distributed locks).",paraId:9,tocIndex:10},{value:"If local storage is used, in a multi-node mode, it should be mounted as a local storage directory to support shared access across multiple nodes. Otherwise, local storage will not automatically synchronize and cannot be used properly.",paraId:10,tocIndex:11},{value:"If not using local storage, after the application starts, the cloud service-based file storage space must be set as the default file storage space, and the application\u2019s logo (or other files) should be migrated to the cloud storage space.",paraId:11,tocIndex:11},{value:"Function",paraId:12,tocIndex:12},{value:"Plugin",paraId:12,tocIndex:12},{value:"Caching",paraId:12,tocIndex:12},{value:"Built-in",paraId:12,tocIndex:12},{value:"Synchronization Messages",paraId:12,tocIndex:12},{value:"@nocobase/plugin-pubsub-adapter-redis",paraId:12,tocIndex:12},{value:"Message Queue",paraId:12,tocIndex:12},{value:"@nocobase/plugin-queue-adapter-redis",paraId:12,tocIndex:12},{value:"Distributed Lock",paraId:12,tocIndex:12},{value:"@nocobase/plugin-lock-adapter-redis",paraId:12,tocIndex:12},{value:"Just like applications in single-node mode, as long as the respective environment variables for the commercial plugin service platform are configured, the application will automatically download the corresponding plugins after startup.",paraId:13},{value:"In addition to the basic environment variables, the following environment variables must be configured consistently across all nodes.",paraId:14,tocIndex:13},{value:"The key used for creating JWT Tokens during user login; it is recommended to use a random string.",paraId:15,tocIndex:14},{value:`APP_KEY=
`,paraId:16,tocIndex:14},{value:`# Enable PM2 multi-core mode
# CLUSTER_MODE=max # Default is disabled and needs to be manually configured
`,paraId:17,tocIndex:15},{value:`# Cache adapter; must be set to redis in cluster mode (default is memory if not set)
CACHE_DEFAULT_STORE=redis

# Redis cache adapter connection address; must be actively set
CACHE_REDIS_URL=
`,paraId:18,tocIndex:16},{value:`# Redis synchronization adapter connection address; default is redis://localhost:6379/0 if not set
PUBSUB_ADAPTER_REDIS_URL=
`,paraId:19,tocIndex:17},{value:`# Lock adapter; must be set to redis in cluster mode (default is memory local lock if not set)
LOCK_ADAPTER_DEFAULT=redis

# Redis lock adapter connection address; default is redis://localhost:6379/0 if not set
LOCK_ADAPTER_REDIS_URL=
`,paraId:20,tocIndex:18},{value:`# Enable Redis as the message queue adapter, default is in-memory adapter if not set
QUEUE_ADAPTER=redis
# Redis message queue adapter connection address; default is redis://localhost:6379/0 if not set
QUEUE_ADAPTER_REDIS_URL=
`,paraId:21,tocIndex:19},{value:"Generally, the related adapters can all use the same Redis instance, but it\u2019s best to distinguish by using different databases to avoid potential key conflict issues.",paraId:22},{value:`CACHE_REDIS_URL=redis://localhost:6379/0
PUBSUB_ADAPTER_REDIS_URL=redis://localhost:6379/1
LOCK_ADAPTER_REDIS_URL=redis://localhost:6379/2
QUEUE_ADAPTER_REDIS_URL=redis://localhost:6379/3
`,paraId:23},{value:`# Built-in plugins to be enabled
APPEND_PRESET_BUILT_IN_PLUGINS=lock-adapter-redis,pubsub-adapter-redis,queue-adapter-redis
`,paraId:24,tocIndex:20},{value:"When starting the application for the first time, you should first start one of the nodes and wait for the plugins to be installed and enabled before starting the other nodes.",paraId:25,tocIndex:21},{value:"When it is necessary to upgrade the NocoBase version or enable/disable plugins, refer to this process.",paraId:26,tocIndex:22},{value:"In a cluster production environment, caution or prohibition is advised when using features such as plugin management and version upgrades.",paraId:27},{value:"NocoBase has not yet implemented online upgrades for the cluster version. To ensure data consistency, services need to be paused during the upgrade process.",paraId:28},{value:"Stop all NocoBase application instances, middleware such as Redis, and redirect load-balanced traffic to a 503 status page.",paraId:29,tocIndex:23},{value:"Before upgrading, it is strongly recommended to back up database data to prevent issues during the upgrade process.",paraId:30,tocIndex:24},{value:"Refer to ",paraId:31,tocIndex:25},{value:"Docker Upgrade",paraId:32,tocIndex:25},{value:" to update the version of the NocoBase application image.",paraId:31,tocIndex:25},{value:"Restart the dependent middleware (Redis)",paraId:33,tocIndex:26},{value:"Start one node in the cluster and wait for the update to complete and start successfully",paraId:33,tocIndex:26},{value:"Verify functionality; if there are exceptions that cannot be resolved, you may roll back to the previous version",paraId:33,tocIndex:26},{value:"Start the other nodes",paraId:33,tocIndex:26},{value:"Redirect load-balanced traffic to the application cluster",paraId:33,tocIndex:26},{value:"This document only introduces the basic concepts and deployment steps of NocoBase cluster mode. For more configuration items and specific scenarios, please refer to the following documents:",paraId:34,tocIndex:27},{value:"Services splitting",paraId:35,tocIndex:27}]},910407:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},501784:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"v1.9.0+",paraId:0},{value:"By default, all services in a NocoBase application run in a single Node.js instance. As features become more complex over time, some time-consuming services may affect overall performance. To improve performance, NocoBase supports running services on different nodes in cluster mode. This prevents a single service's performance issues from affecting the entire application\u2019s responsiveness. It also allows specific services to be scaled horizontally to optimize resource usage.",paraId:1,tocIndex:0},{value:"When deployed in a cluster, NocoBase allows different services to run on different nodes. The diagram below illustrates this structure:",paraId:2,tocIndex:0},{value:"To split services across nodes, configure the ",paraId:3,tocIndex:1},{value:"WORKER_MODE",paraId:3,tocIndex:1},{value:" environment variable as follows:",paraId:3,tocIndex:1},{value:"WORKER_MODE=<empty>",paraId:4,tocIndex:1},{value:": Default mode, handles both requests and tasks. Fully compatible with non-cluster setups.",paraId:4,tocIndex:1},{value:"WORKER_MODE=!",paraId:4,tocIndex:1},{value:": Only handles requests, no background tasks.",paraId:4,tocIndex:1},{value:"WORKER_MODE=workflow:process,async-task:process",paraId:4,tocIndex:1},{value:": Only handles specified background tasks, does not process requests.",paraId:4,tocIndex:1},{value:"WORKER_MODE=*",paraId:4,tocIndex:1},{value:": Handles all background tasks, no request handling.",paraId:4,tocIndex:1},{value:"WORKER_MODE=!,workflow:process",paraId:4,tocIndex:1},{value:": Handles requests and specific background tasks.",paraId:4,tocIndex:1},{value:"WORKER_MODE=-",paraId:4,tocIndex:1},{value:": Handles neither requests nor tasks (used in worker processes).",paraId:4,tocIndex:1},{value:"In Kubernetes (K8S), nodes with the same role can be configured using the same environment variable for easy horizontal scaling.",paraId:5,tocIndex:1},{value:"Service KEY",paraId:6,tocIndex:3},{value:": ",paraId:6,tocIndex:3},{value:"workflow:process",paraId:6,tocIndex:3},{value:"These workflows queue up for processing and do not require users to wait for a result. Heavy or frequent workflows should be assigned to dedicated nodes.",paraId:7,tocIndex:3},{value:"Service KEY",paraId:8,tocIndex:4},{value:": ",paraId:8,tocIndex:4},{value:"async-task:process",paraId:8,tocIndex:4},{value:"Includes tasks like async import/export. Dedicated nodes are recommended under heavy load or high concurrency.",paraId:9,tocIndex:4},{value:"For three nodes: ",paraId:10,tocIndex:6},{value:"node1",paraId:10,tocIndex:6},{value:", ",paraId:10,tocIndex:6},{value:"node2",paraId:10,tocIndex:6},{value:", and ",paraId:10,tocIndex:6},{value:"node3",paraId:10,tocIndex:6},{value:":",paraId:10,tocIndex:6},{value:"node1",paraId:11,tocIndex:6},{value:": Handles only UI requests \u2013 ",paraId:11,tocIndex:6},{value:"WORKER_MODE=!",paraId:11,tocIndex:6},{value:"node2",paraId:11,tocIndex:6},{value:": Handles only workflow tasks \u2013 ",paraId:11,tocIndex:6},{value:"WORKER_MODE=workflow:process",paraId:11,tocIndex:6},{value:"node3",paraId:11,tocIndex:6},{value:": Handles only async tasks \u2013 ",paraId:11,tocIndex:6},{value:"WORKER_MODE=async-task:process",paraId:11,tocIndex:6},{value:"For four nodes: ",paraId:12,tocIndex:7},{value:"node1",paraId:12,tocIndex:7},{value:", ",paraId:12,tocIndex:7},{value:"node2",paraId:12,tocIndex:7},{value:", ",paraId:12,tocIndex:7},{value:"node3",paraId:12,tocIndex:7},{value:", and ",paraId:12,tocIndex:7},{value:"node4",paraId:12,tocIndex:7},{value:":",paraId:12,tocIndex:7},{value:"node1",paraId:13,tocIndex:7},{value:" and ",paraId:13,tocIndex:7},{value:"node2",paraId:13,tocIndex:7},{value:": Handle requests \u2013 ",paraId:13,tocIndex:7},{value:"WORKER_MODE=!",paraId:13,tocIndex:7},{value:" (with load balancing)",paraId:13,tocIndex:7},{value:"node3",paraId:13,tocIndex:7},{value:" and ",paraId:13,tocIndex:7},{value:"node4",paraId:13,tocIndex:7},{value:": Handle all background tasks \u2013 ",paraId:13,tocIndex:7},{value:"WORKER_MODE=*",paraId:13,tocIndex:7},{value:"When developing plugins, resource-intensive services can be split using the following pattern:",paraId:14,tocIndex:8},{value:"Define a new service key (e.g., ",paraId:15,tocIndex:8},{value:"my-plugin:process",paraId:15,tocIndex:8},{value:") and document its use.",paraId:15,tocIndex:8},{value:"In the plugin backend, use ",paraId:15,tocIndex:8},{value:"app.serving()",paraId:15,tocIndex:8},{value:" to determine if the current node should handle the service.",paraId:15,tocIndex:8},{value:`const MY_PLUGIN_SERVICE_KEY = 'my-plugin:process';
// Inside plugin backend
if (this.app.serving(MY_PLUGIN_SERVICE_KEY)) {
  // Handle business logic
} else {
  // Skip handling
}
`,paraId:16,tocIndex:8}]},214198:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The other processes are no different from the ",paraId:0,tocIndex:0},{value:"create-nocobase-app",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Points to Note:",paraId:2,tocIndex:0},{value:"TZ",paraId:3,tocIndex:0},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:3,tocIndex:0},{value:"APP_KEY",paraId:3,tocIndex:0},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:3,tocIndex:0},{value:"DB_*",paraId:3,tocIndex:0},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation;",paraId:3,tocIndex:0},{value:"When deploying in a production environment, ",paraId:3,tocIndex:0},{value:"APP_ENV=production",paraId:3,tocIndex:0},{value:";",paraId:3,tocIndex:0},{value:"When deploying on a subpath, you need to configure ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH",paraId:3,tocIndex:0},{value:", such as ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH=/nocobase/",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"When deploying in a production environment, to reduce volume, you can install only the necessary dependencies with ",paraId:4,tocIndex:0},{value:"yarn install --production",paraId:4,tocIndex:0},{value:">>> For more information, view the complete 'Environment Variables' <<<",paraId:5},{value:"NocoBase has already built-in ",paraId:6,tocIndex:1},{value:"PM2",paraId:6,tocIndex:1},{value:" for managing application processes. In a production environment, you can directly use ",paraId:6,tocIndex:1},{value:"yarn start",paraId:6,tocIndex:1},{value:". If you need it to run in the background, just add the ",paraId:6,tocIndex:1},{value:"-d",paraId:6,tocIndex:1},{value:" parameter, for example:",paraId:6,tocIndex:1},{value:`# Run in the background
yarn start -d
`,paraId:7,tocIndex:1},{value:"Restart",paraId:8,tocIndex:1},{value:`yarn nocobase pm2-restart
`,paraId:9,tocIndex:1},{value:"Stop",paraId:10,tocIndex:1},{value:`yarn nocobase pm2-stop
`,paraId:11,tocIndex:1},{value:"More PM2 commands",paraId:12,tocIndex:1},{value:`yarn nocobase pm2 -h
`,paraId:13,tocIndex:1},{value:"In a production environment, you can consider having Nginx proxy the static files. NocoBase provides the ",paraId:14,tocIndex:2},{value:"create-nginx-conf",paraId:14,tocIndex:2},{value:" command to generate Nginx configuration files.",paraId:14,tocIndex:2},{value:`yarn nocobase create-nginx-conf
`,paraId:15,tocIndex:2},{value:"The file path is ",paraId:16,tocIndex:2},{value:"./storage/nocobase.conf",paraId:16,tocIndex:2},{value:". Adjust it further according to the actual situation, and finally add it to ",paraId:16,tocIndex:2},{value:"/etc/nginx/sites-enabled",paraId:16,tocIndex:2},{value:", for example:",paraId:16,tocIndex:2},{value:`ln -s /app/nocobase/storage/nocobase.conf /etc/nginx/sites-enabled/nocobase.conf
`,paraId:17,tocIndex:2},{value:"Remarks",paraId:18,tocIndex:2},{value:"When deploying to a subpath, you need to configure the ",paraId:19,tocIndex:2},{value:"APP_PUBLIC_PATH",paraId:19,tocIndex:2},{value:" environment variable. After configuring, you need to re-execute the ",paraId:19,tocIndex:2},{value:"create-nginx-conf",paraId:19,tocIndex:2},{value:" command;",paraId:19,tocIndex:2},{value:"Modify the generated ",paraId:19,tocIndex:2},{value:"nocobase.conf",paraId:19,tocIndex:2},{value:" according to the actual situation, such as configuring the domain name, etc.;",paraId:19,tocIndex:2},{value:"/app/nocobase/",paraId:19,tocIndex:2},{value:" is the directory where the example application is located, and it needs to be adjusted according to the actual situation;",paraId:19,tocIndex:2},{value:"/etc/nginx/sites-enabled",paraId:19,tocIndex:2},{value:" is the default Nginx configuration path, the actual situation may vary, you can check it with ",paraId:19,tocIndex:2},{value:"nginx -V",paraId:19,tocIndex:2},{value:";",paraId:19,tocIndex:2},{value:"If you are not using Nginx, you can make some adjustments referring to the Nginx configuration.",paraId:19,tocIndex:2}]},367417:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The other processes are no different from the ",paraId:0,tocIndex:0},{value:"Docker installation",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Points to Note:",paraId:2,tocIndex:0},{value:"TZ",paraId:3,tocIndex:0},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:3,tocIndex:0},{value:"APP_KEY",paraId:3,tocIndex:0},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:3,tocIndex:0},{value:"DB_*",paraId:3,tocIndex:0},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation;",paraId:3,tocIndex:0},{value:"When deploying in a production environment, ",paraId:3,tocIndex:0},{value:"APP_ENV=production",paraId:3,tocIndex:0},{value:";",paraId:3,tocIndex:0},{value:"When deploying on a subpath, you need to configure ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH",paraId:3,tocIndex:0},{value:", such as ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH=/nocobase/",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:">>> For more information, view the complete 'Environment Variables' <<<",paraId:4},{value:"Taking nginx as an example, proxy through nginx ",paraId:5,tocIndex:1},{value:"http://127.0.0.1:13000/",paraId:5,tocIndex:1},{value:`server {
    listen 80;
    server_name your_domain.com;  # Replace your_domain.com with your domain

    location / {
        proxy_pass http://127.0.0.1:13000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_buffering off;
    }
}
`,paraId:6,tocIndex:1},{value:"To deploy to a subpath, you need to configure the ",paraId:7,tocIndex:2},{value:"APP_PUBLIC_PATH",paraId:7,tocIndex:2},{value:" environment variable.",paraId:7,tocIndex:2},{value:`services:
  app:
    image: nocobase/nocobase:latest
    environment:
+     - APP_PUBLIC_PATH=/nocobase/
`,paraId:8,tocIndex:2},{value:"The application's URL is ",paraId:9,tocIndex:2},{value:"http://127.0.0.1:13000/nocobase/",paraId:9,tocIndex:2},{value:", and the Nginx configuration is",paraId:9,tocIndex:2},{value:`server {
    listen 80;
    server_name your_domain.com;  # Replace your_domain.com with your domain

    location /nocobase/ {
        proxy_pass http://127.0.0.1:13000/nocobase/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}
`,paraId:10,tocIndex:2},{value:"Finally, you can access it through http://your_domain.com/nocobase/",paraId:11,tocIndex:2}]},259094:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Points to Note:",paraId:0},{value:"TZ",paraId:1},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:1},{value:"APP_KEY",paraId:1},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:1},{value:"DB_*",paraId:1},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation;",paraId:1},{value:"When deploying in a production environment, ",paraId:1},{value:"APP_ENV=production",paraId:1},{value:";",paraId:1},{value:"When deploying on a subpath, you need to configure ",paraId:1},{value:"APP_PUBLIC_PATH",paraId:1},{value:", such as ",paraId:1},{value:"APP_PUBLIC_PATH=/nocobase/",paraId:1},{value:".",paraId:1}]},225486:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The other processes are no different from the ",paraId:0,tocIndex:0},{value:"Git source code",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Points to Note:",paraId:2,tocIndex:0},{value:"TZ",paraId:3,tocIndex:0},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:3,tocIndex:0},{value:"APP_KEY",paraId:3,tocIndex:0},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:3,tocIndex:0},{value:"DB_*",paraId:3,tocIndex:0},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation;",paraId:3,tocIndex:0},{value:"When deploying in a production environment, ",paraId:3,tocIndex:0},{value:"APP_ENV=production",paraId:3,tocIndex:0},{value:";",paraId:3,tocIndex:0},{value:"When deploying on a subpath, you need to configure ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH",paraId:3,tocIndex:0},{value:", such as ",paraId:3,tocIndex:0},{value:"APP_PUBLIC_PATH=/nocobase/",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"When deploying in a production environment, to reduce volume, you can install only the necessary dependencies with ",paraId:4,tocIndex:0},{value:"yarn install --production",paraId:4,tocIndex:0},{value:">>> For more information, view the complete 'Environment Variables' <<<",paraId:5},{value:"NocoBase has already built-in ",paraId:6,tocIndex:1},{value:"PM2",paraId:6,tocIndex:1},{value:" for managing application processes. In a production environment, you can directly use ",paraId:6,tocIndex:1},{value:"yarn start",paraId:6,tocIndex:1},{value:". If you need it to run in the background, just add the ",paraId:6,tocIndex:1},{value:"-d",paraId:6,tocIndex:1},{value:" parameter, for example:",paraId:6,tocIndex:1},{value:`# Run in the background
yarn start -d
`,paraId:7,tocIndex:1},{value:"Restart",paraId:8,tocIndex:1},{value:`yarn nocobase pm2-restart
`,paraId:9,tocIndex:1},{value:"Stop",paraId:10,tocIndex:1},{value:`yarn nocobase pm2-stop
`,paraId:11,tocIndex:1},{value:"More PM2 commands",paraId:12,tocIndex:1},{value:`yarn nocobase pm2 -h
`,paraId:13,tocIndex:1},{value:"In a production environment, you can consider having Nginx proxy the static files. NocoBase provides the ",paraId:14,tocIndex:2},{value:"create-nginx-conf",paraId:14,tocIndex:2},{value:" command to generate Nginx configuration files.",paraId:14,tocIndex:2},{value:`yarn nocobase create-nginx-conf
`,paraId:15,tocIndex:2},{value:"The file path is ",paraId:16,tocIndex:2},{value:"./storage/nocobase.conf",paraId:16,tocIndex:2},{value:". Adjust it further according to the actual situation, and finally add it to ",paraId:16,tocIndex:2},{value:"/etc/nginx/sites-enabled",paraId:16,tocIndex:2},{value:", for example:",paraId:16,tocIndex:2},{value:`ln -s /app/nocobase/storage/nocobase.conf /etc/nginx/sites-enabled/nocobase.conf
`,paraId:17,tocIndex:2},{value:"Remarks",paraId:18,tocIndex:2},{value:"When deploying to a subpath, you need to configure the ",paraId:19,tocIndex:2},{value:"APP_PUBLIC_PATH",paraId:19,tocIndex:2},{value:" environment variable. After configuring, you need to re-execute the ",paraId:19,tocIndex:2},{value:"create-nginx-conf",paraId:19,tocIndex:2},{value:" command;",paraId:19,tocIndex:2},{value:"Modify the generated ",paraId:19,tocIndex:2},{value:"nocobase.conf",paraId:19,tocIndex:2},{value:" according to the actual situation, such as configuring the domain name, etc.;",paraId:19,tocIndex:2},{value:"/app/nocobase/",paraId:19,tocIndex:2},{value:" is the directory where the example application is located, and it needs to be adjusted according to the actual situation;",paraId:19,tocIndex:2},{value:"/etc/nginx/sites-enabled",paraId:19,tocIndex:2},{value:" is the default Nginx configuration path, the actual situation may vary, you can check it with ",paraId:19,tocIndex:2},{value:"nginx -V",paraId:19,tocIndex:2},{value:";",paraId:19,tocIndex:2},{value:"If you are not using Nginx, you can make some adjustments referring to the Nginx configuration.",paraId:19,tocIndex:2}]},852174:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports three different installation methods, each with slightly different deployment procedures.",paraId:0,tocIndex:1},{value:"Docker",paraId:1,tocIndex:1},{value:"create-nocobase-app",paraId:2,tocIndex:1},{value:"Git source code",paraId:3,tocIndex:1},{value:"Cluster Mode Deployment",paraId:4,tocIndex:2}]},738911:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"create-nocobase-app",paraId:0},{value:"Set environment variables in the ",paraId:1,tocIndex:2},{value:".env",paraId:1,tocIndex:2},{value:" file in the project's root directory. After modifying the environment variables, kill the application process and restart it.",paraId:1,tocIndex:2},{value:"Modify the ",paraId:2,tocIndex:3},{value:"docker-compose.yml",paraId:2,tocIndex:3},{value:" configuration and set the environment variables in the ",paraId:2,tocIndex:3},{value:"environment",paraId:2,tocIndex:3},{value:" parameter. Example:",paraId:2,tocIndex:3},{value:`services:
  app:
    image: nocobase/nocobase:latest
    environment:
      - APP_ENV=production
`,paraId:3,tocIndex:3},{value:"You can also use ",paraId:4,tocIndex:3},{value:"env_file",paraId:4,tocIndex:3},{value:" to set environment variables in the ",paraId:4,tocIndex:3},{value:".env",paraId:4,tocIndex:3},{value:" file. Example:",paraId:4,tocIndex:3},{value:`services:
  app:
    image: nocobase/nocobase:latest
    env_file: .env
`,paraId:5,tocIndex:3},{value:"After modifying the environment variables, rebuild the app container:",paraId:6,tocIndex:3},{value:`docker-compose up -d app
`,paraId:7,tocIndex:3},{value:"Saved in the ",paraId:8,tocIndex:4},{value:".env",paraId:8,tocIndex:4},{value:" file",paraId:8,tocIndex:4},{value:"Used to set the application's time zone, with the default being the system's time zone.",paraId:9,tocIndex:5},{value:"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",paraId:10,tocIndex:5},{value:"Time-related operations will be handled according to this time zone. Changing TZ may affect date values in the database. For more details, refer to ",paraId:11},{value:"Date & Time Overview",paraId:12},{value:".",paraId:11},{value:"Application environment, default is ",paraId:13,tocIndex:6},{value:"development",paraId:13,tocIndex:6},{value:", options include",paraId:13,tocIndex:6},{value:"production",paraId:14,tocIndex:6},{value:" production environment",paraId:14,tocIndex:6},{value:"development",paraId:14,tocIndex:6},{value:" development environment",paraId:14,tocIndex:6},{value:`APP_ENV=production
`,paraId:15,tocIndex:6},{value:"Secret key, for scenarios such as jwt",paraId:16,tocIndex:7},{value:`APP_KEY=app-key-test
`,paraId:17,tocIndex:7},{value:"Application port, default is ",paraId:18,tocIndex:8},{value:"13000",paraId:18,tocIndex:8},{value:`APP_PORT=13000
`,paraId:19,tocIndex:8},{value:"NocoBase API address prefix, default is ",paraId:20,tocIndex:9},{value:"/api/",paraId:20,tocIndex:9},{value:`API_BASE_PATH=/api/
`,paraId:21,tocIndex:9},{value:"v1.6.0+",paraId:22,tocIndex:10},{value:"The multi-core (cluster) mode for starting app. If this variable is configured, will be passed to the pm2 start command as the ",paraId:23,tocIndex:10},{value:"-i <instances>",paraId:23,tocIndex:10},{value:" parameter. The options are consistent with the pm2 ",paraId:23,tocIndex:10},{value:"-i",paraId:23,tocIndex:10},{value:" parameter (refer to ",paraId:23,tocIndex:10},{value:"PM2: Cluster Mode",paraId:23,tocIndex:10},{value:"), including:",paraId:23,tocIndex:10},{value:"max",paraId:24,tocIndex:10},{value:": Use the maximum number of CPU cores",paraId:24,tocIndex:10},{value:"-1",paraId:24,tocIndex:10},{value:": Use the maximum number of CPU cores minus one",paraId:24,tocIndex:10},{value:"<number>",paraId:24,tocIndex:10},{value:": Specify the number of cores",paraId:24,tocIndex:10},{value:"The default value is empty, meaning it is not enabled.",paraId:25,tocIndex:10},{value:"This mode requires the use of plugins related to cluster mode, such as ",paraId:26},{value:"@nocobase/plugin-sync-adapter-redis",paraId:26},{value:". Otherwise, the functionality of application may encounter unexpected issues.",paraId:26},{value:"Reference: ",paraId:27},{value:"Cluster mode",paraId:28},{value:".",paraId:27},{value:"Plugin package prefix, default is ",paraId:29,tocIndex:11},{value:"@nocobase/plugin-,@nocobase/preset-",paraId:29,tocIndex:11},{value:"For example, add plugin ",paraId:30,tocIndex:11},{value:"hello",paraId:30,tocIndex:11},{value:" into project ",paraId:30,tocIndex:11},{value:"my-nocobase-app",paraId:30,tocIndex:11},{value:", the plugin package name is ",paraId:30,tocIndex:11},{value:"@my-nocobase-app/plugin-hello",paraId:30,tocIndex:11},{value:".",paraId:30,tocIndex:11},{value:"PLUGIN_PACKAGE_PREFIX is configured as follows:",paraId:31,tocIndex:11},{value:`PLUGIN_PACKAGE_PREFIX=@nocobase/plugin-,@nocobase-preset-,@my-nocobase-app/plugin-
`,paraId:32,tocIndex:11},{value:"The correspondence between plugin name and package name is:",paraId:33,tocIndex:11},{value:"users",paraId:34,tocIndex:11},{value:" plugin package name is ",paraId:34,tocIndex:11},{value:"@nocobase/plugin-users",paraId:34,tocIndex:11},{value:"nocobase",paraId:34,tocIndex:11},{value:" plugin package name is ",paraId:34,tocIndex:11},{value:"@nocobase/preset-nocobase",paraId:34,tocIndex:11},{value:"hello",paraId:34,tocIndex:11},{value:" plugin package name is ",paraId:34,tocIndex:11},{value:"@my-nocobase-app/plugin-hello",paraId:34,tocIndex:11},{value:"Database type, options include",paraId:35,tocIndex:12},{value:"mysql",paraId:36,tocIndex:12},{value:"postgres",paraId:36,tocIndex:12},{value:"mariadb",paraId:36,tocIndex:12},{value:`DB_DIALECT=mysql
`,paraId:37,tocIndex:12},{value:"Database host (required when using MySQL or PostgreSQL databases)",paraId:38,tocIndex:13},{value:"Default is ",paraId:39,tocIndex:13},{value:"localhost",paraId:39,tocIndex:13},{value:`DB_HOST=localhost
`,paraId:40,tocIndex:13},{value:"Database port (required when using MySQL or PostgreSQL databases)",paraId:41,tocIndex:14},{value:"Default port of MySQL is 3306",paraId:42,tocIndex:14},{value:"Default port of PostgreSQL is 5432",paraId:42,tocIndex:14},{value:`DB_PORT=3306
`,paraId:43,tocIndex:14},{value:"Database name (required when using MySQL or PostgreSQL databases)",paraId:44,tocIndex:15},{value:`DB_DATABASE=nocobase
`,paraId:45,tocIndex:15},{value:"Database user (required when using MySQL or PostgreSQL databases)",paraId:46,tocIndex:16},{value:`DB_USER=nocobase
`,paraId:47,tocIndex:16},{value:"Database password (required when using MySQL or PostgreSQL databases)",paraId:48,tocIndex:17},{value:`DB_PASSWORD=nocobase
`,paraId:49,tocIndex:17},{value:"Data table prefix",paraId:50,tocIndex:18},{value:`DB_TABLE_PREFIX=nocobase_
`,paraId:51,tocIndex:18},{value:"Database log switch, default is ",paraId:52,tocIndex:19},{value:"off",paraId:52,tocIndex:19},{value:", options include",paraId:52,tocIndex:19},{value:"on",paraId:53,tocIndex:19},{value:" on",paraId:53,tocIndex:19},{value:"off",paraId:53,tocIndex:19},{value:" off",paraId:53,tocIndex:19},{value:`DB_LOGGING=on
`,paraId:54,tocIndex:19},{value:"Log output method\uFF0Cseparated by ",paraId:55,tocIndex:20},{value:",",paraId:55,tocIndex:20},{value:" \u3002Default is ",paraId:55,tocIndex:20},{value:"console",paraId:55,tocIndex:20},{value:" in development, ",paraId:55,tocIndex:20},{value:"console,dailyRotateFile",paraId:55,tocIndex:20},{value:` in production.
Options\uFF1A`,paraId:55,tocIndex:20},{value:"console",paraId:56,tocIndex:20},{value:" - ",paraId:56,tocIndex:20},{value:"console.log",paraId:56,tocIndex:20},{value:"file",paraId:56,tocIndex:20},{value:" - ",paraId:56,tocIndex:20},{value:"Output to file",paraId:56,tocIndex:20},{value:"dailyRotateFile",paraId:56,tocIndex:20},{value:" - ",paraId:56,tocIndex:20},{value:"Output to daily rotating files",paraId:56,tocIndex:20},{value:`LOGGER_TRANSPORT=console,dailyRotateFile
`,paraId:57,tocIndex:20},{value:"File-based log storage path, default is ",paraId:58,tocIndex:21},{value:"storage/logs",paraId:58,tocIndex:21},{value:"\u3002",paraId:58,tocIndex:21},{value:`LOGGER_BASE_PATH=storage/logs
`,paraId:59,tocIndex:21},{value:"Output log level. Default is ",paraId:60,tocIndex:22},{value:"debug",paraId:60,tocIndex:22},{value:" in development and ",paraId:60,tocIndex:22},{value:"info",paraId:60,tocIndex:22},{value:" in production. Options:",paraId:60,tocIndex:22},{value:"error",paraId:61,tocIndex:22},{value:"warn",paraId:61,tocIndex:22},{value:"info",paraId:61,tocIndex:22},{value:"debug",paraId:61,tocIndex:22},{value:"trace",paraId:61,tocIndex:22},{value:`LOGGER_LEVEL=info
`,paraId:62,tocIndex:22},{value:"The database log output level is ",paraId:63,tocIndex:22},{value:"debug",paraId:63,tocIndex:22},{value:", controlled by ",paraId:63,tocIndex:22},{value:"DB_LOGGING",paraId:63,tocIndex:22},{value:", and is unaffected by ",paraId:63,tocIndex:22},{value:"LOGGER_LEVEL",paraId:63,tocIndex:22},{value:".",paraId:63,tocIndex:22},{value:"Maximum number of log files to keep.",paraId:64,tocIndex:23},{value:"When ",paraId:65,tocIndex:23},{value:"LOGGER_TRANSPORT",paraId:65,tocIndex:23},{value:" is ",paraId:65,tocIndex:23},{value:"file",paraId:65,tocIndex:23},{value:" : Default is ",paraId:65,tocIndex:23},{value:"10",paraId:65,tocIndex:23},{value:".",paraId:65,tocIndex:23},{value:"When ",paraId:65,tocIndex:23},{value:"LOGGER_TRANSPORT",paraId:65,tocIndex:23},{value:" is ",paraId:65,tocIndex:23},{value:"dailyRotateFile",paraId:65,tocIndex:23},{value:": Use ",paraId:65,tocIndex:23},{value:"[n]d",paraId:65,tocIndex:23},{value:" to represent days. Default is ",paraId:65,tocIndex:23},{value:"14d",paraId:65,tocIndex:23},{value:".",paraId:65,tocIndex:23},{value:`LOGGER_MAX_FILES=14d
`,paraId:66,tocIndex:23},{value:"Log rotation by size.",paraId:67,tocIndex:24},{value:"When ",paraId:68,tocIndex:24},{value:"LOGGER_TRANSPORT",paraId:68,tocIndex:24},{value:" is ",paraId:68,tocIndex:24},{value:"file",paraId:68,tocIndex:24},{value:": Unit is ",paraId:68,tocIndex:24},{value:"byte",paraId:68,tocIndex:24},{value:". Default is ",paraId:68,tocIndex:24},{value:"20971520 (20 * 1024 * 1024)",paraId:68,tocIndex:24},{value:".",paraId:68,tocIndex:24},{value:"When ",paraId:68,tocIndex:24},{value:"LOGGER_TRANSPORT",paraId:68,tocIndex:24},{value:" is ",paraId:68,tocIndex:24},{value:"dailyRotateFile",paraId:68,tocIndex:24},{value:": Use ",paraId:68,tocIndex:24},{value:"[n]k",paraId:68,tocIndex:24},{value:", ",paraId:68,tocIndex:24},{value:"[n]m",paraId:68,tocIndex:24},{value:", ",paraId:68,tocIndex:24},{value:"[n]g",paraId:68,tocIndex:24},{value:". Default is not set.",paraId:68,tocIndex:24},{value:`LOGGER_MAX_SIZE=20971520
`,paraId:69,tocIndex:24},{value:"Log print format. Default is ",paraId:70,tocIndex:25},{value:"console",paraId:70,tocIndex:25},{value:" in development and ",paraId:70,tocIndex:25},{value:"json",paraId:70,tocIndex:25},{value:" in production. Options:",paraId:70,tocIndex:25},{value:"console",paraId:71,tocIndex:25},{value:"json",paraId:71,tocIndex:25},{value:"logfmt",paraId:71,tocIndex:25},{value:"delimiter",paraId:71,tocIndex:25},{value:`LOGGER_FORMAT=json
`,paraId:72,tocIndex:25},{value:"Reference\uFF1A",paraId:73,tocIndex:25},{value:"Log Format",paraId:74,tocIndex:25},{value:"Specify the default cache method using the unique name\uFF0Cdefault is ",paraId:75,tocIndex:26},{value:"memory",paraId:75,tocIndex:26},{value:", options include\uFF1A",paraId:75,tocIndex:26},{value:"memory",paraId:76,tocIndex:26},{value:"redis",paraId:76,tocIndex:26},{value:`CACHE_DEFAULT_STORE=memory
`,paraId:77,tocIndex:26},{value:"Max number of items in memory cache\uFF0Cdefault is ",paraId:78,tocIndex:27},{value:"2000",paraId:78,tocIndex:27},{value:".",paraId:78,tocIndex:27},{value:`CACHE_MEMORY_MAX=2000
`,paraId:79,tocIndex:27},{value:"Redis URL, optional. Example\uFF1A",paraId:80,tocIndex:28},{value:"redis://localhost:6379",paraId:80,tocIndex:28},{value:`CACHE_REDIS_URL=redis://localhost:6379
`,paraId:81,tocIndex:28},{value:"Enable telemetry data collection\uFF0Cdefault is ",paraId:82,tocIndex:29},{value:"off",paraId:82,tocIndex:29},{value:".",paraId:82,tocIndex:29},{value:`TELEMETRY_ENABLED=on
`,paraId:83,tocIndex:29},{value:"Enabled monitoring metric collectors, default is ",paraId:84,tocIndex:30},{value:"console",paraId:84,tocIndex:30},{value:". Other values should refer to the names registered by corresponding collector plugins, such as ",paraId:84,tocIndex:30},{value:"prometheus",paraId:84,tocIndex:30},{value:". Multiple separated by ",paraId:84,tocIndex:30},{value:",",paraId:84,tocIndex:30},{value:" .",paraId:84,tocIndex:30},{value:`TELEMETRY_METRIC_READER=console,prometheus
`,paraId:85,tocIndex:30},{value:"Enabled trace data processors, default is ",paraId:86,tocIndex:31},{value:"console",paraId:86,tocIndex:31},{value:". Other values should refer to the names registered by corresponding processor plugins. Multiple separated by ",paraId:86,tocIndex:31},{value:",",paraId:86,tocIndex:31},{value:".",paraId:86,tocIndex:31},{value:`TELEMETRY_TRACE_PROCESSOR=console
`,paraId:87,tocIndex:31},{value:"Used to append preset local plugins, with the value being the package name (the ",paraId:88,tocIndex:33},{value:"name",paraId:88,tocIndex:33},{value:" parameter in ",paraId:88,tocIndex:33},{value:"package.json",paraId:88,tocIndex:33},{value:"), separated by commas for multiple plugins.",paraId:88,tocIndex:33},{value:"These will only appear in the plugin manager page after initializing installation with ",paraId:89},{value:"nocobase install",paraId:89},{value:" or upgrading with ",paraId:89},{value:"nocobase upgrade",paraId:89},{value:".",paraId:89},{value:`APPEND_PRESET_LOCAL_PLUGINS=@my-project/plugin-foo,@my-project/plugin-bar
`,paraId:90},{value:"Used to append built-in plugins that are automatically installed by default, with the value being the package name (the ",paraId:91,tocIndex:34},{value:"name",paraId:91,tocIndex:34},{value:" parameter in ",paraId:91,tocIndex:34},{value:"package.json",paraId:91,tocIndex:34},{value:"), separated by commas for multiple plugins.",paraId:91,tocIndex:34},{value:"These plugins will be automatically installed or upgraded during initialization with ",paraId:92},{value:"nocobase install",paraId:92},{value:" or ",paraId:92},{value:"nocobase upgrade",paraId:92},{value:".",paraId:92},{value:`APPEND_PRESET_BUILT_IN_PLUGINS=@my-project/plugin-foo,@my-project/plugin-bar
`,paraId:93},{value:"The installation of NocoBase can be assisted by setting temporary environment variables, such as:",paraId:94,tocIndex:35},{value:`yarn cross-env \\
  INIT_APP_LANG=zh-CN \\
  INIT_ROOT_EMAIL=demo@nocobase.com \\
  INIT_ROOT_PASSWORD=admin123 \\
  INIT_ROOT_NICKNAME="Super Admin" \\
  nocobase install

# Equivalent to
yarn nocobase install \\
  --lang=zh-CN \\
  --root-email=demo@nocobase.com \\
  --root-password=admin123 \\
  --root-nickname="Super Admin"

# Equivalent to
yarn nocobase install -l zh-CN -e demo@nocobase.com -p admin123 -n "Super Admin"
`,paraId:95,tocIndex:35},{value:"Language at the time of installation, default is ",paraId:96,tocIndex:36},{value:"en-US",paraId:96,tocIndex:36},{value:", options include",paraId:96,tocIndex:36},{value:"en-US",paraId:97,tocIndex:36},{value:" English",paraId:97,tocIndex:36},{value:"zh-CN",paraId:97,tocIndex:36},{value:" Chinese (Simplified)",paraId:97,tocIndex:36},{value:`yarn cross-env \\
  INIT_APP_LANG=zh-CN \\
  nocobase install
`,paraId:98,tocIndex:36},{value:"Root user email",paraId:99,tocIndex:37},{value:`yarn cross-env \\
  INIT_APP_LANG=zh-CN \\
  INIT_ROOT_EMAIL=demo@nocobase.com \\
  nocobase install
`,paraId:100,tocIndex:37},{value:"Root user password",paraId:101,tocIndex:38},{value:`yarn cross-env \\
  INIT_APP_LANG=zh-CN \\
  INIT_ROOT_EMAIL=demo@nocobase.com \\
  INIT_ROOT_PASSWORD=admin123 \\
  nocobase install
`,paraId:102,tocIndex:38},{value:"Root user nickname",paraId:103,tocIndex:39},{value:`yarn cross-env \\
  INIT_APP_LANG=zh-CN \\
  INIT_ROOT_EMAIL=demo@nocobase.com \\
  INIT_ROOT_PASSWORD=admin123 \\
  INIT_ROOT_NICKNAME="Super Admin" \\
  nocobase install
`,paraId:104,tocIndex:39}]},158210:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Make sure you have:",paraId:0,tocIndex:1},{value:"Installed Node.js 20+, Yarn 1.22.x",paraId:1,tocIndex:1},{value:"Configured and started one of the required database MySQL 8.x, MariaDB 10.9+, PostgreSQL 10+",paraId:1,tocIndex:1},{value:"You can download and install the latest LTS version from the official website. It is recommended to use nvm (or nvm-windows for Win systems) to manage Node.js versions if you plan to work with Node.js for a long time.",paraId:2,tocIndex:1},{value:`$ node -v

v20.10.0
`,paraId:3,tocIndex:1},{value:"Install yarn package manager",paraId:4,tocIndex:1},{value:`$ npm install --global yarn
$ yarn -v

1.22.21
`,paraId:5,tocIndex:1},{value:"Stable and well-tested version and only bug fixed will be made. This version is recommended.",paraId:6,tocIndex:3},{value:`yarn create nocobase-app my-nocobase-app -d postgres \\
   -e DB_HOST=localhost \\
   -e DB_PORT=5432 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:7},{value:`yarn create nocobase-app my-nocobase-app -d mysql \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:8},{value:`yarn create nocobase-app my-nocobase-app -d mariadb \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:9},{value:"This version includes new features that are about to be released and it has been preliminarily tested, but still have known or unknown issues.",paraId:10,tocIndex:4},{value:`npx create-nocobase-app@beta my-nocobase-app -d postgres \\
   -e DB_HOST=localhost \\
   -e DB_PORT=5432 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:11},{value:`npx create-nocobase-app@beta my-nocobase-app -d mysql \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:12},{value:`npx create-nocobase-app@beta my-nocobase-app -d mariadb \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:13},{value:"A development version containing the latest features, which may be incomplete or unstable.",paraId:14,tocIndex:5},{value:`npx create-nocobase-app@alpha my-nocobase-app -d postgres \\
   -e DB_HOST=localhost \\
   -e DB_PORT=5432 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:15},{value:`npx create-nocobase-app@alpha my-nocobase-app -d mysql \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:16},{value:`npx create-nocobase-app@alpha my-nocobase-app -d mariadb \\
   -e DB_HOST=localhost \\
   -e DB_PORT=3306 \\
   -e DB_DATABASE=nocobase \\
   -e DB_USER=nocobase \\
   -e DB_PASSWORD=nocobase \\
   -e TZ=UTC
`,paraId:17},{value:"TZ",paraId:18},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:18},{value:"APP_KEY",paraId:18},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:18},{value:"DB_*",paraId:18},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation.",paraId:18},{value:`cd my-nocobase-app
`,paraId:19,tocIndex:6},{value:"\u{1F4E2} This next step may take more than ten minutes due to network environment, system configuration, and other factors.",paraId:20,tocIndex:7},{value:`yarn install
`,paraId:21,tocIndex:7},{value:`yarn nocobase install --lang=en-US
`,paraId:22,tocIndex:8},{value:"Development",paraId:23,tocIndex:9},{value:`yarn dev
`,paraId:24,tocIndex:9},{value:"Production",paraId:25,tocIndex:9},{value:`yarn start
`,paraId:26,tocIndex:9},{value:"Note: For production, if the code has been modified, you need to execute ",paraId:27,tocIndex:9},{value:"yarn build",paraId:27,tocIndex:9},{value:" and restart NocoBase.",paraId:27,tocIndex:9},{value:"Open ",paraId:28,tocIndex:10},{value:"http://localhost:13000",paraId:28,tocIndex:10},{value:" in a web browser. The initial account and password are ",paraId:28,tocIndex:10},{value:"admin@nocobase.com",paraId:28,tocIndex:10},{value:" and ",paraId:28,tocIndex:10},{value:"admin123",paraId:28,tocIndex:10},{value:".",paraId:28,tocIndex:10}]},695125:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u26A1\u26A1 Please make sure you have installed ",paraId:0,tocIndex:1},{value:"Docker",paraId:0,tocIndex:1},{value:"docker-compose.yml",paraId:1},{value:`# Create a folder named my-project (or any other name) to store the system files generated by NocoBase
mkdir my-project && cd my-project

# Create an empty docker-compose.yml file
vi docker-compose.yml
`,paraId:2,tocIndex:2},{value:"docker-compose.yml",paraId:1},{value:"The configuration parameters vary slightly depending on the database. Choose the appropriate database configuration and copy it into the ",paraId:3,tocIndex:3},{value:"docker-compose.yml",paraId:3,tocIndex:3},{value:".",paraId:3,tocIndex:3},{value:`version: '3'

networks:
  nocobase:
    driver: bridge

services:
  app:
    image: nocobase/nocobase:latest-full
    restart: always
    networks:
      - nocobase
    depends_on:
      - postgres
    environment:
      # The application's secret key, used to generate user tokens, etc.
      # If APP_KEY is changed, old tokens will also become invalid.
      # It can be any random string, and make sure it is not exposed.
      - APP_KEY=your-secret-key
      # Database type, supports postgres, mysql, mariadb
      - DB_DIALECT=postgres
      # Database host, can be replaced with the IP of an existing database server
      - DB_HOST=postgres
      # Database port
      - DB_PORT=5432
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=nocobase
      # Database password
      - DB_PASSWORD=nocobase
      # Timezone
      - TZ=UTC
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - '13000:80'
    # init: true

  # If using an existing database server, postgres service can be omitted
  postgres:
    image: postgres:16
    restart: always
    command: postgres -c wal_level=logical
    environment:
      POSTGRES_USER: nocobase
      POSTGRES_DB: nocobase
      POSTGRES_PASSWORD: nocobase
    volumes:
      - ./storage/db/postgres:/var/lib/postgresql/data
    networks:
      - nocobase
`,paraId:4},{value:`version: '3'

networks:
  nocobase:
    driver: bridge

services:
  app:
    image: nocobase/nocobase:latest-full
    restart: always
    networks:
      - nocobase
    depends_on:
      - mysql
    environment:
      # The application's secret key, used to generate user tokens, etc.
      # If APP_KEY is changed, old tokens will also become invalid.
      # It can be any random string, and make sure it is not exposed.
      - APP_KEY=your-secret-key
      # Database type, supports postgres, mysql, mariadb
      - DB_DIALECT=mysql
      # Database host, can be replaced with the IP of an existing database server
      - DB_HOST=mysql
      # Database port
      - DB_PORT=3306
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=root
      # Database password
      - DB_PASSWORD=nocobase
      # Whether to convert table and field names to snake case
      - DB_UNDERSCORED=true
      # Timezone
      - TZ=UTC
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - '13000:80'
    # init: true

  # If using an existing database server, mysql service can be omitted
  mysql:
    image: mysql:8
    environment:
      MYSQL_DATABASE: nocobase
      MYSQL_USER: nocobase
      MYSQL_PASSWORD: nocobase
      MYSQL_ROOT_PASSWORD: nocobase
    restart: always
    volumes:
      - ./storage/db/mysql:/var/lib/mysql
    networks:
      - nocobase
`,paraId:5},{value:`version: '3'

networks:
  nocobase:
    driver: bridge

services:
  app:
    image: nocobase/nocobase:latest-full
    restart: always
    networks:
      - nocobase
    depends_on:
      - mariadb
    environment:
      # The application's secret key, used to generate user tokens, etc.
      # If APP_KEY is changed, old tokens will also become invalid.
      # It can be any random string, and make sure it is not exposed.
      - APP_KEY=your-secret-key
      # Database type, supports postgres, mysql, mariadb
      - DB_DIALECT=mariadb
      # Database host, can be replaced with the IP of an existing database server
      - DB_HOST=mariadb
      # Database port
      - DB_PORT=3306
      # Database name
      - DB_DATABASE=nocobase
      # Database user
      - DB_USER=root
      # Database password
      - DB_PASSWORD=nocobase
      # Whether to convert table and field names to snake case
      - DB_UNDERSCORED=true
      # Timezone
      - TZ=UTC
    volumes:
      - ./storage:/app/nocobase/storage
    ports:
      - '13000:80'
    # init: true

  # If using an existing database server, mariadb service can be omitted
  mariadb:
    image: mariadb:11
    environment:
      MYSQL_DATABASE: nocobase
      MYSQL_USER: nocobase
      MYSQL_PASSWORD: nocobase
      MYSQL_ROOT_PASSWORD: nocobase
    restart: always
    volumes:
      - ./storage/db/mariadb:/var/lib/mysql
    networks:
      - nocobase
`,paraId:6},{value:"Choose the appropriate NocoBase version, refer to ",paraId:7},{value:"versions",paraId:8},{value:"latest",paraId:9},{value:" ",paraId:9},{value:"latest-full",paraId:9},{value:": Stable and well-tested version and only bug fixed will be made. This version is recommended.",paraId:9},{value:"beta",paraId:9},{value:" ",paraId:9},{value:"beta-full",paraId:9},{value:": This version includes new features that are about to be released and it has been preliminarily tested, but still have known or unknown issues.",paraId:9},{value:"alpha",paraId:9},{value:" ",paraId:9},{value:"alpha-full",paraId:9},{value:": A development version containing the latest features, which may be incomplete or unstable.",paraId:9},{value:"1.7.14",paraId:9},{value:" ",paraId:9},{value:"1.7.14-full",paraId:9},{value:": Specify the version number. To check the latest version, see the ",paraId:9},{value:"list of released versions",paraId:9},{value:".",paraId:9},{value:"The full image includes the PostgreSQL 16/17 client, MySQL 8.0 client, and Oracle 19.25 client required for backup manager and migration manager plugins, as well as LibreOffice required for template printing (PDF).",paraId:10},{value:"If you need to build your own image, you can refer to the official ",paraId:10},{value:"Dockerfile (slim version)",paraId:10},{value:" and ",paraId:10},{value:"Dockerfile-full (full version)",paraId:10},{value:"Example:",paraId:11},{value:`#...
services:
  app:
    # Docker Hub image (recommended full versions)
    image: nocobase/nocobase:latest-full
    image: nocobase/nocobase:beta-full
    image: nocobase/nocobase:alpha-full
    image: nocobase/nocobase:1.7.14-full
    # Slim versions (without certain clients and LibreOffice)
    image: nocobase/nocobase:latest
    image: nocobase/nocobase:beta
    image: nocobase/nocobase:alpha
    image: nocobase/nocobase:1.7.14
# ...
`,paraId:12},{value:"It may take a few minutes",paraId:13,tocIndex:4},{value:`# pull service images
$ docker-compose pull
# run in the background
$ docker-compose up -d
# view app process
$ docker-compose logs app

app-postgres-app-1  | nginx started
app-postgres-app-1  | yarn run v1.22.15
app-postgres-app-1  | $ cross-env DOTENV_CONFIG_PATH=.env node -r dotenv/config packages/app/server/lib/index.js install -s
app-postgres-app-1  | Done in 2.72s.
app-postgres-app-1  | yarn run v1.22.15
app-postgres-app-1  | $ pm2-runtime start --node-args="-r dotenv/config" packages/app/server/lib/index.js -- start
app-postgres-app-1  | 2022-04-28T15:45:38: PM2 log: Launching in no daemon mode
app-postgres-app-1  | 2022-04-28T15:45:38: PM2 log: App [index:0] starting in -fork mode-
app-postgres-app-1  | 2022-04-28T15:45:38: PM2 log: App [index:0] online
app-postgres-app-1  | \u{1F680} NocoBase server running at: http://localhost:13000/
`,paraId:14,tocIndex:4},{value:"Open ",paraId:15,tocIndex:5},{value:"http://localhost:13000",paraId:15,tocIndex:5},{value:" in a web browser. The initial account and password are ",paraId:15,tocIndex:5},{value:"admin@nocobase.com",paraId:15,tocIndex:5},{value:" and ",paraId:15,tocIndex:5},{value:"admin123",paraId:15,tocIndex:5},{value:".",paraId:15,tocIndex:5}]},927278:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Make sure you have:",paraId:0,tocIndex:1},{value:"Git, Node.js 20+, Yarn 1.22.x installed",paraId:1,tocIndex:1},{value:"Configured and started the required database \u2014 MySQL 8.x, MariaDB 10.9+, PostgreSQL 10+ \u2014 choose any one.",paraId:1,tocIndex:1},{value:"main",paraId:2},{value:"Stable and well-tested version and only bug fixed will be made. This version is recommended.",paraId:3,tocIndex:3},{value:`git clone https://github.com/nocobase/nocobase.git -b main --depth=1 my-nocobase
`,paraId:4,tocIndex:3},{value:"next",paraId:2},{value:"This version includes new features that are about to be released and it has been preliminarily tested, but still have known or unknown issues.",paraId:5,tocIndex:4},{value:`git clone https://github.com/nocobase/nocobase.git -b next --depth=1 my-nocobase
`,paraId:6,tocIndex:4},{value:"develop",paraId:2},{value:"A development version containing the latest features, which may be incomplete or unstable.",paraId:7,tocIndex:5},{value:`git clone https://github.com/nocobase/nocobase.git -b develop --depth=1 my-nocobase
`,paraId:8,tocIndex:5},{value:`cd my-nocobase
`,paraId:9,tocIndex:6},{value:`yarn install --frozen-lockfile
`,paraId:10,tocIndex:7},{value:"The environment variables required by NocoBase are stored in the root ",paraId:11,tocIndex:8},{value:".env",paraId:11,tocIndex:8},{value:" file, modify the environment variables according to the actual situation, if you don't know how to change them, ",paraId:11,tocIndex:8},{value:"click here for environment variables description",paraId:12,tocIndex:8},{value:", or you can leave it as default.",paraId:11,tocIndex:8},{value:`TZ=UTC
APP_KEY=your-secret-key
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=postgres
DB_USER=nocobase
DB_PASSWORD=nocobase
`,paraId:13,tocIndex:8},{value:"TZ",paraId:14},{value:" is used to set the application's time zone, with the default being the system's time zone;",paraId:14},{value:"APP_KEY",paraId:14},{value:" is the application's secret key, used for generating user tokens and so on (if APP_KEY is changed, the old tokens will also become invalid). It can be any random string. Please change it to your own secret key and ensure it is not disclosed to the public.",paraId:14},{value:"DB_*",paraId:14},{value:" is related to the database. If it is not the default database service in the example, please modify it according to the actual situation.",paraId:14},{value:`yarn nocobase install --lang=en-US
`,paraId:15,tocIndex:9},{value:"Development",paraId:16,tocIndex:10},{value:`yarn dev
`,paraId:17,tocIndex:10},{value:"Production",paraId:18,tocIndex:10},{value:"# Build (make sure you have executed `yarn install --frozen-lockfile`, note that it does not include `--production`)\nyarn build\n# Start\nyarn start\n",paraId:19,tocIndex:10},{value:"Open ",paraId:20,tocIndex:11},{value:"http://localhost:13000",paraId:20,tocIndex:11},{value:" in a web browser. The initial account and password are ",paraId:20,tocIndex:11},{value:"admin@nocobase.com",paraId:20,tocIndex:11},{value:" and ",paraId:20,tocIndex:11},{value:"admin123",paraId:20,tocIndex:11},{value:".",paraId:20,tocIndex:11}]},267286:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports three installation methods.",paraId:0,tocIndex:1},{value:"Docker (recommended)",paraId:1,tocIndex:1},{value:"create-nocobase-app",paraId:2,tocIndex:1},{value:"Git source code",paraId:3,tocIndex:1},{value:"Suitable for no-code scenarios, no code to write. When upgrading, just download the latest image and reboot.",paraId:4,tocIndex:3},{value:"The business code of the project is completely independent and supports low-code development.",paraId:5,tocIndex:4},{value:"If you want to experience the latest unreleased version, or want to participate in the contribution, you need to make changes and debug on the source code, it is recommended to choose this installation method, which requires a high level of development skills, and if the code has been updated, you can git pull the latest code.",paraId:6,tocIndex:5},{value:"This is a stable and well-tested version and only bug fixed will be made. This version is recommended.",paraId:7,tocIndex:7},{value:"This version includes new features that are about to be released and it has been preliminarily tested, but still have known or unknown issues, primarily for testing and feedback. Ideal for early testers willing to try new features and provide feedback.",paraId:8,tocIndex:8},{value:"A development version containing the latest features, which may be incomplete or unstable. Suitable for technical users interested in cutting-edge features. Not recommended for production use.",paraId:9,tocIndex:9},{value:"Version",paraId:10,tocIndex:9},{value:"Source code branch",paraId:10,tocIndex:9},{value:"Docker images version (recommended)",paraId:10,tocIndex:9},{value:"create-nocobase-app version",paraId:10,tocIndex:9},{value:"Specific version",paraId:10,tocIndex:9},{value:"Latest",paraId:10,tocIndex:9},{value:"main",paraId:10,tocIndex:9},{value:"nocobase/nocobase:latest-full",paraId:10,tocIndex:9},{value:"create-nocobase-app@latest",paraId:10,tocIndex:9},{value:"1.3.51",paraId:10,tocIndex:9},{value:"1.3.52",paraId:10,tocIndex:9},{value:"...",paraId:10,tocIndex:9},{value:"Beta",paraId:10,tocIndex:9},{value:"next",paraId:10,tocIndex:9},{value:"nocobase/nocobase:beta-full",paraId:10,tocIndex:9},{value:"create-nocobase-app@beta",paraId:10,tocIndex:9},{value:"1.4.0-beta.1",paraId:10,tocIndex:9},{value:"1.4.0-beta.2",paraId:10,tocIndex:9},{value:"...",paraId:10,tocIndex:9},{value:"Alpha",paraId:10,tocIndex:9},{value:"develop",paraId:10,tocIndex:9},{value:"nocobase/nocobase:alpha-full",paraId:10,tocIndex:9},{value:"create-nocobase-app@alpha",paraId:10,tocIndex:9},{value:"1.5.0-alpha.1",paraId:10,tocIndex:9},{value:"1.5.0-alpha.2",paraId:10,tocIndex:9},{value:"...",paraId:10,tocIndex:9}]},903353:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Please log in to the NocoBase Service to view the documentation.",paraId:0,tocIndex:1},{value:"Adding or updating plugins through the interface will restart the application. For batch operations, consider alternative methods.",paraId:1},{value:"Both commercial and third-party plugins can be directly uploaded via the interface.",paraId:2,tocIndex:3},{value:"Notes:",paraId:3,tocIndex:3},{value:"For creating plugin packages, refer to ",paraId:4,tocIndex:3},{value:"Writing Your First Plugin",paraId:5,tocIndex:3},{value:" to ensure proper building and packaging.",paraId:4,tocIndex:3},{value:"Select the plugins you want to activate in the plugin manager.",paraId:6,tocIndex:4},{value:"Supports batch operations and is convenient for migration.",paraId:7},{value:"Suitable for servers in an intranet environment.",paraId:7},{value:"Recommended for updating incompatible plugins caused by application updates.",paraId:7},{value:"Store commercial and third-party plugins in the ",paraId:8,tocIndex:6},{value:"./storage/plugins/",paraId:8,tocIndex:6},{value:" directory. You can download plugins in a development environment and upload them to the ",paraId:8,tocIndex:6},{value:"./storage/plugins/",paraId:8,tocIndex:6},{value:" directory on the server. Alternatively, directly extract the plugin package into the directory. For example:",paraId:8,tocIndex:6},{value:`mkdir -p /my-nocobase/storage/plugins/@nocobase/plugin-auth-cas && \\
  tar -xvzf /downloads/plugin-auth-cas-1.4.0.tgz \\
  -C /my-nocobase/storage/plugins/@nocobase/plugin-auth-cas \\
  --strip-components=1
`,paraId:9,tocIndex:6},{value:"This command ensures the plugin is extracted to ",paraId:10,tocIndex:6},{value:"/my-nocobase/storage/plugins/@nocobase/plugin-auth-cas",paraId:10,tocIndex:6},{value:" without the ",paraId:10,tocIndex:6},{value:"package",paraId:10,tocIndex:6},{value:" directory. The correct directory structure is as follows:",paraId:10,tocIndex:6},{value:`./plugin-auth-cas/dist/server/migrations/20240425200816-change-locale-module.js
./plugin-auth-cas/dist/server/auth.js
./plugin-auth-cas/client.js
./plugin-auth-cas/dist/constants.js
./plugin-auth-cas/dist/externalVersion.js
./plugin-auth-cas/dist/client/index.js
./plugin-auth-cas/dist/index.js
./plugin-auth-cas/dist/server/index.js
./plugin-auth-cas/dist/server/actions/login.js
./plugin-auth-cas/dist/server/plugin.js
./plugin-auth-cas/server.js
./plugin-auth-cas/dist/server/actions/service.js
./plugin-auth-cas/dist/locale/en-US.json
./plugin-auth-cas/dist/locale/ko_KR.json
./plugin-auth-cas/package.json
./plugin-auth-cas/dist/locale/zh-CN.json
./plugin-auth-cas/README.md
./plugin-auth-cas/README.zh-CN.md
./plugin-auth-cas/dist/server/migrations/20240425200816-change-locale-module.d.ts
./plugin-auth-cas/dist/server/auth.d.ts
./plugin-auth-cas/client.d.ts
./plugin-auth-cas/dist/constants.d.ts
./plugin-auth-cas/dist/client/index.d.ts
./plugin-auth-cas/dist/client/locale/index.d.ts
./plugin-auth-cas/dist/index.d.ts
./plugin-auth-cas/dist/server/index.d.ts
./plugin-auth-cas/dist/server/actions/login.d.ts
./plugin-auth-cas/dist/client/Options.d.ts
./plugin-auth-cas/dist/server/plugin.d.ts
./plugin-auth-cas/server.d.ts
./plugin-auth-cas/dist/server/actions/service.d.ts
./plugin-auth-cas/dist/client/SigninPage.d.ts
./plugin-auth-cas/LICENSE.txt
`,paraId:11,tocIndex:6},{value:"After uploading plugins to the plugin directory, execute the ",paraId:12,tocIndex:7},{value:"nocobase upgrade",paraId:12,tocIndex:7},{value:" command to complete the update.",paraId:12,tocIndex:7},{value:`yarn nocobase upgrade --skip-code-update
`,paraId:13,tocIndex:7}]},365680:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"create-nocobase-app",paraId:0},{value:"Make sure to backup the database before upgrading!!!",paraId:1},{value:"Upgrade the application by running the ",paraId:2,tocIndex:2},{value:"yarn nocobase upgrade",paraId:2,tocIndex:2},{value:" command.",paraId:2,tocIndex:2},{value:`# Switch to the corresponding directory
cd my-nocobase-app
# Execute the update command
yarn nocobase upgrade
# Start
yarn dev
`,paraId:3,tocIndex:2},{value:"If there are problems with upgrading, you can also ",paraId:4,tocIndex:2},{value:"recreate new app",paraId:5,tocIndex:2},{value:" and refer to the old version of .env to change the environment variables. The database information needs to be configured correctly. When using a SQLite database, you need to copy the database files to the ",paraId:4,tocIndex:2},{value:"./storage/db/",paraId:4,tocIndex:2},{value:" directory. Finally, run ",paraId:4,tocIndex:2},{value:"yarn nocobase upgrade",paraId:4,tocIndex:2},{value:" to upgrade.",paraId:4,tocIndex:2},{value:"After upgrading NocoBase, independent plugins installed through the interface might also need to be upgraded. Please refer to documentation ",paraId:6,tocIndex:3},{value:"Installation and Upgrade of Plugins",paraId:7,tocIndex:3}]},229278:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Make sure to backup the database before upgrading!!!",paraId:0},{value:"For commercial plugins, please validate your license key in the system and restart after validation. See ",paraId:0},{value:"NocoBase Commercial License Activation Guide",paraId:0},{value:" for details.",paraId:0},{value:"docker-compose.yml",paraId:1},{value:"Example",paraId:2,tocIndex:2},{value:`# MacOS, Linux...
cd /your/path/my-project/
# Windows
cd C:\\your\\path\\my-project
`,paraId:3,tocIndex:2},{value:"'latest' : Functional stability, more complete test version, only do bug fixes. Installing this version is recommended.",paraId:4,tocIndex:3},{value:"'beta' : contains a new feature that is about to be released, a version that has been preliminarily tested and may have some known or unknown issues.",paraId:4,tocIndex:3},{value:"'alpha' : a version in development that contains the latest feature code, may not be completed or has a lot of instability, and is mainly used for internal development and rapid iteration.",paraId:4,tocIndex:3},{value:"1.3.51",paraId:4,tocIndex:3},{value:" : specify a version number, the latest version of the view [] list of previous versions (",paraId:4,tocIndex:3},{value:"https://hub.docker.com/r/nocobase/nocobase/tags",paraId:4,tocIndex:3},{value:").",paraId:4,tocIndex:3},{value:"Images can only be upgraded, not downgraded. The next version cannot be downgraded to latest.",paraId:5},{value:`# ...
services:
  app:
    image: nocobase/nocobase:main
    image: nocobase/nocobase:latest
    image: nocobase/nocobase:1.2.4-alpha
# ...
`,paraId:6},{value:`# Pull the latest image
docker-compose pull
# Start
docker-compose up -d app
# View the app process
docker-compose logs app
`,paraId:7,tocIndex:4},{value:"After upgrading NocoBase, independent plugins installed through the interface might also need to be upgraded. Please refer to documentation ",paraId:8,tocIndex:5},{value:"Installation and Upgrade of Plugins",paraId:9,tocIndex:5}]},281099:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Make sure to backup the database before upgrading!!!",paraId:0},{value:`cd my-nocobase-app
`,paraId:1,tocIndex:2},{value:`git pull
`,paraId:2,tocIndex:3},{value:"If the normal upgrade process fails, try emptying the cache and dependencies and re-downloading it.",paraId:3,tocIndex:4},{value:`# delete nocobase cache
yarn nocobase clean
# delete dependencies
yarn rimraf -rf node_modules
`,paraId:4,tocIndex:4},{value:`yarn install
`,paraId:5,tocIndex:5},{value:`yarn nocobase upgrade
`,paraId:6,tocIndex:6},{value:"development environment",paraId:7,tocIndex:7},{value:`yarn dev
`,paraId:8,tocIndex:7},{value:"Production environment",paraId:9,tocIndex:7},{value:`# compile
yarn build

# Start
yarn start
`,paraId:10,tocIndex:7},{value:"After upgrading NocoBase, independent plugins installed through the interface might also need to be upgraded. Please refer to documentation ",paraId:11,tocIndex:8},{value:"Installation and Upgrade of Plugins",paraId:12,tocIndex:8}]},661506:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports three types of installation, with slight differences in upgrades.",paraId:0,tocIndex:0},{value:"Upgrading for Docker compose",paraId:1,tocIndex:0},{value:"Upgrading for create-nocobase-app",paraId:2,tocIndex:0},{value:"Upgrading for Git source code",paraId:3,tocIndex:0}]},341289:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase supports all features through a microkernel and pluginized architectural design.",paraId:0,tocIndex:0},{value:"NocoBase's kernel is similar to a development framework that defines the application lifecycle and standardizes the interface protocols of each layer. The basic structure of NocoBase is shown in the following diagram:",paraId:1,tocIndex:1},{value:"The data model is used as the underlying driver, the block-based interface is used as the user layer, and the business logic layer is used as the bridge connecting the two and carrying all kinds of business rules, so that the data can flow cyclically through the user's operations.",paraId:2,tocIndex:1},{value:"NocoBase defines standard protocols at the following three main levels:",paraId:3,tocIndex:1},{value:"data model: based on the upper layer of relational database ORM encapsulation, standardized data modeling description (refer to ",paraId:4,tocIndex:1},{value:"Collections & Fields",paraId:5,tocIndex:1},{value:").",paraId:4,tocIndex:1},{value:"HTTP routing: RESTful-like interface form based on resources and actions definitions (refer to ",paraId:4,tocIndex:1},{value:"Resources and Actions",paraId:6,tocIndex:1},{value:").",paraId:4,tocIndex:1},{value:"client-side interface: Formily 2.0-based JSON Schema to describe customized page and block layouts (refer to ",paraId:4,tocIndex:1},{value:"UI Schema",paraId:7,tocIndex:1},{value:").",paraId:4,tocIndex:1},{value:"Based on these protocols, it also makes the development of other modules more standardized and easier.",paraId:8,tocIndex:1},{value:"NocoBase opens up extensible interfaces in all aspects of the application lifecycle, including field types, collection types, third-party data sources in the data model, middleware insertion in the business logic layer, interface components, blocks, etc., and in all aspects of the entire application lifecycle (startup, stopping, and plug-in loading), and even many plug-ins provide secondary extensible interfaces. These designs fully provide a variety of extension possibilities for application development, and all the built-in features of NocoBase are also composed through this design:",paraId:9,tocIndex:2},{value:`Plugins can be used to extend the required functionality in any life cycle of the application, such as the Permissions plugin, which contains customized data tables, business processing for request middleware, and interfaces for front-end administration.
Through this design, NocoBase not only realizes rich no-code features, but also supports free extensions when the built-in functionality cannot meet the needs.`,paraId:10,tocIndex:2},{value:"Please refer to the section on ",paraId:11,tocIndex:3},{value:"Plugin development",paraId:12,tocIndex:3},{value:" to start extending by developing plugins.",paraId:11,tocIndex:3}]},679415:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Most form-, table-, or process-driven no-code products create data structures directly in the user interface, such as Airtable, where adding a new column to a table is adding a new field. This has the advantage of simplicity of use, but the disadvantage of limited functionality and flexibility to meet the needs of more complex scenarios.",paraId:0,tocIndex:1},{value:"NocoBase adopts the design idea of separating the data structure from the user interface, allowing you to create any number of blocks (data views) for the data collections, with different type, styles, content, and actions in each block. This balances the simplicity of no-code operation with the flexibility of native development.",paraId:1,tocIndex:1},{value:"NocoBase enables the development of complex and distinctive business systems, but this does not mean that complex and specialized operations are required. With a single click, configuration options are displayed on the usage interface, and administrators with system configuration privileges can directly configure the user interface in a WYSIWYG manner.",paraId:2,tocIndex:2},{value:"NocoBase adopts plugin architecture, all new functions can be realized by developing and installing plugins, and expanding the functions is as easy as installing an APP on your phone.",paraId:3,tocIndex:3}]},211213:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`
      `,paraId:0},{value:"NocoBase is a extensibility-first, open-source no-code development platform.",paraId:1,tocIndex:1},{value:`
Instead of investing years of time and millions of dollars in research and development, deploy NocoBase in a few minutes and you'll have a private, controllable, and extremely extensible no-code development platform!`,paraId:1,tocIndex:1},{value:"Homepage:",paraId:2,tocIndex:1},{value:"https://www.nocobase.com/",paraId:2,tocIndex:1},{value:"Online Demo:",paraId:3,tocIndex:1},{value:"https://demo.nocobase.com/new",paraId:3,tocIndex:1},{value:"Documents:",paraId:4,tocIndex:1},{value:"https://docs.nocobase.com/",paraId:4,tocIndex:1},{value:"Commericial license & plugins:",paraId:5,tocIndex:1},{value:"https://www.nocobase.com/en/commercial",paraId:5,tocIndex:1},{value:"License agreement:",paraId:6,tocIndex:1},{value:"https://www.nocobase.com/en/agreement",paraId:6,tocIndex:1},{value:"hello@nocobase.com",paraId:7,tocIndex:2}]},144966:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase is open source under the AGPL-3.0 license, and can be used free of charge as long as you follow the license. Advanced features are provided through the commercial version, which also provides full source code and is privately deployed to keep data private and secure.",paraId:0,tocIndex:1},{value:"NocoBase has three core concepts: collection, block, and action. By defining the data collections, to abstract the business; through the block to present the data; through the action to send the user's instructions to the server to complete the data interaction or change.",paraId:1,tocIndex:2},{value:"In the actual business, the ideal situation is to use no-code to meet 80% of the needs, the rest usually need to extend the development. NocoBase adopts the microkernel architecture, with a sound plugin system, all kinds of functions are extended in the form of plugins. NocoBase is based on Node.js and uses mainstream frameworks and technologies, including Koa, Sequelize, React and so on, which makes it extremely easy to expand.",paraId:2,tocIndex:3},{value:"Organizations usually have various systems and databases already in place, and NocoBase supports using third-party databases or APIs as data sources, as well as embedding NocoBase into third-party systems or embedding third-party systems into NocoBase.",paraId:3,tocIndex:4},{value:"NocoBase uses JavaScript/TypeScript technology stack, one person can complete the front-end and back-end development. It has low server requirements and can be deployed on a single low-configuration server.",paraId:4,tocIndex:5},{value:"NocoBase only charges for premium features. On top of the open source version, we offer commercial licenses, commercial services, and commercial plugins. Pay once and get lifetime licenses, as well as full source code for commercial plugins.",paraId:5,tocIndex:6}]},351400:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Refer to ",paraId:0,tocIndex:2},{value:"Fixed Table Columns",paraId:0,tocIndex:2},{value:"Refer to ",paraId:1,tocIndex:3},{value:"Adding Blocks in Modals",paraId:1,tocIndex:3},{value:"The linkage rules in detail blocks now support dynamically setting fields to show/hide. Refer to ",paraId:2,tocIndex:4},{value:"Linkage Rules in Detail Blocks",paraId:2,tocIndex:4},{value:'Added the "Auth: LDAP" plugin (commercial plugin), which allows users to sign in to NocoBase using LDAP server account credentials. Refer to the ',paraId:3,tocIndex:5},{value:"User Manual",paraId:3,tocIndex:5},{value:"application/www-x-form-urlencoded",paraId:4},{value:"Previously, request node only supported JSON format (",paraId:5,tocIndex:7},{value:"application/json",paraId:5,tocIndex:7},{value:") for the body part of the Content-Type. After the upgrade, it also support configuring form format data in key-value pairs.",paraId:5,tocIndex:7},{value:'Previously, the value input fields in the "Headers" and "Parameters" sections of request node only supported pure input or variable selection. After the upgrade, you can directly enter a string with embedded variables. It will be automatically parsed as the final string value before sending the request.',paraId:6,tocIndex:8},{value:'The "Submit to Workflow" action button, originally bound to directly trigger type of the "Post-action Events", has been split and independently created as the "Trigger Workflow" action button for "Custom Action Events" (a commercial plugin). The previously added action buttons in the open-source version can still be used, but no longer supported for new additions. Please use the new "Custom Action Event" instead. See the ',paraId:7,tocIndex:9},{value:"Usage Manual",paraId:7,tocIndex:9},{value:" for more information.",paraId:7,tocIndex:9},{value:"Flattened menu hierarchy and removed some toggle operations, supporting repeated additions.",paraId:8,tocIndex:12},{value:"Before:",paraId:9,tocIndex:12},{value:"After:",paraId:10,tocIndex:12},{value:"Merged similar actions",paraId:11,tocIndex:12},{value:'2.1. Merged "Add New" and "Add Record" options',paraId:12,tocIndex:12},{value:"Before:",paraId:13,tocIndex:12},{value:"After:",paraId:14,tocIndex:12},{value:'2.2 Merged "Submit" and "Save Record" options',paraId:15,tocIndex:12},{value:"Before:",paraId:16,tocIndex:12},{value:"After:",paraId:17,tocIndex:12},{value:"See PR\uFF1A",paraId:18,tocIndex:13},{value:"refactor: flatten and merge Actions #4336",paraId:18,tocIndex:13},{value:"Before: In a multi-application environment, the log plugin displays all application log file lists.",paraId:19,tocIndex:15},{value:"After: In a multi-application environment, the log plugin only displays the current application log file list.",paraId:20,tocIndex:15},{value:"Before: The folder path for workflow and custom request log files is at the same level as the application log folder.",paraId:21,tocIndex:16},{value:"After: The folder path for workflow and custom request log files belongs to the corresponding application log folder.",paraId:22,tocIndex:16},{value:"Previously, the result data structure after successful or failed HTTP request node was inconsistent.",paraId:23,tocIndex:18},{value:`// Only the response data part is returned when successful
{
  // Any JSON content
}

// The failure returns the result of Axios's error.toJSON() function.
{
  config: {},
  headers: {},
  status: 500,
  statusText: 'xxx',
}
`,paraId:24,tocIndex:18},{value:"Now, the response for both success and failure will be stored consistently in the node result.",paraId:25,tocIndex:18},{value:`// Success
{
  config: {},
  headers: {},
  status: 200,
  statusText: 'ok',
  data: {}
}

// Fail
{
  config: {},
  headers: {},
  status: 500,
  statusText: 'xxx',
  data: {}
}
`,paraId:26,tocIndex:18},{value:"Other exceptions such as no response from the server (",paraId:27,tocIndex:18},{value:"status",paraId:27,tocIndex:18},{value:" is ",paraId:27,tocIndex:18},{value:"null",paraId:27,tocIndex:18},{value:"), or failed initialization, can be observed in the server logs for error handling. See more details in ",paraId:27,tocIndex:18},{value:"[Workflow: HTTP request Node] Node result type not fixed #4373",paraId:27,tocIndex:18},{value:"Date fields in charts were not converted according to the client's time zone when aggregating data with a date field dimension. ",paraId:28,tocIndex:19},{value:"fix(data-vi): should use local timezone when formatting date #4366",paraId:28,tocIndex:19},{value:"Poor view refreshing; database views must be exited and re-entered to refresh. ",paraId:29,tocIndex:19},{value:"fix: collection fields should refreshed after editing sync from database #4224",paraId:29,tocIndex:19},{value:"Tree table blocks did not collapse all nodes when adding a child node. ",paraId:30,tocIndex:19},{value:"fix: do not collapse all nodes when adding a child node in the tree table block #4289",paraId:30,tocIndex:19},{value:"Collection title field setting was invalid. ",paraId:31,tocIndex:19},{value:"fix: collection title field setting is invalid #4358",paraId:31,tocIndex:19},{value:"bigint field lost precision in read pretty mode. ",paraId:32,tocIndex:19},{value:"fix: bigint field loses precision in read pretty mode #4360",paraId:32,tocIndex:19},{value:"Log files remained open after stopping sub-applications. ",paraId:33,tocIndex:19},{value:"fix(logger): should close log stream after destroying app #4380",paraId:33,tocIndex:19},{value:"Workflow aggregate node association field selection bug. ",paraId:34,tocIndex:19},{value:"fix(plugin-workflow-aggregate): fix association field select #4315",paraId:34,tocIndex:19},{value:"Ignore error option was invalid in HTTP request node sync mode. ",paraId:35,tocIndex:19},{value:"fix(plugin-workflow-request): fix ignoreFail in sync mode #4334",paraId:35,tocIndex:19},{value:'Value input fields in workflow HTTP request node overflowed. <ahref="',paraId:36,tocIndex:19},{value:"https://github.com/nocobase/nocobase/pull/4353",paraId:36,tocIndex:19},{value:'" target="_blank">fix(plugin-workflow-request): fix value fields overflowing #4354',paraId:36,tocIndex:19},{value:'Special characters caused workflow HTTP request node to hang. <ahref="',paraId:37,tocIndex:19},{value:"https://github.com/nocobase/nocobase/pull/4376",paraId:37,tocIndex:19},{value:'" target="_blank">fix(plugin-workflow-request): fix request hanging when invalid header value #4376',paraId:37,tocIndex:19},{value:"Setting marginBlock in the theme editor affected the spacing between form fields. ",paraId:38,tocIndex:19},{value:"fix(theme-editor): form field spacing should not be affected by token.marginBlock #4374",paraId:38,tocIndex:19},{value:'Fixed an issue where clicking on the "License" option in the top right corner of the page would result in incorrect redirection. ',paraId:39,tocIndex:19},{value:"PR #4415",paraId:39,tocIndex:19},{value:"Fixed the issue where the operator of the field becomes invalid after saving the filter form as a block template. ",paraId:40,tocIndex:19},{value:"PR #4390",paraId:40,tocIndex:19},{value:"Added plugin sample documentation: ",paraId:41,tocIndex:20},{value:"https://docs-cn.nocobase.com/plugin-samples",paraId:41,tocIndex:20},{value:"Updated documentation structure for workflow usage manual: ",paraId:42,tocIndex:20},{value:"https://docs-cn.nocobase.com/handbook/workflow",paraId:42,tocIndex:20}]},527343:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u5F85\u8865\u5145",paraId:0,tocIndex:1},{value:`interface ICollectionTemplate {
  name: string;
  title?: string;
  /** \u6392\u5E8F */
  order?: number;
  /** \u9ED8\u8BA4\u914D\u7F6E */
  default?: CollectionOptions;
  /** UI \u53EF\u914D\u7F6E\u7684 CollectionOptions \u53C2\u6570\uFF08\u6DFB\u52A0\u6216\u7F16\u8F91\u7684 Collection \u8868\u5355\u7684\u5B57\u6BB5\uFF09 */
  configurableProperties?: Record<string, ISchema>;
  /** \u5F53\u524D\u6A21\u677F\u53EF\u7528\u7684\u5B57\u6BB5\u7C7B\u578B */
  availableFieldInterfaces?:
    | AvailableFieldInterfacesInclude
    | AvailableFieldInterfacesExclude;
}

interface AvailableFieldInterfacesInclude {
  include?: any[];
}

interface AvailableFieldInterfacesExclude {
  exclude?: any[];
}

interface CollectionOptions {
  /**
   * \u81EA\u52A8\u751F\u6210 id
   * @default true
   * */
  autoGenId?: boolean;
  /** \u521B\u5EFA\u4EBA */
  createdBy?: boolean;
  /** \u6700\u540E\u66F4\u65B0\u4EBA */
  updatedBy?: boolean;
  /** \u521B\u5EFA\u65E5\u671F */
  createdAt?: boolean;
  /** \u66F4\u65B0\u65E5\u671F */
  updatedAt?: boolean;
  /** \u53EF\u6392\u5E8F */
  sortable?: boolean;
  /* \u6811\u7ED3\u6784 */
  tree?: string;
  /* \u65E5\u5FD7 */
  logging?: boolean;
  /** \u7EE7\u627F */
  inherits: string | string[];
  /* \u5B57\u6BB5\u5217\u8868 */
  fields?: FieldOptions[];
}
`,paraId:1,tocIndex:2},{value:"\u521B\u5EFA\u65F6\u90FD\u4E0D\u9700\u8981 autoGenId\uFF0C\u5E76\u4E14\u53EA\u63D0\u4F9B title \u548C name \u914D\u7F6E\u9879",paraId:2,tocIndex:3},{value:`import { collectionConfigurableProperties } from '@nocobase/client';

{
  default: {
    autoGenId: false,
    fields: [],
  },
  configurableProperties: {
    ...collectionConfigurableProperties('name', 'title'),
  },
}
`,paraId:3,tocIndex:3},{value:"\u5B8C\u6574\u63D2\u4EF6\u793A\u4F8B\u53C2\u8003\uFF1A",paraId:4,tocIndex:3},{value:"samples/custom-collection-template",paraId:4,tocIndex:3}]},27577:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"NocoBase \u76EE\u524D\u63D0\u4F9B\u4E86\u4E24\u79CD\u8BA1\u7B97\u516C\u5F0F\u63D2\u4EF6\uFF1A",paraId:0,tocIndex:0},{value:"@nocobase/plugin-math-formula-field",paraId:1,tocIndex:0},{value:" Math \u516C\u5F0F",paraId:1,tocIndex:0},{value:"@nocobase/plugin-excel-formula-field",paraId:1,tocIndex:0},{value:" Excel \u516C\u5F0F\uFF08\u611F\u8C22 ",paraId:1,tocIndex:0},{value:"azriel46d",paraId:1,tocIndex:0},{value:" \u8D21\u732E\uFF09",paraId:1,tocIndex:0},{value:"\u57FA\u4E8E ",paraId:2,tocIndex:1},{value:"Math.js",paraId:2,tocIndex:1},{value:" \u5B9E\u73B0\uFF0C\u5B83\u5177\u6709\u652F\u6301\u7B26\u53F7\u8BA1\u7B97\u7684\u7075\u6D3B\u8868\u8FBE\u5F0F\u89E3\u6790\u5668\uFF0C\u5927\u91CF\u5185\u7F6E\u51FD\u6570\u548C\u5E38\u91CF\uFF0C\u5E76\u63D0\u4F9B\u4E86\u96C6\u6210\u7684\u89E3\u51B3\u65B9\u6848\u6765\u5904\u7406\u4E0D\u540C\u7684\u6570\u636E\u7C7B\u578B\uFF0C\u4F8B\u5982\u6570\u5B57\uFF0C\u5927\u6570\uFF0C\u590D\u6570\uFF0C\u5206\u6570\uFF0C\u5355\u4F4D\u548C\u77E9\u9635\u3002",paraId:2,tocIndex:1},{value:`import { evaluate } from 'mathjs';
// expressions
evaluate('1.2 * (2 + 4.5)'); // 7.8
evaluate('12.7 cm to inch'); // 5 inch
evaluate('sin(45 deg) ^ 2'); // 0.5
evaluate('9 / 3 + 2i'); // 3 + 2i
evaluate('det([-1, 2; 3, 1])'); // -7
`,paraId:3,tocIndex:1},{value:"\u57FA\u4E8E ",paraId:4,tocIndex:2},{value:"Formula.js",paraId:4,tocIndex:2},{value:" \u5B9E\u73B0\uFF0C\u8BE6\u7EC6\u7528\u6CD5\u53C2\u8003 ",paraId:4,tocIndex:2},{value:"Formula.js functions",paraId:4,tocIndex:2},{value:"\u3002",paraId:4,tocIndex:2},{value:`SUM(-5, 15, 32); // 42
IF(true, 'Hello!', 'Goodbye!'); // Hello!
`,paraId:5,tocIndex:2}]},398429:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},334983:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[]},48938:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u6570\u636E\u8868\u7EE7\u627F\u57FA\u4E8E ",paraId:0,tocIndex:0},{value:"PostgreSQL \u7684 INHERITS \u8BED\u6CD5",paraId:0,tocIndex:0},{value:" \u5B9E\u73B0\uFF0C\u4EC5\u9650\u4E8E PostgreSQL \u6570\u636E\u5E93\u5B89\u88C5\u7684 NocoBase \u65F6\u624D\u4F1A\u63D0\u4F9B\u3002",paraId:0,tocIndex:0},{value:"\u6211\u4EEC\u4ECE\u4E00\u4E2A\u4F8B\u5B50\u5F00\u59CB\uFF0C\u5047\u8BBE\u8981\u505A\u4E00\u4E2A\u6559\u5B66\u7CFB\u7EDF\uFF0C\u6709\u4E09\u7C7B\u7528\u6237\uFF1A\u5B66\u751F\u3001\u5BB6\u957F\u548C\u8001\u5E08\u3002",paraId:1,tocIndex:1},{value:"\u5982\u679C\u6CA1\u6709\u7EE7\u627F\uFF0C\u8981\u5206\u522B\u4E3A\u4E09\u7C7B\u7528\u6237\u5EFA\u8868\uFF1A",paraId:2,tocIndex:1},{value:"\u5B66\u751F\uFF1A\u59D3\u540D\u3001\u5E74\u9F84\u3001\u6027\u522B\u3001\u8EAB\u4EFD\u8BC1",paraId:3,tocIndex:1},{value:"\u5BB6\u957F\uFF1A\u59D3\u540D\u3001\u5E74\u9F84\u3001\u6027\u522B\u3001\u804C\u4E1A\u3001\u5B66\u5386",paraId:3,tocIndex:1},{value:"\u8001\u5E08\uFF1A\u59D3\u540D\u3001\u5E74\u9F84\u3001\u6027\u522B\u3001\u6559\u9F84\u3001\u5DF2\u5A5A",paraId:3,tocIndex:1},{value:"\u6709\u4E86\u6570\u636E\u8868\u7EE7\u627F\u4E4B\u540E\uFF0C\u5171\u540C\u7684\u4FE1\u606F\u5C31\u53EF\u4EE5\u63D0\u70BC\u51FA\u6765\uFF1A",paraId:4,tocIndex:1},{value:"\u7528\u6237\uFF1A\u59D3\u540D\u3001\u5E74\u9F84\u3001\u6027\u522B",paraId:5,tocIndex:1},{value:"\u5B66\u751F\uFF1A\u8EAB\u4EFD\u8BC1",paraId:5,tocIndex:1},{value:"\u5BB6\u957F\uFF1A\u804C\u4E1A\u3001\u5B66\u5386",paraId:5,tocIndex:1},{value:"\u8001\u5E08\uFF1A\u6559\u9F84\u3001\u5DF2\u5A5A",paraId:5,tocIndex:1},{value:"ER \u56FE\u5982\u4E0B\uFF1A",paraId:6,tocIndex:1},{value:"\u6CE8\uFF1A\u5B50\u8868 ID \u548C\u7236\u8868 ID \u5171\u4EAB\u5E8F\u5217",paraId:7,tocIndex:1},{value:"Inherits \u5B57\u6BB5\u9009\u62E9\u9700\u8981\u7EE7\u627F\u7684\u6570\u636E\u8868",paraId:8,tocIndex:2},{value:"\u901A\u8FC7\u4EE3\u7801\u914D\u7F6E\u5982\u4E0B\uFF1A",paraId:9,tocIndex:2},{value:`db.collection({
  name: 'users',
});

db.collection({
  name: 'students',
  inherits: 'users',
});
`,paraId:10,tocIndex:2},{value:"\u6CE8\u610F\uFF1A",paraId:11,tocIndex:2},{value:"\u7EE7\u627F\u7684\u8868\u5E76\u4E0D\u80FD\u968F\u610F\u9009\u62E9\uFF0C\u4E3B\u952E\u5FC5\u987B\u662F\u552F\u4E00\u5E8F\u5217\uFF0C\u6BD4\u5982 uuid \u6216\u8005\u6240\u6709\u7EE7\u627F\u7EBF\u8DEF\u4E0A\u7684\u8868\u7684 id \u81EA\u589E\u5E8F\u5217\u90FD\u7528\u540C\u4E00\u4E2A",paraId:12,tocIndex:2},{value:"Inherits \u53C2\u6570\u4E0D\u80FD\u88AB\u7F16\u8F91",paraId:12,tocIndex:2},{value:"\u5982\u679C\u6709\u7EE7\u627F\u5173\u7CFB\uFF0C\u88AB\u7EE7\u627F\u7684\u7236\u8868\u4E0D\u80FD\u88AB\u5220\u9664",paraId:12,tocIndex:2},{value:"\u5B57\u6BB5\u5217\u8868\u91CC\u540C\u6B65\u663E\u793A\u7EE7\u627F\u7684\u7236\u8868\u5B57\u6BB5\uFF0C\u7236\u8868\u5B57\u6BB5\u4E0D\u53EF\u4EE5\u4FEE\u6539\uFF0C\u4F46\u53EF\u4EE5\u91CD\u5199\uFF08Override\uFF09",paraId:13,tocIndex:3},{value:"\u91CD\u5199\u7236\u8868\u5B57\u6BB5\u7684\u6CE8\u610F\u4E8B\u9879\uFF1A",paraId:14,tocIndex:3},{value:"\u5B50\u8868\u5B57\u6BB5\u6807\u8BC6\u4E0E\u7236\u8868\u5B57\u6BB5\u4E00\u6837\u65F6\u4E3A\u91CD\u5199",paraId:15,tocIndex:3},{value:"\u91CD\u5199\u5B57\u6BB5\u7684\u7C7B\u578B\u5FC5\u987B\u4FDD\u6301\u4E00\u81F4",paraId:15,tocIndex:3},{value:"\u5173\u7CFB\u5B57\u6BB5\u9664\u4E86 target collection \u4EE5\u5916\u7684\u5176\u4ED6\u53C2\u6570\u9700\u8981\u4FDD\u6301\u4E00\u81F4",paraId:15,tocIndex:3},{value:"\u5728\u7236\u8868\u533A\u5757\u91CC\u53EF\u4EE5\u914D\u7F6E\u5B50\u8868\u7684\u533A\u5757",paraId:16,tocIndex:4},{value:"\u5F53\u6709\u7EE7\u627F\u7684\u7236\u8868\u65F6\uFF0C\u914D\u7F6E\u5B57\u6BB5\u65F6\uFF0C\u4F1A\u63D0\u4F9B\u4ECE\u7236\u8868\u7EE7\u627F\u7684\u5B57\u6BB5\u7684\u914D\u7F6E",paraId:17,tocIndex:5}]},219424:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"@nocobase/logger",paraId:0},{value:"\u57FA\u4E8E Winston \u5B9E\u73B0\uFF0C\u63D0\u4F9B\u4E86\u4FBF\u6377\u7684\u521B\u5EFA logger \u5B9E\u4F8B\u7684\u65B9\u6CD5\u3002",paraId:1,tocIndex:1},{value:`const logger = createLogger();
logger.info('Hello distributed log files!');

const { instance, middleware } = createAppLogger(); // \u7528\u4E8E @nocobase/server
app.logger = instance;
app.use(middleware);
`,paraId:2,tocIndex:1},{value:"logger \u76F8\u5173\u73AF\u5883\u53D8\u91CF\u6709\uFF1A",paraId:3,tocIndex:2},{value:"LOGGER_TRANSPORT",paraId:4,tocIndex:2},{value:"LOGGER_BASE_PATH",paraId:5,tocIndex:2},{value:`const app = new Application({
  logger: {
    async skip(ctx) {
      return false;
    },
    requestWhitelist: [],
    responseWhitelist: [],
    transports: ['console', 'dailyRotateFile'],
  },
});
`,paraId:6,tocIndex:3},{value:"\u66F4\u591A\u914D\u7F6E\u9879\u53C2\u8003 ",paraId:7,tocIndex:3},{value:"Winston \u6587\u6863",paraId:7,tocIndex:3},{value:"ctx.logger \u5E26\u6709 reqId\uFF0C\u6574\u4E2A ctx \u5468\u671F\u91CC\u90FD\u662F\u4E00\u4E2A reqId",paraId:8,tocIndex:4},{value:`ctx.logger = app.logger.child({ reqId: ctx.reqId });
`,paraId:9,tocIndex:4},{value:"app.logger",paraId:10,tocIndex:4},{value:" \u548C ",paraId:10,tocIndex:4},{value:"ctx.logger",paraId:10,tocIndex:4},{value:" \u90FD\u662F Winston \u5B9E\u4F8B\uFF0C\u8BE6\u7EC6\u7528\u6CD5\u53C2\u8003 ",paraId:10,tocIndex:4},{value:"Winston \u6587\u6863",paraId:10,tocIndex:4},{value:"\u9664\u4E86 Winston \u7684\u65B9\u5F0F\u4EE5\u5916\uFF0CNocoBase \u8FD8\u63D0\u4F9B\u4E86\u4E00\u79CD\u66F4\u4FBF\u6377\u7684\u65B9\u5F0F",paraId:11,tocIndex:5},{value:`import { Transports } from '@nocobase/logger';

Transports['custom'] = () => {
  return new winston.transports.Console();
};

const app = new Application({
  logger: {
    transports: ['custom'],
  },
});
`,paraId:12,tocIndex:5}]},512703:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Updated on June 11, 2024",paraId:0,tocIndex:0},{value:"We are developing or have already planned the following new features and plugins, \u2611\uFE0F indicates just completed and published:",paraId:1,tocIndex:0},{value:"Field default values support expressions",paraId:2,tocIndex:1},{value:"Association fields support linkage rules",paraId:2,tocIndex:1},{value:"Record open mode: Page (alongside Dialog, Drawer)",paraId:2,tocIndex:1},{value:" Link action, supports variables and expressions",paraId:2,tocIndex:1},{value:" Data scope and field default values support Query params",paraId:2,tocIndex:1},{value:" Set block height",paraId:2,tocIndex:1},{value:" Markdown supports variables",paraId:2,tocIndex:1},{value:" Iframe address supports variables.",paraId:2,tocIndex:1},{value:"Support for linked refresh between blocks",paraId:2,tocIndex:1},{value:"Add Charts blocks in pop-ups",paraId:2,tocIndex:1},{value:" Refactor the Import and Export plugin to handle more data at a time",paraId:2,tocIndex:1},{value:"Single record/popup supports independent URL",paraId:2,tocIndex:1},{value:" Improved tree table block",paraId:2,tocIndex:1},{value:`Workflow refactoring
`,paraId:2,tocIndex:1},{value:" Create record node",paraId:3,tocIndex:1},{value:" Update record node",paraId:3,tocIndex:1},{value:"Automatically handle variable references (deprecate preload)",paraId:3,tocIndex:1},{value:"Date and time processing engine",paraId:2,tocIndex:1},{value:"Distributed architecture",paraId:2,tocIndex:1},{value:"Plugin tutorial",paraId:2,tocIndex:1},{value:" DingTalk",paraId:4,tocIndex:2},{value:"Wechat",paraId:4,tocIndex:2},{value:" Scan QR code",paraId:4,tocIndex:2},{value:" Workbench block",paraId:4,tocIndex:2},{value:" Tree block",paraId:4,tocIndex:2},{value:"Audit logs",paraId:4,tocIndex:2},{value:"Action: Import records pro",paraId:4,tocIndex:2},{value:"Action: Export records pro",paraId:4,tocIndex:2},{value:"Multi-application manager",paraId:4,tocIndex:2},{value:"Share pages",paraId:4,tocIndex:2},{value:"Data source: API",paraId:4,tocIndex:2},{value:"Workflow: Script node",paraId:4,tocIndex:2},{value:"Workflow: Webhook trigger",paraId:4,tocIndex:2},{value:"Input mask",paraId:4,tocIndex:2},{value:"Embed External Systems",paraId:4,tocIndex:2},{value:"New Mobile client",paraId:4,tocIndex:2},{value:"Notification",paraId:4,tocIndex:2}]},283627:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`{
  name: 'categories',
  tree: 'adjacency-list',
  fields: [
    {
      type: 'belongsTo',
      name: 'parent',
      treeParent: true,
    },
    {
      type: 'hasMany',
      name: 'children',
      treeChildren: true,
    },
  ],
}
`,paraId:0,tocIndex:1}]},367357:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"refactor: use boolean value instead of null #74",paraId:0,tocIndex:1},{value:"refactor: app middlewares 17362a8",paraId:0,tocIndex:1},{value:"chore(versions): publish packages 0.4.0-alpha.2 c2f1876",paraId:0,tocIndex:1},{value:"fix: minor problems ",paraId:0,tocIndex:1},{value:"#72",paraId:0,tocIndex:1},{value:"Develop ",paraId:0,tocIndex:1},{value:"#68",paraId:0,tocIndex:1},{value:"Feature: plugin-china-region ",paraId:0,tocIndex:1},{value:"#66",paraId:0,tocIndex:1},{value:"Feature: filter for linkTo field ",paraId:0,tocIndex:1},{value:"#64",paraId:0,tocIndex:1},{value:"fix: make default view/tab cannot be destroyed ",paraId:0,tocIndex:1},{value:"#63",paraId:0,tocIndex:1},{value:"Feature/plugin automations ",paraId:0,tocIndex:1},{value:"#65",paraId:0,tocIndex:1},{value:"Feature/action logs ",paraId:0,tocIndex:1},{value:"#62",paraId:0,tocIndex:1},{value:"Feature/action logs ",paraId:0,tocIndex:1},{value:"#61",paraId:0,tocIndex:1},{value:"Feature/destroy lock ",paraId:0,tocIndex:1},{value:"#60",paraId:0,tocIndex:1},{value:"fix: ignore some typescript error ",paraId:0,tocIndex:1},{value:"#59",paraId:0,tocIndex:1},{value:"feat: route permissions ",paraId:0,tocIndex:1},{value:"#58",paraId:0,tocIndex:1},{value:"Feature: add permission plugin api ",paraId:0,tocIndex:1},{value:"#57",paraId:0,tocIndex:1},{value:"fix: updatedBy foreignKey ",paraId:0,tocIndex:1},{value:"#56",paraId:0,tocIndex:1},{value:"feat: add permissions plugin ",paraId:0,tocIndex:1},{value:"#53",paraId:0,tocIndex:1},{value:"fix: updatedBy field in bulkUpdate hook ",paraId:0,tocIndex:1},{value:"#54",paraId:0,tocIndex:1},{value:"test: skip bug test cases for ci passing ",paraId:0,tocIndex:1},{value:"#52",paraId:0,tocIndex:1},{value:"fix: avoid bug when update other field ",paraId:0,tocIndex:1},{value:"#51",paraId:0,tocIndex:1},{value:"feat: date-only operators ",paraId:0,tocIndex:1},{value:"#50",paraId:0,tocIndex:1},{value:"Feature field for set default ",paraId:0,tocIndex:1},{value:"#49",paraId:0,tocIndex:1},{value:"Feature: custom operators for querying ",paraId:0,tocIndex:1},{value:"#48",paraId:0,tocIndex:1},{value:"fix: toInclude bug with nested associations ",paraId:0,tocIndex:1},{value:"#47",paraId:0,tocIndex:1},{value:"feat: make single file upload to attachment available ",paraId:0,tocIndex:1},{value:"#46",paraId:0,tocIndex:1},{value:"feature: add file manager base architecture ",paraId:0,tocIndex:1},{value:"#44",paraId:0,tocIndex:1},{value:"feat: add createdBy/updatedBy field config for table managed by collections ",paraId:0,tocIndex:1},{value:"#43",paraId:0,tocIndex:1},{value:"fix: use wrapped and logic for merging filters ",paraId:0,tocIndex:1},{value:"#42",paraId:0,tocIndex:1},{value:"fix: filterByFields should return same value when input == null (close 0) ",paraId:0,tocIndex:1},{value:"#41",paraId:0,tocIndex:1},{value:"fix: Symbol property could not be iterated in for-in ",paraId:0,tocIndex:1},{value:"#39",paraId:0,tocIndex:1},{value:"Feature/sort ",paraId:0,tocIndex:1},{value:"#38",paraId:0,tocIndex:1},{value:"refactor: change sort strategy from offset to targetId ",paraId:0,tocIndex:1},{value:"#37",paraId:0,tocIndex:1},{value:"Feature/sort ",paraId:0,tocIndex:1},{value:"#36",paraId:0,tocIndex:1},{value:"feat: add filter and transaction for destroy action ",paraId:0,tocIndex:1},{value:"#35",paraId:0,tocIndex:1},{value:"fix: field filter logic for create/update ",paraId:0,tocIndex:1},{value:"#34",paraId:0,tocIndex:1},{value:"Feature: action fields options for create/update ",paraId:0,tocIndex:1},{value:"#32",paraId:0,tocIndex:1},{value:"Fix: change strategy from add to set for updateAssociations ",paraId:0,tocIndex:1},{value:"#33",paraId:0,tocIndex:1},{value:"Test/ci ",paraId:0,tocIndex:1},{value:"#31",paraId:0,tocIndex:1},{value:"feat: improve collection hooks/fields/actions/views... ",paraId:0,tocIndex:1},{value:"#30",paraId:0,tocIndex:1},{value:"Fix/model update associations ",paraId:0,tocIndex:1},{value:"#29",paraId:0,tocIndex:1},{value:"fix: database test cases and table options ",paraId:0,tocIndex:1},{value:"#28",paraId:0,tocIndex:1},{value:"feat: add virtual attribute geter & setter support ",paraId:0,tocIndex:1},{value:"#27",paraId:0,tocIndex:1},{value:"feat: collection options & hooks ",paraId:0,tocIndex:1},{value:"#21",paraId:0,tocIndex:1},{value:"feat(users): add users module ",paraId:0,tocIndex:1},{value:"#26",paraId:0,tocIndex:1},{value:"feat: add sort action ",paraId:0,tocIndex:1},{value:"#22",paraId:0,tocIndex:1},{value:"Test/list ",paraId:0,tocIndex:1},{value:"#19",paraId:0,tocIndex:1},{value:"feat: pagination options ",paraId:0,tocIndex:1},{value:"#20",paraId:0,tocIndex:1},{value:"test: refactor test in database and add more ",paraId:0,tocIndex:1},{value:"#17",paraId:0,tocIndex:1},{value:"feat: actions & views ",paraId:0,tocIndex:1},{value:"#18",paraId:0,tocIndex:1},{value:"Test cases for database ",paraId:0,tocIndex:1},{value:"#16",paraId:0,tocIndex:1},{value:"Refactor: change global injection of test for actions package. ",paraId:0,tocIndex:1},{value:"#15",paraId:0,tocIndex:1},{value:"feat: improve plugins ",paraId:0,tocIndex:1},{value:"#14",paraId:0,tocIndex:1},{value:"Doc: add README.md for server. ",paraId:0,tocIndex:1},{value:"#12",paraId:0,tocIndex:1},{value:"fix: parseRequest & registerHandlers ",paraId:0,tocIndex:1},{value:"#10",paraId:0,tocIndex:1},{value:"fix #9 ",paraId:0,tocIndex:1},{value:"#11",paraId:0,tocIndex:1},{value:"feat: support register and call partial actions ",paraId:0,tocIndex:1},{value:"#7",paraId:0,tocIndex:1},{value:"\u53D1\u5E03\u6838\u5FC3\u6846\u67B6 ",paraId:0,tocIndex:1},{value:"#6",paraId:0,tocIndex:1},{value:"fix #9 (#11) ",paraId:1,tocIndex:2},{value:"#9",paraId:1,tocIndex:2},{value:" ",paraId:1,tocIndex:2},{value:"#9",paraId:1,tocIndex:2},{value:"fix: improve login form styles 5319000",paraId:1,tocIndex:2},{value:"fix: error message for login and registration 214b227",paraId:1,tocIndex:2},{value:"chore: adjust parameters ",paraId:2,tocIndex:3},{value:"b95e2da",paraId:2,tocIndex:3},{value:"first commit ",paraId:2,tocIndex:3},{value:"e5d30b3",paraId:2,tocIndex:3},{value:"style: code formatting ",paraId:2,tocIndex:3},{value:"ce4a22f",paraId:2,tocIndex:3}]},564905:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"fix: upgrade formily & side menu render with createPortal & use deep compare effect ",paraId:0,tocIndex:1},{value:"#103",paraId:0,tocIndex:1},{value:"fix: SchemaRenderer get schema value ",paraId:0,tocIndex:1},{value:"#102",paraId:0,tocIndex:1},{value:"fix: upgrade formily and form.setValues uses overwrite strategy ",paraId:0,tocIndex:1},{value:"#101",paraId:0,tocIndex:1},{value:"feat: support i18n ",paraId:0,tocIndex:1},{value:"#99",paraId:0,tocIndex:1},{value:"feat: new version of the documentation ",paraId:0,tocIndex:1},{value:"#95",paraId:0,tocIndex:1},{value:"option-tag style ",paraId:0,tocIndex:1},{value:"#92",paraId:0,tocIndex:1},{value:"create-nocobase-app: favicon ",paraId:0,tocIndex:1},{value:"#91",paraId:0,tocIndex:1},{value:"feat: create nocobase app with simple & quickstart option ",paraId:0,tocIndex:1},{value:"#87",paraId:0,tocIndex:1},{value:"feat: export plugin ",paraId:0,tocIndex:1},{value:"#73",paraId:0,tocIndex:1},{value:"v0.5 ",paraId:1,tocIndex:2},{value:"2cbcd08",paraId:1,tocIndex:2},{value:"refactor ",paraId:1,tocIndex:2},{value:"75cd158",paraId:1,tocIndex:2},{value:"feat: improve code ",paraId:1,tocIndex:2},{value:"c6b68f2",paraId:1,tocIndex:2}]},50150:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Feat: plugin-workflow ",paraId:0,tocIndex:1},{value:"#288",paraId:0,tocIndex:1},{value:"fix: slate style ",paraId:0,tocIndex:1},{value:"#289",paraId:0,tocIndex:1},{value:"fix: toJSON with belongsTo Assoication ",paraId:0,tocIndex:1},{value:"#287",paraId:0,tocIndex:1},{value:"feat: improve acl module ",paraId:0,tocIndex:1},{value:"#283",paraId:0,tocIndex:1},{value:"fix: destroy own records ",paraId:0,tocIndex:1},{value:"#285",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): support context variables from model trigger ",paraId:0,tocIndex:1},{value:"#284",paraId:0,tocIndex:1},{value:"fix: acl write ",paraId:0,tocIndex:1},{value:"#280",paraId:0,tocIndex:1},{value:"fix: call root server hook after insertNewSchema ",paraId:0,tocIndex:1},{value:"#282",paraId:0,tocIndex:1},{value:"Feat/plugin workflow ",paraId:0,tocIndex:1},{value:"#278",paraId:0,tocIndex:1},{value:"feat: acl provider ",paraId:0,tocIndex:1},{value:"#279",paraId:0,tocIndex:1},{value:"feat: add Slate component ",paraId:0,tocIndex:1},{value:"#272",paraId:0,tocIndex:1},{value:"Feat/plugin users with jwt ",paraId:0,tocIndex:1},{value:"#258",paraId:0,tocIndex:1},{value:"fix: modify antd style of default ",paraId:0,tocIndex:1},{value:"#277",paraId:0,tocIndex:1},{value:"fix(client): meet undefined error after clear filter cascader value ",paraId:0,tocIndex:1},{value:"#267",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): refactor calculation and add filter for query ",paraId:0,tocIndex:1},{value:"#264",paraId:0,tocIndex:1},{value:"feat: block provider ",paraId:0,tocIndex:1},{value:"#261",paraId:0,tocIndex:1},{value:"fix: toJSON with null association ",paraId:0,tocIndex:1},{value:"#260",paraId:0,tocIndex:1},{value:"fix: error handle error ",paraId:0,tocIndex:1},{value:"#259",paraId:0,tocIndex:1},{value:"fix: textarea read pretty can support break line ",paraId:0,tocIndex:1},{value:"#255",paraId:0,tocIndex:1},{value:"fix: markdown support ellipsis ",paraId:0,tocIndex:1},{value:"#257",paraId:0,tocIndex:1},{value:"featPlugin multiple apps ",paraId:0,tocIndex:1},{value:"#248",paraId:0,tocIndex:1},{value:"add action log tempalte ",paraId:0,tocIndex:1},{value:"#239",paraId:0,tocIndex:1},{value:"fix some bugs ",paraId:0,tocIndex:1},{value:"#252",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix adding/removing node in parallel branches ",paraId:0,tocIndex:1},{value:"#253",paraId:0,tocIndex:1},{value:"Feat: client base entry of plugin workflow ",paraId:0,tocIndex:1},{value:"#225",paraId:0,tocIndex:1},{value:"fix: updateAt on move scope change ",paraId:0,tocIndex:1},{value:"#251",paraId:0,tocIndex:1},{value:"feat: get json schema with async node ",paraId:0,tocIndex:1},{value:"#246",paraId:0,tocIndex:1},{value:"feat: insertNewSchema ",paraId:0,tocIndex:1},{value:"#245",paraId:0,tocIndex:1},{value:"fix: transaction error ",paraId:0,tocIndex:1},{value:"#242",paraId:0,tocIndex:1},{value:"feat: block templates ",paraId:0,tocIndex:1},{value:"#240",paraId:0,tocIndex:1},{value:"feat: uiSchema clearAncestor ",paraId:0,tocIndex:1},{value:"#241",paraId:0,tocIndex:1},{value:"feat: init sort field values ",paraId:0,tocIndex:1},{value:"#236",paraId:0,tocIndex:1},{value:"fix: move action without alter updatedAt ",paraId:0,tocIndex:1},{value:"#235",paraId:0,tocIndex:1},{value:"feat: role check action ",paraId:0,tocIndex:1},{value:"#234",paraId:0,tocIndex:1},{value:"feat: ne operator ",paraId:0,tocIndex:1},{value:"#233",paraId:0,tocIndex:1},{value:"fix: user current role ",paraId:0,tocIndex:1},{value:"#232",paraId:0,tocIndex:1},{value:"featEnable permission ",paraId:0,tocIndex:1},{value:"#229",paraId:0,tocIndex:1},{value:"test: update reverseField ",paraId:0,tocIndex:1},{value:"#231",paraId:0,tocIndex:1},{value:"feat: kanban ",paraId:0,tocIndex:1},{value:"#230",paraId:0,tocIndex:1},{value:"Nocobase next kanban ",paraId:0,tocIndex:1},{value:"#223",paraId:0,tocIndex:1},{value:"add: test ",paraId:0,tocIndex:1},{value:"#224",paraId:0,tocIndex:1},{value:"Plugin error handler ",paraId:0,tocIndex:1},{value:"#222",paraId:0,tocIndex:1},{value:"fix: array $noneOf with null ",paraId:0,tocIndex:1},{value:"#220",paraId:0,tocIndex:1},{value:"fix: filter parser with number in key ",paraId:0,tocIndex:1},{value:"#219",paraId:0,tocIndex:1},{value:"feat: ui-schema-tree-path descendant index ",paraId:0,tocIndex:1},{value:"#218",paraId:0,tocIndex:1},{value:"fix: array operator query error ",paraId:0,tocIndex:1},{value:"#217",paraId:0,tocIndex:1},{value:"fix: operator query value ",paraId:0,tocIndex:1},{value:"#216",paraId:0,tocIndex:1},{value:"feat: string operators ",paraId:0,tocIndex:1},{value:"#215",paraId:0,tocIndex:1},{value:"feat: error handle middleware ",paraId:0,tocIndex:1},{value:"#214",paraId:0,tocIndex:1},{value:"refactor: filter schema component ",paraId:0,tocIndex:1},{value:"#213",paraId:0,tocIndex:1},{value:"fix: empty operator with $or filter ",paraId:0,tocIndex:1},{value:"#212",paraId:0,tocIndex:1},{value:"feat: plugin install ",paraId:0,tocIndex:1},{value:"#211",paraId:0,tocIndex:1},{value:"feat: sortBy through table value ",paraId:0,tocIndex:1},{value:"#209",paraId:0,tocIndex:1},{value:"Feat: plugin workflow ",paraId:0,tocIndex:1},{value:"#210",paraId:0,tocIndex:1},{value:"fix: collection fields sort ",paraId:0,tocIndex:1},{value:"#208",paraId:0,tocIndex:1},{value:"feat: sort in collection fields ",paraId:0,tocIndex:1},{value:"#207",paraId:0,tocIndex:1},{value:"fix Collection rest api ",paraId:0,tocIndex:1},{value:"#205",paraId:0,tocIndex:1},{value:"feat: non paged list ",paraId:0,tocIndex:1},{value:"#204",paraId:0,tocIndex:1},{value:"feat: finish calendar component develop ",paraId:0,tocIndex:1},{value:"#199",paraId:0,tocIndex:1},{value:"fix(dependencies): move json-template into original sub packages ",paraId:0,tocIndex:1},{value:"#203",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): add more instructions ",paraId:0,tocIndex:1},{value:"#201",paraId:0,tocIndex:1},{value:"fix: getJsonSchema with properties ",paraId:0,tocIndex:1},{value:"#202",paraId:0,tocIndex:1},{value:"fix: postgres array operator ",paraId:0,tocIndex:1},{value:"#200",paraId:0,tocIndex:1},{value:"fix: postgres sort with appends issue ",paraId:0,tocIndex:1},{value:"#198",paraId:0,tocIndex:1},{value:"feat: uiSchema remove api ",paraId:0,tocIndex:1},{value:"#196",paraId:0,tocIndex:1},{value:"refactor: perPage to pageSize ",paraId:0,tocIndex:1},{value:"#197",paraId:0,tocIndex:1},{value:"fix: option parser test ",paraId:0,tocIndex:1},{value:"#195",paraId:0,tocIndex:1},{value:"fix: nest append ",paraId:0,tocIndex:1},{value:"#194",paraId:0,tocIndex:1},{value:"fix: test with database ",paraId:0,tocIndex:1},{value:"#193",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix dependencies in package ",paraId:0,tocIndex:1},{value:"#192",paraId:0,tocIndex:1},{value:"Fix: plugin-workflow test ",paraId:0,tocIndex:1},{value:"#191",paraId:0,tocIndex:1},{value:"Refactor(plugin-workflow): upgrade plugin to use abstract plugin class and fix types ",paraId:0,tocIndex:1},{value:"#190",paraId:0,tocIndex:1},{value:"fix: ui schema storage ",paraId:0,tocIndex:1},{value:"#188",paraId:0,tocIndex:1},{value:"fix: ui schema storage ",paraId:0,tocIndex:1},{value:"#187",paraId:0,tocIndex:1},{value:"fix: update guard with Model instance ",paraId:0,tocIndex:1},{value:"#186",paraId:0,tocIndex:1},{value:"fix: getProperties with order ",paraId:0,tocIndex:1},{value:"#183",paraId:0,tocIndex:1},{value:"feat(server): improve application ",paraId:0,tocIndex:1},{value:"#177",paraId:0,tocIndex:1},{value:"Feature: plugin-workflow MVP ",paraId:0,tocIndex:1},{value:"#171",paraId:0,tocIndex:1},{value:"fix(root): fix dependencies in packages to avoid building errors ",paraId:0,tocIndex:1},{value:"#178",paraId:0,tocIndex:1},{value:"Application ",paraId:0,tocIndex:1},{value:"#175",paraId:0,tocIndex:1},{value:"feat: add acl plugin ",paraId:0,tocIndex:1},{value:"#169",paraId:0,tocIndex:1},{value:"add Filter component into schema componens ",paraId:0,tocIndex:1},{value:"#176",paraId:0,tocIndex:1},{value:"feat: add Markdown component into schema components ",paraId:0,tocIndex:1},{value:"#173",paraId:0,tocIndex:1},{value:"feat: table related components ",paraId:0,tocIndex:1},{value:"#172",paraId:0,tocIndex:1},{value:"feat: add select component into schema component ",paraId:0,tocIndex:1},{value:"#168",paraId:0,tocIndex:1},{value:"feat: add TreeSelect component into schema components ",paraId:0,tocIndex:1},{value:"#167",paraId:0,tocIndex:1},{value:"Plugin acl ",paraId:0,tocIndex:1},{value:"#166",paraId:0,tocIndex:1},{value:"add upload component into schema components ",paraId:0,tocIndex:1},{value:"#165",paraId:0,tocIndex:1},{value:"migrate TimePicker component into schema components ",paraId:0,tocIndex:1},{value:"#164",paraId:0,tocIndex:1},{value:"Feat/plugin UI schema v0.6 ",paraId:0,tocIndex:1},{value:"#143",paraId:0,tocIndex:1},{value:"Feat/plugin collection manager ",paraId:0,tocIndex:1},{value:"#147",paraId:0,tocIndex:1},{value:"Acl ",paraId:0,tocIndex:1},{value:"#162",paraId:0,tocIndex:1},{value:"feat: acl ",paraId:0,tocIndex:1},{value:"#153",paraId:0,tocIndex:1},{value:"feat: add InputNumber Component into schema component ",paraId:0,tocIndex:1},{value:"#160",paraId:0,tocIndex:1},{value:"feature/nocobase next password ",paraId:0,tocIndex:1},{value:"#159",paraId:0,tocIndex:1},{value:"feat: add DatePicker into schema components ",paraId:0,tocIndex:1},{value:"#161",paraId:0,tocIndex:1},{value:"feat: add input into schema component ",paraId:0,tocIndex:1},{value:"#158",paraId:0,tocIndex:1},{value:"feat: add radio into schema component ",paraId:0,tocIndex:1},{value:"#154",paraId:0,tocIndex:1},{value:"optimize: rename checkbox component file ",paraId:0,tocIndex:1},{value:"#155",paraId:0,tocIndex:1},{value:"Nocobase next color select ",paraId:0,tocIndex:1},{value:"#157",paraId:0,tocIndex:1},{value:"feat: add async-data-provider component ",paraId:0,tocIndex:1},{value:"#151",paraId:0,tocIndex:1},{value:"feat: client v0.6 ",paraId:0,tocIndex:1},{value:"#150",paraId:0,tocIndex:1},{value:"Feat/GitHub actions ",paraId:0,tocIndex:1},{value:"#148",paraId:0,tocIndex:1},{value:"feat: filter by target key ",paraId:0,tocIndex:1},{value:"#146",paraId:0,tocIndex:1},{value:"refactor: actions ",paraId:0,tocIndex:1},{value:"#137",paraId:0,tocIndex:1},{value:"feat: context field type support ",paraId:0,tocIndex:1},{value:"#131",paraId:0,tocIndex:1},{value:"feat: database next ",paraId:0,tocIndex:1},{value:"#130",paraId:0,tocIndex:1},{value:"feat: rename resourceKey & associatedKey to resourceIndex & associatedIndex ",paraId:0,tocIndex:1},{value:"#126",paraId:0,tocIndex:1},{value:"refactor: table cell text overflow that show ellipsis ",paraId:0,tocIndex:1},{value:"#125",paraId:0,tocIndex:1},{value:"Add S3 storage and refactors ",paraId:0,tocIndex:1},{value:"#124",paraId:0,tocIndex:1},{value:"Fix: plugin-file-manager ",paraId:0,tocIndex:1},{value:"#111",paraId:0,tocIndex:1},{value:"refactor: code splitting of the table component ",paraId:0,tocIndex:1},{value:"#121",paraId:0,tocIndex:1},{value:"refactor: code splitting of the table component ",paraId:0,tocIndex:1},{value:"#120",paraId:0,tocIndex:1},{value:"feat: add reset button in the filter panel ",paraId:0,tocIndex:1},{value:"#110",paraId:0,tocIndex:1},{value:"feat: allow user to change password ",paraId:0,tocIndex:1},{value:"#109",paraId:0,tocIndex:1},{value:"fix: yarn.lock ",paraId:1,tocIndex:2},{value:"7a7eb0c",paraId:1,tocIndex:2},{value:"fix: yarn.lock ",paraId:2,tocIndex:2},{value:"e226f04",paraId:2,tocIndex:2},{value:"feat: rich text ",paraId:3,tocIndex:2},{value:"5b41b33",paraId:3,tocIndex:2},{value:"v0.6 ",paraId:4,tocIndex:2},{value:"732d310",paraId:4,tocIndex:2},{value:"create-nocobase-app template from [develop] ",paraId:5,tocIndex:2},{value:"9f4bea7",paraId:5,tocIndex:2},{value:"feat: improve view action schema initializer ",paraId:6,tocIndex:2},{value:"590ca26",paraId:6,tocIndex:2}]},104137:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"feat(client,sdk): improve api client ",paraId:0,tocIndex:1},{value:"#425",paraId:0,tocIndex:1},{value:"feat: add create-plugin command ",paraId:0,tocIndex:1},{value:"#423",paraId:0,tocIndex:1},{value:"feat: add button color ",paraId:0,tocIndex:1},{value:"#420",paraId:0,tocIndex:1},{value:"fix: 204 no content response ",paraId:0,tocIndex:1},{value:"#378",paraId:0,tocIndex:1},{value:"feat: destroy association field after target collection destroy ",paraId:0,tocIndex:1},{value:"#376",paraId:0,tocIndex:1},{value:"fix(type): use sequelize native Transactionable instead of TransactionAble ",paraId:0,tocIndex:1},{value:"#410",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): remove previous listeners when collection changed in config ",paraId:0,tocIndex:1},{value:"#409",paraId:0,tocIndex:1},{value:"feat: add custom action ",paraId:0,tocIndex:1},{value:"#396",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): multiple instances and event management (fix #384) ",paraId:0,tocIndex:1},{value:"#408",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix node type title in drawers ",paraId:0,tocIndex:1},{value:"#389",paraId:0,tocIndex:1},{value:"Fix(plugin workflow): fix cannot get job result properties ",paraId:0,tocIndex:1},{value:"#382",paraId:0,tocIndex:1},{value:"feat: exist on server start throw error ",paraId:0,tocIndex:1},{value:"#374",paraId:0,tocIndex:1},{value:"chore: application options ",paraId:0,tocIndex:1},{value:"#375",paraId:0,tocIndex:1},{value:"fix: not in operator with null value record ",paraId:0,tocIndex:1},{value:"#377",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): revisions ",paraId:0,tocIndex:1},{value:"#379",paraId:0,tocIndex:1},{value:"fix(database): fix option-parser include list index ",paraId:0,tocIndex:1},{value:"#371",paraId:0,tocIndex:1},{value:"fix(plugin-worklfow): fix duplicated description in fields values ",paraId:0,tocIndex:1},{value:"#368",paraId:0,tocIndex:1},{value:"fix(database): fix type and transaction in repository ",paraId:0,tocIndex:1},{value:"#366",paraId:0,tocIndex:1},{value:"Fix(plugin workflow): fix transaction of execution ",paraId:0,tocIndex:1},{value:"#364",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): add document title ",paraId:0,tocIndex:1},{value:"#363",paraId:0,tocIndex:1},{value:"fix: set visible with confirm ",paraId:0,tocIndex:1},{value:"#361",paraId:0,tocIndex:1},{value:"fix: empty resource acl error ",paraId:0,tocIndex:1},{value:"#357",paraId:0,tocIndex:1},{value:"Feat: from values changed when unsaved will prompt ",paraId:0,tocIndex:1},{value:"#351",paraId:0,tocIndex:1},{value:"fix: modify filter close icon color ",paraId:0,tocIndex:1},{value:"#356",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix i18n ",paraId:0,tocIndex:1},{value:"#354",paraId:0,tocIndex:1},{value:"Fix(plugin-workflow) ",paraId:0,tocIndex:1},{value:"#353",paraId:0,tocIndex:1},{value:"fix(plugin-file-manager): upgrade multer-aliyun-oss package to fix size ",paraId:0,tocIndex:1},{value:"#352",paraId:0,tocIndex:1},{value:"feat: improve code ",paraId:0,tocIndex:1},{value:"#350",paraId:0,tocIndex:1},{value:"Fix/plugin workflow ",paraId:0,tocIndex:1},{value:"#349",paraId:0,tocIndex:1},{value:"fix: db:sync not working ",paraId:0,tocIndex:1},{value:"#348",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix trigger bind logic to avoid duplication ",paraId:0,tocIndex:1},{value:"#347",paraId:0,tocIndex:1},{value:"Fix(plugin workflow) ",paraId:0,tocIndex:1},{value:"#346",paraId:0,tocIndex:1},{value:"Fix:menu url style ",paraId:0,tocIndex:1},{value:"#344",paraId:0,tocIndex:1},{value:"chore(plugin-workflow): add translation ",paraId:0,tocIndex:1},{value:"#345",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): break cycling trigger through transaction id ",paraId:0,tocIndex:1},{value:"#341",paraId:0,tocIndex:1},{value:"fix: model.beforeCreate not called ",paraId:0,tocIndex:1},{value:"#343",paraId:0,tocIndex:1},{value:"fix: thumbnail image in kanban card ",paraId:0,tocIndex:1},{value:"#338",paraId:0,tocIndex:1},{value:"feat: db authenticate ",paraId:0,tocIndex:1},{value:"#342",paraId:0,tocIndex:1},{value:"chore: install subApp asynchronous ",paraId:0,tocIndex:1},{value:"#336",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): change collection values input ux in workflow nodes ",paraId:0,tocIndex:1},{value:"#340",paraId:0,tocIndex:1},{value:"feat: improvements ",paraId:0,tocIndex:1},{value:"#335",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): add changed fields to model trigger config ",paraId:0,tocIndex:1},{value:"#332",paraId:0,tocIndex:1},{value:"fix: create-nocobase-app compatibility ",paraId:0,tocIndex:1},{value:"#323",paraId:0,tocIndex:1},{value:"fix: create-nocobase-app client package version ",paraId:0,tocIndex:1},{value:"#321",paraId:0,tocIndex:1},{value:"fix: app manager ",paraId:0,tocIndex:1},{value:"#320",paraId:0,tocIndex:1},{value:"refactor: modify default lable style ",paraId:0,tocIndex:1},{value:"#318",paraId:0,tocIndex:1},{value:"Fix multiple apps ",paraId:0,tocIndex:1},{value:"#317",paraId:0,tocIndex:1},{value:"Fix multiple apps ",paraId:0,tocIndex:1},{value:"#316",paraId:0,tocIndex:1},{value:"Fix acl target action error ",paraId:0,tocIndex:1},{value:"#311",paraId:0,tocIndex:1},{value:"feat: file storages ",paraId:0,tocIndex:1},{value:"#314",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix some ux ",paraId:0,tocIndex:1},{value:"#313",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix query node getter field ",paraId:0,tocIndex:1},{value:"#308",paraId:0,tocIndex:1},{value:"Fix create nocobase app ",paraId:0,tocIndex:1},{value:"#307",paraId:0,tocIndex:1},{value:"fix: create-nocobase-app ",paraId:0,tocIndex:1},{value:"#306",paraId:0,tocIndex:1},{value:"Fix create nocobase app ",paraId:0,tocIndex:1},{value:"#305",paraId:0,tocIndex:1},{value:"fix: block item add overflow:hidden ",paraId:0,tocIndex:1},{value:"#304",paraId:0,tocIndex:1},{value:"feat(license): replace MIT license with Apache-2.0 ",paraId:1,tocIndex:2},{value:"717efa8",paraId:1,tocIndex:2},{value:"feat: translations ",paraId:1,tocIndex:2},{value:"5c0184a",paraId:1,tocIndex:2},{value:"feat: translations ",paraId:1,tocIndex:2},{value:"1f04f90",paraId:1,tocIndex:2},{value:"feat: kanban disableCardDrag ",paraId:2,tocIndex:2},{value:"05a251b",paraId:2,tocIndex:2}]},616399:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore(create-nocobase-app): fix some bugs ",paraId:0,tocIndex:1},{value:"#538",paraId:0,tocIndex:1},{value:"fix: destroy collection fields ",paraId:0,tocIndex:1},{value:"#536",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add delay node type ",paraId:0,tocIndex:1},{value:"#532",paraId:0,tocIndex:1},{value:"refactor: client application ",paraId:0,tocIndex:1},{value:"#533",paraId:0,tocIndex:1},{value:"fix: missing transaction ",paraId:0,tocIndex:1},{value:"#531",paraId:0,tocIndex:1},{value:"fix: add ellipsis property to record picker ",paraId:0,tocIndex:1},{value:"#527",paraId:0,tocIndex:1},{value:"fix: remove pattern without form item ",paraId:0,tocIndex:1},{value:"#528",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): set current when update ",paraId:0,tocIndex:1},{value:"#526",paraId:0,tocIndex:1},{value:"fix: order nulls last ",paraId:0,tocIndex:1},{value:"#519",paraId:0,tocIndex:1},{value:"fix: action loading, refresh context, form submit and validate ",paraId:0,tocIndex:1},{value:"#523",paraId:0,tocIndex:1},{value:"Fix field pattern ",paraId:0,tocIndex:1},{value:"#520",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix searchable select min-width ",paraId:0,tocIndex:1},{value:"#524",paraId:0,tocIndex:1},{value:"fix: template with fields only ",paraId:0,tocIndex:1},{value:"#517",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix update workflow current property ",paraId:0,tocIndex:1},{value:"#521",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): abstract to classes ",paraId:0,tocIndex:1},{value:"#515",paraId:0,tocIndex:1},{value:"feat: column sortable and form item pattern ",paraId:0,tocIndex:1},{value:"#518",paraId:0,tocIndex:1},{value:"fix(custom-request): support string/json templates ",paraId:0,tocIndex:1},{value:"#514",paraId:0,tocIndex:1},{value:"feat: add block title ",paraId:0,tocIndex:1},{value:"#513",paraId:0,tocIndex:1},{value:"fix: remove collections & fields from db ",paraId:0,tocIndex:1},{value:"#511",paraId:0,tocIndex:1},{value:"feat: improve migrations ",paraId:0,tocIndex:1},{value:"#510",paraId:0,tocIndex:1},{value:"fix(client): consolidate usage of date/time as UTC in transfering ",paraId:0,tocIndex:1},{value:"#509",paraId:0,tocIndex:1},{value:"fix: formula bug ",paraId:0,tocIndex:1},{value:"#508",paraId:0,tocIndex:1},{value:"fix: default exportable fields ",paraId:0,tocIndex:1},{value:"#506",paraId:0,tocIndex:1},{value:"feat: association field block ",paraId:0,tocIndex:1},{value:"#493",paraId:0,tocIndex:1},{value:"feat: plugin export ",paraId:0,tocIndex:1},{value:"#479",paraId:0,tocIndex:1},{value:"fix(client): package path (fix #503) ",paraId:0,tocIndex:1},{value:"#504",paraId:0,tocIndex:1},{value:"fix: create or delete collection error ",paraId:0,tocIndex:1},{value:"#501",paraId:0,tocIndex:1},{value:"feat: update collections & fields ",paraId:0,tocIndex:1},{value:"#500",paraId:0,tocIndex:1},{value:"fix: rollback when field creation fails ",paraId:0,tocIndex:1},{value:"#498",paraId:0,tocIndex:1},{value:"fix(client): set ",paraId:0,tocIndex:1},{value:"dropdownMatchSelectWidth",paraId:0,tocIndex:1},{value:" to false globally ",paraId:0,tocIndex:1},{value:"#497",paraId:0,tocIndex:1},{value:"fix(client): no-key warning in user menu items ",paraId:0,tocIndex:1},{value:"#496",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): cron field for schedule trigger configuration ",paraId:0,tocIndex:1},{value:"#495",paraId:0,tocIndex:1},{value:"feat: audit logs ",paraId:0,tocIndex:1},{value:"#494",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): add revision column to execution ",paraId:0,tocIndex:1},{value:"#491",paraId:0,tocIndex:1},{value:"feat: relation field uiSchema ",paraId:0,tocIndex:1},{value:"#487",paraId:0,tocIndex:1},{value:"feat: change FK to input component ",paraId:0,tocIndex:1},{value:"#488",paraId:0,tocIndex:1},{value:"fix(plugin-multi-app-manager): fix pg cannot create database block tests ",paraId:0,tocIndex:1},{value:"#486",paraId:0,tocIndex:1},{value:"refactor(database): hook proxy ",paraId:0,tocIndex:1},{value:"#402",paraId:0,tocIndex:1},{value:"feat: chart blocks ",paraId:0,tocIndex:1},{value:"#484",paraId:0,tocIndex:1},{value:"Refactor(plugin workflow): support number in repeat config for schedule ",paraId:0,tocIndex:1},{value:"#482",paraId:0,tocIndex:1},{value:"chore(debug): add debug config ",paraId:0,tocIndex:1},{value:"#475",paraId:0,tocIndex:1},{value:"fix: has one bug ",paraId:0,tocIndex:1},{value:"#478",paraId:0,tocIndex:1},{value:"feat: relationships ",paraId:0,tocIndex:1},{value:"#473",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix collection trigger transaction ",paraId:0,tocIndex:1},{value:"#474",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): temporary solution for collection trigger conditions ",paraId:0,tocIndex:1},{value:"#472",paraId:0,tocIndex:1},{value:"fix: markdown component ",paraId:0,tocIndex:1},{value:"#469",paraId:0,tocIndex:1},{value:"fix: formula field and percent field ",paraId:0,tocIndex:1},{value:"#467",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix update workflow action ",paraId:0,tocIndex:1},{value:"#464",paraId:0,tocIndex:1},{value:"fix: update formula field and percent field ",paraId:0,tocIndex:1},{value:"#461",paraId:0,tocIndex:1},{value:"feat: add formula field type ",paraId:0,tocIndex:1},{value:"#457",paraId:0,tocIndex:1},{value:"fix: the details of the associated data in the subtable are not displayed ",paraId:0,tocIndex:1},{value:"#454",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix languages ",paraId:0,tocIndex:1},{value:"#451",paraId:0,tocIndex:1},{value:"fix: afterSync hook not triggered ",paraId:0,tocIndex:1},{value:"#450",paraId:0,tocIndex:1},{value:"docs(various): Improve readability ",paraId:0,tocIndex:1},{value:"#447",paraId:0,tocIndex:1},{value:"feat: custom request ",paraId:0,tocIndex:1},{value:"#439",paraId:0,tocIndex:1},{value:"Feat(plugin workflow): schedule trigger ",paraId:0,tocIndex:1},{value:"#438",paraId:0,tocIndex:1},{value:"feat: db migrator ",paraId:0,tocIndex:1},{value:"#432",paraId:0,tocIndex:1},{value:"fix(client): select component cannot be opened in sub-table block ",paraId:0,tocIndex:1},{value:"#431",paraId:0,tocIndex:1},{value:"docs(github): change to markdown format ",paraId:0,tocIndex:1},{value:"#430",paraId:0,tocIndex:1},{value:"fix(cli): typo ",paraId:0,tocIndex:1},{value:"#429",paraId:0,tocIndex:1},{value:"fix(client): package path (fix #503) (#504) ",paraId:1,tocIndex:2},{value:"#503",paraId:1,tocIndex:2},{value:"feat(client): update locales ",paraId:2,tocIndex:3},{value:"e57e60e",paraId:2,tocIndex:3},{value:"docs: update doc ",paraId:2,tocIndex:3},{value:"e5cb948",paraId:2,tocIndex:3},{value:"fix(client): improve datepicker component, date with time zone, gmt support ",paraId:2,tocIndex:3},{value:"1c03fbb",paraId:2,tocIndex:3}]},579429:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore(versions): \u{1F60A} publish v0.7.2-alpha.1 ",paraId:0,tocIndex:1},{value:"#578",paraId:0,tocIndex:1},{value:"fix: drop all foreign keys ",paraId:0,tocIndex:1},{value:"#576",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix collection trigger config ",paraId:0,tocIndex:1},{value:"#575",paraId:0,tocIndex:1},{value:"feat: filter with variable ",paraId:0,tocIndex:1},{value:"#574",paraId:0,tocIndex:1},{value:"feat(cli): check database version before installation ",paraId:0,tocIndex:1},{value:"#572",paraId:0,tocIndex:1},{value:"fix(database): index invalid ",paraId:0,tocIndex:1},{value:"#564",paraId:0,tocIndex:1},{value:"fix: export association table data ",paraId:0,tocIndex:1},{value:"#561",paraId:0,tocIndex:1},{value:"Refactor(plugin workflow): move client files into plugin ",paraId:0,tocIndex:1},{value:"#556",paraId:0,tocIndex:1},{value:"fix(database): constraints default to false ",paraId:0,tocIndex:1},{value:"#550",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix select width ",paraId:0,tocIndex:1},{value:"#552",paraId:0,tocIndex:1},{value:"feat: compatible with old kanban ",paraId:0,tocIndex:1},{value:"#553",paraId:0,tocIndex:1},{value:"feat: display association fields ",paraId:0,tocIndex:1},{value:"#512",paraId:0,tocIndex:1},{value:"Fix(plugin workflow) ",paraId:0,tocIndex:1},{value:"#549",paraId:0,tocIndex:1},{value:"fix:update mysql port ",paraId:0,tocIndex:1},{value:"#548",paraId:0,tocIndex:1},{value:"fix: export of relation blocks ",paraId:0,tocIndex:1},{value:"#546",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): clear options when change collection ",paraId:0,tocIndex:1},{value:"#547",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add race mode ",paraId:0,tocIndex:1},{value:"#542",paraId:0,tocIndex:1},{value:"fix(client): change toArr to _.castArray in select component ",paraId:0,tocIndex:1},{value:"#543",paraId:0,tocIndex:1},{value:"chore(versions): \u{1F60A} publish v0.7.1-alpha.7 ",paraId:0,tocIndex:1},{value:"#539",paraId:0,tocIndex:1},{value:"fix(client): comment out useless code ",paraId:1,tocIndex:2},{value:"4e9384b",paraId:1,tocIndex:2},{value:"fix(workflow): merge workflow providers ",paraId:1,tocIndex:2},{value:"008a7f7",paraId:1,tocIndex:2},{value:"feat(client): integer field ",paraId:1,tocIndex:2},{value:"9928424",paraId:1,tocIndex:2}]},569259:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore(versions): \u{1F60A} publish v0.7.3-alpha.1 ",paraId:0,tocIndex:1},{value:"#657",paraId:0,tocIndex:1},{value:"feat: print action ",paraId:0,tocIndex:1},{value:"#652",paraId:0,tocIndex:1},{value:"feat: restore action-hooks ",paraId:0,tocIndex:1},{value:"#655",paraId:0,tocIndex:1},{value:"feat: collections&fields pagination issue ",paraId:0,tocIndex:1},{value:"#653",paraId:0,tocIndex:1},{value:"fix(core): change proxied agent methods to native ",paraId:0,tocIndex:1},{value:"#654",paraId:0,tocIndex:1},{value:"feat: remove table field details actions ",paraId:0,tocIndex:1},{value:"#638",paraId:0,tocIndex:1},{value:"fix: link to default value ",paraId:0,tocIndex:1},{value:"#641",paraId:0,tocIndex:1},{value:"feat: support for displaying relational table fields in details or form blocks ",paraId:0,tocIndex:1},{value:"#635",paraId:0,tocIndex:1},{value:"fix: record picker cannot select from different pages ",paraId:0,tocIndex:1},{value:"#623",paraId:0,tocIndex:1},{value:"fix: dragging an element to the left, right, or bottom would cause the element to disappear ",paraId:0,tocIndex:1},{value:"#620",paraId:0,tocIndex:1},{value:"feat: table action add reload button ",paraId:0,tocIndex:1},{value:"#630",paraId:0,tocIndex:1},{value:"feat: improve language settings ",paraId:0,tocIndex:1},{value:"#627",paraId:0,tocIndex:1},{value:"feat: field assignment for custom actions supports string variables ",paraId:0,tocIndex:1},{value:"#597",paraId:0,tocIndex:1},{value:"fix: skip recursive remove on grid component ",paraId:0,tocIndex:1},{value:"#621",paraId:0,tocIndex:1},{value:"feat: fix time and collection pagination ",paraId:0,tocIndex:1},{value:"#618",paraId:0,tocIndex:1},{value:"feat: recordblockinitializers fields pick ",paraId:0,tocIndex:1},{value:"#558",paraId:0,tocIndex:1},{value:"fix: incorrectly :active background ",paraId:0,tocIndex:1},{value:"#607",paraId:0,tocIndex:1},{value:"fix: obo table selector ",paraId:0,tocIndex:1},{value:"#613",paraId:0,tocIndex:1},{value:"feat: form validator ",paraId:0,tocIndex:1},{value:"#569",paraId:0,tocIndex:1},{value:"fix: table selector ",paraId:0,tocIndex:1},{value:"#612",paraId:0,tocIndex:1},{value:"chore(versions): \u{1F60A} publish v0.7.2-alpha.7 ",paraId:0,tocIndex:1},{value:"#611",paraId:0,tocIndex:1},{value:"chore(versions): \u{1F60A} publish v0.7.2-alpha.3 ",paraId:0,tocIndex:1},{value:"#608",paraId:0,tocIndex:1},{value:"chore(versions): \u{1F60A} publish v0.7.2-alpha.2 ",paraId:0,tocIndex:1},{value:"#606",paraId:0,tocIndex:1},{value:"fix(client): build error ",paraId:1,tocIndex:2},{value:"600f13f",paraId:1,tocIndex:2},{value:"fix(client): blocks are deleted when they are dragged below the current block ",paraId:1,tocIndex:2},{value:"20ab8c1",paraId:1,tocIndex:2},{value:"feat(client): plugin toolbar icons and translations ",paraId:1,tocIndex:2},{value:"c51c6c0",paraId:1,tocIndex:2}]},676277:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore(versions): \u{1F60A} publish v0.7.4-alpha.4 ",paraId:0,tocIndex:1},{value:"#727",paraId:0,tocIndex:1},{value:"fix: sync table sort to export ",paraId:0,tocIndex:1},{value:"#723",paraId:0,tocIndex:1},{value:"feat: full version of the NocoBase dockerfile ",paraId:0,tocIndex:1},{value:"#719",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix extend collection ",paraId:0,tocIndex:1},{value:"#708",paraId:0,tocIndex:1},{value:"fix: DB_TABLE_PREFIX doesn't get applied ",paraId:0,tocIndex:1},{value:"#710",paraId:0,tocIndex:1},{value:"feat: default value ",paraId:0,tocIndex:1},{value:"#679",paraId:0,tocIndex:1},{value:"fix: required field delete submit error (#688) ",paraId:0,tocIndex:1},{value:"#694",paraId:0,tocIndex:1},{value:"chore(versions): \u{1F60A} publish v0.7.4-alpha.1 ",paraId:0,tocIndex:1},{value:"#696",paraId:0,tocIndex:1},{value:"fix: append roles to current user ",paraId:0,tocIndex:1},{value:"#695",paraId:0,tocIndex:1},{value:"fix: fix date format ",paraId:0,tocIndex:1},{value:"#686",paraId:0,tocIndex:1},{value:"test(plugin-workflow): skip prompt tests ",paraId:0,tocIndex:1},{value:"#692",paraId:0,tocIndex:1},{value:"fix: fix accuracy of percent ",paraId:0,tocIndex:1},{value:"#685",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): adjust await sleep time for test cases ",paraId:0,tocIndex:1},{value:"#691",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add assignees config for prompt instruction ",paraId:0,tocIndex:1},{value:"#690",paraId:0,tocIndex:1},{value:"fix: role export button display (#616) ",paraId:0,tocIndex:1},{value:"#666",paraId:0,tocIndex:1},{value:"feat: uid validate ",paraId:0,tocIndex:1},{value:"#681",paraId:0,tocIndex:1},{value:"refactor: replace react-drag-listview with @dnd-kit/sortable ",paraId:0,tocIndex:1},{value:"#660",paraId:0,tocIndex:1},{value:"refactor(plugin-users): improve extendibility of middlewares ",paraId:0,tocIndex:1},{value:"#677",paraId:0,tocIndex:1},{value:"feat: o2m delete not refresh ",paraId:0,tocIndex:1},{value:"#646",paraId:0,tocIndex:1},{value:"feat: kanban add description ",paraId:0,tocIndex:1},{value:"#659",paraId:0,tocIndex:1},{value:"fix: field loss enum ",paraId:0,tocIndex:1},{value:"#667",paraId:0,tocIndex:1},{value:"feat: add editor hot key Ctrl+Shift+U ",paraId:0,tocIndex:1},{value:"#675",paraId:0,tocIndex:1},{value:"fix: Fix calendar change field error (#626) ",paraId:0,tocIndex:1},{value:"#671",paraId:0,tocIndex:1},{value:"chore: fix eslint not work ",paraId:0,tocIndex:1},{value:"#670",paraId:0,tocIndex:1},{value:"feat: number precision ",paraId:0,tocIndex:1},{value:"#661",paraId:0,tocIndex:1},{value:"feat: nginx config ",paraId:0,tocIndex:1},{value:"#664",paraId:0,tocIndex:1},{value:"feat: form item designer form switch issue ",paraId:0,tocIndex:1},{value:"#656",paraId:0,tocIndex:1},{value:"feat: add examples ",paraId:1,tocIndex:2},{value:"b848b9c",paraId:1,tocIndex:2},{value:"fix: record provider required for read pretty ",paraId:1,tocIndex:2},{value:"38c3e3e",paraId:1,tocIndex:2},{value:"Update README.zh-CN.md ",paraId:1,tocIndex:2},{value:"ba0e618",paraId:1,tocIndex:2},{value:"fix(client): fieldNames of RecordPicker ",paraId:1,tocIndex:2},{value:"9038d11",paraId:1,tocIndex:2},{value:"fix(client): required for the sub-table field ",paraId:1,tocIndex:2},{value:"609b0e2",paraId:1,tocIndex:2},{value:"feat(client): tab icon ",paraId:1,tocIndex:2},{value:"d9b2bf8",paraId:1,tocIndex:2}]},665164:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore(versions): \u{1F60A} publish v0.7.5-alpha.1 ",paraId:0,tocIndex:1},{value:"#920",paraId:0,tocIndex:1},{value:"Feat: plugin workflow collection field ",paraId:0,tocIndex:1},{value:"#919",paraId:0,tocIndex:1},{value:"feat: create with array of values ",paraId:0,tocIndex:1},{value:"#912",paraId:0,tocIndex:1},{value:"fix: unbind on error throwing ",paraId:0,tocIndex:1},{value:"#914",paraId:0,tocIndex:1},{value:"fix: appends merge now using primary key ",paraId:0,tocIndex:1},{value:"#911",paraId:0,tocIndex:1},{value:"feat: limit database identifier ",paraId:0,tocIndex:1},{value:"#908",paraId:0,tocIndex:1},{value:"fix: sync collection field default value ",paraId:0,tocIndex:1},{value:"#907",paraId:0,tocIndex:1},{value:"fix: appends merge includes ",paraId:0,tocIndex:1},{value:"#905",paraId:0,tocIndex:1},{value:"fix: single relation repository appends query issue ",paraId:0,tocIndex:1},{value:"#901",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add concat calculator ",paraId:0,tocIndex:1},{value:"#894",paraId:0,tocIndex:1},{value:"fix(client/record-picker): support record-picker show format DataPicker ",paraId:0,tocIndex:1},{value:"#888",paraId:0,tocIndex:1},{value:"fix(client/block-select-collection): fix select collection menu view error ",paraId:0,tocIndex:1},{value:"#889",paraId:0,tocIndex:1},{value:"fix: unable to submit form during file upload ",paraId:0,tocIndex:1},{value:"#892",paraId:0,tocIndex:1},{value:"fix: run test by jest ",paraId:0,tocIndex:1},{value:"#891",paraId:0,tocIndex:1},{value:"feat(collection-manager): inverse fields can be configured ",paraId:0,tocIndex:1},{value:"#883",paraId:0,tocIndex:1},{value:"fix(formula): support integer and fix NaN error ",paraId:0,tocIndex:1},{value:"#879",paraId:0,tocIndex:1},{value:"fix: sort parameter is missing ",paraId:0,tocIndex:1},{value:"#849",paraId:0,tocIndex:1},{value:"fix: slow join query issued by appends field in find method of repository ",paraId:0,tocIndex:1},{value:"#845",paraId:0,tocIndex:1},{value:"feat(core/cache): support cache ",paraId:0,tocIndex:1},{value:"#876",paraId:0,tocIndex:1},{value:"feat: update option must have filter or filterByTk ",paraId:0,tocIndex:1},{value:"#847",paraId:0,tocIndex:1},{value:"added Russian translation ",paraId:0,tocIndex:1},{value:"#840",paraId:0,tocIndex:1},{value:"feat(database): add sequence field type ",paraId:0,tocIndex:1},{value:"#779",paraId:0,tocIndex:1},{value:"fix: can't access pages without permission via url ",paraId:0,tocIndex:1},{value:"#826",paraId:0,tocIndex:1},{value:"refactor(resourcer): combine middleware class ",paraId:0,tocIndex:1},{value:"#825",paraId:0,tocIndex:1},{value:"refactor(database): fix some fields and types ",paraId:0,tocIndex:1},{value:"#820",paraId:0,tocIndex:1},{value:"feat(locale): added Japanese translation ",paraId:0,tocIndex:1},{value:"#813",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix value type for DatePicker to moment (#815) ",paraId:0,tocIndex:1},{value:"#819",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): export client calculators registry ",paraId:0,tocIndex:1},{value:"#816",paraId:0,tocIndex:1},{value:"fix: number storage type changed to double ",paraId:0,tocIndex:1},{value:"#810",paraId:0,tocIndex:1},{value:"refactor(server) ",paraId:0,tocIndex:1},{value:"#795",paraId:0,tocIndex:1},{value:"fix(plugin-verification): change provider rate limit error to 429 ",paraId:0,tocIndex:1},{value:"#788",paraId:0,tocIndex:1},{value:"fix(plugin-cm): fix field disappear after failed to update ",paraId:0,tocIndex:1},{value:"#773",paraId:0,tocIndex:1},{value:"fix: fix uiSchema undefined ",paraId:0,tocIndex:1},{value:"#770",paraId:0,tocIndex:1},{value:"fix(plugin-cm): fix unique option default value to update ",paraId:0,tocIndex:1},{value:"#768",paraId:0,tocIndex:1},{value:"fix(plugin-users): fix update profile 500 (#766) ",paraId:0,tocIndex:1},{value:"#767",paraId:0,tocIndex:1},{value:"fix: mysql column in where clause is ambiguous ",paraId:0,tocIndex:1},{value:"#756",paraId:0,tocIndex:1},{value:"feat(plugin-cm): add unique option for base fields ",paraId:0,tocIndex:1},{value:"#745",paraId:0,tocIndex:1},{value:"feat(plugin-verification): add plugin-verification and phone for users ",paraId:0,tocIndex:1},{value:"#722",paraId:0,tocIndex:1},{value:"feat: resize grid columns with drag and drop ",paraId:0,tocIndex:1},{value:"#748",paraId:0,tocIndex:1},{value:"refactor(client): split schema-initializer items into multiple files ",paraId:0,tocIndex:1},{value:"#744",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): change files mode to 644 ",paraId:0,tocIndex:1},{value:"#755",paraId:0,tocIndex:1},{value:"fix: db version check ",paraId:0,tocIndex:1},{value:"#749",paraId:0,tocIndex:1},{value:"feat: add examples ",paraId:0,tocIndex:1},{value:"#718",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix value type for DatePicker to moment (#815) (#819) ",paraId:1,tocIndex:2},{value:"#815",paraId:1,tocIndex:2},{value:"fix(plugin-users): fix update profile 500 (#766) (#767) ",paraId:1,tocIndex:2},{value:"#766",paraId:1,tocIndex:2},{value:"fix: db version check (#749) ",paraId:1,tocIndex:2},{value:"#742",paraId:1,tocIndex:2},{value:"fix(client): tab pane initializers for create form block ",paraId:2,tocIndex:3},{value:"7efc4bc",paraId:2,tocIndex:3},{value:"fix: transaction cannot be rolled back because it has been finished with state: rollback ",paraId:2,tocIndex:3},{value:"6dacec4",paraId:2,tocIndex:3},{value:"fix(database): fix the index name too long error ",paraId:2,tocIndex:3},{value:"7bfe6b8",paraId:2,tocIndex:3}]},276879:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Starting with v0.8, NocoBase begins to provide an available plugin manager and development documentation. Here are the main changes in v0.8.",paraId:0,tocIndex:0},{value:"UI Editor",paraId:1,tocIndex:1},{value:"Plugin Manager",paraId:1,tocIndex:1},{value:"Settings Center",paraId:1,tocIndex:1},{value:"Personal Center",paraId:1,tocIndex:1},{value:"v0.8 provides a powerful plugin manager for managing plugins in a no-code way.",paraId:2,tocIndex:2},{value:"Currently it is mainly used for disabling, activating and deleting local plugins. Built-in plugins cannot be deleted.",paraId:3,tocIndex:4},{value:"In addition to being able to activate and disable plugins from the no-code interface, you can also manage plugins more completely from the command line.",paraId:4,tocIndex:5},{value:`# Create a plugin
yarn pm create hello
# Register the plugin
yarn pm add hello
# Activate the plugin
yarn pm enable hello
# Disable the plugin
yarn pm disable hello
# Remove the plugin
yarn pm remove hello

`,paraId:5,tocIndex:5},{value:"Note: Releases and upgrades for plugins will be supported in subsequent releases.",paraId:6,tocIndex:5},{value:`# Publish the plugin
yarn pm publish hello
# Publish the plugin
yarn pm upgrade hello

`,paraId:7,tocIndex:5},{value:"For more plugin examples, see ",paraId:8,tocIndex:5},{value:"packages/samples",paraId:8,tocIndex:5},{value:".",paraId:8,tocIndex:5},{value:`|- /hello
  |- /src
    |- /client      # Plugin client
    |- /server      # Plugin server
  |- client.d.ts
  |- client.js
  |- package.json   # Plugin package information
  |- server.d.ts
  |- server.js

`,paraId:9,tocIndex:7},{value:"NocoBase plugin is also an NPM package, the correspondence rule between plugin name and NPM package name is ",paraId:10,tocIndex:8},{value:"${PLUGIN_PACKAGE_PREFIX}-${pluginName}",paraId:10,tocIndex:8},{value:".",paraId:10,tocIndex:8},{value:"PLUGIN_PACKAGE_PREFIX",paraId:11,tocIndex:8},{value:" is the plugin package prefix, which can be customized in .env, ",paraId:11,tocIndex:8},{value:"click here for PLUGIN_PACKAGE_PREFIX description",paraId:11,tocIndex:8},{value:".",paraId:11,tocIndex:8},{value:"For example, a project named ",paraId:12,tocIndex:8},{value:"my-nocobase-app",paraId:12,tocIndex:8},{value:" adds the ",paraId:12,tocIndex:8},{value:"hello",paraId:12,tocIndex:8},{value:" plugin with package name ",paraId:12,tocIndex:8},{value:"@my-nocobase-app/plugin-hello",paraId:12,tocIndex:8},{value:".",paraId:12,tocIndex:8},{value:"PLUGIN_PACKAGE_PREFIX",paraId:13,tocIndex:8},{value:" is configured as follows.",paraId:13,tocIndex:8},{value:`PLUGIN_PACKAGE_PREFIX=@nocobase/plugin-,@nocobase/preset-,@my-nocobase-app/plugin-

`,paraId:14,tocIndex:8},{value:"The correspondence between plugin names and package names is",paraId:15,tocIndex:8},{value:"users",paraId:16,tocIndex:8},{value:" plugin package name is ",paraId:16,tocIndex:8},{value:"@nocobase/plugin-users",paraId:16,tocIndex:8},{value:"nocobase",paraId:16,tocIndex:8},{value:" plugin package name is ",paraId:16,tocIndex:8},{value:"@nocobase/preset-nocobase",paraId:16,tocIndex:8},{value:"hello",paraId:16,tocIndex:8},{value:" plugin package named ",paraId:16,tocIndex:8},{value:"@my-nocobase-app/plugin-hello",paraId:16,tocIndex:8},{value:"v0.8 provides a more complete approach to the plugin lifecycle.",paraId:17,tocIndex:9},{value:`import { InstallOptions, Plugin } from '@nocobase/server';

export class HelloPlugin extends Plugin {
  afterAdd() {
    // After the plugin has been added via pm.add
  }

  beforeLoad() {
    // Before all plugins are loaded, generally used to register classes and event listeners
  }

  async load() {
    // Load configuration
  }

  async install(options?: InstallOptions) {
    // Install logic
  }

  async afterEnable() {
    // After activation
  }

  async afterDisable() {
    // After disable
  }

  async remove() {
    // Remove logic
  }
}

export default HelloPlugin;

`,paraId:18,tocIndex:9},{value:"The lifecycle of the plugin is controlled by the server",paraId:19,tocIndex:10},{value:`import { Application } from '@nocobase/server';

const app = new Application({
  // ...
});

class MyPlugin extends Plugin {
  afterAdd() {}
  beforeLoad() {}
  load() {}
  install() {}
  afterEnable() {}
  afterDisable() {}
  remove() {}
}

app.plugin(MyPlugin, { name: 'my-plugin' });

`,paraId:20,tocIndex:10},{value:"The client side of the plugin exists as Context.Provider (similar to Middleware on the server side)",paraId:21,tocIndex:10},{value:`import React from 'react';
import { Application } from '@nocobase/client';

const app = new Application({
  apiClient: {
    baseURL: process.env.API_BASE_URL,
  },
  dynamicImport: (name: string) => {
    return import(\`../plugins/\${name}\`);
  },
});

// When you visit the /hello page, it displays Hello world!
const HelloProvider = React.memo((props) => {
  const location = useLocation();
  if (location.pathname === '/hello') {
    return <div>Hello world!</div>
  }
  return <>{props.children}</>
});
HelloProvider.displayName = 'HelloProvider'

app.use(HelloProvider);

`,paraId:22,tocIndex:10},{value:"v0.7 plugins are not complete, custom business code may be scattered in ",paraId:23,tocIndex:11},{value:"packages/app/client",paraId:23,tocIndex:11},{value:" and ",paraId:23,tocIndex:11},{value:"packages/app/server",paraId:23,tocIndex:11},{value:", which is not conducive to upgrade and maintenance. v0.8 recommends organizing as a plugin package and using ",paraId:23,tocIndex:11},{value:"yarn pm",paraId:23,tocIndex:11},{value:" to manage plugins.",paraId:23,tocIndex:11},{value:"Welcome",paraId:24,tocIndex:12},{value:": a quick look at NocoBase",paraId:24,tocIndex:12},{value:"Manual",paraId:24,tocIndex:12},{value:": learn more about the core features provided by the NocoBase platform",paraId:24,tocIndex:12},{value:"Plugin Development Tutorial",paraId:24,tocIndex:12},{value:": Advanced dive into plugin development",paraId:24,tocIndex:12},{value:"API Reference",paraId:24,tocIndex:12},{value:": Check the API usage during plugin development",paraId:24,tocIndex:12},{value:"Client Components Library",paraId:24,tocIndex:12},{value:" (in preparation): provides examples and usage of NocoBase components",paraId:24,tocIndex:12},{value:"command",paraId:25,tocIndex:13},{value:"custom-block",paraId:25,tocIndex:13},{value:"custom-page",paraId:25,tocIndex:13},{value:"custom-signup-page",paraId:25,tocIndex:13},{value:"hello",paraId:25,tocIndex:13},{value:"ratelimit",paraId:25,tocIndex:13},{value:"shop-actions",paraId:25,tocIndex:13},{value:"shop-events",paraId:25,tocIndex:13},{value:"shop-i18n",paraId:25,tocIndex:13},{value:"shop-modeling",paraId:25,tocIndex:13},{value:"Import from Excel",paraId:26,tocIndex:14},{value:"Bulk Update & Edit",paraId:26,tocIndex:14},{value:"Graphical collection",paraId:26,tocIndex:14},{value:"Workflow support for viewing execution history",paraId:26,tocIndex:14},{value:"JSON field",paraId:26,tocIndex:14}]},989840:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"fix(plugin-workflow): fix module import (#1550) ",paraId:0,tocIndex:1},{value:"#1552",paraId:0,tocIndex:1},{value:"chore: relation repository response when source model not found ",paraId:0,tocIndex:1},{value:"#1546",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix assignees config component in manual node ",paraId:0,tocIndex:1},{value:"#1547",paraId:0,tocIndex:1},{value:"feat: stopped state in application ",paraId:0,tocIndex:1},{value:"#1543",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix AssociationInput field path ",paraId:0,tocIndex:1},{value:"#1542",paraId:0,tocIndex:1},{value:"fix: cache with index.html ",paraId:0,tocIndex:1},{value:"#1541",paraId:0,tocIndex:1},{value:"fix: belongs to many through table with custom schema ",paraId:0,tocIndex:1},{value:"#1539",paraId:0,tocIndex:1},{value:"fix(plugin-formula): expose formula field result in form ",paraId:0,tocIndex:1},{value:"#1534",paraId:0,tocIndex:1},{value:"test: with collection_manager_schema env ",paraId:0,tocIndex:1},{value:"#1532",paraId:0,tocIndex:1},{value:"fix: filter by association field with underscored ",paraId:0,tocIndex:1},{value:"#1537",paraId:0,tocIndex:1},{value:"fix(charts): fix copy ",paraId:0,tocIndex:1},{value:"#1533",paraId:0,tocIndex:1},{value:"feat: add chart plugin ",paraId:0,tocIndex:1},{value:"#1477",paraId:0,tocIndex:1},{value:"feat: support add new in block for inheritance collection ",paraId:0,tocIndex:1},{value:"#1518",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): change canvas card and adjust styles ",paraId:0,tocIndex:1},{value:"#1529",paraId:0,tocIndex:1},{value:"fix: test with nocobase plugin ",paraId:0,tocIndex:1},{value:"#1525",paraId:0,tocIndex:1},{value:"fix: nginx cache ",paraId:0,tocIndex:1},{value:"#1523",paraId:0,tocIndex:1},{value:"fix: remove field when collection has difference schema with database ",paraId:0,tocIndex:1},{value:"#1524",paraId:0,tocIndex:1},{value:"refactor: audit logs block ",paraId:0,tocIndex:1},{value:"#1517",paraId:0,tocIndex:1},{value:"fix(evaluators): fix preprocessing and add test cases ",paraId:0,tocIndex:1},{value:"#1519",paraId:0,tocIndex:1},{value:"chore(debug): fix debug filename when run test ",paraId:0,tocIndex:1},{value:"#1520",paraId:0,tocIndex:1},{value:"feat: collection manager schema env ",paraId:0,tocIndex:1},{value:"#1506",paraId:0,tocIndex:1},{value:"fix(client): fix checkbox unchecked display ",paraId:0,tocIndex:1},{value:"#1508",paraId:0,tocIndex:1},{value:"feat(snapshot-field): improve transition ",paraId:0,tocIndex:1},{value:"#1513",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix CollectionField validation when using variable ",paraId:0,tocIndex:1},{value:"#1512",paraId:0,tocIndex:1},{value:"feat(plugin-formula): calculation with snapshot field ",paraId:0,tocIndex:1},{value:"#1498",paraId:0,tocIndex:1},{value:"fix(association-select): filter without data scope not work ",paraId:0,tocIndex:1},{value:"#1509",paraId:0,tocIndex:1},{value:"feat: fallback sort field init to createdAt field ",paraId:0,tocIndex:1},{value:"#1507",paraId:0,tocIndex:1},{value:"fix(graphical-interface): collection category does not display title ",paraId:0,tocIndex:1},{value:"#1503",paraId:0,tocIndex:1},{value:"fix(association-select): data is incorrect when use data scope ",paraId:0,tocIndex:1},{value:"#1491",paraId:0,tocIndex:1},{value:"feat: dialect version accessors ",paraId:0,tocIndex:1},{value:"#1502",paraId:0,tocIndex:1},{value:"fix: collection schema updated but model _schema not change ",paraId:0,tocIndex:1},{value:"#1500",paraId:0,tocIndex:1},{value:"Update zh_CN.ts ",paraId:0,tocIndex:1},{value:"#1481",paraId:0,tocIndex:1},{value:"fix(linkageRules): support empty condiction ",paraId:0,tocIndex:1},{value:"#1496",paraId:0,tocIndex:1},{value:"feat: form/button linkage rules ",paraId:0,tocIndex:1},{value:"#1456",paraId:0,tocIndex:1},{value:"fix: collection importer has incorrect reference ",paraId:0,tocIndex:1},{value:"#1495",paraId:0,tocIndex:1},{value:"feat: support custom plugin deployment in dockerfile ",paraId:0,tocIndex:1},{value:"#1494",paraId:0,tocIndex:1},{value:"fix: environment variables ",paraId:0,tocIndex:1},{value:"#1490",paraId:0,tocIndex:1},{value:"feat: prepare database method ",paraId:0,tocIndex:1},{value:"#1492",paraId:0,tocIndex:1},{value:"Fix/multiple schema query ",paraId:0,tocIndex:1},{value:"#1488",paraId:0,tocIndex:1},{value:"fix: string violation ",paraId:0,tocIndex:1},{value:"#1487",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): migrate evaluators ",paraId:0,tocIndex:1},{value:"#1485",paraId:0,tocIndex:1},{value:"docs: fix typo ",paraId:0,tocIndex:1},{value:"#1482",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix customized job status ",paraId:0,tocIndex:1},{value:"#1484",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix condition config param ",paraId:0,tocIndex:1},{value:"#1483",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix migration ",paraId:0,tocIndex:1},{value:"#1479",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix migration on table prefix ",paraId:0,tocIndex:1},{value:"#1478",paraId:0,tocIndex:1},{value:"refactor(plugin-formula): combine 2 formula field type into 1 ",paraId:0,tocIndex:1},{value:"#1457",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix migration for calculation ",paraId:0,tocIndex:1},{value:"#1476",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix schedule trigger number type repeat ",paraId:0,tocIndex:1},{value:"#1475",paraId:0,tocIndex:1},{value:"Feat(plugin-workflow) manual instruction ",paraId:0,tocIndex:1},{value:"#1339",paraId:0,tocIndex:1},{value:"feat: support for importing attachments ",paraId:0,tocIndex:1},{value:"#1466",paraId:0,tocIndex:1},{value:"fix: column not exists error after destory relation field ",paraId:0,tocIndex:1},{value:"#1465",paraId:0,tocIndex:1},{value:"fix: add schema ",paraId:0,tocIndex:1},{value:"#1464",paraId:0,tocIndex:1},{value:"fix: avoid o2o, o2m can select the data already selected ",paraId:0,tocIndex:1},{value:"#1462",paraId:0,tocIndex:1},{value:"feat: add test cases ",paraId:0,tocIndex:1},{value:"#1463",paraId:0,tocIndex:1},{value:"feat: update zh_CN.ts ",paraId:0,tocIndex:1},{value:"#1458",paraId:0,tocIndex:1},{value:"refactor: export plugin ",paraId:0,tocIndex:1},{value:"#1460",paraId:0,tocIndex:1},{value:"Fix/pg schema with inherit ",paraId:0,tocIndex:1},{value:"#1446",paraId:0,tocIndex:1},{value:"feat: multiple apps admin ",paraId:0,tocIndex:1},{value:"#1431",paraId:0,tocIndex:1},{value:"chore: fix build plugin error ",paraId:0,tocIndex:1},{value:"#1454",paraId:0,tocIndex:1},{value:"feat: provide the underscored option for the database ",paraId:0,tocIndex:1},{value:"#1366",paraId:0,tocIndex:1},{value:'Revert "fix(table): make filed overflow behavior right (#1392)" ',paraId:0,tocIndex:1},{value:"#1452",paraId:0,tocIndex:1},{value:"fix(collection category): zh_cn locale defect ",paraId:0,tocIndex:1},{value:"#1451",paraId:0,tocIndex:1},{value:"feat: add namespace and duplicator parameters for collection options ",paraId:0,tocIndex:1},{value:"#1449",paraId:0,tocIndex:1},{value:"fix(snapshot-field): remove depth limit ",paraId:0,tocIndex:1},{value:"#1450",paraId:0,tocIndex:1},{value:"chore: update licenses url ",paraId:0,tocIndex:1},{value:"#1285",paraId:0,tocIndex:1},{value:"feat: association snapshot ",paraId:0,tocIndex:1},{value:"#1438",paraId:0,tocIndex:1},{value:"fix(table): make filed overflow behavior right ",paraId:0,tocIndex:1},{value:"#1392",paraId:0,tocIndex:1},{value:"fix(plugin-sequence): fix missed createdAt field in bulk hook ",paraId:0,tocIndex:1},{value:"#1448",paraId:0,tocIndex:1},{value:"fix: error:0308010C:digital envelope routines::unsupported ",paraId:0,tocIndex:1},{value:"#1447",paraId:0,tocIndex:1},{value:"feat: collection categories ",paraId:0,tocIndex:1},{value:"#1327",paraId:0,tocIndex:1},{value:"fix(plugin-fm): fix path config for storages ",paraId:0,tocIndex:1},{value:"#1445",paraId:0,tocIndex:1},{value:"fix: node.js 17+, add openssl-legacy-provider ",paraId:0,tocIndex:1},{value:"#1434",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix schedule on field null value ",paraId:0,tocIndex:1},{value:"#1442",paraId:0,tocIndex:1},{value:"feat: pg schema support ",paraId:0,tocIndex:1},{value:"#1439",paraId:0,tocIndex:1},{value:"fix(i18n): set key and ns separator default to false ",paraId:0,tocIndex:1},{value:"#1432",paraId:0,tocIndex:1},{value:"feat: disable trigger when import collection ",paraId:0,tocIndex:1},{value:"#1417",paraId:0,tocIndex:1},{value:"chore: translate 'Add tab' in page header ",paraId:0,tocIndex:1},{value:"#1424",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): use promise to request ",paraId:0,tocIndex:1},{value:"#1426",paraId:0,tocIndex:1},{value:"fix(acl): custom appends merge strategy ",paraId:0,tocIndex:1},{value:"#1416",paraId:0,tocIndex:1},{value:"docs: update G2Plot example url ",paraId:0,tocIndex:1},{value:"#1408",paraId:0,tocIndex:1},{value:"docs: fix typo ",paraId:0,tocIndex:1},{value:"#1412",paraId:0,tocIndex:1},{value:"fix(FixedBlock): using both association filters and FixedBlock does not show the complete table ",paraId:0,tocIndex:1},{value:"#1405",paraId:0,tocIndex:1},{value:"feat(calendar): startDate and endDate support the use of association fields ",paraId:0,tocIndex:1},{value:"#1397",paraId:0,tocIndex:1},{value:"fix: load through collection before belongsToMany field bind ",paraId:0,tocIndex:1},{value:"#1409",paraId:0,tocIndex:1},{value:"feat(verification-plugin): support tencent sms ",paraId:0,tocIndex:1},{value:"#1382",paraId:0,tocIndex:1},{value:"fix: foreign keys are editable when adding fields ",paraId:0,tocIndex:1},{value:"#1404",paraId:0,tocIndex:1},{value:"fix: navbar_ui style ",paraId:0,tocIndex:1},{value:"#1398",paraId:0,tocIndex:1},{value:"fix: inherit startup sort ",paraId:0,tocIndex:1},{value:"#1402",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix url input width for request config ",paraId:0,tocIndex:1},{value:"#1401",paraId:0,tocIndex:1},{value:"Fix/snapshot ",paraId:0,tocIndex:1},{value:"#1396",paraId:0,tocIndex:1},{value:"feat: fix through collections inherits filter ",paraId:0,tocIndex:1},{value:"#1394",paraId:0,tocIndex:1},{value:"Fix(plugin-sequence): support sequence field in m2m through table ",paraId:0,tocIndex:1},{value:"#1383",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): adjust executed alert position ",paraId:0,tocIndex:1},{value:"#1381",paraId:0,tocIndex:1},{value:"fix: through collection individual hooks ",paraId:0,tocIndex:1},{value:"#1378",paraId:0,tocIndex:1},{value:"fix: through collection records should not be reset ",paraId:0,tocIndex:1},{value:"#1377",paraId:0,tocIndex:1},{value:"feat(client): add form disabled context ",paraId:0,tocIndex:1},{value:"#1374",paraId:0,tocIndex:1},{value:"Fix(plugin-workflow): request node ",paraId:0,tocIndex:1},{value:"#1367",paraId:0,tocIndex:1},{value:"docs: add plug-in documentation ",paraId:1,tocIndex:2},{value:"68511f0",paraId:1,tocIndex:2},{value:"feat(db): field value parser ",paraId:1,tocIndex:2},{value:"5805b69",paraId:1,tocIndex:2},{value:"chore(versions): \u{1F60A} publish v0.9.1-alpha.1 ",paraId:1,tocIndex:2},{value:"946c8f2",paraId:1,tocIndex:2}]},554710:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"refactor(plugin-workflow): change single form to custom form block ",paraId:0,tocIndex:1},{value:"#1707",paraId:0,tocIndex:1},{value:"chore(ci): add timeout config for jobs ",paraId:0,tocIndex:1},{value:"#1725",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): migrate menu items to options ",paraId:0,tocIndex:1},{value:"#1724",paraId:0,tocIndex:1},{value:"fix(client): fix error on clear value in variable input ",paraId:0,tocIndex:1},{value:"#1723",paraId:0,tocIndex:1},{value:"fix(record-picker): fix the table paging problem ",paraId:0,tocIndex:1},{value:"#1718",paraId:0,tocIndex:1},{value:"fix(map-plugin): some data is incorrect ",paraId:0,tocIndex:1},{value:"#1717",paraId:0,tocIndex:1},{value:"fix: data scope not effect in gantt ",paraId:0,tocIndex:1},{value:"#1716",paraId:0,tocIndex:1},{value:"fix: button loading does not disappear when the operation submit failed ",paraId:0,tocIndex:1},{value:"#1698",paraId:0,tocIndex:1},{value:"fix(linkage rule):multiple select condition judgment failed ",paraId:0,tocIndex:1},{value:"#1715",paraId:0,tocIndex:1},{value:"Fix/save through table data ",paraId:0,tocIndex:1},{value:"#1714",paraId:0,tocIndex:1},{value:"feat: improve ui design for linkage action ",paraId:0,tocIndex:1},{value:"#1659",paraId:0,tocIndex:1},{value:"feat(map): support to filter other blocks ",paraId:0,tocIndex:1},{value:"#1691",paraId:0,tocIndex:1},{value:"refactor: improve linkage rule enable ",paraId:0,tocIndex:1},{value:"#1700",paraId:0,tocIndex:1},{value:"fix: find fields arg ",paraId:0,tocIndex:1},{value:"#1710",paraId:0,tocIndex:1},{value:"feat(form-block): data templates ",paraId:0,tocIndex:1},{value:"#1704",paraId:0,tocIndex:1},{value:"fix: linkage relationship data condition judgment failed ",paraId:0,tocIndex:1},{value:"#1681",paraId:0,tocIndex:1},{value:"fix(gantt): update permission check in gantt block ",paraId:0,tocIndex:1},{value:"#1701",paraId:0,tocIndex:1},{value:"fix: clearFormGraph ",paraId:0,tocIndex:1},{value:"#1706",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix request body variable component ",paraId:0,tocIndex:1},{value:"#1703",paraId:0,tocIndex:1},{value:"fix(gantt): improve task bar text ",paraId:0,tocIndex:1},{value:"#1696",paraId:0,tocIndex:1},{value:"fix: long text should be line feed ",paraId:0,tocIndex:1},{value:"#1686",paraId:0,tocIndex:1},{value:"fix: cannot display data when remove last page and the page only just one item ",paraId:0,tocIndex:1},{value:"#1685",paraId:0,tocIndex:1},{value:"fix: meta acl with association query ",paraId:0,tocIndex:1},{value:"#1695",paraId:0,tocIndex:1},{value:"fix: linkage rule title can not set empty ",paraId:0,tocIndex:1},{value:"#1688",paraId:0,tocIndex:1},{value:"feat: improve plugin manager ui ",paraId:0,tocIndex:1},{value:"#1650",paraId:0,tocIndex:1},{value:"feat: gantt block ",paraId:0,tocIndex:1},{value:"#1393",paraId:0,tocIndex:1},{value:"fix(client): fix constant input lose focus in variable ",paraId:0,tocIndex:1},{value:"#1689",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add workflow specific logger ",paraId:0,tocIndex:1},{value:"#1677",paraId:0,tocIndex:1},{value:"fix: remove designer ",paraId:0,tocIndex:1},{value:"#1684",paraId:0,tocIndex:1},{value:"test: should load the .env.test ",paraId:0,tocIndex:1},{value:"#1678",paraId:0,tocIndex:1},{value:"fix: incorrect language after logout ",paraId:0,tocIndex:1},{value:"#1679",paraId:0,tocIndex:1},{value:"feat: optimize file collection ",paraId:0,tocIndex:1},{value:"#1666",paraId:0,tocIndex:1},{value:"fix: sort field init performance ",paraId:0,tocIndex:1},{value:"#1675",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix null collection fields ",paraId:0,tocIndex:1},{value:"#1674",paraId:0,tocIndex:1},{value:"fix(client): fix variable component read pretty mode ",paraId:0,tocIndex:1},{value:"#1673",paraId:0,tocIndex:1},{value:"fix: ui problem of compact theme ",paraId:0,tocIndex:1},{value:"#1670",paraId:0,tocIndex:1},{value:"fix: linkage rule enable effect in form ",paraId:0,tocIndex:1},{value:"#1669",paraId:0,tocIndex:1},{value:"feat: collection template summary ",paraId:0,tocIndex:1},{value:"#1672",paraId:0,tocIndex:1},{value:"feat: (plugin-workflow) dynamic expression ",paraId:0,tocIndex:1},{value:"#1560",paraId:0,tocIndex:1},{value:"chore: find inherit collection warn ",paraId:0,tocIndex:1},{value:"#1663",paraId:0,tocIndex:1},{value:"fix: linkage rule title config clear exception ",paraId:0,tocIndex:1},{value:"#1665",paraId:0,tocIndex:1},{value:"feat: support tableoid filter ",paraId:0,tocIndex:1},{value:"#1657",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add array mapping support in processor ",paraId:0,tocIndex:1},{value:"#1662",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix appends null to collection trigger ",paraId:0,tocIndex:1},{value:"#1661",paraId:0,tocIndex:1},{value:"feat(filter-operators): eq and ne operators support array ",paraId:0,tocIndex:1},{value:"#1658",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo drawer data load ",paraId:0,tocIndex:1},{value:"#1656",paraId:0,tocIndex:1},{value:"refactor(client): improve translation ",paraId:0,tocIndex:1},{value:"#1654",paraId:0,tocIndex:1},{value:"fix: fix the 'Add menu item' button disappears ",paraId:0,tocIndex:1},{value:"#1655",paraId:0,tocIndex:1},{value:"chore: add new allowAddtoCurrent config ",paraId:0,tocIndex:1},{value:"#1652",paraId:0,tocIndex:1},{value:"feat: support file collection ",paraId:0,tocIndex:1},{value:"#1636",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix manual node drawer ",paraId:0,tocIndex:1},{value:"#1653",paraId:0,tocIndex:1},{value:"chore: inhertis api with difference schema ",paraId:0,tocIndex:1},{value:"#1545",paraId:0,tocIndex:1},{value:"fix: select record can not enable child collection ",paraId:0,tocIndex:1},{value:"#1649",paraId:0,tocIndex:1},{value:"feat: plugin before enable hook ",paraId:0,tocIndex:1},{value:"#1648",paraId:0,tocIndex:1},{value:"chore: add transaction in set field action ",paraId:0,tocIndex:1},{value:"#1647",paraId:0,tocIndex:1},{value:"fix(linkage rule):linkage rule not display in action ",paraId:0,tocIndex:1},{value:"#1644",paraId:0,tocIndex:1},{value:"refactor: view collection options ",paraId:0,tocIndex:1},{value:"#1643",paraId:0,tocIndex:1},{value:"fix: update field error ",paraId:0,tocIndex:1},{value:"#1645",paraId:0,tocIndex:1},{value:"feat(Table): column action support linkage rules ",paraId:0,tocIndex:1},{value:"#1638",paraId:0,tocIndex:1},{value:"fix(view-collection): field name cannot be edited when there with field source ",paraId:0,tocIndex:1},{value:"#1642",paraId:0,tocIndex:1},{value:"fix: linkage rule config closing rules require reopening the form to take effect ",paraId:0,tocIndex:1},{value:"#1640",paraId:0,tocIndex:1},{value:"refactor(client): change Variable.TextArea to controlled component ",paraId:0,tocIndex:1},{value:"#1605",paraId:0,tocIndex:1},{value:"fix: get pg view def ",paraId:0,tocIndex:1},{value:"#1641",paraId:0,tocIndex:1},{value:"fix: infer view column type with alias ",paraId:0,tocIndex:1},{value:"#1634",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix minors ui issues ",paraId:0,tocIndex:1},{value:"#1635",paraId:0,tocIndex:1},{value:"chore: disabled underscored in view collection. ",paraId:0,tocIndex:1},{value:"#1633",paraId:0,tocIndex:1},{value:"fix: form action dragging area is too large ",paraId:0,tocIndex:1},{value:"#1628",paraId:0,tocIndex:1},{value:"fix: FixedBlock related ui ",paraId:0,tocIndex:1},{value:"#1632",paraId:0,tocIndex:1},{value:"feat: database view collection ",paraId:0,tocIndex:1},{value:"#1587",paraId:0,tocIndex:1},{value:"fix: init sort value in sort field with scopeKey ",paraId:0,tocIndex:1},{value:"#1626",paraId:0,tocIndex:1},{value:"style: linkage rule style improve ",paraId:0,tocIndex:1},{value:"#1625",paraId:0,tocIndex:1},{value:"fix: find with attributes and group ",paraId:0,tocIndex:1},{value:"#1411",paraId:0,tocIndex:1},{value:"docs: transform video link to video tag ",paraId:0,tocIndex:1},{value:"#1414",paraId:0,tocIndex:1},{value:"feat(parse-variables): support to parse variables in filter params ",paraId:0,tocIndex:1},{value:"#1558",paraId:0,tocIndex:1},{value:"fix(linkage rules) : support naming, enabling and disabling, copying, and assigning null values ",paraId:0,tocIndex:1},{value:"#1511",paraId:0,tocIndex:1},{value:"chore: update test ci ",paraId:0,tocIndex:1},{value:"#1622",paraId:0,tocIndex:1},{value:"fix: history add new button does not support enabling child collection ",paraId:0,tocIndex:1},{value:"#1536",paraId:0,tocIndex:1},{value:"fix/(linkages-action): detail block actions does not support linkage rules ",paraId:0,tocIndex:1},{value:"#1504",paraId:0,tocIndex:1},{value:"fix: avoid fixedblock height working in popup ",paraId:0,tocIndex:1},{value:"#1621",paraId:0,tocIndex:1},{value:"fix: when the page has FixedBlock, the table of popup is not displayed ",paraId:0,tocIndex:1},{value:"#1619",paraId:0,tocIndex:1},{value:"feat: association-filter-improve ",paraId:0,tocIndex:1},{value:"#1606",paraId:0,tocIndex:1},{value:"fix(Table): cannot display table data ",paraId:0,tocIndex:1},{value:"#1617",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo list form read-pretty for non-assigneed user ",paraId:0,tocIndex:1},{value:"#1615",paraId:0,tocIndex:1},{value:"feat(table): hidden pagination when only one page is available ",paraId:0,tocIndex:1},{value:"#1614",paraId:0,tocIndex:1},{value:"refactor: improve FixedBlock performance ",paraId:0,tocIndex:1},{value:"#1593",paraId:0,tocIndex:1},{value:"fix(collection-manager): infinite recursion ",paraId:0,tocIndex:1},{value:"#1608",paraId:0,tocIndex:1},{value:"fix(audit-logs): Add ellipsis feature to table columns ",paraId:0,tocIndex:1},{value:"#1603",paraId:0,tocIndex:1},{value:"feat: improve the non-link ui of association data ",paraId:0,tocIndex:1},{value:"#1602",paraId:0,tocIndex:1},{value:"feat(Kanban): the card support open mode ",paraId:0,tocIndex:1},{value:"#1601",paraId:0,tocIndex:1},{value:"fix( importable-field): incorrect display when moving sort handle ",paraId:0,tocIndex:1},{value:"#1613",paraId:0,tocIndex:1},{value:"fix: enable child collections remain after deleting a child collection ",paraId:0,tocIndex:1},{value:"#1610",paraId:0,tocIndex:1},{value:"fix: destroy through table record referencing collections table ",paraId:0,tocIndex:1},{value:"#1611",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): add default actions value of manual node ",paraId:0,tocIndex:1},{value:"#1600",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add failOnEmpty option for query node ",paraId:0,tocIndex:1},{value:"#1599",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): use toJSON instead of get to get valid result ",paraId:0,tocIndex:1},{value:"#1596",paraId:0,tocIndex:1},{value:"Translation pt-BR (Brazilian Portuguese) ",paraId:0,tocIndex:1},{value:"#1591",paraId:0,tocIndex:1},{value:"fix: role permission add new scope display blank ",paraId:0,tocIndex:1},{value:"#1592",paraId:0,tocIndex:1},{value:"fix(FixedBlock): avoid kanban triggering programmatic scrolling ",paraId:0,tocIndex:1},{value:"#1406",paraId:0,tocIndex:1},{value:"fix: repeat request categories when switching between graph interface and collection&fields ",paraId:0,tocIndex:1},{value:"#1590",paraId:0,tocIndex:1},{value:"fix: collectionFieldsOptions cannot get all fields ",paraId:0,tocIndex:1},{value:"#1588",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix input width in request node config ",paraId:0,tocIndex:1},{value:"#1585",paraId:0,tocIndex:1},{value:"feat(filter-blocks): support filter-blocks ",paraId:0,tocIndex:1},{value:"#1505",paraId:0,tocIndex:1},{value:"refactor: multi-app ",paraId:0,tocIndex:1},{value:"#1578",paraId:0,tocIndex:1},{value:"feat: compact theme ",paraId:0,tocIndex:1},{value:"#1574",paraId:0,tocIndex:1},{value:"feat: support cron field ",paraId:0,tocIndex:1},{value:"#1421",paraId:0,tocIndex:1},{value:"fix(Calendar): ensur to get correct gridInitializer when adding a new\u2026 ",paraId:0,tocIndex:1},{value:"#1425",paraId:0,tocIndex:1},{value:"feat(markdown): support mermaid and better style ",paraId:0,tocIndex:1},{value:"#1583",paraId:0,tocIndex:1},{value:"fix(plugin-map): map block repeats ",paraId:0,tocIndex:1},{value:"#1582",paraId:0,tocIndex:1},{value:"feat: tree collection ",paraId:0,tocIndex:1},{value:"#1561",paraId:0,tocIndex:1},{value:"feat(plugin-map): add map block ",paraId:0,tocIndex:1},{value:"#1486",paraId:0,tocIndex:1},{value:"chore: lazy load sub app in share collection ",paraId:0,tocIndex:1},{value:"#1569",paraId:0,tocIndex:1},{value:"fix(record-picker): supports adding sub-collection records ",paraId:0,tocIndex:1},{value:"#1573",paraId:0,tocIndex:1},{value:"fix: app manager reload ",paraId:0,tocIndex:1},{value:"#1565",paraId:0,tocIndex:1},{value:"feat: multi-app-share-collection plugin ",paraId:0,tocIndex:1},{value:"#1562",paraId:0,tocIndex:1},{value:"feat: record picker support to enable links ",paraId:0,tocIndex:1},{value:"#1515",paraId:0,tocIndex:1},{value:"feat: multiple apps ",paraId:0,tocIndex:1},{value:"#1540",paraId:0,tocIndex:1},{value:"docs(client): add variable docs ",paraId:0,tocIndex:1},{value:"#1556",paraId:0,tocIndex:1},{value:"fix(charts): improve chart table preview with object type ",paraId:0,tocIndex:1},{value:"#1555",paraId:0,tocIndex:1},{value:"feat(plugin-workflow) config preload associations in triggers and nodes ",paraId:0,tocIndex:1},{value:"#1548",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo list form read-pretty for non-assigneed user (#1615) ",paraId:1,tocIndex:2},{value:"#1572",paraId:1,tocIndex:2},{value:"chore(versions): \u{1F60A} publish v0.9.2-alpha.1 ",paraId:2,tocIndex:3},{value:"d1adc9d",paraId:2,tocIndex:3},{value:"fix(file-manager): upgrade s3 version ",paraId:2,tocIndex:3},{value:"50183b0",paraId:2,tocIndex:3},{value:"fix: linkage rule ",paraId:2,tocIndex:3},{value:"b8776fe",paraId:2,tocIndex:3}]},839969:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"refactor(plugin-workflow): change single form to custom form block ",paraId:0,tocIndex:1},{value:"#1707",paraId:0,tocIndex:1},{value:"chore(ci): add timeout config for jobs ",paraId:0,tocIndex:1},{value:"#1725",paraId:0,tocIndex:1},{value:"refactor(plugin-workflow): migrate menu items to options ",paraId:0,tocIndex:1},{value:"#1724",paraId:0,tocIndex:1},{value:"fix(client): fix error on clear value in variable input ",paraId:0,tocIndex:1},{value:"#1723",paraId:0,tocIndex:1},{value:"fix(record-picker): fix the table paging problem ",paraId:0,tocIndex:1},{value:"#1718",paraId:0,tocIndex:1},{value:"fix(map-plugin): some data is incorrect ",paraId:0,tocIndex:1},{value:"#1717",paraId:0,tocIndex:1},{value:"fix: data scope not effect in gantt ",paraId:0,tocIndex:1},{value:"#1716",paraId:0,tocIndex:1},{value:"fix: button loading does not disappear when the operation submit failed ",paraId:0,tocIndex:1},{value:"#1698",paraId:0,tocIndex:1},{value:"fix(linkage rule):multiple select condition judgment failed ",paraId:0,tocIndex:1},{value:"#1715",paraId:0,tocIndex:1},{value:"Fix/save through table data ",paraId:0,tocIndex:1},{value:"#1714",paraId:0,tocIndex:1},{value:"feat: improve ui design for linkage action ",paraId:0,tocIndex:1},{value:"#1659",paraId:0,tocIndex:1},{value:"feat(map): support to filter other blocks ",paraId:0,tocIndex:1},{value:"#1691",paraId:0,tocIndex:1},{value:"refactor: improve linkage rule enable ",paraId:0,tocIndex:1},{value:"#1700",paraId:0,tocIndex:1},{value:"fix: find fields arg ",paraId:0,tocIndex:1},{value:"#1710",paraId:0,tocIndex:1},{value:"feat(form-block): data templates ",paraId:0,tocIndex:1},{value:"#1704",paraId:0,tocIndex:1},{value:"fix: linkage relationship data condition judgment failed ",paraId:0,tocIndex:1},{value:"#1681",paraId:0,tocIndex:1},{value:"fix(gantt): update permission check in gantt block ",paraId:0,tocIndex:1},{value:"#1701",paraId:0,tocIndex:1},{value:"fix: clearFormGraph ",paraId:0,tocIndex:1},{value:"#1706",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix request body variable component ",paraId:0,tocIndex:1},{value:"#1703",paraId:0,tocIndex:1},{value:"fix(gantt): improve task bar text ",paraId:0,tocIndex:1},{value:"#1696",paraId:0,tocIndex:1},{value:"fix: long text should be line feed ",paraId:0,tocIndex:1},{value:"#1686",paraId:0,tocIndex:1},{value:"fix: cannot display data when remove last page and the page only just one item ",paraId:0,tocIndex:1},{value:"#1685",paraId:0,tocIndex:1},{value:"fix: meta acl with association query ",paraId:0,tocIndex:1},{value:"#1695",paraId:0,tocIndex:1},{value:"fix: linkage rule title can not set empty ",paraId:0,tocIndex:1},{value:"#1688",paraId:0,tocIndex:1},{value:"feat: improve plugin manager ui ",paraId:0,tocIndex:1},{value:"#1650",paraId:0,tocIndex:1},{value:"feat: gantt block ",paraId:0,tocIndex:1},{value:"#1393",paraId:0,tocIndex:1},{value:"fix(client): fix constant input lose focus in variable ",paraId:0,tocIndex:1},{value:"#1689",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add workflow specific logger ",paraId:0,tocIndex:1},{value:"#1677",paraId:0,tocIndex:1},{value:"fix: remove designer ",paraId:0,tocIndex:1},{value:"#1684",paraId:0,tocIndex:1},{value:"test: should load the .env.test ",paraId:0,tocIndex:1},{value:"#1678",paraId:0,tocIndex:1},{value:"fix: incorrect language after logout ",paraId:0,tocIndex:1},{value:"#1679",paraId:0,tocIndex:1},{value:"feat: optimize file collection ",paraId:0,tocIndex:1},{value:"#1666",paraId:0,tocIndex:1},{value:"fix: sort field init performance ",paraId:0,tocIndex:1},{value:"#1675",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix null collection fields ",paraId:0,tocIndex:1},{value:"#1674",paraId:0,tocIndex:1},{value:"fix(client): fix variable component read pretty mode ",paraId:0,tocIndex:1},{value:"#1673",paraId:0,tocIndex:1},{value:"fix: ui problem of compact theme ",paraId:0,tocIndex:1},{value:"#1670",paraId:0,tocIndex:1},{value:"fix: linkage rule enable effect in form ",paraId:0,tocIndex:1},{value:"#1669",paraId:0,tocIndex:1},{value:"feat: collection template summary ",paraId:0,tocIndex:1},{value:"#1672",paraId:0,tocIndex:1},{value:"feat: (plugin-workflow) dynamic expression ",paraId:0,tocIndex:1},{value:"#1560",paraId:0,tocIndex:1},{value:"chore: find inherit collection warn ",paraId:0,tocIndex:1},{value:"#1663",paraId:0,tocIndex:1},{value:"fix: linkage rule title config clear exception ",paraId:0,tocIndex:1},{value:"#1665",paraId:0,tocIndex:1},{value:"feat: support tableoid filter ",paraId:0,tocIndex:1},{value:"#1657",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add array mapping support in processor ",paraId:0,tocIndex:1},{value:"#1662",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix appends null to collection trigger ",paraId:0,tocIndex:1},{value:"#1661",paraId:0,tocIndex:1},{value:"feat(filter-operators): eq and ne operators support array ",paraId:0,tocIndex:1},{value:"#1658",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo drawer data load ",paraId:0,tocIndex:1},{value:"#1656",paraId:0,tocIndex:1},{value:"refactor(client): improve translation ",paraId:0,tocIndex:1},{value:"#1654",paraId:0,tocIndex:1},{value:"fix: fix the 'Add menu item' button disappears ",paraId:0,tocIndex:1},{value:"#1655",paraId:0,tocIndex:1},{value:"chore: add new allowAddtoCurrent config ",paraId:0,tocIndex:1},{value:"#1652",paraId:0,tocIndex:1},{value:"feat: support file collection ",paraId:0,tocIndex:1},{value:"#1636",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix manual node drawer ",paraId:0,tocIndex:1},{value:"#1653",paraId:0,tocIndex:1},{value:"chore: inhertis api with difference schema ",paraId:0,tocIndex:1},{value:"#1545",paraId:0,tocIndex:1},{value:"fix: select record can not enable child collection ",paraId:0,tocIndex:1},{value:"#1649",paraId:0,tocIndex:1},{value:"feat: plugin before enable hook ",paraId:0,tocIndex:1},{value:"#1648",paraId:0,tocIndex:1},{value:"chore: add transaction in set field action ",paraId:0,tocIndex:1},{value:"#1647",paraId:0,tocIndex:1},{value:"fix(linkage rule):linkage rule not display in action ",paraId:0,tocIndex:1},{value:"#1644",paraId:0,tocIndex:1},{value:"refactor: view collection options ",paraId:0,tocIndex:1},{value:"#1643",paraId:0,tocIndex:1},{value:"fix: update field error ",paraId:0,tocIndex:1},{value:"#1645",paraId:0,tocIndex:1},{value:"feat(Table): column action support linkage rules ",paraId:0,tocIndex:1},{value:"#1638",paraId:0,tocIndex:1},{value:"fix(view-collection): field name cannot be edited when there with field source ",paraId:0,tocIndex:1},{value:"#1642",paraId:0,tocIndex:1},{value:"fix: linkage rule config closing rules require reopening the form to take effect ",paraId:0,tocIndex:1},{value:"#1640",paraId:0,tocIndex:1},{value:"refactor(client): change Variable.TextArea to controlled component ",paraId:0,tocIndex:1},{value:"#1605",paraId:0,tocIndex:1},{value:"fix: get pg view def ",paraId:0,tocIndex:1},{value:"#1641",paraId:0,tocIndex:1},{value:"fix: infer view column type with alias ",paraId:0,tocIndex:1},{value:"#1634",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix minors ui issues ",paraId:0,tocIndex:1},{value:"#1635",paraId:0,tocIndex:1},{value:"chore: disabled underscored in view collection. ",paraId:0,tocIndex:1},{value:"#1633",paraId:0,tocIndex:1},{value:"fix: form action dragging area is too large ",paraId:0,tocIndex:1},{value:"#1628",paraId:0,tocIndex:1},{value:"fix: FixedBlock related ui ",paraId:0,tocIndex:1},{value:"#1632",paraId:0,tocIndex:1},{value:"feat: database view collection ",paraId:0,tocIndex:1},{value:"#1587",paraId:0,tocIndex:1},{value:"fix: init sort value in sort field with scopeKey ",paraId:0,tocIndex:1},{value:"#1626",paraId:0,tocIndex:1},{value:"style: linkage rule style improve ",paraId:0,tocIndex:1},{value:"#1625",paraId:0,tocIndex:1},{value:"fix: find with attributes and group ",paraId:0,tocIndex:1},{value:"#1411",paraId:0,tocIndex:1},{value:"docs: transform video link to video tag ",paraId:0,tocIndex:1},{value:"#1414",paraId:0,tocIndex:1},{value:"feat(parse-variables): support to parse variables in filter params ",paraId:0,tocIndex:1},{value:"#1558",paraId:0,tocIndex:1},{value:"fix(linkage rules) : support naming, enabling and disabling, copying, and assigning null values ",paraId:0,tocIndex:1},{value:"#1511",paraId:0,tocIndex:1},{value:"chore: update test ci ",paraId:0,tocIndex:1},{value:"#1622",paraId:0,tocIndex:1},{value:"fix: history add new button does not support enabling child collection ",paraId:0,tocIndex:1},{value:"#1536",paraId:0,tocIndex:1},{value:"fix/(linkages-action): detail block actions does not support linkage rules ",paraId:0,tocIndex:1},{value:"#1504",paraId:0,tocIndex:1},{value:"fix: avoid fixedblock height working in popup ",paraId:0,tocIndex:1},{value:"#1621",paraId:0,tocIndex:1},{value:"fix: when the page has FixedBlock, the table of popup is not displayed ",paraId:0,tocIndex:1},{value:"#1619",paraId:0,tocIndex:1},{value:"feat: association-filter-improve ",paraId:0,tocIndex:1},{value:"#1606",paraId:0,tocIndex:1},{value:"fix(Table): cannot display table data ",paraId:0,tocIndex:1},{value:"#1617",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo list form read-pretty for non-assigneed user ",paraId:0,tocIndex:1},{value:"#1615",paraId:0,tocIndex:1},{value:"feat(table): hidden pagination when only one page is available ",paraId:0,tocIndex:1},{value:"#1614",paraId:0,tocIndex:1},{value:"refactor: improve FixedBlock performance ",paraId:0,tocIndex:1},{value:"#1593",paraId:0,tocIndex:1},{value:"fix(collection-manager): infinite recursion ",paraId:0,tocIndex:1},{value:"#1608",paraId:0,tocIndex:1},{value:"fix(audit-logs): Add ellipsis feature to table columns ",paraId:0,tocIndex:1},{value:"#1603",paraId:0,tocIndex:1},{value:"feat: improve the non-link ui of association data ",paraId:0,tocIndex:1},{value:"#1602",paraId:0,tocIndex:1},{value:"feat(Kanban): the card support open mode ",paraId:0,tocIndex:1},{value:"#1601",paraId:0,tocIndex:1},{value:"fix( importable-field): incorrect display when moving sort handle ",paraId:0,tocIndex:1},{value:"#1613",paraId:0,tocIndex:1},{value:"fix: enable child collections remain after deleting a child collection ",paraId:0,tocIndex:1},{value:"#1610",paraId:0,tocIndex:1},{value:"fix: destroy through table record referencing collections table ",paraId:0,tocIndex:1},{value:"#1611",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): add default actions value of manual node ",paraId:0,tocIndex:1},{value:"#1600",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add failOnEmpty option for query node ",paraId:0,tocIndex:1},{value:"#1599",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): use toJSON instead of get to get valid result ",paraId:0,tocIndex:1},{value:"#1596",paraId:0,tocIndex:1},{value:"Translation pt-BR (Brazilian Portuguese) ",paraId:0,tocIndex:1},{value:"#1591",paraId:0,tocIndex:1},{value:"fix: role permission add new scope display blank ",paraId:0,tocIndex:1},{value:"#1592",paraId:0,tocIndex:1},{value:"fix(FixedBlock): avoid kanban triggering programmatic scrolling ",paraId:0,tocIndex:1},{value:"#1406",paraId:0,tocIndex:1},{value:"fix: repeat request categories when switching between graph interface and collection&fields ",paraId:0,tocIndex:1},{value:"#1590",paraId:0,tocIndex:1},{value:"fix: collectionFieldsOptions cannot get all fields ",paraId:0,tocIndex:1},{value:"#1588",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix input width in request node config ",paraId:0,tocIndex:1},{value:"#1585",paraId:0,tocIndex:1},{value:"feat(filter-blocks): support filter-blocks ",paraId:0,tocIndex:1},{value:"#1505",paraId:0,tocIndex:1},{value:"refactor: multi-app ",paraId:0,tocIndex:1},{value:"#1578",paraId:0,tocIndex:1},{value:"feat: compact theme ",paraId:0,tocIndex:1},{value:"#1574",paraId:0,tocIndex:1},{value:"feat: support cron field ",paraId:0,tocIndex:1},{value:"#1421",paraId:0,tocIndex:1},{value:"fix(Calendar): ensur to get correct gridInitializer when adding a new\u2026 ",paraId:0,tocIndex:1},{value:"#1425",paraId:0,tocIndex:1},{value:"feat(markdown): support mermaid and better style ",paraId:0,tocIndex:1},{value:"#1583",paraId:0,tocIndex:1},{value:"fix(plugin-map): map block repeats ",paraId:0,tocIndex:1},{value:"#1582",paraId:0,tocIndex:1},{value:"feat: tree collection ",paraId:0,tocIndex:1},{value:"#1561",paraId:0,tocIndex:1},{value:"feat(plugin-map): add map block ",paraId:0,tocIndex:1},{value:"#1486",paraId:0,tocIndex:1},{value:"chore: lazy load sub app in share collection ",paraId:0,tocIndex:1},{value:"#1569",paraId:0,tocIndex:1},{value:"fix(record-picker): supports adding sub-collection records ",paraId:0,tocIndex:1},{value:"#1573",paraId:0,tocIndex:1},{value:"fix: app manager reload ",paraId:0,tocIndex:1},{value:"#1565",paraId:0,tocIndex:1},{value:"feat: multi-app-share-collection plugin ",paraId:0,tocIndex:1},{value:"#1562",paraId:0,tocIndex:1},{value:"feat: record picker support to enable links ",paraId:0,tocIndex:1},{value:"#1515",paraId:0,tocIndex:1},{value:"feat: multiple apps ",paraId:0,tocIndex:1},{value:"#1540",paraId:0,tocIndex:1},{value:"docs(client): add variable docs ",paraId:0,tocIndex:1},{value:"#1556",paraId:0,tocIndex:1},{value:"fix(charts): improve chart table preview with object type ",paraId:0,tocIndex:1},{value:"#1555",paraId:0,tocIndex:1},{value:"feat(plugin-workflow) config preload associations in triggers and nodes ",paraId:0,tocIndex:1},{value:"#1548",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix todo list form read-pretty for non-assigneed user (#1615) ",paraId:1,tocIndex:2},{value:"#1572",paraId:1,tocIndex:2},{value:"chore(versions): \u{1F60A} publish v0.9.2-alpha.1 ",paraId:2,tocIndex:3},{value:"d1adc9d",paraId:2,tocIndex:3},{value:"fix(file-manager): upgrade s3 version ",paraId:2,tocIndex:3},{value:"50183b0",paraId:2,tocIndex:3},{value:"fix: linkage rule ",paraId:2,tocIndex:3},{value:"b8776fe",paraId:2,tocIndex:3}]},291448:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"chore: load view collection when source not found ",paraId:0,tocIndex:1},{value:"#1930",paraId:0,tocIndex:1},{value:"feat(data-template): support to set data scope and title field ",paraId:0,tocIndex:1},{value:"#1918",paraId:0,tocIndex:1},{value:"feat(data-template): support for unlimited levels of fields selection ",paraId:0,tocIndex:1},{value:"#1910",paraId:0,tocIndex:1},{value:"chore: when using association field by picker mode,it's open size can be changed ",paraId:0,tocIndex:1},{value:"#1926",paraId:0,tocIndex:1},{value:"fix(ConfigurationTabs): avoid error ",paraId:0,tocIndex:1},{value:"#1782",paraId:0,tocIndex:1},{value:"fix: tableField query data in add child action ",paraId:0,tocIndex:1},{value:"#1876",paraId:0,tocIndex:1},{value:"refactor: front-end testing with vitest ",paraId:0,tocIndex:1},{value:"#1900",paraId:0,tocIndex:1},{value:"fix: disable popup button in add-modal ",paraId:0,tocIndex:1},{value:"#1808",paraId:0,tocIndex:1},{value:"fix: append acl resource params ",paraId:0,tocIndex:1},{value:"#1923",paraId:0,tocIndex:1},{value:"chore: update guard with array contains null ",paraId:0,tocIndex:1},{value:"#1922",paraId:0,tocIndex:1},{value:"refactor: initialization when switching field components ",paraId:0,tocIndex:1},{value:"#1915",paraId:0,tocIndex:1},{value:"fix(association-field): only when the new data is successfully created can the data be associated ",paraId:0,tocIndex:1},{value:"#1884",paraId:0,tocIndex:1},{value:"fix: eager load with belongs to many with custom source key ",paraId:0,tocIndex:1},{value:"#1913",paraId:0,tocIndex:1},{value:"fix: hiding the title of a subform will hide all embedded titles ",paraId:0,tocIndex:1},{value:"#1904",paraId:0,tocIndex:1},{value:"fix: updateAssociationValues ",paraId:0,tocIndex:1},{value:"#1903",paraId:0,tocIndex:1},{value:"fix(plugin-formula): use read-pretty component in result ",paraId:0,tocIndex:1},{value:"#1911",paraId:0,tocIndex:1},{value:"fix: can't set default value when turn on the form field required ",paraId:0,tocIndex:1},{value:"#1887",paraId:0,tocIndex:1},{value:"fix(Data-template): fix bug when deleting fields ",paraId:0,tocIndex:1},{value:"#1907",paraId:0,tocIndex:1},{value:"feat(app): add clear cache button ",paraId:0,tocIndex:1},{value:"#1909",paraId:0,tocIndex:1},{value:"fix: eager load belongs to many association ",paraId:0,tocIndex:1},{value:"#1906",paraId:0,tocIndex:1},{value:"feat: support to-multi field variables ",paraId:0,tocIndex:1},{value:"#1680",paraId:0,tocIndex:1},{value:"fix: append belongs to association with fields ",paraId:0,tocIndex:1},{value:"#1894",paraId:0,tocIndex:1},{value:"fix: appends belongs to association ",paraId:0,tocIndex:1},{value:"#1893",paraId:0,tocIndex:1},{value:"fix: preload relational data ",paraId:0,tocIndex:1},{value:"#1847",paraId:0,tocIndex:1},{value:"feat: support reboot application manually ",paraId:0,tocIndex:1},{value:"#1889",paraId:0,tocIndex:1},{value:"Refactor/append fields ",paraId:0,tocIndex:1},{value:"#1883",paraId:0,tocIndex:1},{value:"chore: pg sql parser ",paraId:0,tocIndex:1},{value:"#1890",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix language ",paraId:0,tocIndex:1},{value:"#1886",paraId:0,tocIndex:1},{value:"fix: field required when setting sorting rules ",paraId:0,tocIndex:1},{value:"#1885",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add node description to drawer when edit node ",paraId:0,tocIndex:1},{value:"#1882",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix variable api caller in loop ",paraId:0,tocIndex:1},{value:"#1877",paraId:0,tocIndex:1},{value:"chore(github-template): clean comments and format ",paraId:0,tocIndex:1},{value:"#1878",paraId:0,tocIndex:1},{value:"feat(association-field): default one data for to-many association ",paraId:0,tocIndex:1},{value:"#1873",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): fix trigger title when workflow not loaded ",paraId:0,tocIndex:1},{value:"#1875",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): aggregate ",paraId:0,tocIndex:1},{value:"#1852",paraId:0,tocIndex:1},{value:"Feat/translation es_ES ",paraId:0,tocIndex:1},{value:"#1801",paraId:0,tocIndex:1},{value:"fix: data is not updated when appends are changed ",paraId:0,tocIndex:1},{value:"#1872",paraId:0,tocIndex:1},{value:"fix:association select no options when clearing filter ",paraId:0,tocIndex:1},{value:"#1866",paraId:0,tocIndex:1},{value:"fix(acl): issue with repeated createdById field ",paraId:0,tocIndex:1},{value:"#1871",paraId:0,tocIndex:1},{value:"feat(client): allow search by title in collection select ",paraId:0,tocIndex:1},{value:"#1869",paraId:0,tocIndex:1},{value:"chore: skip get standalone deployment sub application ",paraId:0,tocIndex:1},{value:"#1868",paraId:0,tocIndex:1},{value:"fix(plugin-workflow): remove useless context option ",paraId:0,tocIndex:1},{value:"#1867",paraId:0,tocIndex:1},{value:"fix: inherit fields filter Foreign Key fields ",paraId:0,tocIndex:1},{value:"#1864",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): loop ",paraId:0,tocIndex:1},{value:"#1787",paraId:0,tocIndex:1},{value:"fix: insertAdjacent not find ",paraId:0,tocIndex:1},{value:"#1861",paraId:0,tocIndex:1},{value:"refactor(add-new):association field add new support button edit ",paraId:0,tocIndex:1},{value:"#1854",paraId:0,tocIndex:1},{value:"feat: support List and Grid Card block ",paraId:0,tocIndex:1},{value:"#1753",paraId:0,tocIndex:1},{value:"fix: fix multi-select field not show 'Allow multiple' switch ",paraId:0,tocIndex:1},{value:"#1857",paraId:0,tocIndex:1},{value:"fix: field for attachment interface type without appends ",paraId:0,tocIndex:1},{value:"#1856",paraId:0,tocIndex:1},{value:"fix: action error when field deleted ",paraId:0,tocIndex:1},{value:"#1849",paraId:0,tocIndex:1},{value:"feat: support running single sub app ",paraId:0,tocIndex:1},{value:"#1853",paraId:0,tocIndex:1},{value:"fix: assign field with delete field ",paraId:0,tocIndex:1},{value:"#1850",paraId:0,tocIndex:1},{value:"fix: title field in assign fields value ",paraId:0,tocIndex:1},{value:"#1848",paraId:0,tocIndex:1},{value:"fix:association appends ",paraId:0,tocIndex:1},{value:"#1842",paraId:0,tocIndex:1},{value:"feat(plugin-workflow): add delete button in workflow canvas page ",paraId:0,tocIndex:1},{value:"#1844",paraId:0,tocIndex:1},{value:"fix(block-provider): getNesterAppends filter fix ",paraId:0,tocIndex:1},{value:"#1839",paraId:0,tocIndex:1},{value:"feat: repository aggregate method ",paraId:0,tocIndex:1},{value:"#1829",paraId:0,tocIndex:1},{value:"feat(docs): update docs ",paraId:1,tocIndex:2},{value:"0b0a8d2",paraId:1,tocIndex:2},{value:"chore(versions): \u{1F60A} publish v0.9.4-alpha.1 ",paraId:1,tocIndex:2},{value:"9c94840",paraId:1,tocIndex:2},{value:"chore: update changelog ",paraId:1,tocIndex:2},{value:"a6c7b41",paraId:1,tocIndex:2}]},843438:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`Association field component improvements, support for multiple component switching
`,paraId:0,tocIndex:1},{value:"Select",paraId:1,tocIndex:1},{value:"Record picker",paraId:1,tocIndex:1},{value:"Sub-form/Sub-details",paraId:1,tocIndex:1},{value:"Sub-table",paraId:1,tocIndex:1},{value:"File manager",paraId:1,tocIndex:1},{value:"Title(read only)",paraId:1,tocIndex:1},{value:`Quick creation of relational data, supports two quick creation modes
`,paraId:0,tocIndex:1},{value:"Add in drop-down menu to quickly create a new record based on the title field",paraId:2,tocIndex:1},{value:"Add in pop-up window to configure complex add forms",paraId:2,tocIndex:1},{value:`Duplicate action, supports two modes
`,paraId:0,tocIndex:1},{value:"Direct duplicate",paraId:3,tocIndex:1},{value:"Copy into the form and continue to fill in",paraId:3,tocIndex:1},{value:"Form data templates",paraId:0,tocIndex:1},{value:"Filter data scope support variables",paraId:0,tocIndex:1},{value:"List block",paraId:0,tocIndex:1},{value:"Grid card block",paraId:0,tocIndex:1},{value:"Mobile client plugin",paraId:0,tocIndex:1},{value:`User authentication plugin, support for different authentication methods
`,paraId:0,tocIndex:1},{value:"Email/Password",paraId:4,tocIndex:1},{value:"SMS",paraId:4,tocIndex:1},{value:"OIDC",paraId:4,tocIndex:1},{value:"SAML",paraId:4,tocIndex:1},{value:`Workflow nodes
`,paraId:0,tocIndex:1},{value:"Manual node upgrade, support for adding and editing from existing collections",paraId:5,tocIndex:1},{value:"Loop node",paraId:5,tocIndex:1},{value:"Aggregate node",paraId:5,tocIndex:1},{value:`File manager
`,paraId:0,tocIndex:1},{value:"Provide file collection template",paraId:6,tocIndex:1},{value:"Provide file manager component",paraId:6,tocIndex:1},{value:"No change, upgrade reference ",paraId:7,tocIndex:3},{value:"Upgrading for Docker compose",paraId:8,tocIndex:3},{value:"v0.10 has a major upgrade of dependencies, so to prevent errors when upgrading the source code, you need to delete the following directories before upgrading",paraId:9,tocIndex:4},{value:`# Remove .umi cache
yarn rimraf -rf "./**/{.umi,.umi-production}"
# Delete compiled files
yarn rimraf -rf "./packages/*/*/{lib,esm,es,dist,node_modules}"
# Remove dependencies
yarn rimraf -rf node_modules
`,paraId:10,tocIndex:4},{value:"See ",paraId:11,tocIndex:4},{value:"Upgrading for Git source code",paraId:12,tocIndex:4},{value:" for more details",paraId:11,tocIndex:4},{value:"It is recommended that ",paraId:13,tocIndex:5},{value:"yarn create",paraId:13,tocIndex:5},{value:" re-download the new version and modify the ",paraId:13,tocIndex:5},{value:".env",paraId:13,tocIndex:5},{value:" configuration, for more details refer to ",paraId:13,tocIndex:5},{value:"major version upgrade guide",paraId:14,tocIndex:5},{value:"Not compatible with new version, block fields need to be removed and reassigned (UI reassignment only)",paraId:15,tocIndex:7},{value:"In addition to the built-in attachments table, users can also custom file collection, the upload api for attachments has been changed from ",paraId:16,tocIndex:8},{value:"/api/attachments:upload",paraId:16,tocIndex:8},{value:" to ",paraId:16,tocIndex:8},{value:"/api/<file-collection>:create",paraId:16,tocIndex:8},{value:", upload is deprecated, still compatible with v0.10 but will be Removed.",paraId:16,tocIndex:8},{value:"The nocobase kernel provides a more powerful ",paraId:17,tocIndex:9},{value:"auth module",paraId:17,tocIndex:9},{value:" with the following changes to the user login, registration, verification, and logout apis:",paraId:17,tocIndex:9},{value:`/api/users:signin -> /api/auth:signIn
/api/users:signup -> /api/auth:signUp
/api/users:signout -> /api/auth:signOut
/api/users:check -> /api/auth:check
`,paraId:18,tocIndex:9},{value:"Note: The above users interface, which is deprecated, is still compatible with v0.10, but will be removed in the next major release.",paraId:19,tocIndex:9},{value:"If date related filtering was previously configured in the data range, it needs to be deleted and reconfigured.",paraId:20,tocIndex:10},{value:"dependencies mainly including",paraId:21,tocIndex:12},{value:"react",paraId:22,tocIndex:12},{value:" upgrade to v18",paraId:22,tocIndex:12},{value:"react-dom",paraId:22,tocIndex:12},{value:" upgrade to v18",paraId:22,tocIndex:12},{value:"react-router",paraId:22,tocIndex:12},{value:" upgrade to v6.11",paraId:22,tocIndex:12},{value:"umi",paraId:22,tocIndex:12},{value:" upgrade to v4",paraId:22,tocIndex:12},{value:"dumi",paraId:22,tocIndex:12},{value:" upgrade to v2",paraId:22,tocIndex:12},{value:"The ",paraId:23,tocIndex:12},{value:"package.json",paraId:23,tocIndex:12},{value:" dependencies should be changed to the latest version, e.g:",paraId:23,tocIndex:12},{value:`{
  "devDependencies": {
+   "react": "^18".
+   "react-dom": "^18".
+   "react-router-dom": "^6.11.2".
-   "react": "^17".
-   "react-dom": "^17".
-   "react-router-dom": "^5".
  }
}
`,paraId:24,tocIndex:12},{value:"Because react-router has been upgraded, the related code also needs to be changed, the main changes include",paraId:25,tocIndex:13},{value:"Layout component needs to use ",paraId:26,tocIndex:14},{value:"<Outlet />",paraId:26,tocIndex:14},{value:" instead of ",paraId:26,tocIndex:14},{value:"props.children",paraId:26,tocIndex:14},{value:".",paraId:26,tocIndex:14},{value:`import React from 'react';
+ import { Outlet } from 'react-router-dom';

export default function Layout(props) {
  return (
    <div>
-      { props.children }
+      <Outlet />
    </div>
  );
}
`,paraId:27,tocIndex:14},{value:"if you use ",paraId:28,tocIndex:14},{value:"React.cloneElement",paraId:28,tocIndex:14},{value:" to render the route component, you need to change it like this:",paraId:28,tocIndex:14},{value:`import React from 'react';
+ import { Outlet } from 'react-router-dom';

export default function RouteComponent(props) {
  return (
    <div>
-      { React.cloneElement(props.children, { someProp: 'p1' }) }
+      <Outlet context={{ someProp: 'p1' }} />
    </div>
  );
}
`,paraId:29,tocIndex:14},{value:"Change the route component to get the value from ",paraId:30,tocIndex:14},{value:"useOutletContext",paraId:30,tocIndex:14},{value:`import React from 'react';
+ import { useOutletContext } from 'react-router-dom';

- export function Comp(props){
+ export function Comp() {
+   const props = useOutletContext();
  return props.someProp;
}
`,paraId:31,tocIndex:14},{value:"<Redirect>",paraId:32,tocIndex:15},{value:" is changed to ",paraId:32,tocIndex:15},{value:"<Navigate replace />",paraId:32,tocIndex:15},{value:".",paraId:32,tocIndex:15},{value:`- <Redirect to="about" />
+ <Navigate to="about" replace />
`,paraId:33,tocIndex:15},{value:"useNavigate",paraId:34,tocIndex:16},{value:" is changed to ",paraId:34,tocIndex:16},{value:"useHistory",paraId:34,tocIndex:16},{value:".",paraId:34,tocIndex:16},{value:`- import { useHistory } from 'react-router-dom';
+ import { useNavigate} from 'react-router-dom';

- const history = useHistory();
+ const navigate = useNavigate();

- history.push('/about')
+ navigate('/about')

- history.replace('/about')
+ navigate('/about', { replace: true })
`,paraId:35,tocIndex:16},{value:"useLocation<type>()",paraId:36,tocIndex:17},{value:" is changed to ",paraId:36,tocIndex:17},{value:"useLocation",paraId:36,tocIndex:17},{value:".",paraId:36,tocIndex:17},{value:`- const location= useLocation<type>();
+ const location= useLocation();
`,paraId:37,tocIndex:17},{value:"const { query } = useLocation()",paraId:38,tocIndex:17},{value:" is changed to ",paraId:38,tocIndex:17},{value:"useSearchParams()",paraId:38,tocIndex:17},{value:"\u3002",paraId:38,tocIndex:17},{value:`- const location = useLocation();
- const query = location.query;
- const name = query.name;
+ const [searchParams, setSearchParams] = useSearchParams();
+ searchParams.get('name');
`,paraId:39,tocIndex:17},{value:"All of the following are valid route paths in v6:",paraId:40,tocIndex:18},{value:`/groups
/groups/admin
/users/:id
/users/:id/messages
/files/*
/files/:id/*
`,paraId:41,tocIndex:18},{value:"The following RegExp-style route paths are not valid in v6:",paraId:42,tocIndex:18},{value:`/tweets/:id(\\d+)
/files/*/cat.jpg
/files-*
`,paraId:43,tocIndex:18},{value:"For more api changes, please refer to ",paraId:44,tocIndex:18},{value:"react-router@6",paraId:44,tocIndex:18},{value:"\u3002",paraId:44,tocIndex:18}]},414262:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"New client application, plugin and router",paraId:0,tocIndex:1},{value:"Ant design upgrade to v5",paraId:0,tocIndex:1},{value:`New plugin
`,paraId:0,tocIndex:1},{value:"Data visualization",paraId:1,tocIndex:1},{value:"API keys",paraId:1,tocIndex:1},{value:"Google map",paraId:1,tocIndex:1},{value:"before you had to pass a component and the component needed to pass ",paraId:2,tocIndex:4},{value:"props.children",paraId:2,tocIndex:4},{value:", for example:",paraId:2,tocIndex:4},{value:`const HelloProvider = (props) => {
  // do something logic
  return <div>{props.children}</div>;
};

export default HelloProvider;
`,paraId:3,tocIndex:4},{value:"now you need to change to the plugin way, for example:",paraId:4,tocIndex:4},{value:`+import { Plugin } from '@nocobase/client'

const HelloProvider = (props) => {
  // do something logic
  return <div>
    {props.children}
  </div>;
}

+ export class HelloPlugin extends Plugin {
+   async load() {
+     this.app.addProvider(HelloProvider);
+   }
+ }

- export default HelloProvider;
+ export default HelloPlugin;
`,paraId:5,tocIndex:4},{value:"plugins are very powerful and can do a lot of things in the ",paraId:6,tocIndex:4},{value:"load",paraId:6,tocIndex:4},{value:" phase:",paraId:6,tocIndex:4},{value:"modify routes",paraId:7,tocIndex:4},{value:"add Components",paraId:7,tocIndex:4},{value:"add Providers",paraId:7,tocIndex:4},{value:"add Scopes",paraId:7,tocIndex:4},{value:"load other plugins",paraId:7,tocIndex:4},{value:"if you used ",paraId:8,tocIndex:5},{value:"RouteSwitchContext",paraId:8,tocIndex:5},{value:" to modify the route before, you now need to replace it with a plugin:",paraId:8,tocIndex:5},{value:`import { RouteSwitchContext } from '@nocobase/client';

const HelloProvider = () => {
  const { routes, ...others } = useContext(RouteSwitchContext);
  routes[1].routes.unshift({
    path: '/hello',
    component: Hello,
  });

  return (
    <div>
      <RouteSwitchContext.Provider value={{ ...others, routes }}>
        {props.children}
      </RouteSwitchContext.Provider>
    </div>
  );
};
`,paraId:9,tocIndex:5},{value:"now you need to change to the plugin way, for example:",paraId:10,tocIndex:5},{value:`- import { RouteSwitchContext } from '@nocobase/client';
+ import { Plugin } from '@nocobase/client';

const HelloProvider = (props) => {
-  const { routes, ...others } = useContext(RouteSwitchContext);
-  routes[1].routes.unshift({
-    path: '/hello',
-    component: Hello,
-  });

  return <div>
-   <RouteSwitchContext.Provider value={{ ...others, routes }}>
      {props.children}
-   </RouteSwitchContext.Provider>
  </div>
}

+ export class HelloPlugin extends Plugin {
+  async load() {
+    this.app.router.add('admin.hello', {
+       path: '/hello',
+       Component: Hello,
+    });
+    this.app.addProvider(HelloProvider);
+  }
+ }
+ export default HelloPlugin;
`,paraId:11,tocIndex:5},{value:"more details can be found in ",paraId:12,tocIndex:5},{value:"packages/core/client/src/application/index.md",paraId:12,tocIndex:5},{value:"antd related details view the official website ",paraId:13,tocIndex:6},{value:"V4 to V5",paraId:13,tocIndex:6},{value:"@formily/antd",paraId:13,tocIndex:6},{value:" replace with ",paraId:13,tocIndex:6},{value:"@formily/antd-v5",paraId:13,tocIndex:6}]},626879:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"New plugin build tool. The built plugins will be able to be used directly on the production environment without the need for a second build.",paraId:0,tocIndex:1},{value:"No change, refer to ",paraId:1,tocIndex:3},{value:"Docker Image Upgrade Guide",paraId:2,tocIndex:3},{value:" for upgrade.",paraId:1,tocIndex:3},{value:"The plugin build tool has been freshly upgraded, and the cache needs to be cleared after pulling new sources.",paraId:3,tocIndex:4},{value:`git pull # Pull the new source code.
yarn clean # Clear the cache.
`,paraId:4,tocIndex:4},{value:"For more details, see ",paraId:5,tocIndex:4},{value:"Git source upgrade guide",paraId:6,tocIndex:4},{value:".",paraId:5,tocIndex:4},{value:"Redownload the new version via ",paraId:7,tocIndex:5},{value:"yarn create",paraId:7,tocIndex:5},{value:" and update the .env configuration, see [major version upgrade guide](/welcome/getting-started/upgrading/create-nocobase-app#Major version upgrade) for more details.",paraId:7,tocIndex:5},{value:"Apps installed via create-nocobase-app no longer have a packages/app directory, and custom code in packages/app needs to be moved to the custom plugin.",paraId:8,tocIndex:7},{value:"If you are configuring nginx yourself, you will need to make a similar adjustment",paraId:9,tocIndex:8},{value:`server {
- root /app/nocobase/packages/app/client/dist;
+ root /app/nocobase/node_modules/@nocobase/app/dist/client;

  location / {
-       root /app/nocobase/packages/app/client/dist;
+       root /app/nocobase/node_modules/@nocobase/app/dist/client;
        try_files $uri $uri/ /index.html;
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache';
        if_modified_since off;
        expires off;
        etag off;
    }
}
`,paraId:10,tocIndex:8},{value:"Refer to the third-party plugin upgrade guide below",paraId:11,tocIndex:9},{value:"src/client",paraId:12},{value:"src/server",paraId:12},{value:`// src/client/index.ts
import { Plugin } from '@nocobase/client';

class MyPlugin extends Plugin {
  async load() {
    // ...
  }
}

export default MyPlugin;
`,paraId:13,tocIndex:11},{value:`// src/server/index.ts
import { Plugin } from '@nocobase/server';

class MyPlugin extends Plugin {
  async load() {
    // ...
  }
}

export default MyPlugin;
`,paraId:14,tocIndex:11},{value:"Specific demo code can be referred to: ",paraId:15,tocIndex:11},{value:"sample-hello",paraId:15,tocIndex:11},{value:"src/locale",paraId:12},{value:"Both frontend and backend, multi-language translation files are placed in the ",paraId:16,tocIndex:12},{value:"src/locale",paraId:16,tocIndex:12},{value:" directory, so the plugin doesn't need to load multi-language packages by itself.",paraId:16,tocIndex:12},{value:"The dependencies of the plugin are divided into its own dependencies and global dependencies. Global dependencies are directly used globally and will not be packaged into the plugin product, while its own dependencies will be packaged into the product. After the plug-in is built, the production environment is plug-and-play, and there is no need to install dependencies or build twice. Adjustments to plugin dependencies include:",paraId:17,tocIndex:13},{value:"Put ",paraId:18,tocIndex:13},{value:"@nocobase/*",paraId:18,tocIndex:13},{value:" related packages into ",paraId:18,tocIndex:13},{value:"peerDependencies",paraId:18,tocIndex:13},{value:" and specify the version number as ",paraId:18,tocIndex:13},{value:"0.x",paraId:18,tocIndex:13},{value:";",paraId:18,tocIndex:13},{value:"Place other dependencies in ",paraId:18,tocIndex:13},{value:"devDependencies",paraId:18,tocIndex:13},{value:", not ",paraId:18,tocIndex:13},{value:"dependencies",paraId:18,tocIndex:13},{value:", as the plugin will extract all the dependencies required by the production environment after packaging.",paraId:18,tocIndex:13},{value:`{
  "devDependencies": {
    "@formily/react": "2.x",
    "@formily/shared": "2.x",
    "ahooks": "3.x",
    "antd": "5.x",
    "dayjs": "1.x",
    "i18next": "22.x",
    "react": "18.x",
    "react-dom": "18.x",
    "react-i18next": "11.x"
  },
  "peerDependencies": {
    "@nocobase/actions": "0.x",
    "@nocobase/client": "0.x",
    "@nocobase/database": "0.x",
    "@nocobase/resourcer": "0.x",
    "@nocobase/server": "0.x",
    "@nocobase/test": "0.x",
    "@nocobase/utils": "0.x"
  }
}
`,paraId:19,tocIndex:13},{value:"lib",paraId:12},{value:"dist",paraId:12},{value:"dist directory structure",paraId:20,tocIndex:14},{value:`|- dist
  |- client       # Client-side, umd
    |- index.js
    |- index.d.ts
  |- server       # Server-side, cjs
    |- index.js
    |- index.d.ts
    |- others
  |- locale       # multilingual package
  |- node_modules # server dependencies
`,paraId:21,tocIndex:14},{value:"Other related adjustments include:",paraId:22,tocIndex:14},{value:"Adjustment of the main parameter of package.json",paraId:23,tocIndex:14},{value:`{
  - "main": "./lib/server/index.js",
  + "main": "./dist/server/index.js",
}
`,paraId:24,tocIndex:14},{value:"client.d.ts",paraId:25,tocIndex:14},{value:`export * from './dist/client';
export { default } from './dist/client';
`,paraId:26,tocIndex:14},{value:"client.js",paraId:27,tocIndex:14},{value:`module.exports = require('./dist/client/index.js');
`,paraId:28,tocIndex:14},{value:"server.d.ts",paraId:29,tocIndex:14},{value:`export * from './dist/server';
export { default } from './dist/server';
`,paraId:30,tocIndex:14},{value:"server.js",paraId:31,tocIndex:14},{value:`module.exports = require('./dist/server/index.js');
`,paraId:32,tocIndex:14}]},894119:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`
  `,paraId:0},{value:"Upgrading for Docker compose",paraId:1,tocIndex:4},{value:"Upgrading for create-nocobase-app",paraId:2,tocIndex:4},{value:"Upgrading for Git source code",paraId:3,tocIndex:4}]},571842:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This release enables plug-and-play plugins in production environments. You can now add plugins directly through the UI, and support downloading from the npm registry (which can be private), local uploads, and URL downloads.",paraId:0,tocIndex:0},{value:"The storage/plugins directory is used to upload plugins, and is organized as npm packages.",paraId:1,tocIndex:3},{value:`|- /storage/
  |- /plugins/
    |- /@nocobase/
      |- /plugin-hello1/
      |- /plugin-hello2/
    |- /@foo/
      |- /bar/
    |- /my-nocobase-plugin-hello/
`,paraId:2,tocIndex:3},{value:"Currently, only plugins under storage/plugins can be updated, as shown here:",paraId:3,tocIndex:4},{value:"Note: In order to facilitate maintenance and upgrading, and to avoid unavailability of the storage plugins due to upgrading, you can put the new plugin directly into storage/plugins and then perform the upgrade operation.",paraId:4,tocIndex:4},{value:"PLUGIN_PACKAGE_PREFIX environment variable is no longer provided.",paraId:5,tocIndex:6},{value:"Plugin names and package names are unified, old plugin names can still exist as aliases.",paraId:5,tocIndex:6},{value:`# Use packageName instead of pluginName, lookup locally, error if not found
pm add packageName

# Download from remote only if registry is provided, can also specify version
pm add packageName --registry=xx --auth-token=yy --version=zz

# You can also provide a local zip, add multiple times and replace it with the last one
pm add /a/plugin.zip

# Remote zip, replace it with the same name
pm add http://url/plugin.zip
`,paraId:6,tocIndex:7},{value:"Add ",paraId:7,tocIndex:8},{value:"/static/plugins/",paraId:7,tocIndex:8},{value:" location",paraId:7,tocIndex:8},{value:`server {
    location ^~ /static/plugins/ {
        proxy_pass http://127.0.0.1:13000/static/plugins/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
        proxy_read_timeout 600;
        send_timeout 600;
    }
}
`,paraId:8,tocIndex:8},{value:"More see full version of ",paraId:9,tocIndex:8},{value:"nocobase.conf",paraId:9,tocIndex:8},{value:"Develop the first plugin",paraId:10}]},782541:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u4EE5\u524D\u4F7F\u7528 ",paraId:0,tocIndex:3},{value:"SettingsCenterProvider",paraId:0,tocIndex:3},{value:" \u6CE8\u518C\u63D2\u4EF6\u914D\u7F6E\u9875\u9762\uFF0C\u73B0\u5728\u9700\u8981\u901A\u8FC7\u63D2\u4EF6\u6CE8\u518C\u3002",paraId:0,tocIndex:3},{value:"Previously, the plugin configuration page was registered using ",paraId:1,tocIndex:3},{value:"SettingsCenterProvider",paraId:1,tocIndex:3},{value:", and now it needs to be registered through the plugin.",paraId:1,tocIndex:3},{value:"Case 1: There is only one Tab on the original page",paraId:2,tocIndex:3},{value:"When there is only one Tab on the page, the new version of the Tab will be deleted, leaving only the title and icon of the page.",paraId:3,tocIndex:3},{value:`const HelloProvider = React.memo(props => {
  return (
    <SettingsCenterProvider
      settings={{
        hello: {
          title: "Hello",
          icon: "ApiOutlined",
          tabs: {
            tab1: {
              title: "Hello tab",
              component: HelloPluginSettingPage,
            },
          },
        },
      }}
    >
      {props.children}
    </SettingsCenterProvider>
  );
});
`,paraId:4,tocIndex:3},{value:"Now it needs to be changed to:",paraId:5,tocIndex:3},{value:`class HelloPlugin extends Plugin {
  async load() {
    this.app.pluginSettingsManager.add("hello", {
      title: "Hello",
      icon: "ApiOutlined",
      Component: HelloPluginSettingPage,
      // It is not necessary to pass this parameter if it is a new plugin
      aclSnippet: "pm.hello.tab1",
    });
  }
}
`,paraId:6,tocIndex:3},{value:"The ",paraId:7,tocIndex:3},{value:"Hello Tab",paraId:7,tocIndex:3},{value:" of ",paraId:7,tocIndex:3},{value:"tab1",paraId:7,tocIndex:3},{value:" is deleted.",paraId:7,tocIndex:3},{value:"aclSnippet",paraId:8,tocIndex:3},{value:" parameter ",paraId:8,tocIndex:3},{value:"pm.hello.tab1",paraId:8,tocIndex:3},{value:" corresponds to the key of the original ",paraId:8,tocIndex:3},{value:"settings",paraId:8,tocIndex:3},{value:" object:",paraId:8,tocIndex:3},{value:"Case 2: There are multiple Tabs on the original page",paraId:9},{value:"Now it needs to be changed to:",paraId:10},{value:"Get the routing information corresponding to the pluginSettingsManager",paraId:11},{value:"If there is a link jump inside the plugin configuration page, you need to change it accordingly, for example:",paraId:12},{value:'navigate("/admin/settings/hello/1").navigate("/admin/settings/hello/2");\n\n// This can be changed to\nconst basePath = app.pluginSettingsManager.getRoutePath("hello");\nnavigate(`${basePath}/1`);\nnavigate(`${basePath}/2`);\n',paraId:13},{value:"For more information, see the ",paraId:14},{value:"plugin settings manager",paraId:14},{value:".",paraId:14},{value:"For a complete changelog, please refer to ",paraId:15,tocIndex:4},{value:"Changelog",paraId:15,tocIndex:4},{value:".",paraId:15,tocIndex:4}]},862957:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The previous version of cache has poor usability (only support memory cache), v0.16 has been refactored, built-in memory and redis store, it also supports custom store. please refer to the ",paraId:0,tocIndex:1},{value:"API documentation",paraId:0,tocIndex:1},{value:" for the details of how to use.",paraId:0,tocIndex:1},{value:"Node v16 is no longer maintained, the minimum version has been changed to v18.",paraId:1,tocIndex:3},{value:`{
  "engines": {
    "node": ">=18"
  }
}
`,paraId:2,tocIndex:3},{value:"Deprecated: Use ",paraId:3,tocIndex:4},{value:"createCache",paraId:3,tocIndex:4},{value:" for cache creation.",paraId:3,tocIndex:4},{value:`import { createCache } from "@nocobase/cache";

const cache = createCache();
`,paraId:4,tocIndex:4},{value:"Cache now managed by ",paraId:5,tocIndex:4},{value:"CacheManager",paraId:5,tocIndex:4},{value:" and created with ",paraId:5,tocIndex:4},{value:"app.cacheManager",paraId:5,tocIndex:4},{value:".",paraId:5,tocIndex:4},{value:`const cache = await app.cacheManager.createCache({
  name: "memory", // unique name of cache
  store: "memory", // unique name of cache method
  // other config
  max: 2000,
  ttl: 60 * 1000,
});
`,paraId:6,tocIndex:4},{value:"Previous environment variables of cache required a JSON string for configuring.",paraId:7,tocIndex:5},{value:`CACHE_CONFIG={"storePackage":"cache-manager-fs-hash","ttl":86400,"max":1000}
`,paraId:8,tocIndex:5},{value:"New environment variables for configuring cache:",paraId:9,tocIndex:5},{value:`# Unique name of default cache method, memory or redis
CACHE_DEFAULT_STORE=memory
# Max number of items in memory cache
CACHE_MEMORY_MAX=2000
# Redis\uFF0Coptional
CACHE_REDIS_URL=redis://localhost:6379
`,paraId:10,tocIndex:5},{value:"refactor(cache): improve cache ",paraId:11,tocIndex:6},{value:"#3004",paraId:11,tocIndex:6},{value:"fix: local storage base url ",paraId:11,tocIndex:6},{value:"#3063",paraId:11,tocIndex:6},{value:"feat: show table definition ",paraId:11,tocIndex:6},{value:"#3061",paraId:11,tocIndex:6},{value:"feat: mariadb support ",paraId:11,tocIndex:6},{value:"#3052",paraId:11,tocIndex:6},{value:"fix(plugin-workflow): client minor fixes ",paraId:11,tocIndex:6},{value:"#3062",paraId:11,tocIndex:6},{value:"chore: view inference ",paraId:11,tocIndex:6},{value:"#3060",paraId:11,tocIndex:6},{value:"fix: sort by association collection ",paraId:11,tocIndex:6},{value:"#3058",paraId:11,tocIndex:6},{value:"feat: node >= 18 ",paraId:11,tocIndex:6},{value:"#3066",paraId:11,tocIndex:6}]},221075:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To reduce development learning costs and provide a better frontend development experience, we have phased a reconstruction of the frontend core over the past few months, including:",paraId:0,tocIndex:1},{value:"This time, v0.17 has refactored the UI Schema designer-related SchemaInitializer and SchemaSettings.",paraId:1,tocIndex:1},{value:"To address the difficulty for users to get started, we have also reorganized various sections of the documentation:",paraId:2,tocIndex:1},{value:"Plugin Development",paraId:3,tocIndex:1},{value:" (completely revised and published)",paraId:3,tocIndex:1},{value:"API Reference / Client",paraId:3,tocIndex:1},{value:" (new section, already published)",paraId:3,tocIndex:1},{value:"User Manual (completely revised, will be released in the next one to two weeks)",paraId:3,tocIndex:1},{value:"Plugin List (new section, including introductions, usage, and extension development instructions for all existing plugins, will be released in the next one to two weeks)",paraId:3,tocIndex:1},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerManager",paraId:4,tocIndex:3},{value:" for registering ",paraId:4,tocIndex:3},{value:"SchemaInitializer",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"useSchemaInitializerRender()",paraId:4,tocIndex:3},{value:" to replace the original ",paraId:4,tocIndex:3},{value:"useSchemaInitializer()",paraId:4,tocIndex:3},{value:" ",paraId:4,tocIndex:3},{value:"render()",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"useSchemaInitializerItem()",paraId:4,tocIndex:3},{value:" for obtaining the context of the current initialization item",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerItemGroup",paraId:4,tocIndex:3},{value:" component as the default component for ",paraId:4,tocIndex:3},{value:"type: 'itemGroup'",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerSubMenu",paraId:4,tocIndex:3},{value:" component as the default component for ",paraId:4,tocIndex:3},{value:"type: 'subMenu'",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerDivider",paraId:4,tocIndex:3},{value:" component as the default component for ",paraId:4,tocIndex:3},{value:"type: 'divider'",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerChildren",paraId:4,tocIndex:3},{value:" component for custom rendering of multiple list items",paraId:4,tocIndex:3},{value:"Added ",paraId:4,tocIndex:3},{value:"SchemaInitializerChild",paraId:4,tocIndex:3},{value:" component for custom rendering of a single list item",paraId:4,tocIndex:3},{value:"Changed the responsibilities of ",paraId:4,tocIndex:3},{value:"SchemaInitializerContext",paraId:4,tocIndex:3},{value:" for storing the context of the current initializer",paraId:4,tocIndex:3},{value:"Changed the responsibilities of ",paraId:4,tocIndex:3},{value:"useSchemaInitializer()",paraId:4,tocIndex:3},{value:" for obtaining the context of the current initializer",paraId:4,tocIndex:3},{value:"Changed ",paraId:4,tocIndex:3},{value:"function SchemaInitializer",paraId:4,tocIndex:3},{value:" to ",paraId:4,tocIndex:3},{value:"class SchemaInitializer",paraId:4,tocIndex:3},{value:" for defining initializer",paraId:4,tocIndex:3},{value:"Changed parameters of ",paraId:4,tocIndex:3},{value:"SchemaInitializer",paraId:4,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"name",paraId:5,tocIndex:3},{value:" required parameter for the value of ",paraId:5,tocIndex:3},{value:"x-initializer",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"Component",paraId:5,tocIndex:3},{value:" parameter for custom rendering of the button. Default is ",paraId:5,tocIndex:3},{value:"SchemaInitializerButton",paraId:5,tocIndex:3},{value:".",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"componentProps",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"style",paraId:5,tocIndex:3},{value:" for configuring the properties and style of ",paraId:5,tocIndex:3},{value:"Component",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"ItemsComponent",paraId:5,tocIndex:3},{value:" parameter for custom rendering of the list. Default is ",paraId:5,tocIndex:3},{value:"SchemaInitializerItems",paraId:5,tocIndex:3},{value:".",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"itemsComponentProps",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"itemsComponentStyle",paraId:5,tocIndex:3},{value:" for configuring the properties and style of ",paraId:5,tocIndex:3},{value:"ItemsComponent",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"popover",paraId:5,tocIndex:3},{value:" parameter for configuring whether to display the ",paraId:5,tocIndex:3},{value:"popover",paraId:5,tocIndex:3},{value:" effect",paraId:5,tocIndex:3},{value:"Added ",paraId:5,tocIndex:3},{value:"useInsert",paraId:5,tocIndex:3},{value:" parameter for when the ",paraId:5,tocIndex:3},{value:"insert",paraId:5,tocIndex:3},{value:" function needs to use hooks",paraId:5,tocIndex:3},{value:"Changed ",paraId:5,tocIndex:3},{value:"dropdown",paraId:5,tocIndex:3},{value:" parameter to ",paraId:5,tocIndex:3},{value:"popoverProps",paraId:5,tocIndex:3},{value:", using ",paraId:5,tocIndex:3},{value:"Popover",paraId:5,tocIndex:3},{value:" instead of ",paraId:5,tocIndex:3},{value:"Dropdown",paraId:5,tocIndex:3},{value:"Changed parameters of ",paraId:4,tocIndex:3},{value:"items",paraId:4,tocIndex:3},{value:" for ",paraId:4,tocIndex:3},{value:"SchemaInitializer",paraId:4,tocIndex:3},{value:"Added ",paraId:6,tocIndex:3},{value:"useChildren",paraId:6,tocIndex:3},{value:" function for dynamically controlling child items",paraId:6,tocIndex:3},{value:"Added ",paraId:6,tocIndex:3},{value:"componentProps",paraId:6,tocIndex:3},{value:" function for the properties of the component itself",paraId:6,tocIndex:3},{value:"Added ",paraId:6,tocIndex:3},{value:"useComponentProps",paraId:6,tocIndex:3},{value:" function for dynamically processing the props of the component",paraId:6,tocIndex:3},{value:"Changed ",paraId:6,tocIndex:3},{value:"key",paraId:6,tocIndex:3},{value:" parameter to ",paraId:6,tocIndex:3},{value:"name",paraId:6,tocIndex:3},{value:" for the unique identification of list items",paraId:6,tocIndex:3},{value:"Changed ",paraId:6,tocIndex:3},{value:"visible",paraId:6,tocIndex:3},{value:" parameter to ",paraId:6,tocIndex:3},{value:"useVisible",paraId:6,tocIndex:3},{value:" function for dynamically controlling whether to display",paraId:6,tocIndex:3},{value:"Changed ",paraId:6,tocIndex:3},{value:"component",paraId:6,tocIndex:3},{value:" parameter to ",paraId:6,tocIndex:3},{value:"Component",paraId:6,tocIndex:3},{value:" for rendering list items",paraId:6,tocIndex:3},{value:"Changed ",paraId:4,tocIndex:3},{value:"SchemaInitializer.Button",paraId:4,tocIndex:3},{value:" to ",paraId:4,tocIndex:3},{value:"SchemaInitializerButton",paraId:4,tocIndex:3},{value:", the default value for the Component parameter of SchemaInitializer",paraId:4,tocIndex:3},{value:"Changed ",paraId:4,tocIndex:3},{value:"SchemaInitializer.Item",paraId:4,tocIndex:3},{value:" to ",paraId:4,tocIndex:3},{value:"SchemaInitializerItem",paraId:4,tocIndex:3},{value:", with unchanged parameters",paraId:4,tocIndex:3},{value:"Changed ",paraId:4,tocIndex:3},{value:"SchemaInitializer.ActionModal",paraId:4,tocIndex:3},{value:" to ",paraId:4,tocIndex:3},{value:"SchemaInitializerActionModal",paraId:4,tocIndex:3},{value:", with unchanged parameters",paraId:4,tocIndex:3},{value:"Changed ",paraId:4,tocIndex:3},{value:"SchemaInitializer.SwitchItem",paraId:4,tocIndex:3},{value:" to ",paraId:4,tocIndex:3},{value:"SchemaInitializer.Switch",paraId:4,tocIndex:3},{value:", with unchanged parameters",paraId:4,tocIndex:3},{value:"Deleted ",paraId:4,tocIndex:3},{value:"SchemaInitializerProvider",paraId:4,tocIndex:3},{value:", replaced by ",paraId:4,tocIndex:3},{value:"SchemaInitializerManager",paraId:4,tocIndex:3},{value:"Deleted ",paraId:4,tocIndex:3},{value:"SchemaInitializer.itemWrap",paraId:4,tocIndex:3},{value:", no longer need to wrap the ",paraId:4,tocIndex:3},{value:"item",paraId:4,tocIndex:3},{value:" component",paraId:4,tocIndex:3},{value:"Added ",paraId:7,tocIndex:4},{value:"SchemaSettingsManager",paraId:7,tocIndex:4},{value:" for registering ",paraId:7,tocIndex:4},{value:"SchemaSettings",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"useSchemaSettingsItem()",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"useSchemaSettingsRender()",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"x-settings",paraId:7,tocIndex:4},{value:" parameter for configuring schema settings",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"x-toolbar",paraId:7,tocIndex:4},{value:" parameter for configuring schema toolbar",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"SchemaToolbar",paraId:7,tocIndex:4},{value:" component for customizing schema toolbar",paraId:7,tocIndex:4},{value:"Added ",paraId:7,tocIndex:4},{value:"useSchemaToolbarRender()",paraId:7,tocIndex:4},{value:" to replace the original ",paraId:7,tocIndex:4},{value:"useDesigner()",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"function SchemaSettings",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"class SchemaSettings",paraId:7,tocIndex:4},{value:" for defining settings",paraId:7,tocIndex:4},{value:"Changed the original ",paraId:7,tocIndex:4},{value:"SchemaSettings",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsDropdown",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.Item",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsItem",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.ItemGroup",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsItemGroup",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.SubMenu",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsSubMenu",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.Divider",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsDivider",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.Remove",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsRemove",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.SelectItem",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsSelectItem",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.CascaderItem",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsCascaderItem",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.SwitchItem",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsSwitchItem",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.ModalItem",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsModalItem",paraId:7,tocIndex:4},{value:"Changed ",paraId:7,tocIndex:4},{value:"SchemaSettings.ActionModalItem",paraId:7,tocIndex:4},{value:" to ",paraId:7,tocIndex:4},{value:"SchemaSettingsActionModalItem",paraId:7,tocIndex:4},{value:"Deleted ",paraId:7,tocIndex:4},{value:"x-designer",paraId:7,tocIndex:4},{value:" parameter, deprecated, will be removed in the future, use ",paraId:7,tocIndex:4},{value:"x-toolbar",paraId:7,tocIndex:4},{value:" instead",paraId:7,tocIndex:4},{value:"Deleted ",paraId:7,tocIndex:4},{value:"useDesigner()",paraId:7,tocIndex:4},{value:", deprecated, will be removed in the future, use ",paraId:7,tocIndex:4},{value:"useSchemaToolbarRender()",paraId:7,tocIndex:4},{value:" instead",paraId:7,tocIndex:4},{value:"For more details, see ",paraId:8,tocIndex:4},{value:"Incompatible Changes in NocoBase 0.17",paraId:8,tocIndex:4}]},812872:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"To enhance the robustness of NocoBase, we have been supplementing E2E (end-to-end) testing throughout the fourth quarter. Concurrently, we have also been refining the entire testing system.",paraId:0,tocIndex:1},{value:"NocoBase test kit, include:",paraId:1,tocIndex:2},{value:"@nocobase/test/server",paraId:2,tocIndex:2},{value:` server-side testing
`,paraId:2,tocIndex:2},{value:"Integrated ",paraId:3,tocIndex:2},{value:"supertest",paraId:3,tocIndex:2},{value:" for interface testing.",paraId:3,tocIndex:2},{value:"mockDatabase",paraId:3,tocIndex:2},{value:" and ",paraId:3,tocIndex:2},{value:"mockServer",paraId:3,tocIndex:2},{value:" are built in.",paraId:3,tocIndex:2},{value:"@nocobase/test/client",paraId:2,tocIndex:2},{value:` Client-side testing
`,paraId:2,tocIndex:2},{value:"@testing-library/react",paraId:4,tocIndex:2},{value:" and ",paraId:4,tocIndex:2},{value:"@testing-library/user-event",paraId:4,tocIndex:2},{value:" are integrated.",paraId:4,tocIndex:2},{value:"@nocobase/test/e2e",paraId:2,tocIndex:2},{value:` E2E testing
`,paraId:2,tocIndex:2},{value:"Integration of ",paraId:5,tocIndex:2},{value:"@playwright/test",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:"Built-in common mock methods",paraId:5,tocIndex:2},{value:"Server-side testing, using the Vitest framework",paraId:6,tocIndex:3},{value:"Client-side testing, using the Vitest framework",paraId:6,tocIndex:3},{value:"E2E testing, using the Playwright framework",paraId:6,tocIndex:3},{value:`import { mockDatabase } from '@nocobase/test/server';

describe('my db suite', () => {
  let db;

  beforeEach(async () => {
    db = mockDatabase();
    db.collection({
      name: 'posts',
      fields: [
        {
          type: 'string',
          name: 'title',
        },
      ],
    });
    await db.sync();
  });

  afterEach(async () => {
    await db.close();
  });

  test('my case', async () => {
    const repository = db.getRepository('posts');
    const post = await repository.create({
      values: {
        title: 'hello',
      },
    });

    expect(post.get('title')).toEqual('hello');
  });
});
`,paraId:7,tocIndex:5},{value:`import { render, screen, userEvent, waitFor } from '@nocobase/test/client';

it('should display the value of user input', async () => {
  const { container } = render(<App1 />);
  const input = container.querySelector('input');
  await userEvent.type(input, 'Hello World');
  await waitFor(() => {
    expect(screen.getByText('Hello World')).toBeInTheDocument();
  });
});
`,paraId:8,tocIndex:6},{value:`import { test } from '@nocobase/test/e2e';

test('sign in', async ({ page }) => {
  await page.goto('/');
  await page.getByPlaceholder('Username/Email').click();
  await page.getByPlaceholder('Username/Email').fill('admin@nocobase.com');
  await page.getByPlaceholder('Password').click();
  await page.getByPlaceholder('Password').fill('admin123');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await expect(
      page.getByTestId('user-center-button').getByText('Super Admin')
    ).toBeVisible();
});
`,paraId:9,tocIndex:7},{value:`# Run all tests with two parallel Vitest processes for both frontend and backend.
yarn test

# Run client test cases.
yarn test --client
# equal to
yarn cross-env TEST_ENV=client-side vitest

# Run server test cases.
yarn test --server
# equal to
yarn cross-env TEST_ENV=server-side vitest

# Specify a directory or file.
yarn test your/path/src/__tests__/test-file.test.ts
# Client-side files must include /client/ 
yarn test your/path/client/src/__tests__/test-file.test.ts
`,paraId:10,tocIndex:8},{value:"\u{1F4E2} Difference with running vitest directly",paraId:11,tocIndex:8},{value:"When you specify the path, you can automatically recognize the front-end and back-end, the front-end must include ",paraId:12,tocIndex:8},{value:"/client/",paraId:12,tocIndex:8},{value:".",paraId:12,tocIndex:8},{value:"Backend test is ",paraId:12,tocIndex:8},{value:"-single-thread",paraId:12,tocIndex:8},{value:" by default, if you want to turn it off, you can add ",paraId:12,tocIndex:8},{value:"-single-thread=false",paraId:12,tocIndex:8},{value:".",paraId:12,tocIndex:8},{value:"Default is ",paraId:12,tocIndex:8},{value:"--run",paraId:12,tocIndex:8},{value:", if you need to listen, add ",paraId:12,tocIndex:8},{value:"--watch",paraId:12,tocIndex:8},{value:".",paraId:12,tocIndex:8},{value:`# Install dependencies
yarn e2e install-deps

# Run tests
yarn e2e test

# UI mode
yarn e2e test --ui

# Specify the application's URL
yarn e2e test --url=http://localhost:20000

# Start an app. It reinstalls every time.
yarn e2e start-app
`,paraId:13,tocIndex:9},{value:"Auth extension development guide ",paraId:14,tocIndex:11},{value:"https://docs.nocobase.com/plugins/auth/dev/guide",paraId:14,tocIndex:11},{value:"Breaking changes ",paraId:14,tocIndex:11},{value:"https://docs.nocobase.com/breaking-changes/v0-18-0-alpha-1",paraId:14,tocIndex:11},{value:"In order to refine the kernel and make it more streamlined, certain functionalities have undergone a modularized separation. Recently, the plugins that have undergone this modularization include:",paraId:15,tocIndex:12},{value:"Plugin name",paraId:16,tocIndex:12},{value:"Package name",paraId:16,tocIndex:12},{value:"Action - Bulk edit",paraId:16,tocIndex:12},{value:"@nocobase/plugin-action-bulk-edit",paraId:16,tocIndex:12},{value:"Action - Bulk update",paraId:16,tocIndex:12},{value:"@nocobase/plugin-action-bulk-update",paraId:16,tocIndex:12},{value:"Action - Duplicate",paraId:16,tocIndex:12},{value:"@nocobase/plugin-action-duplicate",paraId:16,tocIndex:12},{value:"Kanban",paraId:16,tocIndex:12},{value:"@nocobase/plugin-kanban",paraId:16,tocIndex:12},{value:"Gantt",paraId:16,tocIndex:12},{value:"@nocobase/plugin-gantt",paraId:16,tocIndex:12},{value:"Workflow - Aggregate",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-aggregate",paraId:16,tocIndex:12},{value:"Workflow - Approval",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-approval",paraId:16,tocIndex:12},{value:"Workflow - Delay",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-delay",paraId:16,tocIndex:12},{value:"Workflow - Dynamic calculation",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-dynamic-calculation",paraId:16,tocIndex:12},{value:"Workflow - Form trigger",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-form-trigger",paraId:16,tocIndex:12},{value:"Workflow - JSON query",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-json-query",paraId:16,tocIndex:12},{value:"Workflow - Loop",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-loop",paraId:16,tocIndex:12},{value:"Workflow - Manual",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-manual",paraId:16,tocIndex:12},{value:"Workflow - Parallel",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-parallel",paraId:16,tocIndex:12},{value:"Workflow - Request",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-request",paraId:16,tocIndex:12},{value:"Workflow - SQL",paraId:16,tocIndex:12},{value:"@nocobase/plugin-workflow-sql",paraId:16,tocIndex:12},{value:"See ",paraId:17,tocIndex:12},{value:"complete list of plugins",paraId:17,tocIndex:12},{value:" for details. The document is currently under construction, with some content possibly missing or awaiting translation. You can follow ",paraId:17,tocIndex:12},{value:"nocobase/docs",paraId:17,tocIndex:12},{value:" for updates.",paraId:17,tocIndex:12}]},918511:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Development documentation: ",paraId:0,tocIndex:2},{value:"https://docs.nocobase.com/development/server/telemetry",paraId:0,tocIndex:2},{value:"Kernel API: ",paraId:0,tocIndex:2},{value:"https://docs.nocobase.com/api/telemetry/telemetry",paraId:0,tocIndex:2},{value:"Prometheus plugin: ",paraId:0,tocIndex:2},{value:"https://docs.nocobase.com/plugins/telemetry-prometheus",paraId:0,tocIndex:2},{value:"Plugin documentation: ",paraId:1,tocIndex:3},{value:"https://docs.nocobase.com/plugins/backup-restore",paraId:1,tocIndex:3},{value:"For NocoBase 0.19 and above, plugin customized commands must be placed in the plugin's ",paraId:2,tocIndex:5},{value:"src/server/commands/*.ts",paraId:2,tocIndex:5},{value:" directory with the following contents:",paraId:2,tocIndex:5},{value:`export default function(app) {
  app.command('custom1').action();
}
`,paraId:3,tocIndex:5},{value:"The execution flow of the command line:",paraId:4,tocIndex:5},{value:"Special configuration of Command",paraId:5,tocIndex:5},{value:"ipc()",paraId:6,tocIndex:5},{value:" When the app is running, the command line sends commands via ipc to operate the running app instance, when ipc() is not configured, a new app instance will be created and then the operation will be executed (it will not interfere with the running app instance)",paraId:6,tocIndex:5},{value:"auth()",paraId:6,tocIndex:5},{value:" performs database verification, if the database configuration is incorrect, this command will not be executed.",paraId:6,tocIndex:5},{value:"preload()",paraId:6,tocIndex:5},{value:" whether to preload the application configuration, that is, execute app.load()",paraId:6,tocIndex:5},{value:"This can be configured according to the actual usage of the command, examples are as follows:",paraId:7,tocIndex:5},{value:`app.command('a').ipc().action()
app.command('a').auth().action()
app.command('a').preload().action()
`,paraId:8,tocIndex:5},{value:"The upgrade migrations are categorized into beforeLoad, afterSync, and afterLoad:",paraId:9,tocIndex:8},{value:"beforeLoad: Executed before the loading of each module, divided into three stages:",paraId:10,tocIndex:8},{value:"Before loading kernel modules",paraId:11,tocIndex:8},{value:"Before loading preset plugins",paraId:11,tocIndex:8},{value:"Before loading other plugins",paraId:11,tocIndex:8},{value:"afterSync: Executed after the synchronization of data table configurations with the database, divided into three stages:",paraId:12,tocIndex:8},{value:"After synchronizing kernel tables with the database",paraId:13,tocIndex:8},{value:"After synchronizing preset plugin tables with the database",paraId:13,tocIndex:8},{value:"After synchronizing other plugin tables with the database",paraId:13,tocIndex:8},{value:"afterLoad: Executed only after the complete loading of the application.",paraId:14,tocIndex:8},{value:`export default class extends Migration {
  // When to perform the migration
  on = 'beforeLoad';
  // Execute only when the following app version number is met.
  appVersion = '<=0.13.0-alpha.5';
  // Execute only when the following plugin version number is met.
  pluginVersion = '<=0.13.0-alpha.5';
  // Upgrade script.
  async up() {}
}
`,paraId:15,tocIndex:8},{value:"Creates a migration file",paraId:16,tocIndex:9},{value:`yarn nocobase create-migration -h

Usage: nocobase create-migration [options] <name>

Options:
  --pkg <pkg>  package name
  --on [on]    Options include beforeLoad, afterSync and afterLoad
  -h, --help   display help for command
`,paraId:17,tocIndex:9},{value:"Example",paraId:18,tocIndex:9},{value:`$ yarn nocobase create-migration update-ui --pkg=@nocobase/plugin-client

2024-01-07 17:33:13 [info ] add app main into supervisor     
2024-01-07 17:33:13 [info ] migration file in /nocobase/packages/plugins/@nocobase/plugin-client/src/server/migrations/20240107173313-update-ui.ts
\u2728  Done in 5.02s.
`,paraId:19,tocIndex:9},{value:"A migration file will be generated in ",paraId:20,tocIndex:9},{value:"src/server/migrations",paraId:20,tocIndex:9},{value:" of the plugin package ",paraId:20,tocIndex:9},{value:"@nocobase/plugin-client",paraId:20,tocIndex:9},{value:" as ",paraId:20,tocIndex:9},{value:"20240107173313-update-ui.ts",paraId:20,tocIndex:9},{value:" with the following initial contents:",paraId:20,tocIndex:9},{value:`import { Migration } from '@nocobase/server';

export default class extends Migration {
  on = 'afterLoad'; // 'beforeLoad' | 'afterSync' | 'afterLoad'
  appVersion = '<0.18.0-alpha.10';

  async up() {
    // coding
  }
}
`,paraId:21,tocIndex:9},{value:`|- /plugin-sample-hello
  |- /dist             # Directory for compiled plugin
  |- /src              # Source code for the plugin
    |- /client
      |- plugin.ts
      |- index.ts      # Client-side entry point
    |- /locale         # Conventional directory for shared multilingual files between frontend and backend
    |- /swagger        # Conventional directory for Swagger documentation
    |- /server
      |- collections   # Conventional directory for plugin's data table configurations
      |- commands      # Conventional directory for custom commands
      |- migrations    # Conventional directory for migration files
      |- plugin.ts     # Plugin class
      |- index.ts      # Server-side entry point
    |- index.ts
  |- .npmignore
  |- client.d.ts
  |- client.js
  |- package.json
  |- server.d.ts
  |- server.js
`,paraId:22,tocIndex:10},{value:"Testing process optimization",paraId:23,tocIndex:10},{value:"Provided more user-friendly ",paraId:24,tocIndex:10},{value:"createMockServer()",paraId:24,tocIndex:10},{value:" and ",paraId:24,tocIndex:10},{value:"startMockServer()",paraId:24,tocIndex:10},{value:" methods for writing test cases:",paraId:24,tocIndex:10},{value:"createMockServer()",paraId:25,tocIndex:10},{value:" Quickly creates and starts an application.",paraId:25,tocIndex:10},{value:"startMockServer()",paraId:25,tocIndex:10},{value:" Quickly starts an application (without reinstalling).",paraId:25,tocIndex:10},{value:`import { createMockServer } from '@nocobase/server';

describe('test example', () => {
  let app: MockServer;

  beforeEach(async () => {
    app = await createMockServer({
      plugins: ['nocobase'],
    });
  });

  afterEach(async () => {
    await app.destroy();
  });

  test('case1', async () => {
    // coding...
  });
});
`,paraId:26,tocIndex:10},{value:"Example 1: Collections loaded by importCollections, the code is deleted directly, and the collections configuration file must be placed in the ",paraId:27,tocIndex:12},{value:"src/server/collections",paraId:27,tocIndex:12},{value:" directory.",paraId:27,tocIndex:12},{value:`export class AuthPlugin extends Plugin {
  async load() {
-   await this.importCollections(resolve(__dirname, 'collections'));
  }
}
`,paraId:28,tocIndex:12},{value:"Example 2: Collections loaded through this.db.import, the code is directly deleted, the collections configuration file must be placed in the ",paraId:29,tocIndex:12},{value:"src/server/collections",paraId:29,tocIndex:12},{value:" directory",paraId:29,tocIndex:12},{value:`export class AuthPlugin extends Plugin {
  async load() {
-   await this.db.import({
-     directory: resolve(__dirname, 'collections')
-   });
  }
}
`,paraId:30,tocIndex:12},{value:"Example 3: A collection defined by db.collection() is recommended to be placed in the ",paraId:31,tocIndex:12},{value:"src/server/collections",paraId:31,tocIndex:12},{value:" directory.",paraId:31,tocIndex:12},{value:`export class AuthPlugin extends Plugin {
  async load() {
-   this.db.collection({
-     name: 'examples',
-   });
  }
}
`,paraId:32,tocIndex:12},{value:"Add a new ",paraId:33,tocIndex:12},{value:"src/server/collections/examples.ts",paraId:33,tocIndex:12},{value:" file with the following contents:",paraId:33,tocIndex:12},{value:`import { defineCollection } from '@nocobase/database';

export default defineCollection({
  name: 'examples',
});
`,paraId:34,tocIndex:12},{value:"Example 4: Remove db.addMigrations() and place the migration file in the ",paraId:35,tocIndex:12},{value:"src/server/migrations",paraId:35,tocIndex:12},{value:" directory.",paraId:35,tocIndex:12},{value:`export class AuthPlugin extends Plugin {
  async load() {
-   this.db.addMigrations({
-     namespace: 'auth',
-     directory: resolve(__dirname, 'migrations'),
-     context: {
-       plugin: this,
-     },
-   });
  }
}
`,paraId:36,tocIndex:12},{value:"Example 5: Customizing the command line",paraId:37,tocIndex:12},{value:`export class MyPlugin extends Plugin {
  load() {
-   this.app
-      .command('echo')
-      .option('-v, --version');
-      .action(async ([options]) => {
-        console.log('Hello World!');
-        if (options.version) {
-          console.log('Current version:', app.getVersion());
-        }
-      });
-  }
}
`,paraId:38,tocIndex:12},{value:"Add a new ",paraId:39,tocIndex:12},{value:"src/server/collections/echo.ts",paraId:39,tocIndex:12},{value:" file with the following contents:",paraId:39,tocIndex:12},{value:`export default function(app) {
  app
    .command('echo')
    .option('-v, --version');
    .action(async ([options]) => {
      console.log('Hello World!');
      if (options.version) {
        console.log('Current version:', await app.version.get());
      }
    });
}
`,paraId:40,tocIndex:12}]},954438:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:'Added the "',paraId:0,tocIndex:2},{value:"Data Source Manager",paraId:1,tocIndex:2},{value:'" plugin, used to manage all collections and fields for data sources. The Data Source Manager plugin provides a centralized interface for managing data sources and does not provide the capability to access data sources. It needs to be used in conjunction with various data source plugins. Currently supported data sources include:',paraId:0,tocIndex:2},{value:"Main Database",paraId:2,tocIndex:2},{value:": NocoBase main database, supporting relational databases such as MySQL, PostgreSQL, SQLite, etc.",paraId:3,tocIndex:2},{value:"External MySQL Data Source",paraId:4,tocIndex:2},{value:": Access an existing MySQL database as a data source.",paraId:3,tocIndex:2},{value:"External MariaDB Data Source",paraId:5,tocIndex:2},{value:": Access an existing MariaDB database as a data source.",paraId:3,tocIndex:2},{value:"External PostgreSQL Data Source",paraId:6,tocIndex:2},{value:": Access an existing PostgreSQL database as a data source.",paraId:3,tocIndex:2},{value:"In addition, more data sources can be extended, which can be common types of databases or platforms that provide APIs (SDKs).",paraId:7,tocIndex:2},{value:'Moved the original "Collection Manager" to "Data Source > Main Database > Configuration".',paraId:8,tocIndex:3},{value:"When creating a collection, you can choose not to create an ID field.",paraId:9,tocIndex:4},{value:"Integer fields can be used as primary keys.",paraId:10,tocIndex:4},{value:"Single-line text fields can also be used as primary keys.",paraId:11,tocIndex:4},{value:"Relationship constraints support selecting other fields with Unique indexes set as non-primary key fields.",paraId:12,tocIndex:4},{value:'Added a "Sort" type field. Sorting fields are no longer automatically generated when creating collections and need to be manually created.',paraId:13,tocIndex:5},{value:"When selecting a field as a group, grouping will be done before sorting.",paraId:14,tocIndex:5},{value:"When enabling drag-and-drop sorting in table block, you need to select the sorting field.",paraId:15,tocIndex:5},{value:"When creating a Kanban block, you need to select the sorting field.",paraId:16,tocIndex:5},{value:"Added user management interface and unified user and role management under one menu.",paraId:17,tocIndex:6},{value:"Adjusted the role management interface to facilitate the management of user-associated roles, permissions, departments, etc.",paraId:18,tocIndex:6},{value:'Moved the original "Action Permissions" to the "Data Source" tab.',paraId:19,tocIndex:6},{value:"Organize users by departments, set hierarchical relationships, link roles to control permissions, and use departments as variables in workflows and expressions.",paraId:20,tocIndex:7},{value:`The approval plugin provides dedicated workflow types (triggers) "Initiate Approval" and "Approval" nodes for this process. Combined with NocoBase's unique custom data tables and custom blocks, various approval scenarios can be quickly and flexibly created and managed.`,paraId:21,tocIndex:8},{value:"Approval configuration",paraId:22,tocIndex:8},{value:"Approval process",paraId:23,tocIndex:8},{value:"Further details can be found in the documentation: ",paraId:24,tocIndex:8},{value:"Workflow Approval",paraId:25,tocIndex:8},{value:"This node immediately ends the current execution of the workflow when executed and ends with the status configured in the node. It is typically used for specific logic flow control, to exit the current workflow after meeting certain logical conditions, without continuing with subsequent processing. It can be likened to the return command in programming languages, used to exit the currently executing function.",paraId:26,tocIndex:9},{value:"Further details can be found in the documentation: ",paraId:27,tocIndex:9},{value:"End Process Node",paraId:28,tocIndex:9},{value:"Variables can be declared in the workflow or assigned values to previously declared variables, typically used to store temporary data in the workflow. It is suitable for scenarios where calculation results need to be stored for later use outside the branch (such as loops, parallelism, etc.).",paraId:29,tocIndex:10},{value:"Further details can be found in the documentation: ",paraId:30,tocIndex:10},{value:"Custom Variable Node",paraId:31,tocIndex:10},{value:'The request interceptor plugin provides a mechanism to intercept operations on forms, where the interception event is triggered after the corresponding form operation is submitted and before it is processed. If a "End Process" node is executed in the subsequent process flow after triggering, or if other nodes fail to execute (errors or other incomplete executions), the form operation will be intercepted, otherwise the scheduled operation will be executed normally. It can be used for business validation or logic checks to approve or intercept client-submitted create, update, and delete operations.',paraId:32,tocIndex:11},{value:"Further details can be found in the documentation: ",paraId:33,tocIndex:11},{value:"Request Interceptor",paraId:34,tocIndex:11},{value:"The response message node is used to provide feedback to the client with custom messages in specific types of workflows (such as request interception and form events).",paraId:35,tocIndex:12},{value:"Node configuration",paraId:36,tocIndex:12},{value:"Prompt message",paraId:37,tocIndex:12},{value:"Further details can be found in the documentation: ",paraId:38,tocIndex:12},{value:"Response Message Node",paraId:39,tocIndex:12},{value:"In this kernel change, some new version APIs conflict with the old version names. These conflicting old version APIs will be retained in this version but will be uniformly suffixed with ",paraId:40,tocIndex:14},{value:"_deprecated",paraId:40,tocIndex:14},{value:".",paraId:40,tocIndex:14},{value:"Original API",paraId:41,tocIndex:14},{value:"Deprecated API",paraId:41,tocIndex:14},{value:"New API",paraId:41,tocIndex:14},{value:"CollectionProvider",paraId:41,tocIndex:14},{value:"CollectionProvider_deprecated",paraId:41,tocIndex:14},{value:"CollectionProvider",paraId:41,tocIndex:14},{value:"useCollection",paraId:41,tocIndex:14},{value:"useCollection_deprecated",paraId:41,tocIndex:14},{value:"useCollection",paraId:41,tocIndex:14},{value:"useCollectionField",paraId:41,tocIndex:14},{value:"useCollectionField_deprecated",paraId:41,tocIndex:14},{value:"useCollectionField",paraId:41,tocIndex:14},{value:"useCollectionManager",paraId:41,tocIndex:14},{value:"useCollectionManager_deprecated",paraId:41,tocIndex:14},{value:"useCollectionManager",paraId:41,tocIndex:14},{value:"useContext(CollectionManagerContext)",paraId:41,tocIndex:14},{value:"useCollectionManager_deprecated",paraId:41,tocIndex:14},{value:"useCollectionManager",paraId:41,tocIndex:14},{value:"If you are using the above related APIs, you have two ways to change:",paraId:42,tocIndex:14},{value:"Simple replacement: Replace the original API with the one suffixed with ",paraId:43,tocIndex:14},{value:"_deprecated",paraId:43,tocIndex:14},{value:", for example, replace ",paraId:43,tocIndex:14},{value:"useCollection()",paraId:43,tocIndex:14},{value:" with ",paraId:43,tocIndex:14},{value:"useRecord_deprecated()",paraId:43,tocIndex:14},{value:".",paraId:43,tocIndex:14},{value:"Use the new API according to the new documentation: Although the names of the new APIs are the same as the old APIs, there are differences in parameters and return values. You need to refer to the new documentation",paraId:43,tocIndex:14},{value:"to adjust the corresponding code.",paraId:44,tocIndex:14},{value:"registerTemplate()",paraId:45,tocIndex:15},{value:" changed to ",paraId:45,tocIndex:15},{value:"app.dataSourceManager.addCollectionTemplates()",paraId:45,tocIndex:15},{value:"registerField()",paraId:45,tocIndex:15},{value:" changed to ",paraId:45,tocIndex:15},{value:"app.dataSourceManager.addFieldInterfaces()",paraId:45,tocIndex:15},{value:"registerGroup()",paraId:45,tocIndex:15},{value:" changed to ",paraId:45,tocIndex:15},{value:"app.dataSourceManager.addFieldInterfaceGroups()",paraId:45,tocIndex:15},{value:"useContext(CollectionManagerContext)",paraId:45,tocIndex:15},{value:" changed to ",paraId:45,tocIndex:15},{value:"useCollectionManager_deprecated()",paraId:45,tocIndex:15},{value:"Extend collections using ",paraId:45,tocIndex:15},{value:"ExtendCollectionsProvider",paraId:45,tocIndex:15},{value:"RecordProvider",paraId:45,tocIndex:15},{value:" requires explicit passing of the parent parameter when needed",paraId:45,tocIndex:15},{value:"Previously defined as an object, it now needs to be changed to a class. For example:",paraId:46,tocIndex:18},{value:"Before:",paraId:47,tocIndex:18},{value:`import { ICollectionTemplate } from '@nocobase/client';

const calendar: ICollectionTemplate = {
  name: 'calendar',
  title: 'Calendar collection',
  order: 2,
  color: 'orange',
  // ...
}
`,paraId:48,tocIndex:18},{value:"Now:",paraId:49,tocIndex:18},{value:`import { CollectionTemplate } from '@nocobase/client';

class CalendarCollectionTemplate extends CollectionTemplate {
  name = 'calendar';
  title = 'Calendar collection';
  order = 2;
  color = 'orange';
}
`,paraId:50,tocIndex:18},{value:"The original object properties become class members.",paraId:51,tocIndex:18},{value:"Previously registered through ",paraId:52,tocIndex:19},{value:"registerTemplate",paraId:52,tocIndex:19},{value:", now needs to be registered through the plugin's ",paraId:52,tocIndex:19},{value:"dataSourceManager.addCollectionTemplates",paraId:52,tocIndex:19},{value:". For example:",paraId:52,tocIndex:19},{value:"Before:",paraId:53,tocIndex:19},{value:`import { registerTemplate } from '@nocobase/client';
import { calendar } from './calendar'

registerTemplate('calendar', calendar);
`,paraId:54,tocIndex:19},{value:"Now:",paraId:55,tocIndex:19},{value:`import { Plugin } from '@nocobase/client';
import { CalendarCollectionTemplate } from './calendar'

export class CalendarPluginClient extends Plugin {
  async load() {
    this.app.dataSourceManager.addCollectionTemplates([CalendarCollectionTemplate]);
  }
}
`,paraId:56,tocIndex:19},{value:"Previously defined as an object, it now needs to be changed to a class. For example:",paraId:57,tocIndex:21},{value:"Before:",paraId:58,tocIndex:21},{value:`import { IField } from '@nocobase/client';

const attachment: IField = {
  name: 'attachment',
  type: 'object',
  group: 'media',
  title: 'Attachment',
  // ...
}
`,paraId:59,tocIndex:21},{value:"Now:",paraId:60,tocIndex:21},{value:`import { CollectionFieldInterface } from '@nocobase/client';

class AttachmentFieldInterface extends CollectionFieldInterface {
  name = 'attachment';
  type = 'object';
  group = 'media';
  title = 'Attachment';
  // ...
}
`,paraId:61,tocIndex:21},{value:"The original object properties become class members.",paraId:62,tocIndex:21},{value:"Previously registered through ",paraId:63,tocIndex:22},{value:"registerField",paraId:63,tocIndex:22},{value:", now needs to be registered through the plugin's ",paraId:63,tocIndex:22},{value:"dataSourceManager.addFieldInterfaces",paraId:63,tocIndex:22},{value:" and does not require passing ",paraId:63,tocIndex:22},{value:"CollectionManagerProvider",paraId:63,tocIndex:22},{value:" again. For example:",paraId:63,tocIndex:22},{value:"Before:",paraId:64,tocIndex:22},{value:`import { registerField } from '@nocobase/client';
import { attachment } from './attachment'

- registerField(attachment.group, 'attachment', attachment);

export const FileManagerProvider: FC = (props) => {
  return (
-   <CollectionManagerProvider interfaces={{ attachment }}>
      <SchemaComponentOptions scope={hooks} components={{ UploadActionInitializer }}>
        {props.children}
      </SchemaComponentOptions>
-   </CollectionManagerProvider>
  );
};
`,paraId:65,tocIndex:22},{value:"Now:",paraId:66,tocIndex:22},{value:`import { Plugin } from '@nocobase/client';
import { AttachmentFieldInterface } from './attachment'

export class FilPlugin extends Plugin {
  async load() {
    this.app.dataSourceManager.addFieldInterfaces([AttachmentFieldInterface]);
  }
}
`,paraId:67,tocIndex:22},{value:"Previously registered through ",paraId:68,tocIndex:23},{value:"registerGroup",paraId:68,tocIndex:23},{value:", now needs to be registered through the plugin's ",paraId:68,tocIndex:23},{value:"dataSourceManager.addFieldInterfaceGroups",paraId:68,tocIndex:23},{value:". For example:",paraId:68,tocIndex:23},{value:`- import { registerGroup, Plugin } from '@nocobase/client';
+ import { Plugin } from '@nocobase/client';

- registerGroup('map', {
-        label: 'Map-based geometry',
-        order: 10
- })

export class MapPlugin extends Plugin {
  async load() {
+    this.app.dataSourceManager.addFieldInterfaceGroups({
+      map: {
+        label: generateNTemplate('Map-based geometry'),
+        order: 51,
+      },
+    });
  }
}
`,paraId:69,tocIndex:23},{value:"useContext(CollectionManagerContext)",paraId:70},{value:"useCollectionManager_deprecated()",paraId:70},{value:`- const ctx = useContext(CollectionManagerContext);
+ const ctx = useCollectionManager_deprecated();
`,paraId:71,tocIndex:24},{value:"ExtendCollectionsProvider",paraId:70},{value:"CollectionManagerProvider",paraId:70},{value:`const Demo = () => {
-  <CollectionManagerProvider collections={[apiKeysCollection]}>
+  <ExtendCollectionsProvider collections={[apiKeysCollection]}>
...
-  </CollectionManagerProvider>
+  </ExtendCollectionsProvider>
}
`,paraId:72,tocIndex:25},{value:"Previously, when the parent property was not passed, the value of the last RecordProvider was automatically retrieved as the parent. Now, the parent needs to be explicitly passed, and when the parent is not passed, the value of the parent will be undefined.",paraId:73,tocIndex:26},{value:`- <RecordProvider record={recordData}>
+ <RecordProvider record={recordData} parent={parentRecordData}>
...
</RecordProvider>
`,paraId:74,tocIndex:26},{value:"If there is no historical baggage, you can also directly use CollectionRecordProvider to replace.",paraId:75,tocIndex:26},{value:`- <RecordProvider record={recordData}>
+ <CollectionRecordProvider record={recordData} parent={parentRecordData}>
...
- </RecordProvider>
+ </CollectionRecordProvider>
`,paraId:76,tocIndex:26},{value:"RecordProvider is deprecated and will be removed in the future.",paraId:77},{value:"RecordProvider carries the old RecordContext, while CollectionRecordProvider does not.",paraId:77}]},22333:function(o,a,e){"use strict";e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"For more information, see the [Data Visualization] documentation",paraId:0},{value:"For more information, see the [Workflow] documentation",paraId:1},{value:"Changes to trigger names:",paraId:2,tocIndex:5},{value:"Original Name",paraId:3,tocIndex:5},{value:"Changed to",paraId:3,tocIndex:5},{value:"Form Events, Operation Events",paraId:3,tocIndex:5},{value:"Post-operation Events",paraId:3,tocIndex:5},{value:"Scheduled Tasks",paraId:3,tocIndex:5},{value:"Scheduled Events",paraId:3,tocIndex:5},{value:"Request Interceptors",paraId:3,tocIndex:5},{value:"Pre-operation Events",paraId:3,tocIndex:5},{value:"Approval",paraId:3,tocIndex:5},{value:"Approval Events",paraId:3,tocIndex:5},{value:"Enhancements to trigger mode configuration for the following events:",paraId:4,tocIndex:5},{value:"For more information, see the [Workflow - Post-action events] documentation",paraId:5},{value:"For more information, see the [Workflow - Pre-action events] documentation",paraId:6},{value:"For more information, see the [Custom Branding] documentation",paraId:7},{value:"For more information, see the [nanoid field] documentation",paraId:8},{value:"For more information, see the [uuid field] documentation",paraId:9},{value:"For more information, see the [Unix timestamp field] documentation",paraId:10},{value:"For more information, see the [Field configure / Specific property settings / Number component] documentation",paraId:11},{value:"Added ",paraId:12,tocIndex:13},{value:"APP_PUBLIC_PATH",paraId:12,tocIndex:13},{value:" environment variable to support subpath deployment. For example:",paraId:12,tocIndex:13},{value:`APP_PUBLIC_PATH=/nocobase/
`,paraId:13,tocIndex:13},{value:"Access locally via URL ",paraId:14,tocIndex:13},{value:"http://localhost:13000/nocobase/",paraId:14,tocIndex:13},{value:"Example nginx proxy:",paraId:15,tocIndex:13},{value:`server {
    listen 80;
    server_name your_domain.com;  # Replace your_domain.com with your domain

    location /nocobase/ {
        proxy_pass http://127.0.0.1:13000/nocobase/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}
`,paraId:16,tocIndex:13},{value:"Now, you can access via http://your_domain.com/nocobase/.",paraId:17,tocIndex:13},{value:"Block Cards",paraId:18,tocIndex:15},{value:"Kanban Cards",paraId:19,tocIndex:15},{value:"Table Cells",paraId:20,tocIndex:15},{value:"Previously, changes to any Schema on the entire page would cause the entire page to re-render. Now, each block's Schema is independent.",paraId:21,tocIndex:16},{value:`<SchemaComponent distributed schema={} />
`,paraId:22,tocIndex:16},{value:"Grid component also supports distributed processing.",paraId:23,tocIndex:16},{value:`{
  'x-component': 'Grid',
  'x-component-props': {
    distributed: true,
  },
}
`,paraId:24,tocIndex:16},{value:"For useProps, instead of using x-component-props with the useProps key, you now use x-use-component-props. Here's the diff:",paraId:25,tocIndex:18},{value:`{
  "x-component": "Input",
+  "x-use-component-props": "useInputProps",
-  "x-component-props": {
-    useProps: "{{ useInputProps }}"
-  }
}
`,paraId:26,tocIndex:18},{value:"For useParams and useSourceId, instead of using x-decorator-props with the keys for useParams and useSourceId, you now use x-use-decorator-props with a single key. Here's the diff:",paraId:27,tocIndex:18},{value:`{
  "x-decorator": "TableBlockProvider",
+  "x-use-decorator-props": "useDecoratorProps",
-  "x-decorator-props": {
-    useParams: "{{ useParams }}",
-    useSourceId: "{{ useSourceId }}"
-  }
}
`,paraId:28,tocIndex:18},{value:"More information about x-use-decorator-props and the distinction between static and dynamic properties can be found here: ",paraId:29,tocIndex:18},{value:"Static and Dynamic Properties",paraId:29,tocIndex:18},{value:".",paraId:29,tocIndex:18}]},47362:function(o,a){"use strict";a.Z=`import { Application, Plugin, SchemaComponent } from '@nocobase/client';
import React from 'react';

const Hello = () => <h1>Hello NocoBase</h1>;

const HelloPage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'hello',
        type: 'void',
        'x-component': 'Hello',
      }}
    />
  );
};

class PluginHello extends Plugin {
  async load() {
    this.app.addComponents({ Hello });
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
  },
  plugins: [PluginHello],
});

export default app.getRootComponent();
`},931669:function(o,a){"use strict";a.Z=`import {
  Application,
  CardItem,
  Grid,
  Plugin,
  SchemaComponent,
  SchemaInitializer,
  SchemaInitializerItem,
  useSchemaInitializer,
  useSchemaInitializerItem,
} from '@nocobase/client';
import React from 'react';

const Hello = () => <h1>Hello NocoBase</h1>;

const myInitializer = new SchemaInitializer({
  name: 'myInitializer',
  //  \u6309\u94AE\u6807\u9898\u6807\u9898
  title: 'Add block',
  wrap: Grid.wrap,
  items: [
    {
      name: 'demo1',
      title: 'Hello block',
      Component: () => {
        const itemConfig = useSchemaInitializerItem();
        // \u8C03\u7528\u63D2\u5165\u529F\u80FD
        const { insert } = useSchemaInitializer();
        const handleClick = () => {
          insert({
            type: 'void',
            'x-component': 'Hello',
          });
        };
        return <SchemaInitializerItem title={itemConfig.title} onClick={handleClick}></SchemaInitializerItem>;
      },
    },
  ],
});

const HelloPage = () => {
  return (
    <div>
      <SchemaComponent
        schema={{
          name: 'hello',
          type: 'void',
          'x-component': 'Grid',
          'x-initializer': 'myInitializer',
        }}
      />
    </div>
  );
};

class PluginHello extends Plugin {
  async load() {
    this.app.addComponents({ Grid, CardItem, Hello });
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
    this.app.schemaInitializerManager.add(myInitializer);
  }
}

const app = new Application({
  router: {
    type: 'memory',
  },
  // \u4E3A\u4E86\u66F4\u597D\u7684\u5C55\u793A demo\uFF0C\u76F4\u63A5\u5C06 designable \u8BBE\u7F6E\u4E3A true
  designable: true,
  plugins: [PluginHello],
});

export default app.getRootComponent();
`},959464:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  Application,
  CardItem,
  Grid,
  Plugin,
  SchemaComponent,
  SchemaInitializer,
  SchemaInitializerItem,
  SchemaSettings,
  useSchemaInitializer,
  useSchemaInitializerItem,
} from '@nocobase/client';
import React from 'react';

const mySettings = new SchemaSettings({
  name: 'mySettings',
  items: [
    {
      name: 'remove',
      type: 'remove',
      componentProps: {
        removeParentsIfNoChildren: true,
      },
    },
  ],
});

const myInitializer = new SchemaInitializer({
  name: 'MyInitializer',
  //  \u6309\u94AE\u6807\u9898\u6807\u9898
  title: 'Button Text',
  wrap: Grid.wrap,
  // \u8C03\u7528 initializer.render() \u65F6\u4F1A\u6E32\u67D3 items \u5217\u8868
  items: [
    {
      name: 'demo1',
      title: 'Demo1',
      Component: () => {
        const itemConfig = useSchemaInitializerItem();
        // \u8C03\u7528\u63D2\u5165\u529F\u80FD
        const { insert } = useSchemaInitializer();
        const handleClick = () => {
          insert({
            type: 'void',
            'x-settings': 'mySettings',
            'x-decorator': 'CardItem',
            'x-component': 'Hello',
          });
        };
        return <SchemaInitializerItem title={itemConfig.title} onClick={handleClick}></SchemaInitializerItem>;
      },
    },
  ],
});

const Hello = () => {
  const schema = useFieldSchema();
  return <h1>Hello, world! {schema.name}</h1>;
};

const hello1 = Grid.wrap({
  type: 'void',
  'x-settings': 'mySettings',
  'x-decorator': 'CardItem',
  'x-component': 'Hello',
});

const HelloPage = () => {
  return (
    <div>
      <SchemaComponent
        schema={{
          name: 'root',
          type: 'void',
          'x-component': 'Grid',
          'x-initializer': 'MyInitializer',
          properties: {
            hello1,
          },
        }}
      />
    </div>
  );
};

class PluginHello extends Plugin {
  async load() {
    this.app.addComponents({ Grid, CardItem, Hello });
    this.app.schemaSettingsManager.add(mySettings);
    this.app.schemaInitializerManager.add(myInitializer);
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
  }
}

const app = new Application({
  router: {
    type: 'memory',
  },
  designable: true,
  plugins: [PluginHello],
});

export default app.getRootComponent();
`},746780:function(o,a){"use strict";a.Z=`import { Application, Plugin } from '@nocobase/client';

class PluginHome extends Plugin {
  async load() {
    this.router.add('home', {
      path: '/',
      Component: 'HomePage',
    });
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHome, ...plugins],
  });
}
`},479864:function(o,a){"use strict";a.Z=`import {
  Grid,
  Plugin,
  SchemaComponent,
  SchemaInitializer,
  useSchemaInitializer,
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'root',
        type: 'void',
        'x-component': 'Grid',
        'x-initializer': 'myInitializer',
      }}
    />
  );
};

class PluginDemoAddSchemaInitializer extends Plugin {
  async load() {
    // \u6CE8\u518C\u5168\u5C40\u7EC4\u4EF6
    this.app.addComponents({ Grid, HomePage });
    const myInitializer = new SchemaInitializer({
      name: 'myInitializer',
      title: 'Add block',
      wrap: Grid.wrap,
      items: [
        {
          name: 'helloBlock',
          type: 'item',
          useComponentProps() {
            const { insert } = useSchemaInitializer();
            return {
              title: 'Hello',
              onClick: () => {
                insert({
                  type: 'void',
                  'x-decorator': 'CardItem',
                  'x-component': 'h1',
                  'x-content': 'Hello, world!',
                });
              },
            };
          },
        },
      ],
    });
    this.schemaInitializerManager.add(myInitializer);
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ plugins: [PluginDemoAddSchemaInitializer] });

export default app.getRootComponent();
`},62932:function(o,a){"use strict";a.Z=`import {
  Application,
  CardItem,
  FormItem,
  Input,
  Plugin,
  SchemaComponent,
  SchemaSettings,
} from '@nocobase/client';
import React from 'react';

const HelloPage = () => {
  return (
    <div>
      <SchemaComponent
        schema={{
          name: 'hello',
          type: 'void',
          'x-decorator': 'CardItem',
          'x-decorator-props': {
            title: 'Card',
            bordered: true,
          },
          'x-settings': 'mySettings',
          'x-component': 'h1',
          'x-content': 'Hello, World!',
        }}
      />
    </div>
  );
};

class PluginHello extends Plugin {
  async load() {
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [],
    });
    this.schemaSettingsManager.add(mySettings);
    this.app.addComponents({ CardItem, Input, FormItem });
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHello, ...plugins],
  });
}
`},387325:function(o,a){"use strict";a.Z=`import { ISchema } from '@formily/react';
import { Plugin, SchemaSettingsModalItem, useSchemaSettings } from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

export const SchemaSettingsBlockTitleItem: any = () => {
  // \u8BBE\u8BA1\u5668\u7684 Designable \u5B9E\u4F8B
  const { dn } = useSchemaSettings();

  return (
    <SchemaSettingsModalItem
      title={'Edit block title'}
      schema={
        {
          type: 'object',
          title: 'Edit block title',
          properties: {
            title: {
              title: 'Block title',
              type: 'string',
              // \u83B7\u53D6 schema \u7684\u9ED8\u8BA4\u503C
              default: dn.getSchemaAttribute('x-decorator-props.title'),
              'x-decorator': 'FormItem',
              'x-component': 'Input',
              'x-compile-omitted': ['default'],
            },
          },
        } as ISchema
      }
      onSubmit={({ title }) => {
        // \u53C2\u6570\u8986\u76D6
        dn.deepMerge({
          'x-decorator-props': {
            title,
          },
        });
      }}
    />
  );
};

class PluginDemoAddSchemaInitializerItem extends Plugin {
  async load() {
    this.schemaSettingsManager.addItem('mySettings', 'blockTitle', {
      Component: SchemaSettingsBlockTitleItem,
    });
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ plugins: [PluginDemoAddSchemaInitializerItem] });

export default app.getRootComponent();
`},758387:function(o,a){"use strict";a.Z=`import {
  Application,
  CardItem,
  Plugin,
  SchemaComponent,
  SchemaSettings
} from '@nocobase/client';
import React from 'react';

const HelloPage = () => {
  return (
    <div>
      <SchemaComponent
        schema={{
          name: 'hello',
          type: 'void',
          'x-decorator': 'CardItem',
          'x-decorator-props': {
            title: 'Card',
            bordered: true,
          },
          'x-settings': 'mySettings',
          'x-component': 'h1',
          'x-content': 'Hello, World!',
        }}
      />
    </div>
  );
};

class PluginHello extends Plugin {
  async load() {
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [
        {
          type: 'item',
          name: 'edit',
          useComponentProps() {
            // TODO: \u8865\u5145\u76F8\u5173\u8BBE\u7F6E\u903B\u8F91
            return {
              title: 'Edit',
              onClick() {
                // todo
              },
            };
          },
        },
      ],
    });
    this.schemaSettingsManager.add(mySettings);
    this.app.addComponents({ CardItem });
    this.router.add('hello', {
      path: '/',
      Component: HelloPage,
    });
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHello, ...plugins],
  });
}
`},679937:function(o,a){"use strict";a.Z=`import { Plugin } from '@nocobase/client';
import { createApp } from './app';

class PluginDemoAddSchemaSettingsItem extends Plugin {
  async load() {
    const customItem = {
      name: 'custom',
      type: 'item',
      useComponentProps() {
        return {
          title: 'Custom',
          onClick: () => {},
        };
      },
    };

    this.schemaSettingsManager.addItem(
      'mySettings', // \u793A\u4F8B\uFF0C\u5DF2\u5B58\u5728\u7684 schema settings name
      'customItem', // \u65B0\u589E\u7684 item name
      customItem,
    );
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ 
  plugins: [PluginDemoAddSchemaSettingsItem],
});

export default app.getRootComponent();
`},756202:function(o,a){"use strict";a.Z=`import { Application, Plugin } from '@nocobase/client';

class PluginHome extends Plugin {
  async load() {
    this.router.add('home', {
      path: '/',
      Component: 'HomePage',
    });
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHome, ...plugins],
  });
}
`},896469:function(o,a){"use strict";a.Z=`import {
  CardItem,
  Plugin,
  SchemaComponent,
  SchemaSettings,
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'hello',
        type: 'void',
        'x-decorator': 'CardItem',
        'x-decorator-props': {
          title: 'Card',
          bordered: true,
        },
        'x-settings': 'mySettings',
        'x-component': 'h1',
        'x-content': 'Hello, World!',
      }}
    />
  );
};

class PluginDemoAddSchemaSettings extends Plugin {
  async load() {
    // \u6CE8\u518C\u5168\u5C40\u7EC4\u4EF6
    this.app.addComponents({ CardItem, HomePage });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [
        {
          type: 'item',
          name: 'edit',
          useComponentProps() {
            // TODO: \u8865\u5145\u76F8\u5173\u8BBE\u7F6E\u903B\u8F91
            return {
              title: 'Edit',
              onClick() {
                // todo
              },
            };
          },
        },
      ],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ plugins: [PluginDemoAddSchemaSettings] });

export default app.getRootComponent();
`},678534:function(o,a){"use strict";a.Z=`import { Application, ApplicationOptions, Plugin } from '@nocobase/client';

class PluginHome extends Plugin {
  async load() {
    this.router.add('home', {
      path: '/',
      Component: 'HomePage',
    });
  }
}

export function createApp(options: ApplicationOptions = {}) {
  const { plugins = [], ...others } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    ...others,
    plugins: [PluginHome, ...plugins],
  });
}
`},254922:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  Plugin,
  SchemaComponent,
  SchemaSettings,
  SchemaToolbar,
  Space,
  useSchemaToolbarRender,
} from '@nocobase/client';
import { Space as AntdSpace, Button } from 'antd';
import React from 'react';
import { createApp } from './app';

const MyToolbar = (props) => {
  return <SchemaToolbar showBorder={false} showBackground {...props} />;
};

const SchemaToolbarRenderer = (props) => {
  const fieldSchema = useFieldSchema();
  const { render } = useSchemaToolbarRender(fieldSchema);
  return render({ draggable: false });
};

const CustomButton = (props) => {
  return (
    <Button>
      <AntdSpace>
        {props.children}
        <SchemaToolbarRenderer />
      </AntdSpace>
    </Button>
  );
};

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        type: 'void',
        name: 'root',
        'x-component': 'Space',
        properties: {
          hello1: {
            type: 'void',
            // 'x-toolbar': 'MyToolbar',
            'x-settings': 'mySettings',
            'x-component': 'CustomButton',
            'x-content': 'Hello1',
          },
          hello2: {
            type: 'void',
            'x-toolbar': 'MyToolbar',
            'x-settings': 'mySettings',
            'x-component': 'CustomButton',
            'x-content': 'Hello2',
          },
        },
      }}
    />
  );
};

class PluginDemoToolbar extends Plugin {
  async load() {
    this.app.addComponents({ HomePage, CustomButton, MyToolbar, Space });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}

const app = createApp({ plugins: [PluginDemoToolbar] });

export default app.getRootComponent();
`},985652:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  CardItem,
  Plugin,
  SchemaComponent,
  SchemaSettings,
  SchemaToolbar
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

const MyToolbar = (props) => {
  const fieldSchema = useFieldSchema();
  return (
    <SchemaToolbar title="Title here" settings={fieldSchema['x-settings']} {...props}/>
  );
};

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'hello',
        type: 'void',
        'x-decorator': 'CardItem',
        'x-toolbar': 'MyToolbar',
        'x-settings': 'mySettings',
        'x-component': 'div',
        'x-content': 'This is a BlockItem',
      }}
    />
  );
};

class PluginDemoToolbar extends Plugin {
  async load() {
    this.app.addComponents({ HomePage, CardItem, MyToolbar });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}

const app = createApp({ plugins: [PluginDemoToolbar] });

export default app.getRootComponent();
`},107174:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  CardItem,
  Grid,
  Plugin,
  SchemaComponent,
  SchemaInitializer,
  SchemaSettings,
  SchemaToolbar,
  useSchemaInitializer
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

const MyToolbar = (props) => {
  const fieldSchema = useFieldSchema();
  return (
    <SchemaToolbar title="Title here" settings={fieldSchema['x-settings']} {...props}/>
  );
};

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'root',
        type: 'void',
        'x-initializer': 'myInitializer',
        'x-component': 'Grid',
        properties: {
          hello1: Grid.wrap({
            type: 'void',
            'x-decorator': 'CardItem',
            'x-decorator-props': {
              title: 'Built-in SchemaToolbar',
            },
            'x-settings': 'mySettings',
            'x-component': 'div',
            'x-content': 'Hello, World!',
          }),
          hello2: Grid.wrap({
            type: 'void',
            'x-decorator': 'CardItem',
            'x-decorator-props': {
              title: 'Custom MyToolbar',
            },
            'x-toolbar': 'MyToolbar',
            'x-settings': 'mySettings',
            'x-component': 'div',
            'x-content': 'Hello, World!',
          }),
        },
      }}
    />
  );
};

class PluginDemoToolbar extends Plugin {
  async load() {
    this.app.addComponents({ HomePage, CardItem, MyToolbar, Grid });
    const myInitializer = new SchemaInitializer({
      name: 'myInitializer',
      title: 'AddBlock',
      wrap: Grid.wrap,
      items: [
        {
          name: 'helloBlock',
          type: 'item',
          useComponentProps() {
            const { insert } = useSchemaInitializer();
            return {
              title: 'Hello',
              onClick: () => {
                insert({
                  type: 'void',
                  'x-decorator': 'CardItem',
                  'x-settings': 'mySettings',
                  'x-component': 'h1',
                  'x-content': 'Hello, world!',
                });
              },
            };
          },
        },
      ],
    });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [],
    });
    this.schemaInitializerManager.add(myInitializer);
    this.schemaSettingsManager.add(mySettings);
  }
}

const app = createApp({ plugins: [PluginDemoToolbar] });

export default app.getRootComponent();
`},234573:function(o,a){"use strict";a.Z=`import {
  Action,
  BlockItem,
  CardItem,
  FormItem,
  Input,
  Plugin,
  SchemaComponent,
  SchemaSettings,
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        type: 'void',
        name: 'root',
        'x-component': 'div',
        properties: {
          hello1: {
            name: 'hello',
            type: 'void',
            'x-decorator': 'BlockItem',
            'x-settings': 'mySettings',
            'x-component': 'div',
            'x-content': 'This is a BlockItem.',
          },
          hello2: {
            type: 'void',
            'x-decorator': 'CardItem',
            'x-decorator-props': {
              title: 'Card',
              bordered: true,
            },
            'x-settings': 'mySettings',
            'x-component': 'h1',
            'x-content': 'Hello, World!',
          },
          hello3: {
            type: 'void',
            title: 'Field',
            'x-decorator': 'FormItem',
            'x-settings': 'mySettings',
            'x-component': 'Input',
          },
          hello4: {
            type: 'void',
            title: 'Action',
            'x-settings': 'mySettings',
            'x-component': 'Action',
          },
        },
      }}
    />
  );
};

class PluginDemoToolbar extends Plugin {
  async load() {
    this.app.addComponents({
      HomePage,
      Action,
      CardItem,
      FormItem,
      BlockItem,
      Input,
    });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}

const app = createApp({ plugins: [PluginDemoToolbar] });

export default app.getRootComponent();
`},656328:function(o,a){"use strict";a.Z=`import { Application, Plugin, SchemaInitializer, useSchemaInitializer } from '@nocobase/client';

class PluginHome extends Plugin {
  async load() {
    this.router.add('home', {
      path: '/',
      Component: 'HomePage',
    });
    const myInitializer = new SchemaInitializer({
      name: 'myInitializer',
      title: 'Add block',
      items: [
        {
          name: 'helloBlock',
          type: 'item',
          useComponentProps() {
            const { insert } = useSchemaInitializer();
            return {
              title: 'Hello',
              onClick: () => {
                insert({
                  type: 'void',
                  'x-decorator': 'CardItem',
                  'x-component': 'h1',
                  'x-content': 'Hello, world!',
                });
              },
            };
          },
        },
      ],
    });
    this.schemaInitializerManager.add(myInitializer);
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHome, ...plugins],
  });
}
`},539406:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  Plugin,
  SchemaComponent,
  useSchemaInitializerRender
} from '@nocobase/client';
import React from 'react';
import { createApp } from './app';

// \u81EA\u5B9A\u4E49 Hello \u7EC4\u4EF6
const Hello = (props) => {
  return (
    <div>
      {props.children}
      <HelloInitializer />
    </div>
  )
}

// \u901A\u8FC7 useSchemaInitializerRender \u6765\u652F\u6301 x-initializer \u7684\u6E32\u67D3
const HelloInitializer = () => {
  const fieldSchema = useFieldSchema();
  const { render } = useSchemaInitializerRender(fieldSchema['x-initializer']);
  return render();
}

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'root',
        type: 'void',
        'x-component': 'Hello',
        'x-initializer': 'myInitializer', // \u81EA\u5B9A\u4E49\u7684 Hello \u7EC4\u4EF6\u652F\u6301 x-initializer \u4E86
      }}
    />
  );
};

class PluginDemoUseSchemaInitializerRender extends Plugin {
  async load() {
    // \u6CE8\u518C\u5168\u5C40\u7EC4\u4EF6
    this.app.addComponents({ Hello, HomePage });
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ plugins: [PluginDemoUseSchemaInitializerRender] });

export default app.getRootComponent();
`},395858:function(o,a){"use strict";a.Z=`import { Application, Plugin, SchemaSettings } from '@nocobase/client';

class PluginHome extends Plugin {
  async load() {
    this.router.add('home', {
      path: '/',
      Component: 'HomePage',
    });
    const mySettings = new SchemaSettings({
      name: 'mySettings',
      items: [
        {
          type: 'item',
          name: 'edit',
          useComponentProps() {
            // TODO: \u8865\u5145\u76F8\u5173\u8BBE\u7F6E\u903B\u8F91
            return {
              title: 'Edit',
              onClick() {
                // todo
              },
            };
          },
        },
      ],
    });
    this.schemaSettingsManager.add(mySettings);
  }
}

export function createApp(options: any = {}) {
  const { plugins = [] } = options;
  return new Application({
    router: {
      type: 'memory',
      initialEntries: ['/'],
    },
    designable: true,
    plugins: [PluginHome, ...plugins],
  });
}
`},362913:function(o,a){"use strict";a.Z=`import { useFieldSchema } from '@formily/react';
import {
  Plugin,
  SchemaComponent,
  useSchemaSettingsRender
} from '@nocobase/client';
import { Space } from 'antd';
import React from 'react';
import { createApp } from './app';

// \u81EA\u5B9A\u4E49 Hello \u7EC4\u4EF6
const Hello = (props) => {
  return (
    <Space>
      {props.children}
      <HelloSettings />
    </Space>
  );
};

// \u901A\u8FC7 useSchemaSettingsRender \u6765\u652F\u6301 x-settings \u7684\u6E32\u67D3
const HelloSettings = () => {
  const fieldSchema = useFieldSchema();
  const { render } = useSchemaSettingsRender(fieldSchema['x-settings']);
  return render();
};

const HomePage = () => {
  return (
    <SchemaComponent
      schema={{
        name: 'hello',
        type: 'void',
        'x-decorator': 'Hello',
        'x-decorator-props': {
          title: '\u5361\u7247',
          bordered: true,
        },
        'x-settings': 'mySettings',
        'x-component': 'h1',
        'x-content': 'Hello, World!',
      }}
    />
  );
};

class PluginDemoUseSchemaInitializerRender extends Plugin {
  async load() {
    // \u6CE8\u518C\u5168\u5C40\u7EC4\u4EF6
    this.app.addComponents({ Hello, HomePage });
  }
}

// \u5FEB\u6377\u6A21\u62DF\u4E00\u4E2A App
const app = createApp({ plugins: [PluginDemoUseSchemaInitializerRender] });

export default app.getRootComponent();
`},824654:function(){},22868:function(){},614777:function(){},599830:function(){},870209:function(){},987414:function(){},752361:function(){},394616:function(){},175042:function(){}}]);
